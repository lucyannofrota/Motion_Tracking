
miniprojetoSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085a0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08008760  08008760  00018760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008898  08008898  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008898  08008898  00018898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088a0  080088a0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088a0  080088a0  000188a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088a4  080088a4  000188a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080088a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b0c  20000010  080088b8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b1c  080088b8  00021b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fc88  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038d6  00000000  00000000  0003fcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001820  00000000  00000000  000435a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016d8  00000000  00000000  00044dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000439a  00000000  00000000  00046498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000198c4  00000000  00000000  0004a832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001140a4  00000000  00000000  000640f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017819a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006618  00000000  00000000  001781f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008748 	.word	0x08008748

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	08008748 	.word	0x08008748

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96e 	b.w	80004f4 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468c      	mov	ip, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	f040 8083 	bne.w	8000346 <__udivmoddi4+0x116>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d947      	bls.n	80002d6 <__udivmoddi4+0xa6>
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	b142      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024c:	f1c2 0020 	rsb	r0, r2, #32
 8000250:	fa24 f000 	lsr.w	r0, r4, r0
 8000254:	4091      	lsls	r1, r2
 8000256:	4097      	lsls	r7, r2
 8000258:	ea40 0c01 	orr.w	ip, r0, r1
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbbc f6f8 	udiv	r6, ip, r8
 8000268:	fa1f fe87 	uxth.w	lr, r7
 800026c:	fb08 c116 	mls	r1, r8, r6, ip
 8000270:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000274:	fb06 f10e 	mul.w	r1, r6, lr
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18fb      	adds	r3, r7, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 8119 	bcs.w	80004b8 <__udivmoddi4+0x288>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8116 	bls.w	80004b8 <__udivmoddi4+0x288>
 800028c:	3e02      	subs	r6, #2
 800028e:	443b      	add	r3, r7
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a4:	45a6      	cmp	lr, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8105 	bcs.w	80004bc <__udivmoddi4+0x28c>
 80002b2:	45a6      	cmp	lr, r4
 80002b4:	f240 8102 	bls.w	80004bc <__udivmoddi4+0x28c>
 80002b8:	3802      	subs	r0, #2
 80002ba:	443c      	add	r4, r7
 80002bc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c0:	eba4 040e 	sub.w	r4, r4, lr
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	b902      	cbnz	r2, 80002da <__udivmoddi4+0xaa>
 80002d8:	deff      	udf	#255	; 0xff
 80002da:	fab2 f282 	clz	r2, r2
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d150      	bne.n	8000384 <__udivmoddi4+0x154>
 80002e2:	1bcb      	subs	r3, r1, r7
 80002e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e8:	fa1f f887 	uxth.w	r8, r7
 80002ec:	2601      	movs	r6, #1
 80002ee:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f2:	0c21      	lsrs	r1, r4, #16
 80002f4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002fc:	fb08 f30c 	mul.w	r3, r8, ip
 8000300:	428b      	cmp	r3, r1
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000304:	1879      	adds	r1, r7, r1
 8000306:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0xe2>
 800030c:	428b      	cmp	r3, r1
 800030e:	f200 80e9 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 8000312:	4684      	mov	ip, r0
 8000314:	1ac9      	subs	r1, r1, r3
 8000316:	b2a3      	uxth	r3, r4
 8000318:	fbb1 f0fe 	udiv	r0, r1, lr
 800031c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000320:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000324:	fb08 f800 	mul.w	r8, r8, r0
 8000328:	45a0      	cmp	r8, r4
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x10c>
 800032c:	193c      	adds	r4, r7, r4
 800032e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x10a>
 8000334:	45a0      	cmp	r8, r4
 8000336:	f200 80d9 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 800033a:	4618      	mov	r0, r3
 800033c:	eba4 0408 	sub.w	r4, r4, r8
 8000340:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000344:	e7bf      	b.n	80002c6 <__udivmoddi4+0x96>
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x12e>
 800034a:	2d00      	cmp	r5, #0
 800034c:	f000 80b1 	beq.w	80004b2 <__udivmoddi4+0x282>
 8000350:	2600      	movs	r6, #0
 8000352:	e9c5 0100 	strd	r0, r1, [r5]
 8000356:	4630      	mov	r0, r6
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f683 	clz	r6, r3
 8000362:	2e00      	cmp	r6, #0
 8000364:	d14a      	bne.n	80003fc <__udivmoddi4+0x1cc>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0x140>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80b8 	bhi.w	80004e0 <__udivmoddi4+0x2b0>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0103 	sbc.w	r1, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	468c      	mov	ip, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0a8      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800037e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000384:	f1c2 0320 	rsb	r3, r2, #32
 8000388:	fa20 f603 	lsr.w	r6, r0, r3
 800038c:	4097      	lsls	r7, r2
 800038e:	fa01 f002 	lsl.w	r0, r1, r2
 8000392:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000396:	40d9      	lsrs	r1, r3
 8000398:	4330      	orrs	r0, r6
 800039a:	0c03      	lsrs	r3, r0, #16
 800039c:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a0:	fa1f f887 	uxth.w	r8, r7
 80003a4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb06 f108 	mul.w	r1, r6, r8
 80003b0:	4299      	cmp	r1, r3
 80003b2:	fa04 f402 	lsl.w	r4, r4, r2
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x19c>
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	f106 3cff 	add.w	ip, r6, #4294967295
 80003be:	f080 808d 	bcs.w	80004dc <__udivmoddi4+0x2ac>
 80003c2:	4299      	cmp	r1, r3
 80003c4:	f240 808a 	bls.w	80004dc <__udivmoddi4+0x2ac>
 80003c8:	3e02      	subs	r6, #2
 80003ca:	443b      	add	r3, r7
 80003cc:	1a5b      	subs	r3, r3, r1
 80003ce:	b281      	uxth	r1, r0
 80003d0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb00 f308 	mul.w	r3, r0, r8
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x1c4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ea:	d273      	bcs.n	80004d4 <__udivmoddi4+0x2a4>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d971      	bls.n	80004d4 <__udivmoddi4+0x2a4>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4439      	add	r1, r7
 80003f4:	1acb      	subs	r3, r1, r3
 80003f6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fa:	e778      	b.n	80002ee <__udivmoddi4+0xbe>
 80003fc:	f1c6 0c20 	rsb	ip, r6, #32
 8000400:	fa03 f406 	lsl.w	r4, r3, r6
 8000404:	fa22 f30c 	lsr.w	r3, r2, ip
 8000408:	431c      	orrs	r4, r3
 800040a:	fa20 f70c 	lsr.w	r7, r0, ip
 800040e:	fa01 f306 	lsl.w	r3, r1, r6
 8000412:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000416:	fa21 f10c 	lsr.w	r1, r1, ip
 800041a:	431f      	orrs	r7, r3
 800041c:	0c3b      	lsrs	r3, r7, #16
 800041e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000422:	fa1f f884 	uxth.w	r8, r4
 8000426:	fb0e 1119 	mls	r1, lr, r9, r1
 800042a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042e:	fb09 fa08 	mul.w	sl, r9, r8
 8000432:	458a      	cmp	sl, r1
 8000434:	fa02 f206 	lsl.w	r2, r2, r6
 8000438:	fa00 f306 	lsl.w	r3, r0, r6
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x220>
 800043e:	1861      	adds	r1, r4, r1
 8000440:	f109 30ff 	add.w	r0, r9, #4294967295
 8000444:	d248      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 8000446:	458a      	cmp	sl, r1
 8000448:	d946      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4421      	add	r1, r4
 8000450:	eba1 010a 	sub.w	r1, r1, sl
 8000454:	b2bf      	uxth	r7, r7
 8000456:	fbb1 f0fe 	udiv	r0, r1, lr
 800045a:	fb0e 1110 	mls	r1, lr, r0, r1
 800045e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000462:	fb00 f808 	mul.w	r8, r0, r8
 8000466:	45b8      	cmp	r8, r7
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x24a>
 800046a:	19e7      	adds	r7, r4, r7
 800046c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000470:	d22e      	bcs.n	80004d0 <__udivmoddi4+0x2a0>
 8000472:	45b8      	cmp	r8, r7
 8000474:	d92c      	bls.n	80004d0 <__udivmoddi4+0x2a0>
 8000476:	3802      	subs	r0, #2
 8000478:	4427      	add	r7, r4
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	eba7 0708 	sub.w	r7, r7, r8
 8000482:	fba0 8902 	umull	r8, r9, r0, r2
 8000486:	454f      	cmp	r7, r9
 8000488:	46c6      	mov	lr, r8
 800048a:	4649      	mov	r1, r9
 800048c:	d31a      	bcc.n	80004c4 <__udivmoddi4+0x294>
 800048e:	d017      	beq.n	80004c0 <__udivmoddi4+0x290>
 8000490:	b15d      	cbz	r5, 80004aa <__udivmoddi4+0x27a>
 8000492:	ebb3 020e 	subs.w	r2, r3, lr
 8000496:	eb67 0701 	sbc.w	r7, r7, r1
 800049a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049e:	40f2      	lsrs	r2, r6
 80004a0:	ea4c 0202 	orr.w	r2, ip, r2
 80004a4:	40f7      	lsrs	r7, r6
 80004a6:	e9c5 2700 	strd	r2, r7, [r5]
 80004aa:	2600      	movs	r6, #0
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e70b      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e9      	b.n	8000290 <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fd      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c0:	4543      	cmp	r3, r8
 80004c2:	d2e5      	bcs.n	8000490 <__udivmoddi4+0x260>
 80004c4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c8:	eb69 0104 	sbc.w	r1, r9, r4
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7df      	b.n	8000490 <__udivmoddi4+0x260>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e7d2      	b.n	800047a <__udivmoddi4+0x24a>
 80004d4:	4660      	mov	r0, ip
 80004d6:	e78d      	b.n	80003f4 <__udivmoddi4+0x1c4>
 80004d8:	4681      	mov	r9, r0
 80004da:	e7b9      	b.n	8000450 <__udivmoddi4+0x220>
 80004dc:	4666      	mov	r6, ip
 80004de:	e775      	b.n	80003cc <__udivmoddi4+0x19c>
 80004e0:	4630      	mov	r0, r6
 80004e2:	e74a      	b.n	800037a <__udivmoddi4+0x14a>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	4439      	add	r1, r7
 80004ea:	e713      	b.n	8000314 <__udivmoddi4+0xe4>
 80004ec:	3802      	subs	r0, #2
 80004ee:	443c      	add	r4, r7
 80004f0:	e724      	b.n	800033c <__udivmoddi4+0x10c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fc8b 	bl	8000e16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f854 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f994 	bl	8000830 <MX_GPIO_Init>
  MX_DMA_Init();
 8000508:	f000 f968 	bl	80007dc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800050c:	f000 f8c8 	bl	80006a0 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 8000510:	f000 f912 	bl	8000738 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA (&hlpuart1, SR_BUFFER, BUFFER_LEN);
 8000514:	2201      	movs	r2, #1
 8000516:	4917      	ldr	r1, [pc, #92]	; (8000574 <main+0x7c>)
 8000518:	4817      	ldr	r0, [pc, #92]	; (8000578 <main+0x80>)
 800051a:	f003 fb4d 	bl	8003bb8 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart4, BT_BUFFER, BUFFER_LEN);
 800051e:	2201      	movs	r2, #1
 8000520:	4916      	ldr	r1, [pc, #88]	; (800057c <main+0x84>)
 8000522:	4817      	ldr	r0, [pc, #92]	; (8000580 <main+0x88>)
 8000524:	f003 fb02 	bl	8003b2c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000528:	f005 f92a 	bl	8005780 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of SR_Queue */
  SR_QueueHandle = osMessageQueueNew (64, 1, &SR_Queue_attributes);
 800052c:	4a15      	ldr	r2, [pc, #84]	; (8000584 <main+0x8c>)
 800052e:	2101      	movs	r1, #1
 8000530:	2040      	movs	r0, #64	; 0x40
 8000532:	f005 fa1c 	bl	800596e <osMessageQueueNew>
 8000536:	4603      	mov	r3, r0
 8000538:	4a13      	ldr	r2, [pc, #76]	; (8000588 <main+0x90>)
 800053a:	6013      	str	r3, [r2, #0]

  /* creation of BT_Queue */
  BT_QueueHandle = osMessageQueueNew (64, 1, &BT_Queue_attributes);
 800053c:	4a13      	ldr	r2, [pc, #76]	; (800058c <main+0x94>)
 800053e:	2101      	movs	r1, #1
 8000540:	2040      	movs	r0, #64	; 0x40
 8000542:	f005 fa14 	bl	800596e <osMessageQueueNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a11      	ldr	r2, [pc, #68]	; (8000590 <main+0x98>)
 800054a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TransmitTask_Se */
  TransmitTask_SeHandle = osThreadNew(StartTransmitTask_Serial, NULL, &TransmitTask_Se_attributes);
 800054c:	4a11      	ldr	r2, [pc, #68]	; (8000594 <main+0x9c>)
 800054e:	2100      	movs	r1, #0
 8000550:	4811      	ldr	r0, [pc, #68]	; (8000598 <main+0xa0>)
 8000552:	f005 f95f 	bl	8005814 <osThreadNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a10      	ldr	r2, [pc, #64]	; (800059c <main+0xa4>)
 800055a:	6013      	str	r3, [r2, #0]

  /* creation of TransmitTask_BT */
  TransmitTask_BTHandle = osThreadNew(StartTransmitTask_BT, NULL, &TransmitTask_BT_attributes);
 800055c:	4a10      	ldr	r2, [pc, #64]	; (80005a0 <main+0xa8>)
 800055e:	2100      	movs	r1, #0
 8000560:	4810      	ldr	r0, [pc, #64]	; (80005a4 <main+0xac>)
 8000562:	f005 f957 	bl	8005814 <osThreadNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a0f      	ldr	r2, [pc, #60]	; (80005a8 <main+0xb0>)
 800056a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800056c:	f005 f92c 	bl	80057c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000570:	e7fe      	b.n	8000570 <main+0x78>
 8000572:	bf00      	nop
 8000574:	2000002c 	.word	0x2000002c
 8000578:	20001900 	.word	0x20001900
 800057c:	20001990 	.word	0x20001990
 8000580:	200019fc 	.word	0x200019fc
 8000584:	080087f8 	.word	0x080087f8
 8000588:	200019f8 	.word	0x200019f8
 800058c:	08008810 	.word	0x08008810
 8000590:	200019f4 	.word	0x200019f4
 8000594:	080087b0 	.word	0x080087b0
 8000598:	080008fd 	.word	0x080008fd
 800059c:	200018fc 	.word	0x200018fc
 80005a0:	080087d4 	.word	0x080087d4
 80005a4:	08000999 	.word	0x08000999
 80005a8:	200018f8 	.word	0x200018f8

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b0bc      	sub	sp, #240	; 0xf0
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005b6:	2244      	movs	r2, #68	; 0x44
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f008 f8a8 	bl	8008710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2294      	movs	r2, #148	; 0x94
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f008 f89a 	bl	8008710 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005e0:	f001 fa14 	bl	8001a0c <HAL_PWREx_ControlVoltageScaling>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x42>
  {
    Error_Handler();
 80005ea:	f000 fa35 	bl	8000a58 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005ee:	2310      	movs	r3, #16
 80005f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000600:	2360      	movs	r3, #96	; 0x60
 8000602:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000606:	2302      	movs	r3, #2
 8000608:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800060c:	2301      	movs	r3, #1
 800060e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000612:	2301      	movs	r3, #1
 8000614:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000618:	2320      	movs	r3, #32
 800061a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fa9d 	bl	8001b74 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000640:	f000 fa0a 	bl	8000a58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2303      	movs	r3, #3
 800064c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000662:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000666:	2103      	movs	r1, #3
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fea9 	bl	80023c0 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000674:	f000 f9f0 	bl	8000a58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_LPUART1;
 8000678:	2328      	movs	r3, #40	; 0x28
 800067a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800067c:	2300      	movs	r3, #0
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000680:	2300      	movs	r3, #0
 8000682:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	4618      	mov	r0, r3
 8000688:	f002 f97e 	bl	8002988 <HAL_RCCEx_PeriphCLKConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000692:	f000 f9e1 	bl	8000a58 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	37f0      	adds	r7, #240	; 0xf0
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <MX_LPUART1_UART_Init+0x90>)
 80006a6:	4a23      	ldr	r2, [pc, #140]	; (8000734 <MX_LPUART1_UART_Init+0x94>)
 80006a8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006aa:	4b21      	ldr	r3, [pc, #132]	; (8000730 <MX_LPUART1_UART_Init+0x90>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <MX_LPUART1_UART_Init+0x90>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <MX_LPUART1_UART_Init+0x90>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006be:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <MX_LPUART1_UART_Init+0x90>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <MX_LPUART1_UART_Init+0x90>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <MX_LPUART1_UART_Init+0x90>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d0:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_LPUART1_UART_Init+0x90>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_LPUART1_UART_Init+0x90>)
 80006d8:	2200      	movs	r2, #0
 80006da:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_LPUART1_UART_Init+0x90>)
 80006de:	2200      	movs	r2, #0
 80006e0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80006e2:	4b13      	ldr	r3, [pc, #76]	; (8000730 <MX_LPUART1_UART_Init+0x90>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006e8:	4811      	ldr	r0, [pc, #68]	; (8000730 <MX_LPUART1_UART_Init+0x90>)
 80006ea:	f003 f937 	bl	800395c <HAL_UART_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80006f4:	f000 f9b0 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f8:	2100      	movs	r1, #0
 80006fa:	480d      	ldr	r0, [pc, #52]	; (8000730 <MX_LPUART1_UART_Init+0x90>)
 80006fc:	f004 ff32 	bl	8005564 <HAL_UARTEx_SetTxFifoThreshold>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000706:	f000 f9a7 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800070a:	2100      	movs	r1, #0
 800070c:	4808      	ldr	r0, [pc, #32]	; (8000730 <MX_LPUART1_UART_Init+0x90>)
 800070e:	f004 ff67 	bl	80055e0 <HAL_UARTEx_SetRxFifoThreshold>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000718:	f000 f99e 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_LPUART1_UART_Init+0x90>)
 800071e:	f004 fee8 	bl	80054f2 <HAL_UARTEx_DisableFifoMode>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000728:	f000 f996 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20001900 	.word	0x20001900
 8000734:	40008000 	.word	0x40008000

08000738 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <MX_UART4_Init+0x9c>)
 800073e:	4a26      	ldr	r2, [pc, #152]	; (80007d8 <MX_UART4_Init+0xa0>)
 8000740:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8000742:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <MX_UART4_Init+0x9c>)
 8000744:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000748:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <MX_UART4_Init+0x9c>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <MX_UART4_Init+0x9c>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_UART4_Init+0x9c>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_UART4_Init+0x9c>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <MX_UART4_Init+0x9c>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_UART4_Init+0x9c>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_UART4_Init+0x9c>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000774:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_UART4_Init+0x9c>)
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800077a:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_UART4_Init+0x9c>)
 800077c:	2200      	movs	r2, #0
 800077e:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.FifoMode = UART_FIFOMODE_DISABLE;
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_UART4_Init+0x9c>)
 8000782:	2200      	movs	r2, #0
 8000784:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000786:	2300      	movs	r3, #0
 8000788:	2200      	movs	r2, #0
 800078a:	2100      	movs	r1, #0
 800078c:	4811      	ldr	r0, [pc, #68]	; (80007d4 <MX_UART4_Init+0x9c>)
 800078e:	f004 fe29 	bl	80053e4 <HAL_RS485Ex_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_UART4_Init+0x64>
  {
    Error_Handler();
 8000798:	f000 f95e 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800079c:	2100      	movs	r1, #0
 800079e:	480d      	ldr	r0, [pc, #52]	; (80007d4 <MX_UART4_Init+0x9c>)
 80007a0:	f004 fee0 	bl	8005564 <HAL_UARTEx_SetTxFifoThreshold>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_UART4_Init+0x76>
  {
    Error_Handler();
 80007aa:	f000 f955 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ae:	2100      	movs	r1, #0
 80007b0:	4808      	ldr	r0, [pc, #32]	; (80007d4 <MX_UART4_Init+0x9c>)
 80007b2:	f004 ff15 	bl	80055e0 <HAL_UARTEx_SetRxFifoThreshold>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_UART4_Init+0x88>
  {
    Error_Handler();
 80007bc:	f000 f94c 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_UART4_Init+0x9c>)
 80007c2:	f004 fe96 	bl	80054f2 <HAL_UARTEx_DisableFifoMode>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_UART4_Init+0x98>
  {
    Error_Handler();
 80007cc:	f000 f944 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200019fc 	.word	0x200019fc
 80007d8:	40004c00 	.word	0x40004c00

080007dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_DMA_Init+0x50>)
 80007e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007e6:	4a11      	ldr	r2, [pc, #68]	; (800082c <MX_DMA_Init+0x50>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6493      	str	r3, [r2, #72]	; 0x48
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_DMA_Init+0x50>)
 80007f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_DMA_Init+0x50>)
 80007fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007fe:	4a0b      	ldr	r2, [pc, #44]	; (800082c <MX_DMA_Init+0x50>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6493      	str	r3, [r2, #72]	; 0x48
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_DMA_Init+0x50>)
 8000808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2105      	movs	r1, #5
 8000816:	200f      	movs	r0, #15
 8000818:	f000 fbee 	bl	8000ff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800081c:	200f      	movs	r0, #15
 800081e:	f000 fc07 	bl	8001030 <HAL_NVIC_EnableIRQ>

}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_GPIO_Init+0x5c>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a14      	ldr	r2, [pc, #80]	; (800088c <MX_GPIO_Init+0x5c>)
 800083c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_GPIO_Init+0x5c>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 800084e:	f001 f981 	bl	8001b54 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_GPIO_Init+0x5c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a0d      	ldr	r2, [pc, #52]	; (800088c <MX_GPIO_Init+0x5c>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_GPIO_Init+0x5c>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_GPIO_Init+0x5c>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4a07      	ldr	r2, [pc, #28]	; (800088c <MX_GPIO_Init+0x5c>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <MX_GPIO_Init+0x5c>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

}
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000

08000890 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1){
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <HAL_UART_RxCpltCallback+0x54>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d10b      	bne.n	80008b8 <HAL_UART_RxCpltCallback+0x28>
		osMessageQueuePut(SR_QueueHandle, SR_BUFFER, 0, 0);
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <HAL_UART_RxCpltCallback+0x58>)
 80008a2:	6818      	ldr	r0, [r3, #0]
 80008a4:	2300      	movs	r3, #0
 80008a6:	2200      	movs	r2, #0
 80008a8:	4910      	ldr	r1, [pc, #64]	; (80008ec <HAL_UART_RxCpltCallback+0x5c>)
 80008aa:	f005 f8d3 	bl	8005a54 <osMessageQueuePut>
		HAL_UART_Receive_DMA(&hlpuart1, SR_BUFFER, BUFFER_LEN);
 80008ae:	2201      	movs	r2, #1
 80008b0:	490e      	ldr	r1, [pc, #56]	; (80008ec <HAL_UART_RxCpltCallback+0x5c>)
 80008b2:	480c      	ldr	r0, [pc, #48]	; (80008e4 <HAL_UART_RxCpltCallback+0x54>)
 80008b4:	f003 f980 	bl	8003bb8 <HAL_UART_Receive_DMA>
	}
	if(huart->Instance == huart4.Instance){
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <HAL_UART_RxCpltCallback+0x60>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d10b      	bne.n	80008dc <HAL_UART_RxCpltCallback+0x4c>
		osMessageQueuePut(BT_QueueHandle, BT_BUFFER, 0, 0);
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_UART_RxCpltCallback+0x64>)
 80008c6:	6818      	ldr	r0, [r3, #0]
 80008c8:	2300      	movs	r3, #0
 80008ca:	2200      	movs	r2, #0
 80008cc:	490a      	ldr	r1, [pc, #40]	; (80008f8 <HAL_UART_RxCpltCallback+0x68>)
 80008ce:	f005 f8c1 	bl	8005a54 <osMessageQueuePut>
		HAL_UART_Receive_IT(&huart4, BT_BUFFER, BUFFER_LEN);
 80008d2:	2201      	movs	r2, #1
 80008d4:	4908      	ldr	r1, [pc, #32]	; (80008f8 <HAL_UART_RxCpltCallback+0x68>)
 80008d6:	4806      	ldr	r0, [pc, #24]	; (80008f0 <HAL_UART_RxCpltCallback+0x60>)
 80008d8:	f003 f928 	bl	8003b2c <HAL_UART_Receive_IT>
	}
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20001900 	.word	0x20001900
 80008e8:	200019f8 	.word	0x200019f8
 80008ec:	2000002c 	.word	0x2000002c
 80008f0:	200019fc 	.word	0x200019fc
 80008f4:	200019f4 	.word	0x200019f4
 80008f8:	20001990 	.word	0x20001990

080008fc <StartTransmitTask_Serial>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTransmitTask_Serial */
void StartTransmitTask_Serial(void *argument)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b096      	sub	sp, #88	; 0x58
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	char msg_sr[64];
	uint16_t count_sr = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	char c[1];

  /* Infinite loop */
	for(;;)
	{
		memset(msg_sr,0,64);
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	2240      	movs	r2, #64	; 0x40
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f007 fefc 	bl	8008710 <memset>
		count_sr = osMessageQueueGetCount(SR_QueueHandle);
 8000918:	4b1c      	ldr	r3, [pc, #112]	; (800098c <StartTransmitTask_Serial+0x90>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	f005 f957 	bl	8005bd0 <osMessageQueueGetCount>
 8000922:	4603      	mov	r3, r0
 8000924:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		if(count_sr > 0){
 8000928:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800092c:	2b00      	cmp	r3, #0
 800092e:	d028      	beq.n	8000982 <StartTransmitTask_Serial+0x86>
			for (int i = 0; i < count_sr; i++) {
 8000930:	2300      	movs	r3, #0
 8000932:	657b      	str	r3, [r7, #84]	; 0x54
 8000934:	e012      	b.n	800095c <StartTransmitTask_Serial+0x60>
				osMessageQueueGet(SR_QueueHandle, c, 0, 100);
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <StartTransmitTask_Serial+0x90>)
 8000938:	6818      	ldr	r0, [r3, #0]
 800093a:	f107 010c 	add.w	r1, r7, #12
 800093e:	2364      	movs	r3, #100	; 0x64
 8000940:	2200      	movs	r2, #0
 8000942:	f005 f8e7 	bl	8005b14 <osMessageQueueGet>
				strncat(msg_sr, c, 1);
 8000946:	f107 010c 	add.w	r1, r7, #12
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	2201      	movs	r2, #1
 8000950:	4618      	mov	r0, r3
 8000952:	f007 fee5 	bl	8008720 <strncat>
			for (int i = 0; i < count_sr; i++) {
 8000956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000958:	3301      	adds	r3, #1
 800095a:	657b      	str	r3, [r7, #84]	; 0x54
 800095c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000960:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000962:	429a      	cmp	r2, r3
 8000964:	dbe7      	blt.n	8000936 <StartTransmitTask_Serial+0x3a>
			}
			HAL_UART_Transmit(&huart4, (uint8_t *)msg_sr, sizeof(msg_sr), 100);
 8000966:	f107 0110 	add.w	r1, r7, #16
 800096a:	2364      	movs	r3, #100	; 0x64
 800096c:	2240      	movs	r2, #64	; 0x40
 800096e:	4808      	ldr	r0, [pc, #32]	; (8000990 <StartTransmitTask_Serial+0x94>)
 8000970:	f003 f844 	bl	80039fc <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg_sr, sizeof(msg_sr), 100);
 8000974:	f107 0110 	add.w	r1, r7, #16
 8000978:	2364      	movs	r3, #100	; 0x64
 800097a:	2240      	movs	r2, #64	; 0x40
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <StartTransmitTask_Serial+0x98>)
 800097e:	f003 f83d 	bl	80039fc <HAL_UART_Transmit>
		}
		osDelay(100);
 8000982:	2064      	movs	r0, #100	; 0x64
 8000984:	f004 ffd8 	bl	8005938 <osDelay>
		memset(msg_sr,0,64);
 8000988:	e7bf      	b.n	800090a <StartTransmitTask_Serial+0xe>
 800098a:	bf00      	nop
 800098c:	200019f8 	.word	0x200019f8
 8000990:	200019fc 	.word	0x200019fc
 8000994:	20001900 	.word	0x20001900

08000998 <StartTransmitTask_BT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTransmitTask_BT */
void StartTransmitTask_BT(void *argument)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b096      	sub	sp, #88	; 0x58
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTransmitTask_BT */

	char msg_bt[64];
	uint16_t count_bt = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	char b[1];
  /* Infinite loop */
	for(;;)
	{
		memset(msg_bt,0,64);
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	2240      	movs	r2, #64	; 0x40
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f007 feae 	bl	8008710 <memset>
		count_bt = osMessageQueueGetCount(BT_QueueHandle);
 80009b4:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <StartTransmitTask_BT+0x90>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f005 f909 	bl	8005bd0 <osMessageQueueGetCount>
 80009be:	4603      	mov	r3, r0
 80009c0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		if(count_bt > 0){
 80009c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d028      	beq.n	8000a1e <StartTransmitTask_BT+0x86>
			for (int j = 0; j < count_bt; j++) {
 80009cc:	2300      	movs	r3, #0
 80009ce:	657b      	str	r3, [r7, #84]	; 0x54
 80009d0:	e012      	b.n	80009f8 <StartTransmitTask_BT+0x60>
				osMessageQueueGet(BT_QueueHandle, b, 0, 100);
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <StartTransmitTask_BT+0x90>)
 80009d4:	6818      	ldr	r0, [r3, #0]
 80009d6:	f107 010c 	add.w	r1, r7, #12
 80009da:	2364      	movs	r3, #100	; 0x64
 80009dc:	2200      	movs	r2, #0
 80009de:	f005 f899 	bl	8005b14 <osMessageQueueGet>
				strncat(msg_bt,b,1);
 80009e2:	f107 010c 	add.w	r1, r7, #12
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	2201      	movs	r2, #1
 80009ec:	4618      	mov	r0, r3
 80009ee:	f007 fe97 	bl	8008720 <strncat>
			for (int j = 0; j < count_bt; j++) {
 80009f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009f4:	3301      	adds	r3, #1
 80009f6:	657b      	str	r3, [r7, #84]	; 0x54
 80009f8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80009fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80009fe:	429a      	cmp	r2, r3
 8000a00:	dbe7      	blt.n	80009d2 <StartTransmitTask_BT+0x3a>
			}
			HAL_UART_Transmit(&huart4, (uint8_t *)msg_bt, sizeof(msg_bt), 100);
 8000a02:	f107 0110 	add.w	r1, r7, #16
 8000a06:	2364      	movs	r3, #100	; 0x64
 8000a08:	2240      	movs	r2, #64	; 0x40
 8000a0a:	4808      	ldr	r0, [pc, #32]	; (8000a2c <StartTransmitTask_BT+0x94>)
 8000a0c:	f002 fff6 	bl	80039fc <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg_bt, sizeof(msg_bt), 100);
 8000a10:	f107 0110 	add.w	r1, r7, #16
 8000a14:	2364      	movs	r3, #100	; 0x64
 8000a16:	2240      	movs	r2, #64	; 0x40
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <StartTransmitTask_BT+0x98>)
 8000a1a:	f002 ffef 	bl	80039fc <HAL_UART_Transmit>
		}
		osDelay(100);
 8000a1e:	2064      	movs	r0, #100	; 0x64
 8000a20:	f004 ff8a 	bl	8005938 <osDelay>
		memset(msg_bt,0,64);
 8000a24:	e7bf      	b.n	80009a6 <StartTransmitTask_BT+0xe>
 8000a26:	bf00      	nop
 8000a28:	200019f4 	.word	0x200019f4
 8000a2c:	200019fc 	.word	0x200019fc
 8000a30:	20001900 	.word	0x20001900

08000a34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d101      	bne.n	8000a4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a46:	f000 f9ff 	bl	8000e48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40001000 	.word	0x40001000

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6e:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6613      	str	r3, [r2, #96]	; 0x60
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	210f      	movs	r1, #15
 8000a9e:	f06f 0001 	mvn.w	r0, #1
 8000aa2:	f000 faa9 	bl	8000ff8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08c      	sub	sp, #48	; 0x30
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a57      	ldr	r2, [pc, #348]	; (8000c30 <HAL_UART_MspInit+0x17c>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d154      	bne.n	8000b80 <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ad6:	4b57      	ldr	r3, [pc, #348]	; (8000c34 <HAL_UART_MspInit+0x180>)
 8000ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ada:	4a56      	ldr	r2, [pc, #344]	; (8000c34 <HAL_UART_MspInit+0x180>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ae2:	4b54      	ldr	r3, [pc, #336]	; (8000c34 <HAL_UART_MspInit+0x180>)
 8000ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aee:	4b51      	ldr	r3, [pc, #324]	; (8000c34 <HAL_UART_MspInit+0x180>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	4a50      	ldr	r2, [pc, #320]	; (8000c34 <HAL_UART_MspInit+0x180>)
 8000af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afa:	4b4e      	ldr	r3, [pc, #312]	; (8000c34 <HAL_UART_MspInit+0x180>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8000b06:	f001 f825 	bl	8001b54 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000b0a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b1c:	2308      	movs	r3, #8
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	4844      	ldr	r0, [pc, #272]	; (8000c38 <HAL_UART_MspInit+0x184>)
 8000b28:	f000 fdbe 	bl	80016a8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel5;
 8000b2c:	4b43      	ldr	r3, [pc, #268]	; (8000c3c <HAL_UART_MspInit+0x188>)
 8000b2e:	4a44      	ldr	r2, [pc, #272]	; (8000c40 <HAL_UART_MspInit+0x18c>)
 8000b30:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000b32:	4b42      	ldr	r3, [pc, #264]	; (8000c3c <HAL_UART_MspInit+0x188>)
 8000b34:	2222      	movs	r2, #34	; 0x22
 8000b36:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b38:	4b40      	ldr	r3, [pc, #256]	; (8000c3c <HAL_UART_MspInit+0x188>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b3e:	4b3f      	ldr	r3, [pc, #252]	; (8000c3c <HAL_UART_MspInit+0x188>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b44:	4b3d      	ldr	r3, [pc, #244]	; (8000c3c <HAL_UART_MspInit+0x188>)
 8000b46:	2280      	movs	r2, #128	; 0x80
 8000b48:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b4a:	4b3c      	ldr	r3, [pc, #240]	; (8000c3c <HAL_UART_MspInit+0x188>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b50:	4b3a      	ldr	r3, [pc, #232]	; (8000c3c <HAL_UART_MspInit+0x188>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000b56:	4b39      	ldr	r3, [pc, #228]	; (8000c3c <HAL_UART_MspInit+0x188>)
 8000b58:	2220      	movs	r2, #32
 8000b5a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b5c:	4b37      	ldr	r3, [pc, #220]	; (8000c3c <HAL_UART_MspInit+0x188>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000b62:	4836      	ldr	r0, [pc, #216]	; (8000c3c <HAL_UART_MspInit+0x188>)
 8000b64:	f000 fa72 	bl	800104c <HAL_DMA_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000b6e:	f7ff ff73 	bl	8000a58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a31      	ldr	r2, [pc, #196]	; (8000c3c <HAL_UART_MspInit+0x188>)
 8000b76:	67da      	str	r2, [r3, #124]	; 0x7c
 8000b78:	4a30      	ldr	r2, [pc, #192]	; (8000c3c <HAL_UART_MspInit+0x188>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000b7e:	e053      	b.n	8000c28 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==UART4)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a2f      	ldr	r2, [pc, #188]	; (8000c44 <HAL_UART_MspInit+0x190>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d14e      	bne.n	8000c28 <HAL_UART_MspInit+0x174>
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b8a:	4b2a      	ldr	r3, [pc, #168]	; (8000c34 <HAL_UART_MspInit+0x180>)
 8000b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8e:	4a29      	ldr	r2, [pc, #164]	; (8000c34 <HAL_UART_MspInit+0x180>)
 8000b90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b94:	6593      	str	r3, [r2, #88]	; 0x58
 8000b96:	4b27      	ldr	r3, [pc, #156]	; (8000c34 <HAL_UART_MspInit+0x180>)
 8000b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <HAL_UART_MspInit+0x180>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	4a23      	ldr	r2, [pc, #140]	; (8000c34 <HAL_UART_MspInit+0x180>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bae:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <HAL_UART_MspInit+0x180>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <HAL_UART_MspInit+0x180>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4a1d      	ldr	r2, [pc, #116]	; (8000c34 <HAL_UART_MspInit+0x180>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <HAL_UART_MspInit+0x180>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000be4:	2308      	movs	r3, #8
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf2:	f000 fd59 	bl	80016a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bf6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c08:	2308      	movs	r3, #8
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4619      	mov	r1, r3
 8000c12:	480d      	ldr	r0, [pc, #52]	; (8000c48 <HAL_UART_MspInit+0x194>)
 8000c14:	f000 fd48 	bl	80016a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2105      	movs	r1, #5
 8000c1c:	2034      	movs	r0, #52	; 0x34
 8000c1e:	f000 f9eb 	bl	8000ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000c22:	2034      	movs	r0, #52	; 0x34
 8000c24:	f000 fa04 	bl	8001030 <HAL_NVIC_EnableIRQ>
}
 8000c28:	bf00      	nop
 8000c2a:	3730      	adds	r7, #48	; 0x30
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40008000 	.word	0x40008000
 8000c34:	40021000 	.word	0x40021000
 8000c38:	48001800 	.word	0x48001800
 8000c3c:	20001994 	.word	0x20001994
 8000c40:	40020058 	.word	0x40020058
 8000c44:	40004c00 	.word	0x40004c00
 8000c48:	48000800 	.word	0x48000800

08000c4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08c      	sub	sp, #48	; 0x30
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	2036      	movs	r0, #54	; 0x36
 8000c62:	f000 f9c9 	bl	8000ff8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c66:	2036      	movs	r0, #54	; 0x36
 8000c68:	f000 f9e2 	bl	8001030 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <HAL_InitTick+0x9c>)
 8000c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c70:	4a1d      	ldr	r2, [pc, #116]	; (8000ce8 <HAL_InitTick+0x9c>)
 8000c72:	f043 0310 	orr.w	r3, r3, #16
 8000c76:	6593      	str	r3, [r2, #88]	; 0x58
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <HAL_InitTick+0x9c>)
 8000c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7c:	f003 0310 	and.w	r3, r3, #16
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c84:	f107 0210 	add.w	r2, r7, #16
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 fd86 	bl	80027a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c94:	f001 fd58 	bl	8002748 <HAL_RCC_GetPCLK1Freq>
 8000c98:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c9c:	4a13      	ldr	r2, [pc, #76]	; (8000cec <HAL_InitTick+0xa0>)
 8000c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca2:	0c9b      	lsrs	r3, r3, #18
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_InitTick+0xa4>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <HAL_InitTick+0xa8>)
 8000cac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <HAL_InitTick+0xa4>)
 8000cb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cb6:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <HAL_InitTick+0xa4>)
 8000cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <HAL_InitTick+0xa4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_InitTick+0xa4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000cc8:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <HAL_InitTick+0xa4>)
 8000cca:	f002 fb75 	bl	80033b8 <HAL_TIM_Base_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d104      	bne.n	8000cde <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000cd4:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <HAL_InitTick+0xa4>)
 8000cd6:	f002 fbd1 	bl	800347c <HAL_TIM_Base_Start_IT>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	e000      	b.n	8000ce0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3730      	adds	r7, #48	; 0x30
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	431bde83 	.word	0x431bde83
 8000cf0:	20001a8c 	.word	0x20001a8c
 8000cf4:	40001000 	.word	0x40001000

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <NMI_Handler+0x4>

08000cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <DMA1_Channel5_IRQHandler+0x10>)
 8000d2a:	f000 fb6d 	bl	8001408 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20001994 	.word	0x20001994

08000d38 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <UART4_IRQHandler+0x10>)
 8000d3e:	f002 ff81 	bl	8003c44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200019fc 	.word	0x200019fc

08000d4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <TIM6_DAC_IRQHandler+0x10>)
 8000d52:	f002 fc03 	bl	800355c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20001a8c 	.word	0x20001a8c

08000d60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <SystemInit+0x5c>)
 8000d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6a:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <SystemInit+0x5c>)
 8000d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <SystemInit+0x60>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a11      	ldr	r2, [pc, #68]	; (8000dc0 <SystemInit+0x60>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <SystemInit+0x60>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <SystemInit+0x60>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <SystemInit+0x60>)
 8000d8c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d90:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d94:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <SystemInit+0x60>)
 8000d98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d9c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <SystemInit+0x60>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <SystemInit+0x60>)
 8000da4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <SystemInit+0x60>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dc8:	f7ff ffca 	bl	8000d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000dcc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000dce:	e003      	b.n	8000dd8 <LoopCopyDataInit>

08000dd0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000dd2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000dd4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000dd6:	3104      	adds	r1, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000dd8:	480a      	ldr	r0, [pc, #40]	; (8000e04 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ddc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000dde:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000de0:	d3f6      	bcc.n	8000dd0 <CopyDataInit>
	ldr	r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000de4:	e002      	b.n	8000dec <LoopFillZerobss>

08000de6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000de6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000de8:	f842 3b04 	str.w	r3, [r2], #4

08000dec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <LoopForever+0x16>)
	cmp	r2, r3
 8000dee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000df0:	d3f9      	bcc.n	8000de6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000df2:	f007 fc5b 	bl	80086ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000df6:	f7ff fb7f 	bl	80004f8 <main>

08000dfa <LoopForever>:

LoopForever:
    b LoopForever
 8000dfa:	e7fe      	b.n	8000dfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dfc:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000e00:	080088a8 	.word	0x080088a8
	ldr	r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e08:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000e0c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000e10:	20001b1c 	.word	0x20001b1c

08000e14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC1_IRQHandler>

08000e16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f000 f8de 	bl	8000fe2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e26:	2000      	movs	r0, #0
 8000e28:	f7ff ff10 	bl	8000c4c <HAL_InitTick>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d002      	beq.n	8000e38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	71fb      	strb	r3, [r7, #7]
 8000e36:	e001      	b.n	8000e3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e38:	f7ff fe14 	bl	8000a64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_IncTick+0x20>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_IncTick+0x24>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <HAL_IncTick+0x24>)
 8000e5a:	6013      	str	r3, [r2, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	20001ad8 	.word	0x20001ad8

08000e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return uwTick;
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <HAL_GetTick+0x14>)
 8000e76:	681b      	ldr	r3, [r3, #0]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20001ad8 	.word	0x20001ad8

08000e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eba:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	60d3      	str	r3, [r2, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	f003 0307 	and.w	r3, r3, #7
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	db0b      	blt.n	8000f16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f003 021f 	and.w	r2, r3, #31
 8000f04:	4907      	ldr	r1, [pc, #28]	; (8000f24 <__NVIC_EnableIRQ+0x38>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	095b      	lsrs	r3, r3, #5
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000e100 	.word	0xe000e100

08000f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db0a      	blt.n	8000f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	490c      	ldr	r1, [pc, #48]	; (8000f74 <__NVIC_SetPriority+0x4c>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f50:	e00a      	b.n	8000f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4908      	ldr	r1, [pc, #32]	; (8000f78 <__NVIC_SetPriority+0x50>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	0112      	lsls	r2, r2, #4
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	761a      	strb	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	bf28      	it	cs
 8000f9a:	2304      	movcs	r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d902      	bls.n	8000fac <NVIC_EncodePriority+0x30>
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3b03      	subs	r3, #3
 8000faa:	e000      	b.n	8000fae <NVIC_EncodePriority+0x32>
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	4313      	orrs	r3, r2
         );
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	; 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ff4c 	bl	8000e88 <__NVIC_SetPriorityGrouping>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800100a:	f7ff ff61 	bl	8000ed0 <__NVIC_GetPriorityGrouping>
 800100e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	68b9      	ldr	r1, [r7, #8]
 8001014:	6978      	ldr	r0, [r7, #20]
 8001016:	f7ff ffb1 	bl	8000f7c <NVIC_EncodePriority>
 800101a:	4602      	mov	r2, r0
 800101c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001020:	4611      	mov	r1, r2
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff80 	bl	8000f28 <__NVIC_SetPriority>
}
 8001028:	bf00      	nop
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff54 	bl	8000eec <__NVIC_EnableIRQ>
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e08d      	b.n	800117a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	4b47      	ldr	r3, [pc, #284]	; (8001184 <HAL_DMA_Init+0x138>)
 8001066:	429a      	cmp	r2, r3
 8001068:	d80f      	bhi.n	800108a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	4b45      	ldr	r3, [pc, #276]	; (8001188 <HAL_DMA_Init+0x13c>)
 8001072:	4413      	add	r3, r2
 8001074:	4a45      	ldr	r2, [pc, #276]	; (800118c <HAL_DMA_Init+0x140>)
 8001076:	fba2 2303 	umull	r2, r3, r2, r3
 800107a:	091b      	lsrs	r3, r3, #4
 800107c:	009a      	lsls	r2, r3, #2
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a42      	ldr	r2, [pc, #264]	; (8001190 <HAL_DMA_Init+0x144>)
 8001086:	641a      	str	r2, [r3, #64]	; 0x40
 8001088:	e00e      	b.n	80010a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	4b40      	ldr	r3, [pc, #256]	; (8001194 <HAL_DMA_Init+0x148>)
 8001092:	4413      	add	r3, r2
 8001094:	4a3d      	ldr	r2, [pc, #244]	; (800118c <HAL_DMA_Init+0x140>)
 8001096:	fba2 2303 	umull	r2, r3, r2, r3
 800109a:	091b      	lsrs	r3, r3, #4
 800109c:	009a      	lsls	r2, r3, #2
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a3c      	ldr	r2, [pc, #240]	; (8001198 <HAL_DMA_Init+0x14c>)
 80010a6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2202      	movs	r2, #2
 80010ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80010be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80010cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a1b      	ldr	r3, [r3, #32]
 80010ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f000 fa72 	bl	80015e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001108:	d102      	bne.n	8001110 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001124:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d010      	beq.n	8001150 <HAL_DMA_Init+0x104>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b04      	cmp	r3, #4
 8001134:	d80c      	bhi.n	8001150 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f000 fa92 	bl	8001660 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	e008      	b.n	8001162 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2201      	movs	r2, #1
 800116c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40020407 	.word	0x40020407
 8001188:	bffdfff8 	.word	0xbffdfff8
 800118c:	cccccccd 	.word	0xcccccccd
 8001190:	40020000 	.word	0x40020000
 8001194:	bffdfbf8 	.word	0xbffdfbf8
 8001198:	40020400 	.word	0x40020400

0800119c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d101      	bne.n	80011bc <HAL_DMA_Start_IT+0x20>
 80011b8:	2302      	movs	r3, #2
 80011ba:	e066      	b.n	800128a <HAL_DMA_Start_IT+0xee>
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d155      	bne.n	800127c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2202      	movs	r2, #2
 80011d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2200      	movs	r2, #0
 80011dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0201 	bic.w	r2, r2, #1
 80011ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f000 f9b6 	bl	8001566 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d008      	beq.n	8001214 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f042 020e 	orr.w	r2, r2, #14
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	e00f      	b.n	8001234 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0204 	bic.w	r2, r2, #4
 8001222:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 020a 	orr.w	r2, r2, #10
 8001232:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d007      	beq.n	8001252 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800124c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001250:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001256:	2b00      	cmp	r3, #0
 8001258:	d007      	beq.n	800126a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001268:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f042 0201 	orr.w	r2, r2, #1
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	e005      	b.n	8001288 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001284:	2302      	movs	r3, #2
 8001286:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001288:	7dfb      	ldrb	r3, [r7, #23]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001292:	b480      	push	{r7}
 8001294:	b085      	sub	sp, #20
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d008      	beq.n	80012bc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2204      	movs	r2, #4
 80012ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e040      	b.n	800133e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 020e 	bic.w	r2, r2, #14
 80012ca:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012da:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0201 	bic.w	r2, r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f0:	f003 021c 	and.w	r2, r3, #28
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	2101      	movs	r1, #1
 80012fa:	fa01 f202 	lsl.w	r2, r1, r2
 80012fe:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001308:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00c      	beq.n	800132c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001320:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800132a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2201      	movs	r2, #1
 8001330:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800133c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800133e:	4618      	mov	r0, r3
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b084      	sub	sp, #16
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d005      	beq.n	800136e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2204      	movs	r2, #4
 8001366:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	e047      	b.n	80013fe <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 020e 	bic.w	r2, r2, #14
 800137c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 0201 	bic.w	r2, r2, #1
 800138c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001398:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800139c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	f003 021c 	and.w	r2, r3, #28
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	2101      	movs	r1, #1
 80013ac:	fa01 f202 	lsl.w	r2, r1, r2
 80013b0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013ba:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00c      	beq.n	80013de <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013dc:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	4798      	blx	r3
    }
  }
  return status;
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001424:	f003 031c 	and.w	r3, r3, #28
 8001428:	2204      	movs	r2, #4
 800142a:	409a      	lsls	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4013      	ands	r3, r2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d026      	beq.n	8001482 <HAL_DMA_IRQHandler+0x7a>
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	2b00      	cmp	r3, #0
 800143c:	d021      	beq.n	8001482 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0320 	and.w	r3, r3, #32
 8001448:	2b00      	cmp	r3, #0
 800144a:	d107      	bne.n	800145c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0204 	bic.w	r2, r2, #4
 800145a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001460:	f003 021c 	and.w	r2, r3, #28
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	2104      	movs	r1, #4
 800146a:	fa01 f202 	lsl.w	r2, r1, r2
 800146e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	2b00      	cmp	r3, #0
 8001476:	d071      	beq.n	800155c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001480:	e06c      	b.n	800155c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f003 031c 	and.w	r3, r3, #28
 800148a:	2202      	movs	r2, #2
 800148c:	409a      	lsls	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4013      	ands	r3, r2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d02e      	beq.n	80014f4 <HAL_DMA_IRQHandler+0xec>
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d029      	beq.n	80014f4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0320 	and.w	r3, r3, #32
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10b      	bne.n	80014c6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 020a 	bic.w	r2, r2, #10
 80014bc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	f003 021c 	and.w	r2, r3, #28
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	2102      	movs	r1, #2
 80014d4:	fa01 f202 	lsl.w	r2, r1, r2
 80014d8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d038      	beq.n	800155c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80014f2:	e033      	b.n	800155c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f8:	f003 031c 	and.w	r3, r3, #28
 80014fc:	2208      	movs	r2, #8
 80014fe:	409a      	lsls	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4013      	ands	r3, r2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d02a      	beq.n	800155e <HAL_DMA_IRQHandler+0x156>
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d025      	beq.n	800155e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 020e 	bic.w	r2, r2, #14
 8001520:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f003 021c 	and.w	r2, r3, #28
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	2101      	movs	r1, #1
 8001530:	fa01 f202 	lsl.w	r2, r1, r2
 8001534:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001550:	2b00      	cmp	r3, #0
 8001552:	d004      	beq.n	800155e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800155c:	bf00      	nop
 800155e:	bf00      	nop
}
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001566:	b480      	push	{r7}
 8001568:	b085      	sub	sp, #20
 800156a:	af00      	add	r7, sp, #0
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800157c:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001582:	2b00      	cmp	r3, #0
 8001584:	d004      	beq.n	8001590 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800158e:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001594:	f003 021c 	and.w	r2, r3, #28
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	2101      	movs	r1, #1
 800159e:	fa01 f202 	lsl.w	r2, r1, r2
 80015a2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b10      	cmp	r3, #16
 80015b2:	d108      	bne.n	80015c6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68ba      	ldr	r2, [r7, #8]
 80015c2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015c4:	e007      	b.n	80015d6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	60da      	str	r2, [r3, #12]
}
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d80a      	bhi.n	800160e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001604:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6493      	str	r3, [r2, #72]	; 0x48
 800160c:	e007      	b.n	800161e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	089b      	lsrs	r3, r3, #2
 8001614:	009a      	lsls	r2, r3, #2
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001618:	4413      	add	r3, r2
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	3b08      	subs	r3, #8
 8001626:	4a0c      	ldr	r2, [pc, #48]	; (8001658 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001628:	fba2 2303 	umull	r2, r3, r2, r3
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001634:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f003 031f 	and.w	r3, r3, #31
 800163c:	2201      	movs	r2, #1
 800163e:	409a      	lsls	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40020407 	.word	0x40020407
 8001654:	4002081c 	.word	0x4002081c
 8001658:	cccccccd 	.word	0xcccccccd
 800165c:	40020880 	.word	0x40020880

08001660 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	461a      	mov	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a08      	ldr	r2, [pc, #32]	; (80016a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001682:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	3b01      	subs	r3, #1
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2201      	movs	r2, #1
 800168e:	409a      	lsls	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	1000823f 	.word	0x1000823f
 80016a4:	40020940 	.word	0x40020940

080016a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b6:	e166      	b.n	8001986 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	2101      	movs	r1, #1
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	fa01 f303 	lsl.w	r3, r1, r3
 80016c4:	4013      	ands	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 8158 	beq.w	8001980 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d00b      	beq.n	80016f0 <HAL_GPIO_Init+0x48>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d007      	beq.n	80016f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016e4:	2b11      	cmp	r3, #17
 80016e6:	d003      	beq.n	80016f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b12      	cmp	r3, #18
 80016ee:	d130      	bne.n	8001752 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	2203      	movs	r2, #3
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	68da      	ldr	r2, [r3, #12]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001726:	2201      	movs	r2, #1
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	091b      	lsrs	r3, r3, #4
 800173c:	f003 0201 	and.w	r2, r3, #1
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	2203      	movs	r2, #3
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0xea>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b12      	cmp	r3, #18
 8001790:	d123      	bne.n	80017da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	08da      	lsrs	r2, r3, #3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3208      	adds	r2, #8
 800179a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	220f      	movs	r2, #15
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	691a      	ldr	r2, [r3, #16]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	08da      	lsrs	r2, r3, #3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3208      	adds	r2, #8
 80017d4:	6939      	ldr	r1, [r7, #16]
 80017d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	2203      	movs	r2, #3
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 0203 	and.w	r2, r3, #3
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80b2 	beq.w	8001980 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181c:	4b61      	ldr	r3, [pc, #388]	; (80019a4 <HAL_GPIO_Init+0x2fc>)
 800181e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001820:	4a60      	ldr	r2, [pc, #384]	; (80019a4 <HAL_GPIO_Init+0x2fc>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6613      	str	r3, [r2, #96]	; 0x60
 8001828:	4b5e      	ldr	r3, [pc, #376]	; (80019a4 <HAL_GPIO_Init+0x2fc>)
 800182a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001834:	4a5c      	ldr	r2, [pc, #368]	; (80019a8 <HAL_GPIO_Init+0x300>)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	089b      	lsrs	r3, r3, #2
 800183a:	3302      	adds	r3, #2
 800183c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001840:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	220f      	movs	r2, #15
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800185e:	d02b      	beq.n	80018b8 <HAL_GPIO_Init+0x210>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a52      	ldr	r2, [pc, #328]	; (80019ac <HAL_GPIO_Init+0x304>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d025      	beq.n	80018b4 <HAL_GPIO_Init+0x20c>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a51      	ldr	r2, [pc, #324]	; (80019b0 <HAL_GPIO_Init+0x308>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d01f      	beq.n	80018b0 <HAL_GPIO_Init+0x208>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a50      	ldr	r2, [pc, #320]	; (80019b4 <HAL_GPIO_Init+0x30c>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d019      	beq.n	80018ac <HAL_GPIO_Init+0x204>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a4f      	ldr	r2, [pc, #316]	; (80019b8 <HAL_GPIO_Init+0x310>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d013      	beq.n	80018a8 <HAL_GPIO_Init+0x200>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a4e      	ldr	r2, [pc, #312]	; (80019bc <HAL_GPIO_Init+0x314>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d00d      	beq.n	80018a4 <HAL_GPIO_Init+0x1fc>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a4d      	ldr	r2, [pc, #308]	; (80019c0 <HAL_GPIO_Init+0x318>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d007      	beq.n	80018a0 <HAL_GPIO_Init+0x1f8>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a4c      	ldr	r2, [pc, #304]	; (80019c4 <HAL_GPIO_Init+0x31c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d101      	bne.n	800189c <HAL_GPIO_Init+0x1f4>
 8001898:	2307      	movs	r3, #7
 800189a:	e00e      	b.n	80018ba <HAL_GPIO_Init+0x212>
 800189c:	2308      	movs	r3, #8
 800189e:	e00c      	b.n	80018ba <HAL_GPIO_Init+0x212>
 80018a0:	2306      	movs	r3, #6
 80018a2:	e00a      	b.n	80018ba <HAL_GPIO_Init+0x212>
 80018a4:	2305      	movs	r3, #5
 80018a6:	e008      	b.n	80018ba <HAL_GPIO_Init+0x212>
 80018a8:	2304      	movs	r3, #4
 80018aa:	e006      	b.n	80018ba <HAL_GPIO_Init+0x212>
 80018ac:	2303      	movs	r3, #3
 80018ae:	e004      	b.n	80018ba <HAL_GPIO_Init+0x212>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e002      	b.n	80018ba <HAL_GPIO_Init+0x212>
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <HAL_GPIO_Init+0x212>
 80018b8:	2300      	movs	r3, #0
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	f002 0203 	and.w	r2, r2, #3
 80018c0:	0092      	lsls	r2, r2, #2
 80018c2:	4093      	lsls	r3, r2
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018ca:	4937      	ldr	r1, [pc, #220]	; (80019a8 <HAL_GPIO_Init+0x300>)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	3302      	adds	r3, #2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018d8:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <HAL_GPIO_Init+0x320>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018fc:	4a32      	ldr	r2, [pc, #200]	; (80019c8 <HAL_GPIO_Init+0x320>)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001902:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <HAL_GPIO_Init+0x320>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	43db      	mvns	r3, r3
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001926:	4a28      	ldr	r2, [pc, #160]	; (80019c8 <HAL_GPIO_Init+0x320>)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800192c:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <HAL_GPIO_Init+0x320>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	43db      	mvns	r3, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001950:	4a1d      	ldr	r2, [pc, #116]	; (80019c8 <HAL_GPIO_Init+0x320>)
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001956:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <HAL_GPIO_Init+0x320>)
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4313      	orrs	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800197a:	4a13      	ldr	r2, [pc, #76]	; (80019c8 <HAL_GPIO_Init+0x320>)
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	3301      	adds	r3, #1
 8001984:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	f47f ae91 	bne.w	80016b8 <HAL_GPIO_Init+0x10>
  }
}
 8001996:	bf00      	nop
 8001998:	bf00      	nop
 800199a:	371c      	adds	r7, #28
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010000 	.word	0x40010000
 80019ac:	48000400 	.word	0x48000400
 80019b0:	48000800 	.word	0x48000800
 80019b4:	48000c00 	.word	0x48000c00
 80019b8:	48001000 	.word	0x48001000
 80019bc:	48001400 	.word	0x48001400
 80019c0:	48001800 	.word	0x48001800
 80019c4:	48001c00 	.word	0x48001c00
 80019c8:	40010400 	.word	0x40010400

080019cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019d0:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <HAL_PWREx_GetVoltageRange+0x3c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019dc:	d102      	bne.n	80019e4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80019de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e2:	e00b      	b.n	80019fc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <HAL_PWREx_GetVoltageRange+0x3c>)
 80019e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019f2:	d102      	bne.n	80019fa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80019f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019f8:	e000      	b.n	80019fc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80019fa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40007000 	.word	0x40007000

08001a0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d141      	bne.n	8001a9e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a1a:	4b4b      	ldr	r3, [pc, #300]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a26:	d131      	bne.n	8001a8c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a28:	4b47      	ldr	r3, [pc, #284]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a2e:	4a46      	ldr	r2, [pc, #280]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a38:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a40:	4a41      	ldr	r2, [pc, #260]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001a48:	4b40      	ldr	r3, [pc, #256]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2232      	movs	r2, #50	; 0x32
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	4a3f      	ldr	r2, [pc, #252]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a54:	fba2 2303 	umull	r2, r3, r2, r3
 8001a58:	0c9b      	lsrs	r3, r3, #18
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a5e:	e002      	b.n	8001a66 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a66:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a72:	d102      	bne.n	8001a7a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f2      	bne.n	8001a60 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a7a:	4b33      	ldr	r3, [pc, #204]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a86:	d158      	bne.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e057      	b.n	8001b3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a8c:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a92:	4a2d      	ldr	r2, [pc, #180]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a9c:	e04d      	b.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa4:	d141      	bne.n	8001b2a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aa6:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab2:	d131      	bne.n	8001b18 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ab4:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aba:	4a23      	ldr	r2, [pc, #140]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ac4:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001acc:	4a1e      	ldr	r2, [pc, #120]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2232      	movs	r2, #50	; 0x32
 8001ada:	fb02 f303 	mul.w	r3, r2, r3
 8001ade:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae4:	0c9b      	lsrs	r3, r3, #18
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aea:	e002      	b.n	8001af2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001afe:	d102      	bne.n	8001b06 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f2      	bne.n	8001aec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b12:	d112      	bne.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e011      	b.n	8001b3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b28:	e007      	b.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b32:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b38:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	40007000 	.word	0x40007000
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	431bde83 	.word	0x431bde83

08001b54 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b62:	6053      	str	r3, [r2, #4]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40007000 	.word	0x40007000

08001b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d102      	bne.n	8001b88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	f000 bc16 	b.w	80023b4 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b88:	4ba0      	ldr	r3, [pc, #640]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b92:	4b9e      	ldr	r3, [pc, #632]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80e4 	beq.w	8001d72 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d007      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x4c>
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	2b0c      	cmp	r3, #12
 8001bb4:	f040 808b 	bne.w	8001cce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	f040 8087 	bne.w	8001cce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bc0:	4b92      	ldr	r3, [pc, #584]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x64>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e3ed      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1a      	ldr	r2, [r3, #32]
 8001bdc:	4b8b      	ldr	r3, [pc, #556]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d004      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x7e>
 8001be8:	4b88      	ldr	r3, [pc, #544]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bf0:	e005      	b.n	8001bfe <HAL_RCC_OscConfig+0x8a>
 8001bf2:	4b86      	ldr	r3, [pc, #536]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d223      	bcs.n	8001c4a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 fdfc 	bl	8002804 <RCC_SetFlashLatencyFromMSIRange>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e3ce      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c16:	4b7d      	ldr	r3, [pc, #500]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a7c      	ldr	r2, [pc, #496]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c1c:	f043 0308 	orr.w	r3, r3, #8
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	4b7a      	ldr	r3, [pc, #488]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	4977      	ldr	r1, [pc, #476]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c34:	4b75      	ldr	r3, [pc, #468]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	4972      	ldr	r1, [pc, #456]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
 8001c48:	e025      	b.n	8001c96 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c4a:	4b70      	ldr	r3, [pc, #448]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6f      	ldr	r2, [pc, #444]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c50:	f043 0308 	orr.w	r3, r3, #8
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b6d      	ldr	r3, [pc, #436]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	496a      	ldr	r1, [pc, #424]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c68:	4b68      	ldr	r3, [pc, #416]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	4965      	ldr	r1, [pc, #404]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d109      	bne.n	8001c96 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 fdbc 	bl	8002804 <RCC_SetFlashLatencyFromMSIRange>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e38e      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c96:	f000 fcbf 	bl	8002618 <HAL_RCC_GetSysClockFreq>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	4b5b      	ldr	r3, [pc, #364]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	091b      	lsrs	r3, r3, #4
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	495a      	ldr	r1, [pc, #360]	; (8001e10 <HAL_RCC_OscConfig+0x29c>)
 8001ca8:	5ccb      	ldrb	r3, [r1, r3]
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb2:	4a58      	ldr	r2, [pc, #352]	; (8001e14 <HAL_RCC_OscConfig+0x2a0>)
 8001cb4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cb6:	4b58      	ldr	r3, [pc, #352]	; (8001e18 <HAL_RCC_OscConfig+0x2a4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe ffc6 	bl	8000c4c <HAL_InitTick>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d052      	beq.n	8001d70 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	e372      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d032      	beq.n	8001d3c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cd6:	4b4d      	ldr	r3, [pc, #308]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a4c      	ldr	r2, [pc, #304]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ce2:	f7ff f8c5 	bl	8000e70 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cea:	f7ff f8c1 	bl	8000e70 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e35b      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cfc:	4b43      	ldr	r3, [pc, #268]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0f0      	beq.n	8001cea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d08:	4b40      	ldr	r3, [pc, #256]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a3f      	ldr	r2, [pc, #252]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001d0e:	f043 0308 	orr.w	r3, r3, #8
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	493a      	ldr	r1, [pc, #232]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d26:	4b39      	ldr	r3, [pc, #228]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	4935      	ldr	r1, [pc, #212]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	604b      	str	r3, [r1, #4]
 8001d3a:	e01a      	b.n	8001d72 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d3c:	4b33      	ldr	r3, [pc, #204]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a32      	ldr	r2, [pc, #200]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001d42:	f023 0301 	bic.w	r3, r3, #1
 8001d46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d48:	f7ff f892 	bl	8000e70 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d50:	f7ff f88e 	bl	8000e70 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e328      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d62:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x1dc>
 8001d6e:	e000      	b.n	8001d72 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d073      	beq.n	8001e66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d005      	beq.n	8001d90 <HAL_RCC_OscConfig+0x21c>
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	2b0c      	cmp	r3, #12
 8001d88:	d10e      	bne.n	8001da8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d10b      	bne.n	8001da8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d90:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d063      	beq.n	8001e64 <HAL_RCC_OscConfig+0x2f0>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d15f      	bne.n	8001e64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e305      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db0:	d106      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x24c>
 8001db2:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a15      	ldr	r2, [pc, #84]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e01d      	b.n	8001dfc <HAL_RCC_OscConfig+0x288>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x270>
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a0f      	ldr	r2, [pc, #60]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a0c      	ldr	r2, [pc, #48]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e00b      	b.n	8001dfc <HAL_RCC_OscConfig+0x288>
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a08      	ldr	r2, [pc, #32]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d01b      	beq.n	8001e3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7ff f834 	bl	8000e70 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e0a:	e010      	b.n	8001e2e <HAL_RCC_OscConfig+0x2ba>
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	08008828 	.word	0x08008828
 8001e14:	20000000 	.word	0x20000000
 8001e18:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e1c:	f7ff f828 	bl	8000e70 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	; 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e2c2      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e2e:	4baf      	ldr	r3, [pc, #700]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x2a8>
 8001e3a:	e014      	b.n	8001e66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff f818 	bl	8000e70 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e44:	f7ff f814 	bl	8000e70 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e2ae      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e56:	4ba5      	ldr	r3, [pc, #660]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x2d0>
 8001e62:	e000      	b.n	8001e66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d060      	beq.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_OscConfig+0x310>
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2b0c      	cmp	r3, #12
 8001e7c:	d119      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d116      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e84:	4b99      	ldr	r3, [pc, #612]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_OscConfig+0x328>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e28b      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9c:	4b93      	ldr	r3, [pc, #588]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	061b      	lsls	r3, r3, #24
 8001eaa:	4990      	ldr	r1, [pc, #576]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb0:	e040      	b.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d023      	beq.n	8001f02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eba:	4b8c      	ldr	r3, [pc, #560]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a8b      	ldr	r2, [pc, #556]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec6:	f7fe ffd3 	bl	8000e70 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ece:	f7fe ffcf 	bl	8000e70 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e269      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee0:	4b82      	ldr	r3, [pc, #520]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eec:	4b7f      	ldr	r3, [pc, #508]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	061b      	lsls	r3, r3, #24
 8001efa:	497c      	ldr	r1, [pc, #496]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]
 8001f00:	e018      	b.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f02:	4b7a      	ldr	r3, [pc, #488]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a79      	ldr	r2, [pc, #484]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0e:	f7fe ffaf 	bl	8000e70 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f16:	f7fe ffab 	bl	8000e70 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e245      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f28:	4b70      	ldr	r3, [pc, #448]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1f0      	bne.n	8001f16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d03c      	beq.n	8001fba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01c      	beq.n	8001f82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f48:	4b68      	ldr	r3, [pc, #416]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4e:	4a67      	ldr	r2, [pc, #412]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f58:	f7fe ff8a 	bl	8000e70 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f60:	f7fe ff86 	bl	8000e70 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e220      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f72:	4b5e      	ldr	r3, [pc, #376]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ef      	beq.n	8001f60 <HAL_RCC_OscConfig+0x3ec>
 8001f80:	e01b      	b.n	8001fba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f82:	4b5a      	ldr	r3, [pc, #360]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f88:	4a58      	ldr	r2, [pc, #352]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001f8a:	f023 0301 	bic.w	r3, r3, #1
 8001f8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f92:	f7fe ff6d 	bl	8000e70 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9a:	f7fe ff69 	bl	8000e70 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e203      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fac:	4b4f      	ldr	r3, [pc, #316]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1ef      	bne.n	8001f9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80a6 	beq.w	8002114 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fcc:	4b47      	ldr	r3, [pc, #284]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10d      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd8:	4b44      	ldr	r3, [pc, #272]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fdc:	4a43      	ldr	r2, [pc, #268]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fe4:	4b41      	ldr	r3, [pc, #260]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff4:	4b3e      	ldr	r3, [pc, #248]	; (80020f0 <HAL_RCC_OscConfig+0x57c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d118      	bne.n	8002032 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002000:	4b3b      	ldr	r3, [pc, #236]	; (80020f0 <HAL_RCC_OscConfig+0x57c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a3a      	ldr	r2, [pc, #232]	; (80020f0 <HAL_RCC_OscConfig+0x57c>)
 8002006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800200c:	f7fe ff30 	bl	8000e70 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002014:	f7fe ff2c 	bl	8000e70 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e1c6      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002026:	4b32      	ldr	r3, [pc, #200]	; (80020f0 <HAL_RCC_OscConfig+0x57c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d108      	bne.n	800204c <HAL_RCC_OscConfig+0x4d8>
 800203a:	4b2c      	ldr	r3, [pc, #176]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 800203c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002040:	4a2a      	ldr	r2, [pc, #168]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800204a:	e024      	b.n	8002096 <HAL_RCC_OscConfig+0x522>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b05      	cmp	r3, #5
 8002052:	d110      	bne.n	8002076 <HAL_RCC_OscConfig+0x502>
 8002054:	4b25      	ldr	r3, [pc, #148]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205a:	4a24      	ldr	r2, [pc, #144]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 800205c:	f043 0304 	orr.w	r3, r3, #4
 8002060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002064:	4b21      	ldr	r3, [pc, #132]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206a:	4a20      	ldr	r2, [pc, #128]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002074:	e00f      	b.n	8002096 <HAL_RCC_OscConfig+0x522>
 8002076:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8002078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207c:	4a1b      	ldr	r2, [pc, #108]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 800207e:	f023 0301 	bic.w	r3, r3, #1
 8002082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002086:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208c:	4a17      	ldr	r2, [pc, #92]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 800208e:	f023 0304 	bic.w	r3, r3, #4
 8002092:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d016      	beq.n	80020cc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209e:	f7fe fee7 	bl	8000e70 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a4:	e00a      	b.n	80020bc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a6:	f7fe fee3 	bl	8000e70 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e17b      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0ed      	beq.n	80020a6 <HAL_RCC_OscConfig+0x532>
 80020ca:	e01a      	b.n	8002102 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020cc:	f7fe fed0 	bl	8000e70 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020d2:	e00f      	b.n	80020f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d4:	f7fe fecc 	bl	8000e70 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d906      	bls.n	80020f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e164      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020f4:	4ba8      	ldr	r3, [pc, #672]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1e8      	bne.n	80020d4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002102:	7ffb      	ldrb	r3, [r7, #31]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d105      	bne.n	8002114 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002108:	4ba3      	ldr	r3, [pc, #652]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210c:	4aa2      	ldr	r2, [pc, #648]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 800210e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002112:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0320 	and.w	r3, r3, #32
 800211c:	2b00      	cmp	r3, #0
 800211e:	d03c      	beq.n	800219a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01c      	beq.n	8002162 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002128:	4b9b      	ldr	r3, [pc, #620]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 800212a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800212e:	4a9a      	ldr	r2, [pc, #616]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002138:	f7fe fe9a 	bl	8000e70 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002140:	f7fe fe96 	bl	8000e70 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e130      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002152:	4b91      	ldr	r3, [pc, #580]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 8002154:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0ef      	beq.n	8002140 <HAL_RCC_OscConfig+0x5cc>
 8002160:	e01b      	b.n	800219a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002162:	4b8d      	ldr	r3, [pc, #564]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 8002164:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002168:	4a8b      	ldr	r2, [pc, #556]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 800216a:	f023 0301 	bic.w	r3, r3, #1
 800216e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002172:	f7fe fe7d 	bl	8000e70 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800217a:	f7fe fe79 	bl	8000e70 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e113      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800218c:	4b82      	ldr	r3, [pc, #520]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 800218e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1ef      	bne.n	800217a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8107 	beq.w	80023b2 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	f040 80cb 	bne.w	8002344 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021ae:	4b7a      	ldr	r3, [pc, #488]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f003 0203 	and.w	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021be:	429a      	cmp	r2, r3
 80021c0:	d12c      	bne.n	800221c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021cc:	3b01      	subs	r3, #1
 80021ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d123      	bne.n	800221c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d11b      	bne.n	800221c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d113      	bne.n	800221c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fe:	085b      	lsrs	r3, r3, #1
 8002200:	3b01      	subs	r3, #1
 8002202:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002204:	429a      	cmp	r2, r3
 8002206:	d109      	bne.n	800221c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	085b      	lsrs	r3, r3, #1
 8002214:	3b01      	subs	r3, #1
 8002216:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002218:	429a      	cmp	r2, r3
 800221a:	d06d      	beq.n	80022f8 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	2b0c      	cmp	r3, #12
 8002220:	d068      	beq.n	80022f4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002222:	4b5d      	ldr	r3, [pc, #372]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d105      	bne.n	800223a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800222e:	4b5a      	ldr	r3, [pc, #360]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e0ba      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800223e:	4b56      	ldr	r3, [pc, #344]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a55      	ldr	r2, [pc, #340]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 8002244:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002248:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800224a:	f7fe fe11 	bl	8000e70 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002252:	f7fe fe0d 	bl	8000e70 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e0a7      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002264:	4b4c      	ldr	r3, [pc, #304]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f0      	bne.n	8002252 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002270:	4b49      	ldr	r3, [pc, #292]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	4b49      	ldr	r3, [pc, #292]	; (800239c <HAL_RCC_OscConfig+0x828>)
 8002276:	4013      	ands	r3, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002280:	3a01      	subs	r2, #1
 8002282:	0112      	lsls	r2, r2, #4
 8002284:	4311      	orrs	r1, r2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800228a:	0212      	lsls	r2, r2, #8
 800228c:	4311      	orrs	r1, r2
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002292:	0852      	lsrs	r2, r2, #1
 8002294:	3a01      	subs	r2, #1
 8002296:	0552      	lsls	r2, r2, #21
 8002298:	4311      	orrs	r1, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800229e:	0852      	lsrs	r2, r2, #1
 80022a0:	3a01      	subs	r2, #1
 80022a2:	0652      	lsls	r2, r2, #25
 80022a4:	4311      	orrs	r1, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022aa:	06d2      	lsls	r2, r2, #27
 80022ac:	430a      	orrs	r2, r1
 80022ae:	493a      	ldr	r1, [pc, #232]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022b4:	4b38      	ldr	r3, [pc, #224]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a37      	ldr	r2, [pc, #220]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 80022ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022c0:	4b35      	ldr	r3, [pc, #212]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	4a34      	ldr	r2, [pc, #208]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 80022c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022cc:	f7fe fdd0 	bl	8000e70 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d4:	f7fe fdcc 	bl	8000e70 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e066      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e6:	4b2c      	ldr	r3, [pc, #176]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022f2:	e05e      	b.n	80023b2 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e05d      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f8:	4b27      	ldr	r3, [pc, #156]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d156      	bne.n	80023b2 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002304:	4b24      	ldr	r3, [pc, #144]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a23      	ldr	r2, [pc, #140]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 800230a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800230e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002310:	4b21      	ldr	r3, [pc, #132]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a20      	ldr	r2, [pc, #128]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 8002316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800231a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800231c:	f7fe fda8 	bl	8000e70 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002324:	f7fe fda4 	bl	8000e70 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e03e      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002336:	4b18      	ldr	r3, [pc, #96]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x7b0>
 8002342:	e036      	b.n	80023b2 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	2b0c      	cmp	r3, #12
 8002348:	d031      	beq.n	80023ae <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234a:	4b13      	ldr	r3, [pc, #76]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a12      	ldr	r2, [pc, #72]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 8002350:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002354:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d105      	bne.n	800236e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002362:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	4a0c      	ldr	r2, [pc, #48]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 8002368:	f023 0303 	bic.w	r3, r3, #3
 800236c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800236e:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	4a09      	ldr	r2, [pc, #36]	; (8002398 <HAL_RCC_OscConfig+0x824>)
 8002374:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237e:	f7fe fd77 	bl	8000e70 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002384:	e00c      	b.n	80023a0 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002386:	f7fe fd73 	bl	8000e70 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d905      	bls.n	80023a0 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e00d      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
 8002398:	40021000 	.word	0x40021000
 800239c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_RCC_OscConfig+0x848>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1ec      	bne.n	8002386 <HAL_RCC_OscConfig+0x812>
 80023ac:	e001      	b.n	80023b2 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000

080023c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e10f      	b.n	80025f8 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023d8:	4b89      	ldr	r3, [pc, #548]	; (8002600 <HAL_RCC_ClockConfig+0x240>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 030f 	and.w	r3, r3, #15
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d910      	bls.n	8002408 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e6:	4b86      	ldr	r3, [pc, #536]	; (8002600 <HAL_RCC_ClockConfig+0x240>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 020f 	bic.w	r2, r3, #15
 80023ee:	4984      	ldr	r1, [pc, #528]	; (8002600 <HAL_RCC_ClockConfig+0x240>)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f6:	4b82      	ldr	r3, [pc, #520]	; (8002600 <HAL_RCC_ClockConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d001      	beq.n	8002408 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0f7      	b.n	80025f8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 8089 	beq.w	8002528 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b03      	cmp	r3, #3
 800241c:	d133      	bne.n	8002486 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241e:	4b79      	ldr	r3, [pc, #484]	; (8002604 <HAL_RCC_ClockConfig+0x244>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e0e4      	b.n	80025f8 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800242e:	f000 fa43 	bl	80028b8 <RCC_GetSysClockFreqFromPLLSource>
 8002432:	4603      	mov	r3, r0
 8002434:	4a74      	ldr	r2, [pc, #464]	; (8002608 <HAL_RCC_ClockConfig+0x248>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d955      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800243a:	4b72      	ldr	r3, [pc, #456]	; (8002604 <HAL_RCC_ClockConfig+0x244>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10a      	bne.n	800245c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002446:	4b6f      	ldr	r3, [pc, #444]	; (8002604 <HAL_RCC_ClockConfig+0x244>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800244e:	4a6d      	ldr	r2, [pc, #436]	; (8002604 <HAL_RCC_ClockConfig+0x244>)
 8002450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002454:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e044      	b.n	80024e6 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d03e      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x126>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d13a      	bne.n	80024e6 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002470:	4b64      	ldr	r3, [pc, #400]	; (8002604 <HAL_RCC_ClockConfig+0x244>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002478:	4a62      	ldr	r2, [pc, #392]	; (8002604 <HAL_RCC_ClockConfig+0x244>)
 800247a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800247e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	e02f      	b.n	80024e6 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800248e:	4b5d      	ldr	r3, [pc, #372]	; (8002604 <HAL_RCC_ClockConfig+0x244>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d115      	bne.n	80024c6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e0ac      	b.n	80025f8 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024a6:	4b57      	ldr	r3, [pc, #348]	; (8002604 <HAL_RCC_ClockConfig+0x244>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e0a0      	b.n	80025f8 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b6:	4b53      	ldr	r3, [pc, #332]	; (8002604 <HAL_RCC_ClockConfig+0x244>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e098      	b.n	80025f8 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80024c6:	f000 f8a7 	bl	8002618 <HAL_RCC_GetSysClockFreq>
 80024ca:	4603      	mov	r3, r0
 80024cc:	4a4e      	ldr	r2, [pc, #312]	; (8002608 <HAL_RCC_ClockConfig+0x248>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d909      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024d2:	4b4c      	ldr	r3, [pc, #304]	; (8002604 <HAL_RCC_ClockConfig+0x244>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024da:	4a4a      	ldr	r2, [pc, #296]	; (8002604 <HAL_RCC_ClockConfig+0x244>)
 80024dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024e6:	4b47      	ldr	r3, [pc, #284]	; (8002604 <HAL_RCC_ClockConfig+0x244>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f023 0203 	bic.w	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4944      	ldr	r1, [pc, #272]	; (8002604 <HAL_RCC_ClockConfig+0x244>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f8:	f7fe fcba 	bl	8000e70 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fe:	e00a      	b.n	8002516 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002500:	f7fe fcb6 	bl	8000e70 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	; 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e070      	b.n	80025f8 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002516:	4b3b      	ldr	r3, [pc, #236]	; (8002604 <HAL_RCC_ClockConfig+0x244>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 020c 	and.w	r2, r3, #12
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	429a      	cmp	r2, r3
 8002526:	d1eb      	bne.n	8002500 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d009      	beq.n	8002548 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002534:	4b33      	ldr	r3, [pc, #204]	; (8002604 <HAL_RCC_ClockConfig+0x244>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	4930      	ldr	r1, [pc, #192]	; (8002604 <HAL_RCC_ClockConfig+0x244>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
 8002546:	e008      	b.n	800255a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b80      	cmp	r3, #128	; 0x80
 800254c:	d105      	bne.n	800255a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800254e:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <HAL_RCC_ClockConfig+0x244>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	4a2c      	ldr	r2, [pc, #176]	; (8002604 <HAL_RCC_ClockConfig+0x244>)
 8002554:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002558:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800255a:	4b29      	ldr	r3, [pc, #164]	; (8002600 <HAL_RCC_ClockConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d210      	bcs.n	800258a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002568:	4b25      	ldr	r3, [pc, #148]	; (8002600 <HAL_RCC_ClockConfig+0x240>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f023 020f 	bic.w	r2, r3, #15
 8002570:	4923      	ldr	r1, [pc, #140]	; (8002600 <HAL_RCC_ClockConfig+0x240>)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	4313      	orrs	r3, r2
 8002576:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002578:	4b21      	ldr	r3, [pc, #132]	; (8002600 <HAL_RCC_ClockConfig+0x240>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 030f 	and.w	r3, r3, #15
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d001      	beq.n	800258a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e036      	b.n	80025f8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	2b00      	cmp	r3, #0
 8002594:	d008      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002596:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <HAL_RCC_ClockConfig+0x244>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	4918      	ldr	r1, [pc, #96]	; (8002604 <HAL_RCC_ClockConfig+0x244>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d009      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025b4:	4b13      	ldr	r3, [pc, #76]	; (8002604 <HAL_RCC_ClockConfig+0x244>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4910      	ldr	r1, [pc, #64]	; (8002604 <HAL_RCC_ClockConfig+0x244>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025c8:	f000 f826 	bl	8002618 <HAL_RCC_GetSysClockFreq>
 80025cc:	4602      	mov	r2, r0
 80025ce:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <HAL_RCC_ClockConfig+0x244>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	490c      	ldr	r1, [pc, #48]	; (800260c <HAL_RCC_ClockConfig+0x24c>)
 80025da:	5ccb      	ldrb	r3, [r1, r3]
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	fa22 f303 	lsr.w	r3, r2, r3
 80025e4:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <HAL_RCC_ClockConfig+0x250>)
 80025e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <HAL_RCC_ClockConfig+0x254>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe fb2d 	bl	8000c4c <HAL_InitTick>
 80025f2:	4603      	mov	r3, r0
 80025f4:	73fb      	strb	r3, [r7, #15]

  return status;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40022000 	.word	0x40022000
 8002604:	40021000 	.word	0x40021000
 8002608:	04c4b400 	.word	0x04c4b400
 800260c:	08008828 	.word	0x08008828
 8002610:	20000000 	.word	0x20000000
 8002614:	20000004 	.word	0x20000004

08002618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	; 0x24
 800261c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002626:	4b3e      	ldr	r3, [pc, #248]	; (8002720 <HAL_RCC_GetSysClockFreq+0x108>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002630:	4b3b      	ldr	r3, [pc, #236]	; (8002720 <HAL_RCC_GetSysClockFreq+0x108>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_GetSysClockFreq+0x34>
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	2b0c      	cmp	r3, #12
 8002644:	d121      	bne.n	800268a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d11e      	bne.n	800268a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800264c:	4b34      	ldr	r3, [pc, #208]	; (8002720 <HAL_RCC_GetSysClockFreq+0x108>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d107      	bne.n	8002668 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002658:	4b31      	ldr	r3, [pc, #196]	; (8002720 <HAL_RCC_GetSysClockFreq+0x108>)
 800265a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800265e:	0a1b      	lsrs	r3, r3, #8
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	e005      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002668:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <HAL_RCC_GetSysClockFreq+0x108>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002674:	4a2b      	ldr	r2, [pc, #172]	; (8002724 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10d      	bne.n	80026a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002688:	e00a      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	2b04      	cmp	r3, #4
 800268e:	d102      	bne.n	8002696 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002690:	4b25      	ldr	r3, [pc, #148]	; (8002728 <HAL_RCC_GetSysClockFreq+0x110>)
 8002692:	61bb      	str	r3, [r7, #24]
 8002694:	e004      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	2b08      	cmp	r3, #8
 800269a:	d101      	bne.n	80026a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800269c:	4b23      	ldr	r3, [pc, #140]	; (800272c <HAL_RCC_GetSysClockFreq+0x114>)
 800269e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	2b0c      	cmp	r3, #12
 80026a4:	d134      	bne.n	8002710 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026a6:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d003      	beq.n	80026be <HAL_RCC_GetSysClockFreq+0xa6>
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d003      	beq.n	80026c4 <HAL_RCC_GetSysClockFreq+0xac>
 80026bc:	e005      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026be:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <HAL_RCC_GetSysClockFreq+0x110>)
 80026c0:	617b      	str	r3, [r7, #20]
      break;
 80026c2:	e005      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <HAL_RCC_GetSysClockFreq+0x114>)
 80026c6:	617b      	str	r3, [r7, #20]
      break;
 80026c8:	e002      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	617b      	str	r3, [r7, #20]
      break;
 80026ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026d0:	4b13      	ldr	r3, [pc, #76]	; (8002720 <HAL_RCC_GetSysClockFreq+0x108>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	3301      	adds	r3, #1
 80026dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026de:	4b10      	ldr	r3, [pc, #64]	; (8002720 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	0a1b      	lsrs	r3, r3, #8
 80026e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	fb02 f203 	mul.w	r2, r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <HAL_RCC_GetSysClockFreq+0x108>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	0e5b      	lsrs	r3, r3, #25
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	3301      	adds	r3, #1
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	fbb2 f3f3 	udiv	r3, r2, r3
 800270e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002710:	69bb      	ldr	r3, [r7, #24]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3724      	adds	r7, #36	; 0x24
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
 8002724:	08008840 	.word	0x08008840
 8002728:	00f42400 	.word	0x00f42400
 800272c:	007a1200 	.word	0x007a1200

08002730 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <HAL_RCC_GetHCLKFreq+0x14>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000000 	.word	0x20000000

08002748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800274c:	f7ff fff0 	bl	8002730 <HAL_RCC_GetHCLKFreq>
 8002750:	4602      	mov	r2, r0
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	0a1b      	lsrs	r3, r3, #8
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	4904      	ldr	r1, [pc, #16]	; (8002770 <HAL_RCC_GetPCLK1Freq+0x28>)
 800275e:	5ccb      	ldrb	r3, [r1, r3]
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002768:	4618      	mov	r0, r3
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000
 8002770:	08008838 	.word	0x08008838

08002774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002778:	f7ff ffda 	bl	8002730 <HAL_RCC_GetHCLKFreq>
 800277c:	4602      	mov	r2, r0
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	0adb      	lsrs	r3, r3, #11
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	4904      	ldr	r1, [pc, #16]	; (800279c <HAL_RCC_GetPCLK2Freq+0x28>)
 800278a:	5ccb      	ldrb	r3, [r1, r3]
 800278c:	f003 031f 	and.w	r3, r3, #31
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002794:	4618      	mov	r0, r3
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40021000 	.word	0x40021000
 800279c:	08008838 	.word	0x08008838

080027a0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	220f      	movs	r2, #15
 80027ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80027b0:	4b12      	ldr	r3, [pc, #72]	; (80027fc <HAL_RCC_GetClockConfig+0x5c>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0203 	and.w	r2, r3, #3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <HAL_RCC_GetClockConfig+0x5c>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <HAL_RCC_GetClockConfig+0x5c>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <HAL_RCC_GetClockConfig+0x5c>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	08db      	lsrs	r3, r3, #3
 80027da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80027e2:	4b07      	ldr	r3, [pc, #28]	; (8002800 <HAL_RCC_GetClockConfig+0x60>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 020f 	and.w	r2, r3, #15
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	601a      	str	r2, [r3, #0]
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40021000 	.word	0x40021000
 8002800:	40022000 	.word	0x40022000

08002804 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800280c:	2300      	movs	r3, #0
 800280e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002810:	4b27      	ldr	r3, [pc, #156]	; (80028b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800281c:	f7ff f8d6 	bl	80019cc <HAL_PWREx_GetVoltageRange>
 8002820:	6178      	str	r0, [r7, #20]
 8002822:	e014      	b.n	800284e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002824:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002828:	4a21      	ldr	r2, [pc, #132]	; (80028b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800282a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282e:	6593      	str	r3, [r2, #88]	; 0x58
 8002830:	4b1f      	ldr	r3, [pc, #124]	; (80028b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800283c:	f7ff f8c6 	bl	80019cc <HAL_PWREx_GetVoltageRange>
 8002840:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002842:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002846:	4a1a      	ldr	r2, [pc, #104]	; (80028b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800284c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002854:	d10b      	bne.n	800286e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b80      	cmp	r3, #128	; 0x80
 800285a:	d913      	bls.n	8002884 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2ba0      	cmp	r3, #160	; 0xa0
 8002860:	d902      	bls.n	8002868 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002862:	2302      	movs	r3, #2
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	e00d      	b.n	8002884 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002868:	2301      	movs	r3, #1
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	e00a      	b.n	8002884 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b7f      	cmp	r3, #127	; 0x7f
 8002872:	d902      	bls.n	800287a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002874:	2302      	movs	r3, #2
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	e004      	b.n	8002884 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b70      	cmp	r3, #112	; 0x70
 800287e:	d101      	bne.n	8002884 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002880:	2301      	movs	r3, #1
 8002882:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 020f 	bic.w	r2, r3, #15
 800288c:	4909      	ldr	r1, [pc, #36]	; (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002894:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d001      	beq.n	80028a6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40022000 	.word	0x40022000

080028b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80028c2:	4b2d      	ldr	r3, [pc, #180]	; (8002978 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d118      	bne.n	8002900 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028ce:	4b2a      	ldr	r3, [pc, #168]	; (8002978 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d107      	bne.n	80028ea <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028da:	4b27      	ldr	r3, [pc, #156]	; (8002978 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	e005      	b.n	80028f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028ea:	4b23      	ldr	r3, [pc, #140]	; (8002978 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	091b      	lsrs	r3, r3, #4
 80028f0:	f003 030f 	and.w	r3, r3, #15
 80028f4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028f6:	4a21      	ldr	r2, [pc, #132]	; (800297c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fe:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002900:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d003      	beq.n	8002918 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b03      	cmp	r3, #3
 8002914:	d003      	beq.n	800291e <RCC_GetSysClockFreqFromPLLSource+0x66>
 8002916:	e005      	b.n	8002924 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002918:	4b19      	ldr	r3, [pc, #100]	; (8002980 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800291a:	613b      	str	r3, [r7, #16]
    break;
 800291c:	e005      	b.n	800292a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800291e:	4b19      	ldr	r3, [pc, #100]	; (8002984 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002920:	613b      	str	r3, [r7, #16]
    break;
 8002922:	e002      	b.n	800292a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	613b      	str	r3, [r7, #16]
    break;
 8002928:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800292a:	4b13      	ldr	r3, [pc, #76]	; (8002978 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	091b      	lsrs	r3, r3, #4
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	3301      	adds	r3, #1
 8002936:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002938:	4b0f      	ldr	r3, [pc, #60]	; (8002978 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	0a1b      	lsrs	r3, r3, #8
 800293e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	fb02 f203 	mul.w	r2, r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	fbb2 f3f3 	udiv	r3, r2, r3
 800294e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002950:	4b09      	ldr	r3, [pc, #36]	; (8002978 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	0e5b      	lsrs	r3, r3, #25
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	3301      	adds	r3, #1
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	fbb2 f3f3 	udiv	r3, r2, r3
 8002968:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800296a:	683b      	ldr	r3, [r7, #0]
}
 800296c:	4618      	mov	r0, r3
 800296e:	371c      	adds	r7, #28
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	40021000 	.word	0x40021000
 800297c:	08008840 	.word	0x08008840
 8002980:	00f42400 	.word	0x00f42400
 8002984:	007a1200 	.word	0x007a1200

08002988 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002990:	2300      	movs	r3, #0
 8002992:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002994:	2300      	movs	r3, #0
 8002996:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d040      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029a8:	2b80      	cmp	r3, #128	; 0x80
 80029aa:	d02a      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80029ac:	2b80      	cmp	r3, #128	; 0x80
 80029ae:	d825      	bhi.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80029b0:	2b60      	cmp	r3, #96	; 0x60
 80029b2:	d026      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80029b4:	2b60      	cmp	r3, #96	; 0x60
 80029b6:	d821      	bhi.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80029b8:	2b40      	cmp	r3, #64	; 0x40
 80029ba:	d006      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x42>
 80029bc:	2b40      	cmp	r3, #64	; 0x40
 80029be:	d81d      	bhi.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d009      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80029c4:	2b20      	cmp	r3, #32
 80029c6:	d010      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x62>
 80029c8:	e018      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029ca:	4b89      	ldr	r3, [pc, #548]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	4a88      	ldr	r2, [pc, #544]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029d6:	e015      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3304      	adds	r3, #4
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fb02 	bl	8002fe8 <RCCEx_PLLSAI1_Config>
 80029e4:	4603      	mov	r3, r0
 80029e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029e8:	e00c      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3320      	adds	r3, #32
 80029ee:	2100      	movs	r1, #0
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 fbed 	bl	80031d0 <RCCEx_PLLSAI2_Config>
 80029f6:	4603      	mov	r3, r0
 80029f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029fa:	e003      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	74fb      	strb	r3, [r7, #19]
      break;
 8002a00:	e000      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a04:	7cfb      	ldrb	r3, [r7, #19]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10b      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a0a:	4b79      	ldr	r3, [pc, #484]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a10:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a18:	4975      	ldr	r1, [pc, #468]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002a20:	e001      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a22:	7cfb      	ldrb	r3, [r7, #19]
 8002a24:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d047      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a3a:	d030      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a40:	d82a      	bhi.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a46:	d02a      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a4c:	d824      	bhi.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a52:	d008      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a58:	d81e      	bhi.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a62:	d010      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a64:	e018      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a66:	4b62      	ldr	r3, [pc, #392]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	4a61      	ldr	r2, [pc, #388]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a70:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a72:	e015      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3304      	adds	r3, #4
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fab4 	bl	8002fe8 <RCCEx_PLLSAI1_Config>
 8002a80:	4603      	mov	r3, r0
 8002a82:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a84:	e00c      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3320      	adds	r3, #32
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fb9f 	bl	80031d0 <RCCEx_PLLSAI2_Config>
 8002a92:	4603      	mov	r3, r0
 8002a94:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a96:	e003      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	74fb      	strb	r3, [r7, #19]
      break;
 8002a9c:	e000      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002a9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aa0:	7cfb      	ldrb	r3, [r7, #19]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10b      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002aa6:	4b52      	ldr	r3, [pc, #328]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002aa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002aac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab4:	494e      	ldr	r1, [pc, #312]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002abc:	e001      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002abe:	7cfb      	ldrb	r3, [r7, #19]
 8002ac0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 809f 	beq.w	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ad4:	4b46      	ldr	r3, [pc, #280]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00d      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aea:	4b41      	ldr	r3, [pc, #260]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aee:	4a40      	ldr	r2, [pc, #256]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af4:	6593      	str	r3, [r2, #88]	; 0x58
 8002af6:	4b3e      	ldr	r3, [pc, #248]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b02:	2301      	movs	r3, #1
 8002b04:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b06:	4b3b      	ldr	r3, [pc, #236]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a3a      	ldr	r2, [pc, #232]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b12:	f7fe f9ad 	bl	8000e70 <HAL_GetTick>
 8002b16:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b18:	e009      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1a:	f7fe f9a9 	bl	8000e70 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d902      	bls.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	74fb      	strb	r3, [r7, #19]
        break;
 8002b2c:	e005      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b2e:	4b31      	ldr	r3, [pc, #196]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0ef      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002b3a:	7cfb      	ldrb	r3, [r7, #19]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d15b      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b40:	4b2b      	ldr	r3, [pc, #172]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d01f      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d019      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b5e:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b68:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b6a:	4b21      	ldr	r3, [pc, #132]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b70:	4a1f      	ldr	r2, [pc, #124]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b80:	4a1b      	ldr	r2, [pc, #108]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b8a:	4a19      	ldr	r2, [pc, #100]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d016      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9c:	f7fe f968 	bl	8000e70 <HAL_GetTick>
 8002ba0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba2:	e00b      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba4:	f7fe f964 	bl	8000e70 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d902      	bls.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	74fb      	strb	r3, [r7, #19]
            break;
 8002bba:	e006      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0ec      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002bca:	7cfb      	ldrb	r3, [r7, #19]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10c      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bd0:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be0:	4903      	ldr	r1, [pc, #12]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002be8:	e008      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bea:	7cfb      	ldrb	r3, [r7, #19]
 8002bec:	74bb      	strb	r3, [r7, #18]
 8002bee:	e005      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf8:	7cfb      	ldrb	r3, [r7, #19]
 8002bfa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bfc:	7c7b      	ldrb	r3, [r7, #17]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d105      	bne.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c02:	4ba0      	ldr	r3, [pc, #640]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c06:	4a9f      	ldr	r2, [pc, #636]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c1a:	4b9a      	ldr	r3, [pc, #616]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c20:	f023 0203 	bic.w	r2, r3, #3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c28:	4996      	ldr	r1, [pc, #600]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00a      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c3c:	4b91      	ldr	r3, [pc, #580]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c42:	f023 020c 	bic.w	r2, r3, #12
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	498e      	ldr	r1, [pc, #568]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c5e:	4b89      	ldr	r3, [pc, #548]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6c:	4985      	ldr	r1, [pc, #532]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c80:	4b80      	ldr	r3, [pc, #512]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c8e:	497d      	ldr	r1, [pc, #500]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ca2:	4b78      	ldr	r3, [pc, #480]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb0:	4974      	ldr	r1, [pc, #464]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0320 	and.w	r3, r3, #32
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cc4:	4b6f      	ldr	r3, [pc, #444]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd2:	496c      	ldr	r1, [pc, #432]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ce6:	4b67      	ldr	r3, [pc, #412]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cf4:	4963      	ldr	r1, [pc, #396]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d08:	4b5e      	ldr	r3, [pc, #376]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d16:	495b      	ldr	r1, [pc, #364]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d2a:	4b56      	ldr	r3, [pc, #344]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d38:	4952      	ldr	r1, [pc, #328]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d4c:	4b4d      	ldr	r3, [pc, #308]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5a:	494a      	ldr	r1, [pc, #296]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d6e:	4b45      	ldr	r3, [pc, #276]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7c:	4941      	ldr	r1, [pc, #260]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d90:	4b3c      	ldr	r3, [pc, #240]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d96:	f023 0203 	bic.w	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d9e:	4939      	ldr	r1, [pc, #228]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d028      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002db2:	4b34      	ldr	r3, [pc, #208]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc0:	4930      	ldr	r1, [pc, #192]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dd0:	d106      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dd2:	4b2c      	ldr	r3, [pc, #176]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	4a2b      	ldr	r2, [pc, #172]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ddc:	60d3      	str	r3, [r2, #12]
 8002dde:	e011      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3304      	adds	r3, #4
 8002dee:	2101      	movs	r1, #1
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 f8f9 	bl	8002fe8 <RCCEx_PLLSAI1_Config>
 8002df6:	4603      	mov	r3, r0
 8002df8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002dfa:	7cfb      	ldrb	r3, [r7, #19]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002e00:	7cfb      	ldrb	r3, [r7, #19]
 8002e02:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d04d      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e18:	d108      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002e1a:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e20:	4a18      	ldr	r2, [pc, #96]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e26:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002e2a:	e012      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002e2c:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e32:	4a14      	ldr	r2, [pc, #80]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e38:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002e3c:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e4a:	490e      	ldr	r1, [pc, #56]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e5a:	d106      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e5c:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4a08      	ldr	r2, [pc, #32]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e66:	60d3      	str	r3, [r2, #12]
 8002e68:	e020      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e72:	d109      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e74:	4b03      	ldr	r3, [pc, #12]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	4a02      	ldr	r2, [pc, #8]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7e:	60d3      	str	r3, [r2, #12]
 8002e80:	e014      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e90:	d10c      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3304      	adds	r3, #4
 8002e96:	2101      	movs	r1, #1
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 f8a5 	bl	8002fe8 <RCCEx_PLLSAI1_Config>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ea2:	7cfb      	ldrb	r3, [r7, #19]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002ea8:	7cfb      	ldrb	r3, [r7, #19]
 8002eaa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d028      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002eb8:	4b4a      	ldr	r3, [pc, #296]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec6:	4947      	ldr	r1, [pc, #284]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ed6:	d106      	bne.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ed8:	4b42      	ldr	r3, [pc, #264]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	4a41      	ldr	r2, [pc, #260]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ee2:	60d3      	str	r3, [r2, #12]
 8002ee4:	e011      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002eee:	d10c      	bne.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 f876 	bl	8002fe8 <RCCEx_PLLSAI1_Config>
 8002efc:	4603      	mov	r3, r0
 8002efe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f00:	7cfb      	ldrb	r3, [r7, #19]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002f06:	7cfb      	ldrb	r3, [r7, #19]
 8002f08:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d01e      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f16:	4b33      	ldr	r3, [pc, #204]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f26:	492f      	ldr	r1, [pc, #188]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	2102      	movs	r1, #2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 f851 	bl	8002fe8 <RCCEx_PLLSAI1_Config>
 8002f46:	4603      	mov	r3, r0
 8002f48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f4a:	7cfb      	ldrb	r3, [r7, #19]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002f50:	7cfb      	ldrb	r3, [r7, #19]
 8002f52:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00b      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f60:	4b20      	ldr	r3, [pc, #128]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f66:	f023 0204 	bic.w	r2, r3, #4
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f70:	491c      	ldr	r1, [pc, #112]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00b      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f84:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f8a:	f023 0218 	bic.w	r2, r3, #24
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f94:	4913      	ldr	r1, [pc, #76]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d017      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002fa8:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002faa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fb8:	490a      	ldr	r1, [pc, #40]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fca:	d105      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fcc:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	4a04      	ldr	r2, [pc, #16]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fd6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fd8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40021000 	.word	0x40021000

08002fe8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ff6:	4b72      	ldr	r3, [pc, #456]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00e      	beq.n	8003020 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003002:	4b6f      	ldr	r3, [pc, #444]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f003 0203 	and.w	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d103      	bne.n	800301a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
       ||
 8003016:	2b00      	cmp	r3, #0
 8003018:	d142      	bne.n	80030a0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	73fb      	strb	r3, [r7, #15]
 800301e:	e03f      	b.n	80030a0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b03      	cmp	r3, #3
 8003026:	d018      	beq.n	800305a <RCCEx_PLLSAI1_Config+0x72>
 8003028:	2b03      	cmp	r3, #3
 800302a:	d825      	bhi.n	8003078 <RCCEx_PLLSAI1_Config+0x90>
 800302c:	2b01      	cmp	r3, #1
 800302e:	d002      	beq.n	8003036 <RCCEx_PLLSAI1_Config+0x4e>
 8003030:	2b02      	cmp	r3, #2
 8003032:	d009      	beq.n	8003048 <RCCEx_PLLSAI1_Config+0x60>
 8003034:	e020      	b.n	8003078 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003036:	4b62      	ldr	r3, [pc, #392]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d11d      	bne.n	800307e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003046:	e01a      	b.n	800307e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003048:	4b5d      	ldr	r3, [pc, #372]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003050:	2b00      	cmp	r3, #0
 8003052:	d116      	bne.n	8003082 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003058:	e013      	b.n	8003082 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800305a:	4b59      	ldr	r3, [pc, #356]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10f      	bne.n	8003086 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003066:	4b56      	ldr	r3, [pc, #344]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d109      	bne.n	8003086 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003076:	e006      	b.n	8003086 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
      break;
 800307c:	e004      	b.n	8003088 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800307e:	bf00      	nop
 8003080:	e002      	b.n	8003088 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003082:	bf00      	nop
 8003084:	e000      	b.n	8003088 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003086:	bf00      	nop
    }

    if(status == HAL_OK)
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d108      	bne.n	80030a0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800308e:	4b4c      	ldr	r3, [pc, #304]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f023 0203 	bic.w	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4949      	ldr	r1, [pc, #292]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800309c:	4313      	orrs	r3, r2
 800309e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f040 8086 	bne.w	80031b4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030a8:	4b45      	ldr	r3, [pc, #276]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a44      	ldr	r2, [pc, #272]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030b4:	f7fd fedc 	bl	8000e70 <HAL_GetTick>
 80030b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030ba:	e009      	b.n	80030d0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030bc:	f7fd fed8 	bl	8000e70 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d902      	bls.n	80030d0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	73fb      	strb	r3, [r7, #15]
        break;
 80030ce:	e005      	b.n	80030dc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030d0:	4b3b      	ldr	r3, [pc, #236]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1ef      	bne.n	80030bc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d168      	bne.n	80031b4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d113      	bne.n	8003110 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030e8:	4b35      	ldr	r3, [pc, #212]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	4b35      	ldr	r3, [pc, #212]	; (80031c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6892      	ldr	r2, [r2, #8]
 80030f4:	0211      	lsls	r1, r2, #8
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68d2      	ldr	r2, [r2, #12]
 80030fa:	06d2      	lsls	r2, r2, #27
 80030fc:	4311      	orrs	r1, r2
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6852      	ldr	r2, [r2, #4]
 8003102:	3a01      	subs	r2, #1
 8003104:	0112      	lsls	r2, r2, #4
 8003106:	430a      	orrs	r2, r1
 8003108:	492d      	ldr	r1, [pc, #180]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800310a:	4313      	orrs	r3, r2
 800310c:	610b      	str	r3, [r1, #16]
 800310e:	e02d      	b.n	800316c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d115      	bne.n	8003142 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003116:	4b2a      	ldr	r3, [pc, #168]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003118:	691a      	ldr	r2, [r3, #16]
 800311a:	4b2b      	ldr	r3, [pc, #172]	; (80031c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800311c:	4013      	ands	r3, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6892      	ldr	r2, [r2, #8]
 8003122:	0211      	lsls	r1, r2, #8
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6912      	ldr	r2, [r2, #16]
 8003128:	0852      	lsrs	r2, r2, #1
 800312a:	3a01      	subs	r2, #1
 800312c:	0552      	lsls	r2, r2, #21
 800312e:	4311      	orrs	r1, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6852      	ldr	r2, [r2, #4]
 8003134:	3a01      	subs	r2, #1
 8003136:	0112      	lsls	r2, r2, #4
 8003138:	430a      	orrs	r2, r1
 800313a:	4921      	ldr	r1, [pc, #132]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800313c:	4313      	orrs	r3, r2
 800313e:	610b      	str	r3, [r1, #16]
 8003140:	e014      	b.n	800316c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003142:	4b1f      	ldr	r3, [pc, #124]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	4b21      	ldr	r3, [pc, #132]	; (80031cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003148:	4013      	ands	r3, r2
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6892      	ldr	r2, [r2, #8]
 800314e:	0211      	lsls	r1, r2, #8
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6952      	ldr	r2, [r2, #20]
 8003154:	0852      	lsrs	r2, r2, #1
 8003156:	3a01      	subs	r2, #1
 8003158:	0652      	lsls	r2, r2, #25
 800315a:	4311      	orrs	r1, r2
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6852      	ldr	r2, [r2, #4]
 8003160:	3a01      	subs	r2, #1
 8003162:	0112      	lsls	r2, r2, #4
 8003164:	430a      	orrs	r2, r1
 8003166:	4916      	ldr	r1, [pc, #88]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003168:	4313      	orrs	r3, r2
 800316a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800316c:	4b14      	ldr	r3, [pc, #80]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a13      	ldr	r2, [pc, #76]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003172:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003176:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003178:	f7fd fe7a 	bl	8000e70 <HAL_GetTick>
 800317c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800317e:	e009      	b.n	8003194 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003180:	f7fd fe76 	bl	8000e70 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d902      	bls.n	8003194 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	73fb      	strb	r3, [r7, #15]
          break;
 8003192:	e005      	b.n	80031a0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003194:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0ef      	beq.n	8003180 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d106      	bne.n	80031b4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	4904      	ldr	r1, [pc, #16]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000
 80031c4:	07ff800f 	.word	0x07ff800f
 80031c8:	ff9f800f 	.word	0xff9f800f
 80031cc:	f9ff800f 	.word	0xf9ff800f

080031d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031de:	4b72      	ldr	r3, [pc, #456]	; (80033a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00e      	beq.n	8003208 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031ea:	4b6f      	ldr	r3, [pc, #444]	; (80033a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0203 	and.w	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d103      	bne.n	8003202 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
       ||
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d142      	bne.n	8003288 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	73fb      	strb	r3, [r7, #15]
 8003206:	e03f      	b.n	8003288 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b03      	cmp	r3, #3
 800320e:	d018      	beq.n	8003242 <RCCEx_PLLSAI2_Config+0x72>
 8003210:	2b03      	cmp	r3, #3
 8003212:	d825      	bhi.n	8003260 <RCCEx_PLLSAI2_Config+0x90>
 8003214:	2b01      	cmp	r3, #1
 8003216:	d002      	beq.n	800321e <RCCEx_PLLSAI2_Config+0x4e>
 8003218:	2b02      	cmp	r3, #2
 800321a:	d009      	beq.n	8003230 <RCCEx_PLLSAI2_Config+0x60>
 800321c:	e020      	b.n	8003260 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800321e:	4b62      	ldr	r3, [pc, #392]	; (80033a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d11d      	bne.n	8003266 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800322e:	e01a      	b.n	8003266 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003230:	4b5d      	ldr	r3, [pc, #372]	; (80033a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003238:	2b00      	cmp	r3, #0
 800323a:	d116      	bne.n	800326a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003240:	e013      	b.n	800326a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003242:	4b59      	ldr	r3, [pc, #356]	; (80033a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10f      	bne.n	800326e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800324e:	4b56      	ldr	r3, [pc, #344]	; (80033a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800325e:	e006      	b.n	800326e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
      break;
 8003264:	e004      	b.n	8003270 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003266:	bf00      	nop
 8003268:	e002      	b.n	8003270 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800326a:	bf00      	nop
 800326c:	e000      	b.n	8003270 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800326e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d108      	bne.n	8003288 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003276:	4b4c      	ldr	r3, [pc, #304]	; (80033a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f023 0203 	bic.w	r2, r3, #3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4949      	ldr	r1, [pc, #292]	; (80033a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003284:	4313      	orrs	r3, r2
 8003286:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f040 8086 	bne.w	800339c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003290:	4b45      	ldr	r3, [pc, #276]	; (80033a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a44      	ldr	r2, [pc, #272]	; (80033a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800329a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800329c:	f7fd fde8 	bl	8000e70 <HAL_GetTick>
 80032a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032a2:	e009      	b.n	80032b8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032a4:	f7fd fde4 	bl	8000e70 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d902      	bls.n	80032b8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	73fb      	strb	r3, [r7, #15]
        break;
 80032b6:	e005      	b.n	80032c4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032b8:	4b3b      	ldr	r3, [pc, #236]	; (80033a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1ef      	bne.n	80032a4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d168      	bne.n	800339c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d113      	bne.n	80032f8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032d0:	4b35      	ldr	r3, [pc, #212]	; (80033a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032d2:	695a      	ldr	r2, [r3, #20]
 80032d4:	4b35      	ldr	r3, [pc, #212]	; (80033ac <RCCEx_PLLSAI2_Config+0x1dc>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6892      	ldr	r2, [r2, #8]
 80032dc:	0211      	lsls	r1, r2, #8
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68d2      	ldr	r2, [r2, #12]
 80032e2:	06d2      	lsls	r2, r2, #27
 80032e4:	4311      	orrs	r1, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6852      	ldr	r2, [r2, #4]
 80032ea:	3a01      	subs	r2, #1
 80032ec:	0112      	lsls	r2, r2, #4
 80032ee:	430a      	orrs	r2, r1
 80032f0:	492d      	ldr	r1, [pc, #180]	; (80033a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	614b      	str	r3, [r1, #20]
 80032f6:	e02d      	b.n	8003354 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d115      	bne.n	800332a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032fe:	4b2a      	ldr	r3, [pc, #168]	; (80033a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	4b2b      	ldr	r3, [pc, #172]	; (80033b0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003304:	4013      	ands	r3, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6892      	ldr	r2, [r2, #8]
 800330a:	0211      	lsls	r1, r2, #8
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6912      	ldr	r2, [r2, #16]
 8003310:	0852      	lsrs	r2, r2, #1
 8003312:	3a01      	subs	r2, #1
 8003314:	0552      	lsls	r2, r2, #21
 8003316:	4311      	orrs	r1, r2
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6852      	ldr	r2, [r2, #4]
 800331c:	3a01      	subs	r2, #1
 800331e:	0112      	lsls	r2, r2, #4
 8003320:	430a      	orrs	r2, r1
 8003322:	4921      	ldr	r1, [pc, #132]	; (80033a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003324:	4313      	orrs	r3, r2
 8003326:	614b      	str	r3, [r1, #20]
 8003328:	e014      	b.n	8003354 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800332a:	4b1f      	ldr	r3, [pc, #124]	; (80033a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800332c:	695a      	ldr	r2, [r3, #20]
 800332e:	4b21      	ldr	r3, [pc, #132]	; (80033b4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003330:	4013      	ands	r3, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6892      	ldr	r2, [r2, #8]
 8003336:	0211      	lsls	r1, r2, #8
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6952      	ldr	r2, [r2, #20]
 800333c:	0852      	lsrs	r2, r2, #1
 800333e:	3a01      	subs	r2, #1
 8003340:	0652      	lsls	r2, r2, #25
 8003342:	4311      	orrs	r1, r2
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6852      	ldr	r2, [r2, #4]
 8003348:	3a01      	subs	r2, #1
 800334a:	0112      	lsls	r2, r2, #4
 800334c:	430a      	orrs	r2, r1
 800334e:	4916      	ldr	r1, [pc, #88]	; (80033a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003350:	4313      	orrs	r3, r2
 8003352:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003354:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a13      	ldr	r2, [pc, #76]	; (80033a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800335a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003360:	f7fd fd86 	bl	8000e70 <HAL_GetTick>
 8003364:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003366:	e009      	b.n	800337c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003368:	f7fd fd82 	bl	8000e70 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d902      	bls.n	800337c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	73fb      	strb	r3, [r7, #15]
          break;
 800337a:	e005      	b.n	8003388 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800337c:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0ef      	beq.n	8003368 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	4904      	ldr	r1, [pc, #16]	; (80033a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003398:	4313      	orrs	r3, r2
 800339a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800339c:	7bfb      	ldrb	r3, [r7, #15]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40021000 	.word	0x40021000
 80033ac:	07ff800f 	.word	0x07ff800f
 80033b0:	ff9f800f 	.word	0xff9f800f
 80033b4:	f9ff800f 	.word	0xf9ff800f

080033b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e049      	b.n	800345e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f841 	bl	8003466 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3304      	adds	r3, #4
 80033f4:	4619      	mov	r1, r3
 80033f6:	4610      	mov	r0, r2
 80033f8:	f000 f9f8 	bl	80037ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b01      	cmp	r3, #1
 800348e:	d001      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e04f      	b.n	8003534 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a23      	ldr	r2, [pc, #140]	; (8003540 <HAL_TIM_Base_Start_IT+0xc4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01d      	beq.n	80034f2 <HAL_TIM_Base_Start_IT+0x76>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034be:	d018      	beq.n	80034f2 <HAL_TIM_Base_Start_IT+0x76>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1f      	ldr	r2, [pc, #124]	; (8003544 <HAL_TIM_Base_Start_IT+0xc8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <HAL_TIM_Base_Start_IT+0x76>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1e      	ldr	r2, [pc, #120]	; (8003548 <HAL_TIM_Base_Start_IT+0xcc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00e      	beq.n	80034f2 <HAL_TIM_Base_Start_IT+0x76>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a1c      	ldr	r2, [pc, #112]	; (800354c <HAL_TIM_Base_Start_IT+0xd0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d009      	beq.n	80034f2 <HAL_TIM_Base_Start_IT+0x76>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a1b      	ldr	r2, [pc, #108]	; (8003550 <HAL_TIM_Base_Start_IT+0xd4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d004      	beq.n	80034f2 <HAL_TIM_Base_Start_IT+0x76>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a19      	ldr	r2, [pc, #100]	; (8003554 <HAL_TIM_Base_Start_IT+0xd8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d115      	bne.n	800351e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	4b17      	ldr	r3, [pc, #92]	; (8003558 <HAL_TIM_Base_Start_IT+0xdc>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2b06      	cmp	r3, #6
 8003502:	d015      	beq.n	8003530 <HAL_TIM_Base_Start_IT+0xb4>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800350a:	d011      	beq.n	8003530 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800351c:	e008      	b.n	8003530 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0201 	orr.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	e000      	b.n	8003532 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003530:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	40012c00 	.word	0x40012c00
 8003544:	40000400 	.word	0x40000400
 8003548:	40000800 	.word	0x40000800
 800354c:	40000c00 	.word	0x40000c00
 8003550:	40013400 	.word	0x40013400
 8003554:	40014000 	.word	0x40014000
 8003558:	00010007 	.word	0x00010007

0800355c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b02      	cmp	r3, #2
 8003570:	d122      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b02      	cmp	r3, #2
 800357e:	d11b      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0202 	mvn.w	r2, #2
 8003588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f905 	bl	80037ae <HAL_TIM_IC_CaptureCallback>
 80035a4:	e005      	b.n	80035b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f8f7 	bl	800379a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f908 	bl	80037c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d122      	bne.n	800360c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d11b      	bne.n	800360c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f06f 0204 	mvn.w	r2, #4
 80035dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2202      	movs	r2, #2
 80035e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f8db 	bl	80037ae <HAL_TIM_IC_CaptureCallback>
 80035f8:	e005      	b.n	8003606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f8cd 	bl	800379a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f8de 	bl	80037c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b08      	cmp	r3, #8
 8003618:	d122      	bne.n	8003660 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b08      	cmp	r3, #8
 8003626:	d11b      	bne.n	8003660 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0208 	mvn.w	r2, #8
 8003630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2204      	movs	r2, #4
 8003636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f8b1 	bl	80037ae <HAL_TIM_IC_CaptureCallback>
 800364c:	e005      	b.n	800365a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f8a3 	bl	800379a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f8b4 	bl	80037c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f003 0310 	and.w	r3, r3, #16
 800366a:	2b10      	cmp	r3, #16
 800366c:	d122      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0310 	and.w	r3, r3, #16
 8003678:	2b10      	cmp	r3, #16
 800367a:	d11b      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0210 	mvn.w	r2, #16
 8003684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2208      	movs	r2, #8
 800368a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f887 	bl	80037ae <HAL_TIM_IC_CaptureCallback>
 80036a0:	e005      	b.n	80036ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f879 	bl	800379a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f88a 	bl	80037c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d10e      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d107      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0201 	mvn.w	r2, #1
 80036d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fd f9aa 	bl	8000a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ea:	2b80      	cmp	r3, #128	; 0x80
 80036ec:	d10e      	bne.n	800370c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f8:	2b80      	cmp	r3, #128	; 0x80
 80036fa:	d107      	bne.n	800370c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f914 	bl	8003934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800371a:	d10e      	bne.n	800373a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003726:	2b80      	cmp	r3, #128	; 0x80
 8003728:	d107      	bne.n	800373a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f907 	bl	8003948 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003744:	2b40      	cmp	r3, #64	; 0x40
 8003746:	d10e      	bne.n	8003766 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003752:	2b40      	cmp	r3, #64	; 0x40
 8003754:	d107      	bne.n	8003766 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800375e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f838 	bl	80037d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b20      	cmp	r3, #32
 8003772:	d10e      	bne.n	8003792 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f003 0320 	and.w	r3, r3, #32
 800377e:	2b20      	cmp	r3, #32
 8003780:	d107      	bne.n	8003792 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f06f 0220 	mvn.w	r2, #32
 800378a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f8c7 	bl	8003920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
	...

080037ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a40      	ldr	r2, [pc, #256]	; (8003900 <TIM_Base_SetConfig+0x114>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d013      	beq.n	800382c <TIM_Base_SetConfig+0x40>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380a:	d00f      	beq.n	800382c <TIM_Base_SetConfig+0x40>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a3d      	ldr	r2, [pc, #244]	; (8003904 <TIM_Base_SetConfig+0x118>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d00b      	beq.n	800382c <TIM_Base_SetConfig+0x40>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a3c      	ldr	r2, [pc, #240]	; (8003908 <TIM_Base_SetConfig+0x11c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d007      	beq.n	800382c <TIM_Base_SetConfig+0x40>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a3b      	ldr	r2, [pc, #236]	; (800390c <TIM_Base_SetConfig+0x120>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d003      	beq.n	800382c <TIM_Base_SetConfig+0x40>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a3a      	ldr	r2, [pc, #232]	; (8003910 <TIM_Base_SetConfig+0x124>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d108      	bne.n	800383e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a2f      	ldr	r2, [pc, #188]	; (8003900 <TIM_Base_SetConfig+0x114>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d01f      	beq.n	8003886 <TIM_Base_SetConfig+0x9a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384c:	d01b      	beq.n	8003886 <TIM_Base_SetConfig+0x9a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a2c      	ldr	r2, [pc, #176]	; (8003904 <TIM_Base_SetConfig+0x118>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d017      	beq.n	8003886 <TIM_Base_SetConfig+0x9a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a2b      	ldr	r2, [pc, #172]	; (8003908 <TIM_Base_SetConfig+0x11c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d013      	beq.n	8003886 <TIM_Base_SetConfig+0x9a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a2a      	ldr	r2, [pc, #168]	; (800390c <TIM_Base_SetConfig+0x120>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00f      	beq.n	8003886 <TIM_Base_SetConfig+0x9a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a29      	ldr	r2, [pc, #164]	; (8003910 <TIM_Base_SetConfig+0x124>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00b      	beq.n	8003886 <TIM_Base_SetConfig+0x9a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a28      	ldr	r2, [pc, #160]	; (8003914 <TIM_Base_SetConfig+0x128>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d007      	beq.n	8003886 <TIM_Base_SetConfig+0x9a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a27      	ldr	r2, [pc, #156]	; (8003918 <TIM_Base_SetConfig+0x12c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d003      	beq.n	8003886 <TIM_Base_SetConfig+0x9a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a26      	ldr	r2, [pc, #152]	; (800391c <TIM_Base_SetConfig+0x130>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d108      	bne.n	8003898 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a10      	ldr	r2, [pc, #64]	; (8003900 <TIM_Base_SetConfig+0x114>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00f      	beq.n	80038e4 <TIM_Base_SetConfig+0xf8>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a12      	ldr	r2, [pc, #72]	; (8003910 <TIM_Base_SetConfig+0x124>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00b      	beq.n	80038e4 <TIM_Base_SetConfig+0xf8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a11      	ldr	r2, [pc, #68]	; (8003914 <TIM_Base_SetConfig+0x128>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d007      	beq.n	80038e4 <TIM_Base_SetConfig+0xf8>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a10      	ldr	r2, [pc, #64]	; (8003918 <TIM_Base_SetConfig+0x12c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d003      	beq.n	80038e4 <TIM_Base_SetConfig+0xf8>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a0f      	ldr	r2, [pc, #60]	; (800391c <TIM_Base_SetConfig+0x130>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d103      	bne.n	80038ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	615a      	str	r2, [r3, #20]
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40012c00 	.word	0x40012c00
 8003904:	40000400 	.word	0x40000400
 8003908:	40000800 	.word	0x40000800
 800390c:	40000c00 	.word	0x40000c00
 8003910:	40013400 	.word	0x40013400
 8003914:	40014000 	.word	0x40014000
 8003918:	40014400 	.word	0x40014400
 800391c:	40014800 	.word	0x40014800

08003920 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e042      	b.n	80039f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003974:	2b00      	cmp	r3, #0
 8003976:	d106      	bne.n	8003986 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7fd f897 	bl	8000ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2224      	movs	r2, #36	; 0x24
 800398a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0201 	bic.w	r2, r2, #1
 800399c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 fbae 	bl	8004100 <UART_SetConfig>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e022      	b.n	80039f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fe6c 	bl	8004694 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fef3 	bl	80047d8 <UART_CheckIdleState>
 80039f2:	4603      	mov	r3, r0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	; 0x28
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	f040 8084 	bne.w	8003b20 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <HAL_UART_Transmit+0x28>
 8003a1e:	88fb      	ldrh	r3, [r7, #6]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e07c      	b.n	8003b22 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_UART_Transmit+0x3a>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e075      	b.n	8003b22 <HAL_UART_Transmit+0x126>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2221      	movs	r2, #33	; 0x21
 8003a4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a4e:	f7fd fa0f 	bl	8000e70 <HAL_GetTick>
 8003a52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	88fa      	ldrh	r2, [r7, #6]
 8003a58:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	88fa      	ldrh	r2, [r7, #6]
 8003a60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6c:	d108      	bne.n	8003a80 <HAL_UART_Transmit+0x84>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d104      	bne.n	8003a80 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	e003      	b.n	8003a88 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003a90:	e02d      	b.n	8003aee <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2180      	movs	r1, #128	; 0x80
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 fee6 	bl	800486e <UART_WaitOnFlagUntilTimeout>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e03a      	b.n	8003b22 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10b      	bne.n	8003aca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	881a      	ldrh	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003abe:	b292      	uxth	r2, r2
 8003ac0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	3302      	adds	r3, #2
 8003ac6:	61bb      	str	r3, [r7, #24]
 8003ac8:	e008      	b.n	8003adc <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	781a      	ldrb	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	b292      	uxth	r2, r2
 8003ad4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1cb      	bne.n	8003a92 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2200      	movs	r2, #0
 8003b02:	2140      	movs	r1, #64	; 0x40
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 feb2 	bl	800486e <UART_WaitOnFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e006      	b.n	8003b22 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e000      	b.n	8003b22 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003b20:	2302      	movs	r3, #2
  }
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3720      	adds	r7, #32
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	4613      	mov	r3, r2
 8003b38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d131      	bne.n	8003ba8 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <HAL_UART_Receive_IT+0x24>
 8003b4a:	88fb      	ldrh	r3, [r7, #6]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e02a      	b.n	8003baa <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_UART_Receive_IT+0x36>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e023      	b.n	8003baa <HAL_UART_Receive_IT+0x7e>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a0f      	ldr	r2, [pc, #60]	; (8003bb4 <HAL_UART_Receive_IT+0x88>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00e      	beq.n	8003b98 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d007      	beq.n	8003b98 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003b96:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003b98:	88fb      	ldrh	r3, [r7, #6]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 fee6 	bl	8004970 <UART_Start_Receive_IT>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	e000      	b.n	8003baa <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003ba8:	2302      	movs	r3, #2
  }
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40008000 	.word	0x40008000

08003bb8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bcc:	2b20      	cmp	r3, #32
 8003bce:	d131      	bne.n	8003c34 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_UART_Receive_DMA+0x24>
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e02a      	b.n	8003c36 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_UART_Receive_DMA+0x36>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e023      	b.n	8003c36 <HAL_UART_Receive_DMA+0x7e>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a0f      	ldr	r2, [pc, #60]	; (8003c40 <HAL_UART_Receive_DMA+0x88>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00e      	beq.n	8003c24 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d007      	beq.n	8003c24 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003c22:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003c24:	88fb      	ldrh	r3, [r7, #6]
 8003c26:	461a      	mov	r2, r3
 8003c28:	68b9      	ldr	r1, [r7, #8]
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 ff5e 	bl	8004aec <UART_Start_Receive_DMA>
 8003c30:	4603      	mov	r3, r0
 8003c32:	e000      	b.n	8003c36 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003c34:	2302      	movs	r3, #2
  }
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40008000 	.word	0x40008000

08003c44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d118      	bne.n	8003ca6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d013      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d104      	bne.n	8003c92 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x62>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 81fb 	beq.w	8004092 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	4798      	blx	r3
      }
      return;
 8003ca4:	e1f5      	b.n	8004092 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 80ef 	beq.w	8003e8c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4b73      	ldr	r3, [pc, #460]	; (8003e80 <HAL_UART_IRQHandler+0x23c>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d105      	bne.n	8003cc4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4b72      	ldr	r3, [pc, #456]	; (8003e84 <HAL_UART_IRQHandler+0x240>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 80e4 	beq.w	8003e8c <HAL_UART_IRQHandler+0x248>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d010      	beq.n	8003cf0 <HAL_UART_IRQHandler+0xac>
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00b      	beq.n	8003cf0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ce6:	f043 0201 	orr.w	r2, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d010      	beq.n	8003d1c <HAL_UART_IRQHandler+0xd8>
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00b      	beq.n	8003d1c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d12:	f043 0204 	orr.w	r2, r3, #4
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d010      	beq.n	8003d48 <HAL_UART_IRQHandler+0x104>
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00b      	beq.n	8003d48 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2204      	movs	r2, #4
 8003d36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d3e:	f043 0202 	orr.w	r2, r3, #2
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d015      	beq.n	8003d7e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d104      	bne.n	8003d66 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4b48      	ldr	r3, [pc, #288]	; (8003e80 <HAL_UART_IRQHandler+0x23c>)
 8003d60:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00b      	beq.n	8003d7e <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2208      	movs	r2, #8
 8003d6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d74:	f043 0208 	orr.w	r2, r3, #8
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d011      	beq.n	8003dac <HAL_UART_IRQHandler+0x168>
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00c      	beq.n	8003dac <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003da2:	f043 0220 	orr.w	r2, r3, #32
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 816f 	beq.w	8004096 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d011      	beq.n	8003de6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d104      	bne.n	8003dd6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d007      	beq.n	8003de6 <HAL_UART_IRQHandler+0x1a2>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dec:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df8:	2b40      	cmp	r3, #64	; 0x40
 8003dfa:	d004      	beq.n	8003e06 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d031      	beq.n	8003e6a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 fefc 	bl	8004c04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e16:	2b40      	cmp	r3, #64	; 0x40
 8003e18:	d123      	bne.n	8003e62 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e28:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d013      	beq.n	8003e5a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e36:	4a14      	ldr	r2, [pc, #80]	; (8003e88 <HAL_UART_IRQHandler+0x244>)
 8003e38:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fd fa83 	bl	800134a <HAL_DMA_Abort_IT>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d017      	beq.n	8003e7a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003e54:	4610      	mov	r0, r2
 8003e56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e58:	e00f      	b.n	8003e7a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f93a 	bl	80040d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e60:	e00b      	b.n	8003e7a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f936 	bl	80040d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e68:	e007      	b.n	8003e7a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f932 	bl	80040d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003e78:	e10d      	b.n	8004096 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e7a:	bf00      	nop
    return;
 8003e7c:	e10b      	b.n	8004096 <HAL_UART_IRQHandler+0x452>
 8003e7e:	bf00      	nop
 8003e80:	10000001 	.word	0x10000001
 8003e84:	04000120 	.word	0x04000120
 8003e88:	08004dbb 	.word	0x08004dbb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	f040 80ab 	bne.w	8003fec <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	f003 0310 	and.w	r3, r3, #16
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 80a5 	beq.w	8003fec <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 809f 	beq.w	8003fec <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2210      	movs	r2, #16
 8003eb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	d155      	bne.n	8003f70 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003ece:	893b      	ldrh	r3, [r7, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 80e2 	beq.w	800409a <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003edc:	893a      	ldrh	r2, [r7, #8]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	f080 80db 	bcs.w	800409a <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	893a      	ldrh	r2, [r7, #8]
 8003ee8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d12b      	bne.n	8003f54 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f0a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0201 	bic.w	r2, r2, #1
 8003f1a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f2a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0210 	bic.w	r2, r2, #16
 8003f48:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fd f99f 	bl	8001292 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	4619      	mov	r1, r3
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f8bd 	bl	80040e8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f6e:	e094      	b.n	800409a <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 8087 	beq.w	800409e <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8003f90:	897b      	ldrh	r3, [r7, #10]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 8083 	beq.w	800409e <HAL_UART_IRQHandler+0x45a>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003fa6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6812      	ldr	r2, [r2, #0]
 8003fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	f023 0301 	bic.w	r3, r3, #1
 8003fba:	6093      	str	r3, [r2, #8]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0210 	bic.w	r2, r2, #16
 8003fde:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fe0:	897b      	ldrh	r3, [r7, #10]
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f87f 	bl	80040e8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003fea:	e058      	b.n	800409e <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00d      	beq.n	8004012 <HAL_UART_IRQHandler+0x3ce>
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004008:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f001 fa53 	bl	80054b6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004010:	e048      	b.n	80040a4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004018:	2b00      	cmp	r3, #0
 800401a:	d012      	beq.n	8004042 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004022:	2b00      	cmp	r3, #0
 8004024:	d104      	bne.n	8004030 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d008      	beq.n	8004042 <HAL_UART_IRQHandler+0x3fe>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004034:	2b00      	cmp	r3, #0
 8004036:	d034      	beq.n	80040a2 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	4798      	blx	r3
    }
    return;
 8004040:	e02f      	b.n	80040a2 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <HAL_UART_IRQHandler+0x41a>
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fec5 	bl	8004de6 <UART_EndTransmit_IT>
    return;
 800405c:	e022      	b.n	80040a4 <HAL_UART_IRQHandler+0x460>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d008      	beq.n	800407a <HAL_UART_IRQHandler+0x436>
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f001 fa33 	bl	80054de <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004078:	e014      	b.n	80040a4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00f      	beq.n	80040a4 <HAL_UART_IRQHandler+0x460>
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	2b00      	cmp	r3, #0
 8004088:	da0c      	bge.n	80040a4 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f001 fa1d 	bl	80054ca <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004090:	e008      	b.n	80040a4 <HAL_UART_IRQHandler+0x460>
      return;
 8004092:	bf00      	nop
 8004094:	e006      	b.n	80040a4 <HAL_UART_IRQHandler+0x460>
    return;
 8004096:	bf00      	nop
 8004098:	e004      	b.n	80040a4 <HAL_UART_IRQHandler+0x460>
      return;
 800409a:	bf00      	nop
 800409c:	e002      	b.n	80040a4 <HAL_UART_IRQHandler+0x460>
      return;
 800409e:	bf00      	nop
 80040a0:	e000      	b.n	80040a4 <HAL_UART_IRQHandler+0x460>
    return;
 80040a2:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80040a4:	3720      	adds	r7, #32
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop

080040ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004100:	b5b0      	push	{r4, r5, r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	431a      	orrs	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	4313      	orrs	r3, r2
 8004122:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	4bb1      	ldr	r3, [pc, #708]	; (80043f0 <UART_SetConfig+0x2f0>)
 800412c:	4013      	ands	r3, r2
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6812      	ldr	r2, [r2, #0]
 8004132:	69f9      	ldr	r1, [r7, #28]
 8004134:	430b      	orrs	r3, r1
 8004136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4aa6      	ldr	r2, [pc, #664]	; (80043f4 <UART_SetConfig+0x2f4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d004      	beq.n	8004168 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	4313      	orrs	r3, r2
 8004166:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004172:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6812      	ldr	r2, [r2, #0]
 800417a:	69f9      	ldr	r1, [r7, #28]
 800417c:	430b      	orrs	r3, r1
 800417e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004186:	f023 010f 	bic.w	r1, r3, #15
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a97      	ldr	r2, [pc, #604]	; (80043f8 <UART_SetConfig+0x2f8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d120      	bne.n	80041e2 <UART_SetConfig+0xe2>
 80041a0:	4b96      	ldr	r3, [pc, #600]	; (80043fc <UART_SetConfig+0x2fc>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	d816      	bhi.n	80041dc <UART_SetConfig+0xdc>
 80041ae:	a201      	add	r2, pc, #4	; (adr r2, 80041b4 <UART_SetConfig+0xb4>)
 80041b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b4:	080041c5 	.word	0x080041c5
 80041b8:	080041d1 	.word	0x080041d1
 80041bc:	080041cb 	.word	0x080041cb
 80041c0:	080041d7 	.word	0x080041d7
 80041c4:	2301      	movs	r3, #1
 80041c6:	76fb      	strb	r3, [r7, #27]
 80041c8:	e0e7      	b.n	800439a <UART_SetConfig+0x29a>
 80041ca:	2302      	movs	r3, #2
 80041cc:	76fb      	strb	r3, [r7, #27]
 80041ce:	e0e4      	b.n	800439a <UART_SetConfig+0x29a>
 80041d0:	2304      	movs	r3, #4
 80041d2:	76fb      	strb	r3, [r7, #27]
 80041d4:	e0e1      	b.n	800439a <UART_SetConfig+0x29a>
 80041d6:	2308      	movs	r3, #8
 80041d8:	76fb      	strb	r3, [r7, #27]
 80041da:	e0de      	b.n	800439a <UART_SetConfig+0x29a>
 80041dc:	2310      	movs	r3, #16
 80041de:	76fb      	strb	r3, [r7, #27]
 80041e0:	e0db      	b.n	800439a <UART_SetConfig+0x29a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a86      	ldr	r2, [pc, #536]	; (8004400 <UART_SetConfig+0x300>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d132      	bne.n	8004252 <UART_SetConfig+0x152>
 80041ec:	4b83      	ldr	r3, [pc, #524]	; (80043fc <UART_SetConfig+0x2fc>)
 80041ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	2b0c      	cmp	r3, #12
 80041f8:	d828      	bhi.n	800424c <UART_SetConfig+0x14c>
 80041fa:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <UART_SetConfig+0x100>)
 80041fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004200:	08004235 	.word	0x08004235
 8004204:	0800424d 	.word	0x0800424d
 8004208:	0800424d 	.word	0x0800424d
 800420c:	0800424d 	.word	0x0800424d
 8004210:	08004241 	.word	0x08004241
 8004214:	0800424d 	.word	0x0800424d
 8004218:	0800424d 	.word	0x0800424d
 800421c:	0800424d 	.word	0x0800424d
 8004220:	0800423b 	.word	0x0800423b
 8004224:	0800424d 	.word	0x0800424d
 8004228:	0800424d 	.word	0x0800424d
 800422c:	0800424d 	.word	0x0800424d
 8004230:	08004247 	.word	0x08004247
 8004234:	2300      	movs	r3, #0
 8004236:	76fb      	strb	r3, [r7, #27]
 8004238:	e0af      	b.n	800439a <UART_SetConfig+0x29a>
 800423a:	2302      	movs	r3, #2
 800423c:	76fb      	strb	r3, [r7, #27]
 800423e:	e0ac      	b.n	800439a <UART_SetConfig+0x29a>
 8004240:	2304      	movs	r3, #4
 8004242:	76fb      	strb	r3, [r7, #27]
 8004244:	e0a9      	b.n	800439a <UART_SetConfig+0x29a>
 8004246:	2308      	movs	r3, #8
 8004248:	76fb      	strb	r3, [r7, #27]
 800424a:	e0a6      	b.n	800439a <UART_SetConfig+0x29a>
 800424c:	2310      	movs	r3, #16
 800424e:	76fb      	strb	r3, [r7, #27]
 8004250:	e0a3      	b.n	800439a <UART_SetConfig+0x29a>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a6b      	ldr	r2, [pc, #428]	; (8004404 <UART_SetConfig+0x304>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d120      	bne.n	800429e <UART_SetConfig+0x19e>
 800425c:	4b67      	ldr	r3, [pc, #412]	; (80043fc <UART_SetConfig+0x2fc>)
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004262:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004266:	2b30      	cmp	r3, #48	; 0x30
 8004268:	d013      	beq.n	8004292 <UART_SetConfig+0x192>
 800426a:	2b30      	cmp	r3, #48	; 0x30
 800426c:	d814      	bhi.n	8004298 <UART_SetConfig+0x198>
 800426e:	2b20      	cmp	r3, #32
 8004270:	d009      	beq.n	8004286 <UART_SetConfig+0x186>
 8004272:	2b20      	cmp	r3, #32
 8004274:	d810      	bhi.n	8004298 <UART_SetConfig+0x198>
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <UART_SetConfig+0x180>
 800427a:	2b10      	cmp	r3, #16
 800427c:	d006      	beq.n	800428c <UART_SetConfig+0x18c>
 800427e:	e00b      	b.n	8004298 <UART_SetConfig+0x198>
 8004280:	2300      	movs	r3, #0
 8004282:	76fb      	strb	r3, [r7, #27]
 8004284:	e089      	b.n	800439a <UART_SetConfig+0x29a>
 8004286:	2302      	movs	r3, #2
 8004288:	76fb      	strb	r3, [r7, #27]
 800428a:	e086      	b.n	800439a <UART_SetConfig+0x29a>
 800428c:	2304      	movs	r3, #4
 800428e:	76fb      	strb	r3, [r7, #27]
 8004290:	e083      	b.n	800439a <UART_SetConfig+0x29a>
 8004292:	2308      	movs	r3, #8
 8004294:	76fb      	strb	r3, [r7, #27]
 8004296:	e080      	b.n	800439a <UART_SetConfig+0x29a>
 8004298:	2310      	movs	r3, #16
 800429a:	76fb      	strb	r3, [r7, #27]
 800429c:	e07d      	b.n	800439a <UART_SetConfig+0x29a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a59      	ldr	r2, [pc, #356]	; (8004408 <UART_SetConfig+0x308>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d120      	bne.n	80042ea <UART_SetConfig+0x1ea>
 80042a8:	4b54      	ldr	r3, [pc, #336]	; (80043fc <UART_SetConfig+0x2fc>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042b2:	2bc0      	cmp	r3, #192	; 0xc0
 80042b4:	d013      	beq.n	80042de <UART_SetConfig+0x1de>
 80042b6:	2bc0      	cmp	r3, #192	; 0xc0
 80042b8:	d814      	bhi.n	80042e4 <UART_SetConfig+0x1e4>
 80042ba:	2b80      	cmp	r3, #128	; 0x80
 80042bc:	d009      	beq.n	80042d2 <UART_SetConfig+0x1d2>
 80042be:	2b80      	cmp	r3, #128	; 0x80
 80042c0:	d810      	bhi.n	80042e4 <UART_SetConfig+0x1e4>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <UART_SetConfig+0x1cc>
 80042c6:	2b40      	cmp	r3, #64	; 0x40
 80042c8:	d006      	beq.n	80042d8 <UART_SetConfig+0x1d8>
 80042ca:	e00b      	b.n	80042e4 <UART_SetConfig+0x1e4>
 80042cc:	2300      	movs	r3, #0
 80042ce:	76fb      	strb	r3, [r7, #27]
 80042d0:	e063      	b.n	800439a <UART_SetConfig+0x29a>
 80042d2:	2302      	movs	r3, #2
 80042d4:	76fb      	strb	r3, [r7, #27]
 80042d6:	e060      	b.n	800439a <UART_SetConfig+0x29a>
 80042d8:	2304      	movs	r3, #4
 80042da:	76fb      	strb	r3, [r7, #27]
 80042dc:	e05d      	b.n	800439a <UART_SetConfig+0x29a>
 80042de:	2308      	movs	r3, #8
 80042e0:	76fb      	strb	r3, [r7, #27]
 80042e2:	e05a      	b.n	800439a <UART_SetConfig+0x29a>
 80042e4:	2310      	movs	r3, #16
 80042e6:	76fb      	strb	r3, [r7, #27]
 80042e8:	e057      	b.n	800439a <UART_SetConfig+0x29a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a47      	ldr	r2, [pc, #284]	; (800440c <UART_SetConfig+0x30c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d125      	bne.n	8004340 <UART_SetConfig+0x240>
 80042f4:	4b41      	ldr	r3, [pc, #260]	; (80043fc <UART_SetConfig+0x2fc>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004302:	d017      	beq.n	8004334 <UART_SetConfig+0x234>
 8004304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004308:	d817      	bhi.n	800433a <UART_SetConfig+0x23a>
 800430a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800430e:	d00b      	beq.n	8004328 <UART_SetConfig+0x228>
 8004310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004314:	d811      	bhi.n	800433a <UART_SetConfig+0x23a>
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <UART_SetConfig+0x222>
 800431a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800431e:	d006      	beq.n	800432e <UART_SetConfig+0x22e>
 8004320:	e00b      	b.n	800433a <UART_SetConfig+0x23a>
 8004322:	2300      	movs	r3, #0
 8004324:	76fb      	strb	r3, [r7, #27]
 8004326:	e038      	b.n	800439a <UART_SetConfig+0x29a>
 8004328:	2302      	movs	r3, #2
 800432a:	76fb      	strb	r3, [r7, #27]
 800432c:	e035      	b.n	800439a <UART_SetConfig+0x29a>
 800432e:	2304      	movs	r3, #4
 8004330:	76fb      	strb	r3, [r7, #27]
 8004332:	e032      	b.n	800439a <UART_SetConfig+0x29a>
 8004334:	2308      	movs	r3, #8
 8004336:	76fb      	strb	r3, [r7, #27]
 8004338:	e02f      	b.n	800439a <UART_SetConfig+0x29a>
 800433a:	2310      	movs	r3, #16
 800433c:	76fb      	strb	r3, [r7, #27]
 800433e:	e02c      	b.n	800439a <UART_SetConfig+0x29a>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a2b      	ldr	r2, [pc, #172]	; (80043f4 <UART_SetConfig+0x2f4>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d125      	bne.n	8004396 <UART_SetConfig+0x296>
 800434a:	4b2c      	ldr	r3, [pc, #176]	; (80043fc <UART_SetConfig+0x2fc>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004350:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004354:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004358:	d017      	beq.n	800438a <UART_SetConfig+0x28a>
 800435a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800435e:	d817      	bhi.n	8004390 <UART_SetConfig+0x290>
 8004360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004364:	d00b      	beq.n	800437e <UART_SetConfig+0x27e>
 8004366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800436a:	d811      	bhi.n	8004390 <UART_SetConfig+0x290>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <UART_SetConfig+0x278>
 8004370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004374:	d006      	beq.n	8004384 <UART_SetConfig+0x284>
 8004376:	e00b      	b.n	8004390 <UART_SetConfig+0x290>
 8004378:	2300      	movs	r3, #0
 800437a:	76fb      	strb	r3, [r7, #27]
 800437c:	e00d      	b.n	800439a <UART_SetConfig+0x29a>
 800437e:	2302      	movs	r3, #2
 8004380:	76fb      	strb	r3, [r7, #27]
 8004382:	e00a      	b.n	800439a <UART_SetConfig+0x29a>
 8004384:	2304      	movs	r3, #4
 8004386:	76fb      	strb	r3, [r7, #27]
 8004388:	e007      	b.n	800439a <UART_SetConfig+0x29a>
 800438a:	2308      	movs	r3, #8
 800438c:	76fb      	strb	r3, [r7, #27]
 800438e:	e004      	b.n	800439a <UART_SetConfig+0x29a>
 8004390:	2310      	movs	r3, #16
 8004392:	76fb      	strb	r3, [r7, #27]
 8004394:	e001      	b.n	800439a <UART_SetConfig+0x29a>
 8004396:	2310      	movs	r3, #16
 8004398:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a15      	ldr	r2, [pc, #84]	; (80043f4 <UART_SetConfig+0x2f4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	f040 809f 	bne.w	80044e4 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043a6:	7efb      	ldrb	r3, [r7, #27]
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d837      	bhi.n	800441c <UART_SetConfig+0x31c>
 80043ac:	a201      	add	r2, pc, #4	; (adr r2, 80043b4 <UART_SetConfig+0x2b4>)
 80043ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b2:	bf00      	nop
 80043b4:	080043d9 	.word	0x080043d9
 80043b8:	0800441d 	.word	0x0800441d
 80043bc:	080043e1 	.word	0x080043e1
 80043c0:	0800441d 	.word	0x0800441d
 80043c4:	080043e7 	.word	0x080043e7
 80043c8:	0800441d 	.word	0x0800441d
 80043cc:	0800441d 	.word	0x0800441d
 80043d0:	0800441d 	.word	0x0800441d
 80043d4:	08004415 	.word	0x08004415
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043d8:	f7fe f9b6 	bl	8002748 <HAL_RCC_GetPCLK1Freq>
 80043dc:	6178      	str	r0, [r7, #20]
        break;
 80043de:	e022      	b.n	8004426 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043e0:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <UART_SetConfig+0x310>)
 80043e2:	617b      	str	r3, [r7, #20]
        break;
 80043e4:	e01f      	b.n	8004426 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043e6:	f7fe f917 	bl	8002618 <HAL_RCC_GetSysClockFreq>
 80043ea:	6178      	str	r0, [r7, #20]
        break;
 80043ec:	e01b      	b.n	8004426 <UART_SetConfig+0x326>
 80043ee:	bf00      	nop
 80043f0:	cfff69f3 	.word	0xcfff69f3
 80043f4:	40008000 	.word	0x40008000
 80043f8:	40013800 	.word	0x40013800
 80043fc:	40021000 	.word	0x40021000
 8004400:	40004400 	.word	0x40004400
 8004404:	40004800 	.word	0x40004800
 8004408:	40004c00 	.word	0x40004c00
 800440c:	40005000 	.word	0x40005000
 8004410:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004418:	617b      	str	r3, [r7, #20]
        break;
 800441a:	e004      	b.n	8004426 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	76bb      	strb	r3, [r7, #26]
        break;
 8004424:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 811b 	beq.w	8004664 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	4a96      	ldr	r2, [pc, #600]	; (800468c <UART_SetConfig+0x58c>)
 8004434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004438:	461a      	mov	r2, r3
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004440:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	4413      	add	r3, r2
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	429a      	cmp	r2, r3
 8004450:	d305      	bcc.n	800445e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	429a      	cmp	r2, r3
 800445c:	d902      	bls.n	8004464 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	76bb      	strb	r3, [r7, #26]
 8004462:	e0ff      	b.n	8004664 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	4618      	mov	r0, r3
 8004468:	f04f 0100 	mov.w	r1, #0
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	4a86      	ldr	r2, [pc, #536]	; (800468c <UART_SetConfig+0x58c>)
 8004472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004476:	b29a      	uxth	r2, r3
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	f7fb fec0 	bl	8000200 <__aeabi_uldivmod>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4610      	mov	r0, r2
 8004486:	4619      	mov	r1, r3
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	020b      	lsls	r3, r1, #8
 8004492:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004496:	0202      	lsls	r2, r0, #8
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	6849      	ldr	r1, [r1, #4]
 800449c:	0849      	lsrs	r1, r1, #1
 800449e:	4608      	mov	r0, r1
 80044a0:	f04f 0100 	mov.w	r1, #0
 80044a4:	1814      	adds	r4, r2, r0
 80044a6:	eb43 0501 	adc.w	r5, r3, r1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	461a      	mov	r2, r3
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	4620      	mov	r0, r4
 80044b6:	4629      	mov	r1, r5
 80044b8:	f7fb fea2 	bl	8000200 <__aeabi_uldivmod>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4613      	mov	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ca:	d308      	bcc.n	80044de <UART_SetConfig+0x3de>
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044d2:	d204      	bcs.n	80044de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	60da      	str	r2, [r3, #12]
 80044dc:	e0c2      	b.n	8004664 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	76bb      	strb	r3, [r7, #26]
 80044e2:	e0bf      	b.n	8004664 <UART_SetConfig+0x564>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ec:	d165      	bne.n	80045ba <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 80044ee:	7efb      	ldrb	r3, [r7, #27]
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d828      	bhi.n	8004546 <UART_SetConfig+0x446>
 80044f4:	a201      	add	r2, pc, #4	; (adr r2, 80044fc <UART_SetConfig+0x3fc>)
 80044f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fa:	bf00      	nop
 80044fc:	08004521 	.word	0x08004521
 8004500:	08004529 	.word	0x08004529
 8004504:	08004531 	.word	0x08004531
 8004508:	08004547 	.word	0x08004547
 800450c:	08004537 	.word	0x08004537
 8004510:	08004547 	.word	0x08004547
 8004514:	08004547 	.word	0x08004547
 8004518:	08004547 	.word	0x08004547
 800451c:	0800453f 	.word	0x0800453f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004520:	f7fe f912 	bl	8002748 <HAL_RCC_GetPCLK1Freq>
 8004524:	6178      	str	r0, [r7, #20]
        break;
 8004526:	e013      	b.n	8004550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004528:	f7fe f924 	bl	8002774 <HAL_RCC_GetPCLK2Freq>
 800452c:	6178      	str	r0, [r7, #20]
        break;
 800452e:	e00f      	b.n	8004550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004530:	4b57      	ldr	r3, [pc, #348]	; (8004690 <UART_SetConfig+0x590>)
 8004532:	617b      	str	r3, [r7, #20]
        break;
 8004534:	e00c      	b.n	8004550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004536:	f7fe f86f 	bl	8002618 <HAL_RCC_GetSysClockFreq>
 800453a:	6178      	str	r0, [r7, #20]
        break;
 800453c:	e008      	b.n	8004550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800453e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004542:	617b      	str	r3, [r7, #20]
        break;
 8004544:	e004      	b.n	8004550 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	76bb      	strb	r3, [r7, #26]
        break;
 800454e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 8086 	beq.w	8004664 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	4a4b      	ldr	r2, [pc, #300]	; (800468c <UART_SetConfig+0x58c>)
 800455e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004562:	461a      	mov	r2, r3
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	fbb3 f3f2 	udiv	r3, r3, r2
 800456a:	005a      	lsls	r2, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	085b      	lsrs	r3, r3, #1
 8004572:	441a      	add	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	fbb2 f3f3 	udiv	r3, r2, r3
 800457c:	b29b      	uxth	r3, r3
 800457e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	2b0f      	cmp	r3, #15
 8004584:	d916      	bls.n	80045b4 <UART_SetConfig+0x4b4>
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458c:	d212      	bcs.n	80045b4 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	b29b      	uxth	r3, r3
 8004592:	f023 030f 	bic.w	r3, r3, #15
 8004596:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	085b      	lsrs	r3, r3, #1
 800459c:	b29b      	uxth	r3, r3
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	89fb      	ldrh	r3, [r7, #14]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	89fa      	ldrh	r2, [r7, #14]
 80045b0:	60da      	str	r2, [r3, #12]
 80045b2:	e057      	b.n	8004664 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	76bb      	strb	r3, [r7, #26]
 80045b8:	e054      	b.n	8004664 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045ba:	7efb      	ldrb	r3, [r7, #27]
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d828      	bhi.n	8004612 <UART_SetConfig+0x512>
 80045c0:	a201      	add	r2, pc, #4	; (adr r2, 80045c8 <UART_SetConfig+0x4c8>)
 80045c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c6:	bf00      	nop
 80045c8:	080045ed 	.word	0x080045ed
 80045cc:	080045f5 	.word	0x080045f5
 80045d0:	080045fd 	.word	0x080045fd
 80045d4:	08004613 	.word	0x08004613
 80045d8:	08004603 	.word	0x08004603
 80045dc:	08004613 	.word	0x08004613
 80045e0:	08004613 	.word	0x08004613
 80045e4:	08004613 	.word	0x08004613
 80045e8:	0800460b 	.word	0x0800460b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045ec:	f7fe f8ac 	bl	8002748 <HAL_RCC_GetPCLK1Freq>
 80045f0:	6178      	str	r0, [r7, #20]
        break;
 80045f2:	e013      	b.n	800461c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045f4:	f7fe f8be 	bl	8002774 <HAL_RCC_GetPCLK2Freq>
 80045f8:	6178      	str	r0, [r7, #20]
        break;
 80045fa:	e00f      	b.n	800461c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045fc:	4b24      	ldr	r3, [pc, #144]	; (8004690 <UART_SetConfig+0x590>)
 80045fe:	617b      	str	r3, [r7, #20]
        break;
 8004600:	e00c      	b.n	800461c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004602:	f7fe f809 	bl	8002618 <HAL_RCC_GetSysClockFreq>
 8004606:	6178      	str	r0, [r7, #20]
        break;
 8004608:	e008      	b.n	800461c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800460a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800460e:	617b      	str	r3, [r7, #20]
        break;
 8004610:	e004      	b.n	800461c <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	76bb      	strb	r3, [r7, #26]
        break;
 800461a:	bf00      	nop
    }

    if (pclk != 0U)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d020      	beq.n	8004664 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	4a19      	ldr	r2, [pc, #100]	; (800468c <UART_SetConfig+0x58c>)
 8004628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800462c:	461a      	mov	r2, r3
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	fbb3 f2f2 	udiv	r2, r3, r2
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	085b      	lsrs	r3, r3, #1
 800463a:	441a      	add	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	fbb2 f3f3 	udiv	r3, r2, r3
 8004644:	b29b      	uxth	r3, r3
 8004646:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b0f      	cmp	r3, #15
 800464c:	d908      	bls.n	8004660 <UART_SetConfig+0x560>
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004654:	d204      	bcs.n	8004660 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	60da      	str	r2, [r3, #12]
 800465e:	e001      	b.n	8004664 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004680:	7ebb      	ldrb	r3, [r7, #26]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3720      	adds	r7, #32
 8004686:	46bd      	mov	sp, r7
 8004688:	bdb0      	pop	{r4, r5, r7, pc}
 800468a:	bf00      	nop
 800468c:	08008870 	.word	0x08008870
 8004690:	00f42400 	.word	0x00f42400

08004694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	f003 0310 	and.w	r3, r3, #16
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d01a      	beq.n	80047aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004792:	d10a      	bne.n	80047aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	605a      	str	r2, [r3, #4]
  }
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af02      	add	r7, sp, #8
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047e8:	f7fc fb42 	bl	8000e70 <HAL_GetTick>
 80047ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d10e      	bne.n	800481a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f82f 	bl	800486e <UART_WaitOnFlagUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e025      	b.n	8004866 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b04      	cmp	r3, #4
 8004826:	d10e      	bne.n	8004846 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004828:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f819 	bl	800486e <UART_WaitOnFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e00f      	b.n	8004866 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2220      	movs	r2, #32
 800484a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	603b      	str	r3, [r7, #0]
 800487a:	4613      	mov	r3, r2
 800487c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800487e:	e062      	b.n	8004946 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004886:	d05e      	beq.n	8004946 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004888:	f7fc faf2 	bl	8000e70 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	429a      	cmp	r2, r3
 8004896:	d302      	bcc.n	800489e <UART_WaitOnFlagUntilTimeout+0x30>
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d11d      	bne.n	80048da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048ac:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0201 	bic.w	r2, r2, #1
 80048bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e045      	b.n	8004966 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d02e      	beq.n	8004946 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f6:	d126      	bne.n	8004946 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004900:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004910:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0201 	bic.w	r2, r2, #1
 8004920:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2220      	movs	r2, #32
 8004926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2220      	movs	r2, #32
 800492e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2220      	movs	r2, #32
 8004936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e00f      	b.n	8004966 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69da      	ldr	r2, [r3, #28]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4013      	ands	r3, r2
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	429a      	cmp	r2, r3
 8004954:	bf0c      	ite	eq
 8004956:	2301      	moveq	r3, #1
 8004958:	2300      	movne	r3, #0
 800495a:	b2db      	uxtb	r3, r3
 800495c:	461a      	mov	r2, r3
 800495e:	79fb      	ldrb	r3, [r7, #7]
 8004960:	429a      	cmp	r2, r3
 8004962:	d08d      	beq.n	8004880 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
	...

08004970 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	4613      	mov	r3, r2
 800497c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	88fa      	ldrh	r2, [r7, #6]
 8004988:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	88fa      	ldrh	r2, [r7, #6]
 8004990:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a2:	d10e      	bne.n	80049c2 <UART_Start_Receive_IT+0x52>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d105      	bne.n	80049b8 <UART_Start_Receive_IT+0x48>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80049b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049b6:	e02d      	b.n	8004a14 <UART_Start_Receive_IT+0xa4>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	22ff      	movs	r2, #255	; 0xff
 80049bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049c0:	e028      	b.n	8004a14 <UART_Start_Receive_IT+0xa4>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10d      	bne.n	80049e6 <UART_Start_Receive_IT+0x76>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d104      	bne.n	80049dc <UART_Start_Receive_IT+0x6c>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	22ff      	movs	r2, #255	; 0xff
 80049d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049da:	e01b      	b.n	8004a14 <UART_Start_Receive_IT+0xa4>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	227f      	movs	r2, #127	; 0x7f
 80049e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049e4:	e016      	b.n	8004a14 <UART_Start_Receive_IT+0xa4>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049ee:	d10d      	bne.n	8004a0c <UART_Start_Receive_IT+0x9c>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d104      	bne.n	8004a02 <UART_Start_Receive_IT+0x92>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	227f      	movs	r2, #127	; 0x7f
 80049fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a00:	e008      	b.n	8004a14 <UART_Start_Receive_IT+0xa4>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	223f      	movs	r2, #63	; 0x3f
 8004a06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a0a:	e003      	b.n	8004a14 <UART_Start_Receive_IT+0xa4>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2222      	movs	r2, #34	; 0x22
 8004a20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	609a      	str	r2, [r3, #8]

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a3c:	d12a      	bne.n	8004a94 <UART_Start_Receive_IT+0x124>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004a44:	88fa      	ldrh	r2, [r7, #6]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d324      	bcc.n	8004a94 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a52:	d107      	bne.n	8004a64 <UART_Start_Receive_IT+0xf4>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d103      	bne.n	8004a64 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4a1f      	ldr	r2, [pc, #124]	; (8004adc <UART_Start_Receive_IT+0x16c>)
 8004a60:	671a      	str	r2, [r3, #112]	; 0x70
 8004a62:	e002      	b.n	8004a6a <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4a1e      	ldr	r2, [pc, #120]	; (8004ae0 <UART_Start_Receive_IT+0x170>)
 8004a68:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a80:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a90:	609a      	str	r2, [r3, #8]
 8004a92:	e01b      	b.n	8004acc <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a9c:	d107      	bne.n	8004aae <UART_Start_Receive_IT+0x13e>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d103      	bne.n	8004aae <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4a0e      	ldr	r2, [pc, #56]	; (8004ae4 <UART_Start_Receive_IT+0x174>)
 8004aaa:	671a      	str	r2, [r3, #112]	; 0x70
 8004aac:	e002      	b.n	8004ab4 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4a0d      	ldr	r2, [pc, #52]	; (8004ae8 <UART_Start_Receive_IT+0x178>)
 8004ab2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004aca:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(huart);

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	080051dd 	.word	0x080051dd
 8004ae0:	08004fd5 	.word	0x08004fd5
 8004ae4:	08004ef7 	.word	0x08004ef7
 8004ae8:	08004e1b 	.word	0x08004e1b

08004aec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	4613      	mov	r3, r2
 8004af8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	88fa      	ldrh	r2, [r7, #6]
 8004b04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2222      	movs	r2, #34	; 0x22
 8004b14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d02c      	beq.n	8004b7a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b24:	4a25      	ldr	r2, [pc, #148]	; (8004bbc <UART_Start_Receive_DMA+0xd0>)
 8004b26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b2c:	4a24      	ldr	r2, [pc, #144]	; (8004bc0 <UART_Start_Receive_DMA+0xd4>)
 8004b2e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b34:	4a23      	ldr	r2, [pc, #140]	; (8004bc4 <UART_Start_Receive_DMA+0xd8>)
 8004b36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3324      	adds	r3, #36	; 0x24
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b50:	461a      	mov	r2, r3
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	f7fc fb22 	bl	800119c <HAL_DMA_Start_IT>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00d      	beq.n	8004b7a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2210      	movs	r2, #16
 8004b62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e01c      	b.n	8004bb4 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b90:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0201 	orr.w	r2, r2, #1
 8004ba0:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bb0:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	08004c69 	.word	0x08004c69
 8004bc0:	08004d03 	.word	0x08004d03
 8004bc4:	08004d3b 	.word	0x08004d3b

08004bc8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004bde:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689a      	ldr	r2, [r3, #8]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004bee:	609a      	str	r2, [r3, #8]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c1a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6812      	ldr	r2, [r2, #0]
 8004c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c2a:	f023 0301 	bic.w	r3, r3, #1
 8004c2e:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d107      	bne.n	8004c48 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0210 	bic.w	r2, r2, #16
 8004c46:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c74:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0320 	and.w	r3, r3, #32
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d12b      	bne.n	8004cdc <UART_DMAReceiveCplt+0x74>
  {
    huart->RxXferCount = 0U;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c9a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0201 	bic.w	r2, r2, #1
 8004caa:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689a      	ldr	r2, [r3, #8]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cba:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d107      	bne.n	8004cdc <UART_DMAReceiveCplt+0x74>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0210 	bic.w	r2, r2, #16
 8004cda:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d107      	bne.n	8004cf4 <UART_DMAReceiveCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004cea:	4619      	mov	r1, r3
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f7ff f9fb 	bl	80040e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004cf2:	e002      	b.n	8004cfa <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f7fb fdcb 	bl	8000890 <HAL_UART_RxCpltCallback>
}
 8004cfa:	bf00      	nop
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d109      	bne.n	8004d2c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d1e:	085b      	lsrs	r3, r3, #1
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	4619      	mov	r1, r3
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f7ff f9df 	bl	80040e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d2a:	e002      	b.n	8004d32 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f7ff f9c7 	bl	80040c0 <HAL_UART_RxHalfCpltCallback>
}
 8004d32:	bf00      	nop
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b086      	sub	sp, #24
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d46:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d4e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d62:	2b80      	cmp	r3, #128	; 0x80
 8004d64:	d109      	bne.n	8004d7a <UART_DMAError+0x40>
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	2b21      	cmp	r3, #33	; 0x21
 8004d6a:	d106      	bne.n	8004d7a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8004d74:	6978      	ldr	r0, [r7, #20]
 8004d76:	f7ff ff27 	bl	8004bc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d84:	2b40      	cmp	r3, #64	; 0x40
 8004d86:	d109      	bne.n	8004d9c <UART_DMAError+0x62>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2b22      	cmp	r3, #34	; 0x22
 8004d8c:	d106      	bne.n	8004d9c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8004d96:	6978      	ldr	r0, [r7, #20]
 8004d98:	f7ff ff34 	bl	8004c04 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004da2:	f043 0210 	orr.w	r2, r3, #16
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dac:	6978      	ldr	r0, [r7, #20]
 8004dae:	f7ff f991 	bl	80040d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004db2:	bf00      	nop
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f7ff f97b 	bl	80040d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dde:	bf00      	nop
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b082      	sub	sp, #8
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dfc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7ff f94d 	bl	80040ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e12:	bf00      	nop
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b084      	sub	sp, #16
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004e28:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e30:	2b22      	cmp	r3, #34	; 0x22
 8004e32:	d152      	bne.n	8004eda <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e3a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e3c:	89bb      	ldrh	r3, [r7, #12]
 8004e3e:	b2d9      	uxtb	r1, r3
 8004e40:	89fb      	ldrh	r3, [r7, #14]
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e48:	400a      	ands	r2, r1
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d13b      	bne.n	8004eee <UART_RxISR_8BIT+0xd4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e84:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0201 	bic.w	r2, r2, #1
 8004e94:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d10f      	bne.n	8004ecc <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0210 	bic.w	r2, r2, #16
 8004eba:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff f90f 	bl	80040e8 <HAL_UARTEx_RxEventCallback>
 8004eca:	e002      	b.n	8004ed2 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7fb fcdf 	bl	8000890 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ed8:	e009      	b.n	8004eee <UART_RxISR_8BIT+0xd4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	8b1b      	ldrh	r3, [r3, #24]
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0208 	orr.w	r2, r2, #8
 8004eea:	b292      	uxth	r2, r2
 8004eec:	831a      	strh	r2, [r3, #24]
}
 8004eee:	bf00      	nop
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004f04:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0c:	2b22      	cmp	r3, #34	; 0x22
 8004f0e:	d152      	bne.n	8004fb6 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004f16:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004f1e:	89ba      	ldrh	r2, [r7, #12]
 8004f20:	89fb      	ldrh	r3, [r7, #14]
 8004f22:	4013      	ands	r3, r2
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2e:	1c9a      	adds	r2, r3, #2
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d13b      	bne.n	8004fca <UART_RxISR_16BIT+0xd4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f60:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0201 	bic.w	r2, r2, #1
 8004f70:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d10f      	bne.n	8004fa8 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0210 	bic.w	r2, r2, #16
 8004f96:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7ff f8a1 	bl	80040e8 <HAL_UARTEx_RxEventCallback>
 8004fa6:	e002      	b.n	8004fae <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7fb fc71 	bl	8000890 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fb4:	e009      	b.n	8004fca <UART_RxISR_16BIT+0xd4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	8b1b      	ldrh	r3, [r3, #24]
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0208 	orr.w	r2, r2, #8
 8004fc6:	b292      	uxth	r2, r2
 8004fc8:	831a      	strh	r2, [r3, #24]
}
 8004fca:	bf00      	nop
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004fe2:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005002:	2b22      	cmp	r3, #34	; 0x22
 8005004:	f040 80da 	bne.w	80051bc <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800500e:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005010:	e0aa      	b.n	8005168 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005018:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800501a:	89bb      	ldrh	r3, [r7, #12]
 800501c:	b2d9      	uxtb	r1, r3
 800501e:	8b7b      	ldrh	r3, [r7, #26]
 8005020:	b2da      	uxtb	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005026:	400a      	ands	r2, r1
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800503c:	b29b      	uxth	r3, r3
 800503e:	3b01      	subs	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	2b00      	cmp	r3, #0
 8005058:	d04d      	beq.n	80050f6 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d010      	beq.n	8005086 <UART_RxISR_8BIT_FIFOEN+0xb2>
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00b      	beq.n	8005086 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2201      	movs	r2, #1
 8005074:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800507c:	f043 0201 	orr.w	r2, r3, #1
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d010      	beq.n	80050b2 <UART_RxISR_8BIT_FIFOEN+0xde>
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00b      	beq.n	80050b2 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2202      	movs	r2, #2
 80050a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050a8:	f043 0204 	orr.w	r2, r3, #4
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d010      	beq.n	80050de <UART_RxISR_8BIT_FIFOEN+0x10a>
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00b      	beq.n	80050de <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2204      	movs	r2, #4
 80050cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050d4:	f043 0202 	orr.w	r2, r3, #2
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d006      	beq.n	80050f6 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7fe fff3 	bl	80040d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d132      	bne.n	8005168 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005110:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6812      	ldr	r2, [r2, #0]
 800511c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005120:	f023 0301 	bic.w	r3, r3, #1
 8005124:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2220      	movs	r2, #32
 800512a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005138:	2b01      	cmp	r3, #1
 800513a:	d10f      	bne.n	800515c <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0210 	bic.w	r2, r2, #16
 800514a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005152:	4619      	mov	r1, r3
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7fe ffc7 	bl	80040e8 <HAL_UARTEx_RxEventCallback>
 800515a:	e002      	b.n	8005162 <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7fb fb97 	bl	8000890 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005168:	89fb      	ldrh	r3, [r7, #14]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d005      	beq.n	800517a <UART_RxISR_8BIT_FIFOEN+0x1a6>
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b00      	cmp	r3, #0
 8005176:	f47f af4c 	bne.w	8005012 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005180:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005182:	897b      	ldrh	r3, [r7, #10]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d023      	beq.n	80051d0 <UART_RxISR_8BIT_FIFOEN+0x1fc>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800518e:	897a      	ldrh	r2, [r7, #10]
 8005190:	429a      	cmp	r2, r3
 8005192:	d21d      	bcs.n	80051d0 <UART_RxISR_8BIT_FIFOEN+0x1fc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80051a2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a0c      	ldr	r2, [pc, #48]	; (80051d8 <UART_RxISR_8BIT_FIFOEN+0x204>)
 80051a8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0220 	orr.w	r2, r2, #32
 80051b8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051ba:	e009      	b.n	80051d0 <UART_RxISR_8BIT_FIFOEN+0x1fc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	8b1b      	ldrh	r3, [r3, #24]
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f042 0208 	orr.w	r2, r2, #8
 80051cc:	b292      	uxth	r2, r2
 80051ce:	831a      	strh	r2, [r3, #24]
}
 80051d0:	bf00      	nop
 80051d2:	3720      	adds	r7, #32
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	08004e1b 	.word	0x08004e1b

080051dc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08a      	sub	sp, #40	; 0x28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80051ea:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520a:	2b22      	cmp	r3, #34	; 0x22
 800520c:	f040 80da 	bne.w	80053c4 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005216:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005218:	e0aa      	b.n	8005370 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005220:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005226:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8005228:	8aba      	ldrh	r2, [r7, #20]
 800522a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800522c:	4013      	ands	r3, r2
 800522e:	b29a      	uxth	r2, r3
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005238:	1c9a      	adds	r2, r3, #2
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005244:	b29b      	uxth	r3, r3
 8005246:	3b01      	subs	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	2b00      	cmp	r3, #0
 8005260:	d04d      	beq.n	80052fe <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	d010      	beq.n	800528e <UART_RxISR_16BIT_FIFOEN+0xb2>
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00b      	beq.n	800528e <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2201      	movs	r2, #1
 800527c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005284:	f043 0201 	orr.w	r2, r3, #1
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d010      	beq.n	80052ba <UART_RxISR_16BIT_FIFOEN+0xde>
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00b      	beq.n	80052ba <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2202      	movs	r2, #2
 80052a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052b0:	f043 0204 	orr.w	r2, r3, #4
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d010      	beq.n	80052e6 <UART_RxISR_16BIT_FIFOEN+0x10a>
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00b      	beq.n	80052e6 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2204      	movs	r2, #4
 80052d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052dc:	f043 0202 	orr.w	r2, r3, #2
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d006      	beq.n	80052fe <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7fe feef 	bl	80040d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d132      	bne.n	8005370 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005318:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005328:	f023 0301 	bic.w	r3, r3, #1
 800532c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005340:	2b01      	cmp	r3, #1
 8005342:	d10f      	bne.n	8005364 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0210 	bic.w	r2, r2, #16
 8005352:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800535a:	4619      	mov	r1, r3
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7fe fec3 	bl	80040e8 <HAL_UARTEx_RxEventCallback>
 8005362:	e002      	b.n	800536a <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7fb fa93 	bl	8000890 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005370:	8afb      	ldrh	r3, [r7, #22]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d005      	beq.n	8005382 <UART_RxISR_16BIT_FIFOEN+0x1a6>
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	f003 0320 	and.w	r3, r3, #32
 800537c:	2b00      	cmp	r3, #0
 800537e:	f47f af4c 	bne.w	800521a <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005388:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800538a:	89fb      	ldrh	r3, [r7, #14]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d023      	beq.n	80053d8 <UART_RxISR_16BIT_FIFOEN+0x1fc>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005396:	89fa      	ldrh	r2, [r7, #14]
 8005398:	429a      	cmp	r2, r3
 800539a:	d21d      	bcs.n	80053d8 <UART_RxISR_16BIT_FIFOEN+0x1fc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80053aa:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a0c      	ldr	r2, [pc, #48]	; (80053e0 <UART_RxISR_16BIT_FIFOEN+0x204>)
 80053b0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f042 0220 	orr.w	r2, r2, #32
 80053c0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053c2:	e009      	b.n	80053d8 <UART_RxISR_16BIT_FIFOEN+0x1fc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	8b1b      	ldrh	r3, [r3, #24]
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f042 0208 	orr.w	r2, r2, #8
 80053d4:	b292      	uxth	r2, r2
 80053d6:	831a      	strh	r2, [r3, #24]
}
 80053d8:	bf00      	nop
 80053da:	3728      	adds	r7, #40	; 0x28
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	08004ef7 	.word	0x08004ef7

080053e4 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e058      	b.n	80054ae <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f7fb fb50 	bl	8000ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2224      	movs	r2, #36	; 0x24
 8005418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0201 	bic.w	r2, r2, #1
 800542a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f7fe fe67 	bl	8004100 <UART_SetConfig>
 8005432:	4603      	mov	r3, r0
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e038      	b.n	80054ae <HAL_RS485Ex_Init+0xca>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005440:	2b00      	cmp	r3, #0
 8005442:	d002      	beq.n	800544a <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f7ff f925 	bl	8004694 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005458:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	430a      	orrs	r2, r1
 800546c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	055b      	lsls	r3, r3, #21
 8005472:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	041b      	lsls	r3, r3, #16
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8005488:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	6812      	ldr	r2, [r2, #0]
 8005490:	6979      	ldr	r1, [r7, #20]
 8005492:	430b      	orrs	r3, r1
 8005494:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f042 0201 	orr.w	r2, r2, #1
 80054a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f7ff f996 	bl	80047d8 <UART_CheckIdleState>
 80054ac:	4603      	mov	r3, r0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b085      	sub	sp, #20
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005500:	2b01      	cmp	r3, #1
 8005502:	d101      	bne.n	8005508 <HAL_UARTEx_DisableFifoMode+0x16>
 8005504:	2302      	movs	r3, #2
 8005506:	e027      	b.n	8005558 <HAL_UARTEx_DisableFifoMode+0x66>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2224      	movs	r2, #36	; 0x24
 8005514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0201 	bic.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005536:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2220      	movs	r2, #32
 800554a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005578:	2302      	movs	r3, #2
 800557a:	e02d      	b.n	80055d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2224      	movs	r2, #36	; 0x24
 8005588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 0201 	bic.w	r2, r2, #1
 80055a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f84f 	bl	800565c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d101      	bne.n	80055f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055f4:	2302      	movs	r3, #2
 80055f6:	e02d      	b.n	8005654 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2224      	movs	r2, #36	; 0x24
 8005604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0201 	bic.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f811 	bl	800565c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2220      	movs	r2, #32
 8005646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005668:	2b00      	cmp	r3, #0
 800566a:	d108      	bne.n	800567e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800567c:	e031      	b.n	80056e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800567e:	2308      	movs	r3, #8
 8005680:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005682:	2308      	movs	r3, #8
 8005684:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	0e5b      	lsrs	r3, r3, #25
 800568e:	b2db      	uxtb	r3, r3
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	0f5b      	lsrs	r3, r3, #29
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056a6:	7bbb      	ldrb	r3, [r7, #14]
 80056a8:	7b3a      	ldrb	r2, [r7, #12]
 80056aa:	4911      	ldr	r1, [pc, #68]	; (80056f0 <UARTEx_SetNbDataToProcess+0x94>)
 80056ac:	5c8a      	ldrb	r2, [r1, r2]
 80056ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80056b2:	7b3a      	ldrb	r2, [r7, #12]
 80056b4:	490f      	ldr	r1, [pc, #60]	; (80056f4 <UARTEx_SetNbDataToProcess+0x98>)
 80056b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80056bc:	b29a      	uxth	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
 80056c6:	7b7a      	ldrb	r2, [r7, #13]
 80056c8:	4909      	ldr	r1, [pc, #36]	; (80056f0 <UARTEx_SetNbDataToProcess+0x94>)
 80056ca:	5c8a      	ldrb	r2, [r1, r2]
 80056cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056d0:	7b7a      	ldrb	r2, [r7, #13]
 80056d2:	4908      	ldr	r1, [pc, #32]	; (80056f4 <UARTEx_SetNbDataToProcess+0x98>)
 80056d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80056da:	b29a      	uxth	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80056e2:	bf00      	nop
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	08008888 	.word	0x08008888
 80056f4:	08008890 	.word	0x08008890

080056f8 <__NVIC_SetPriority>:
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	4603      	mov	r3, r0
 8005700:	6039      	str	r1, [r7, #0]
 8005702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005708:	2b00      	cmp	r3, #0
 800570a:	db0a      	blt.n	8005722 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	b2da      	uxtb	r2, r3
 8005710:	490c      	ldr	r1, [pc, #48]	; (8005744 <__NVIC_SetPriority+0x4c>)
 8005712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005716:	0112      	lsls	r2, r2, #4
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	440b      	add	r3, r1
 800571c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005720:	e00a      	b.n	8005738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	b2da      	uxtb	r2, r3
 8005726:	4908      	ldr	r1, [pc, #32]	; (8005748 <__NVIC_SetPriority+0x50>)
 8005728:	79fb      	ldrb	r3, [r7, #7]
 800572a:	f003 030f 	and.w	r3, r3, #15
 800572e:	3b04      	subs	r3, #4
 8005730:	0112      	lsls	r2, r2, #4
 8005732:	b2d2      	uxtb	r2, r2
 8005734:	440b      	add	r3, r1
 8005736:	761a      	strb	r2, [r3, #24]
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	e000e100 	.word	0xe000e100
 8005748:	e000ed00 	.word	0xe000ed00

0800574c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005750:	4b05      	ldr	r3, [pc, #20]	; (8005768 <SysTick_Handler+0x1c>)
 8005752:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005754:	f001 ff44 	bl	80075e0 <xTaskGetSchedulerState>
 8005758:	4603      	mov	r3, r0
 800575a:	2b01      	cmp	r3, #1
 800575c:	d001      	beq.n	8005762 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800575e:	f002 fd2b 	bl	80081b8 <xPortSysTickHandler>
  }
}
 8005762:	bf00      	nop
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	e000e010 	.word	0xe000e010

0800576c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005770:	2100      	movs	r1, #0
 8005772:	f06f 0004 	mvn.w	r0, #4
 8005776:	f7ff ffbf 	bl	80056f8 <__NVIC_SetPriority>
#endif
}
 800577a:	bf00      	nop
 800577c:	bd80      	pop	{r7, pc}
	...

08005780 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005786:	f3ef 8305 	mrs	r3, IPSR
 800578a:	603b      	str	r3, [r7, #0]
  return(result);
 800578c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005792:	f06f 0305 	mvn.w	r3, #5
 8005796:	607b      	str	r3, [r7, #4]
 8005798:	e00c      	b.n	80057b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800579a:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <osKernelInitialize+0x44>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d105      	bne.n	80057ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80057a2:	4b08      	ldr	r3, [pc, #32]	; (80057c4 <osKernelInitialize+0x44>)
 80057a4:	2201      	movs	r2, #1
 80057a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80057a8:	2300      	movs	r3, #0
 80057aa:	607b      	str	r3, [r7, #4]
 80057ac:	e002      	b.n	80057b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80057ae:	f04f 33ff 	mov.w	r3, #4294967295
 80057b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80057b4:	687b      	ldr	r3, [r7, #4]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	20000030 	.word	0x20000030

080057c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057ce:	f3ef 8305 	mrs	r3, IPSR
 80057d2:	603b      	str	r3, [r7, #0]
  return(result);
 80057d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80057da:	f06f 0305 	mvn.w	r3, #5
 80057de:	607b      	str	r3, [r7, #4]
 80057e0:	e010      	b.n	8005804 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80057e2:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <osKernelStart+0x48>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d109      	bne.n	80057fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80057ea:	f7ff ffbf 	bl	800576c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80057ee:	4b08      	ldr	r3, [pc, #32]	; (8005810 <osKernelStart+0x48>)
 80057f0:	2202      	movs	r2, #2
 80057f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80057f4:	f001 faac 	bl	8006d50 <vTaskStartScheduler>
      stat = osOK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	607b      	str	r3, [r7, #4]
 80057fc:	e002      	b.n	8005804 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80057fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005802:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005804:	687b      	ldr	r3, [r7, #4]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	20000030 	.word	0x20000030

08005814 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005814:	b580      	push	{r7, lr}
 8005816:	b08e      	sub	sp, #56	; 0x38
 8005818:	af04      	add	r7, sp, #16
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005820:	2300      	movs	r3, #0
 8005822:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005824:	f3ef 8305 	mrs	r3, IPSR
 8005828:	617b      	str	r3, [r7, #20]
  return(result);
 800582a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800582c:	2b00      	cmp	r3, #0
 800582e:	d17e      	bne.n	800592e <osThreadNew+0x11a>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d07b      	beq.n	800592e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005836:	2380      	movs	r3, #128	; 0x80
 8005838:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800583a:	2318      	movs	r3, #24
 800583c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800583e:	2300      	movs	r3, #0
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005842:	f04f 33ff 	mov.w	r3, #4294967295
 8005846:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d045      	beq.n	80058da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <osThreadNew+0x48>
        name = attr->name;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d008      	beq.n	8005882 <osThreadNew+0x6e>
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	2b38      	cmp	r3, #56	; 0x38
 8005874:	d805      	bhi.n	8005882 <osThreadNew+0x6e>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <osThreadNew+0x72>
        return (NULL);
 8005882:	2300      	movs	r3, #0
 8005884:	e054      	b.n	8005930 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	089b      	lsrs	r3, r3, #2
 8005894:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00e      	beq.n	80058bc <osThreadNew+0xa8>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	2b5b      	cmp	r3, #91	; 0x5b
 80058a4:	d90a      	bls.n	80058bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d006      	beq.n	80058bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d002      	beq.n	80058bc <osThreadNew+0xa8>
        mem = 1;
 80058b6:	2301      	movs	r3, #1
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	e010      	b.n	80058de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10c      	bne.n	80058de <osThreadNew+0xca>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d108      	bne.n	80058de <osThreadNew+0xca>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d104      	bne.n	80058de <osThreadNew+0xca>
          mem = 0;
 80058d4:	2300      	movs	r3, #0
 80058d6:	61bb      	str	r3, [r7, #24]
 80058d8:	e001      	b.n	80058de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80058da:	2300      	movs	r3, #0
 80058dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d110      	bne.n	8005906 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058ec:	9202      	str	r2, [sp, #8]
 80058ee:	9301      	str	r3, [sp, #4]
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	6a3a      	ldr	r2, [r7, #32]
 80058f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f001 f852 	bl	80069a4 <xTaskCreateStatic>
 8005900:	4603      	mov	r3, r0
 8005902:	613b      	str	r3, [r7, #16]
 8005904:	e013      	b.n	800592e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d110      	bne.n	800592e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	b29a      	uxth	r2, r3
 8005910:	f107 0310 	add.w	r3, r7, #16
 8005914:	9301      	str	r3, [sp, #4]
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f001 f89d 	bl	8006a5e <xTaskCreate>
 8005924:	4603      	mov	r3, r0
 8005926:	2b01      	cmp	r3, #1
 8005928:	d001      	beq.n	800592e <osThreadNew+0x11a>
            hTask = NULL;
 800592a:	2300      	movs	r3, #0
 800592c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800592e:	693b      	ldr	r3, [r7, #16]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3728      	adds	r7, #40	; 0x28
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005940:	f3ef 8305 	mrs	r3, IPSR
 8005944:	60bb      	str	r3, [r7, #8]
  return(result);
 8005946:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <osDelay+0x1c>
    stat = osErrorISR;
 800594c:	f06f 0305 	mvn.w	r3, #5
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	e007      	b.n	8005964 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005954:	2300      	movs	r3, #0
 8005956:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <osDelay+0x2c>
      vTaskDelay(ticks);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f001 f9c2 	bl	8006ce8 <vTaskDelay>
    }
  }

  return (stat);
 8005964:	68fb      	ldr	r3, [r7, #12]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800596e:	b580      	push	{r7, lr}
 8005970:	b08a      	sub	sp, #40	; 0x28
 8005972:	af02      	add	r7, sp, #8
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	60b9      	str	r1, [r7, #8]
 8005978:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800597a:	2300      	movs	r3, #0
 800597c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800597e:	f3ef 8305 	mrs	r3, IPSR
 8005982:	613b      	str	r3, [r7, #16]
  return(result);
 8005984:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005986:	2b00      	cmp	r3, #0
 8005988:	d15f      	bne.n	8005a4a <osMessageQueueNew+0xdc>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d05c      	beq.n	8005a4a <osMessageQueueNew+0xdc>
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d059      	beq.n	8005a4a <osMessageQueueNew+0xdc>
    mem = -1;
 8005996:	f04f 33ff 	mov.w	r3, #4294967295
 800599a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d029      	beq.n	80059f6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d012      	beq.n	80059d0 <osMessageQueueNew+0x62>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	2b4f      	cmp	r3, #79	; 0x4f
 80059b0:	d90e      	bls.n	80059d0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	695a      	ldr	r2, [r3, #20]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	fb01 f303 	mul.w	r3, r1, r3
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d302      	bcc.n	80059d0 <osMessageQueueNew+0x62>
        mem = 1;
 80059ca:	2301      	movs	r3, #1
 80059cc:	61bb      	str	r3, [r7, #24]
 80059ce:	e014      	b.n	80059fa <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d110      	bne.n	80059fa <osMessageQueueNew+0x8c>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10c      	bne.n	80059fa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d108      	bne.n	80059fa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d104      	bne.n	80059fa <osMessageQueueNew+0x8c>
          mem = 0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	61bb      	str	r3, [r7, #24]
 80059f4:	e001      	b.n	80059fa <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d10b      	bne.n	8005a18 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	691a      	ldr	r2, [r3, #16]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	2100      	movs	r1, #0
 8005a0a:	9100      	str	r1, [sp, #0]
 8005a0c:	68b9      	ldr	r1, [r7, #8]
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 fa4e 	bl	8005eb0 <xQueueGenericCreateStatic>
 8005a14:	61f8      	str	r0, [r7, #28]
 8005a16:	e008      	b.n	8005a2a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d105      	bne.n	8005a2a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005a1e:	2200      	movs	r2, #0
 8005a20:	68b9      	ldr	r1, [r7, #8]
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 fabc 	bl	8005fa0 <xQueueGenericCreate>
 8005a28:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00c      	beq.n	8005a4a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <osMessageQueueNew+0xd0>
        name = attr->name;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	e001      	b.n	8005a42 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005a42:	6979      	ldr	r1, [r7, #20]
 8005a44:	69f8      	ldr	r0, [r7, #28]
 8005a46:	f000 ff4f 	bl	80068e8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005a4a:	69fb      	ldr	r3, [r7, #28]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3720      	adds	r7, #32
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	603b      	str	r3, [r7, #0]
 8005a60:	4613      	mov	r3, r2
 8005a62:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a6c:	f3ef 8305 	mrs	r3, IPSR
 8005a70:	617b      	str	r3, [r7, #20]
  return(result);
 8005a72:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d028      	beq.n	8005aca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d005      	beq.n	8005a8a <osMessageQueuePut+0x36>
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <osMessageQueuePut+0x36>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005a8a:	f06f 0303 	mvn.w	r3, #3
 8005a8e:	61fb      	str	r3, [r7, #28]
 8005a90:	e038      	b.n	8005b04 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005a92:	2300      	movs	r3, #0
 8005a94:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005a96:	f107 0210 	add.w	r2, r7, #16
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	68b9      	ldr	r1, [r7, #8]
 8005a9e:	69b8      	ldr	r0, [r7, #24]
 8005aa0:	f000 fbda 	bl	8006258 <xQueueGenericSendFromISR>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d003      	beq.n	8005ab2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005aaa:	f06f 0302 	mvn.w	r3, #2
 8005aae:	61fb      	str	r3, [r7, #28]
 8005ab0:	e028      	b.n	8005b04 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d025      	beq.n	8005b04 <osMessageQueuePut+0xb0>
 8005ab8:	4b15      	ldr	r3, [pc, #84]	; (8005b10 <osMessageQueuePut+0xbc>)
 8005aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	e01c      	b.n	8005b04 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <osMessageQueuePut+0x82>
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d103      	bne.n	8005ade <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005ad6:	f06f 0303 	mvn.w	r3, #3
 8005ada:	61fb      	str	r3, [r7, #28]
 8005adc:	e012      	b.n	8005b04 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005ade:	2300      	movs	r3, #0
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	68b9      	ldr	r1, [r7, #8]
 8005ae4:	69b8      	ldr	r0, [r7, #24]
 8005ae6:	f000 fab9 	bl	800605c <xQueueGenericSend>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d009      	beq.n	8005b04 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005af6:	f06f 0301 	mvn.w	r3, #1
 8005afa:	61fb      	str	r3, [r7, #28]
 8005afc:	e002      	b.n	8005b04 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005afe:	f06f 0302 	mvn.w	r3, #2
 8005b02:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005b04:	69fb      	ldr	r3, [r7, #28]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3720      	adds	r7, #32
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	e000ed04 	.word	0xe000ed04

08005b14 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
 8005b20:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b2a:	f3ef 8305 	mrs	r3, IPSR
 8005b2e:	617b      	str	r3, [r7, #20]
  return(result);
 8005b30:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d028      	beq.n	8005b88 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <osMessageQueueGet+0x34>
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <osMessageQueueGet+0x34>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005b48:	f06f 0303 	mvn.w	r3, #3
 8005b4c:	61fb      	str	r3, [r7, #28]
 8005b4e:	e037      	b.n	8005bc0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005b50:	2300      	movs	r3, #0
 8005b52:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005b54:	f107 0310 	add.w	r3, r7, #16
 8005b58:	461a      	mov	r2, r3
 8005b5a:	68b9      	ldr	r1, [r7, #8]
 8005b5c:	69b8      	ldr	r0, [r7, #24]
 8005b5e:	f000 fcf7 	bl	8006550 <xQueueReceiveFromISR>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d003      	beq.n	8005b70 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005b68:	f06f 0302 	mvn.w	r3, #2
 8005b6c:	61fb      	str	r3, [r7, #28]
 8005b6e:	e027      	b.n	8005bc0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d024      	beq.n	8005bc0 <osMessageQueueGet+0xac>
 8005b76:	4b15      	ldr	r3, [pc, #84]	; (8005bcc <osMessageQueueGet+0xb8>)
 8005b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	e01b      	b.n	8005bc0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <osMessageQueueGet+0x80>
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d103      	bne.n	8005b9c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005b94:	f06f 0303 	mvn.w	r3, #3
 8005b98:	61fb      	str	r3, [r7, #28]
 8005b9a:	e011      	b.n	8005bc0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	69b8      	ldr	r0, [r7, #24]
 8005ba2:	f000 fbf5 	bl	8006390 <xQueueReceive>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d009      	beq.n	8005bc0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005bb2:	f06f 0301 	mvn.w	r3, #1
 8005bb6:	61fb      	str	r3, [r7, #28]
 8005bb8:	e002      	b.n	8005bc0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005bba:	f06f 0302 	mvn.w	r3, #2
 8005bbe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005bc0:	69fb      	ldr	r3, [r7, #28]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3720      	adds	r7, #32
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	e000ed04 	.word	0xe000ed04

08005bd0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d102      	bne.n	8005be8 <osMessageQueueGetCount+0x18>
    count = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	617b      	str	r3, [r7, #20]
 8005be6:	e00e      	b.n	8005c06 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005be8:	f3ef 8305 	mrs	r3, IPSR
 8005bec:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d004      	beq.n	8005bfe <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005bf4:	6938      	ldr	r0, [r7, #16]
 8005bf6:	f000 fd49 	bl	800668c <uxQueueMessagesWaitingFromISR>
 8005bfa:	6178      	str	r0, [r7, #20]
 8005bfc:	e003      	b.n	8005c06 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005bfe:	6938      	ldr	r0, [r7, #16]
 8005c00:	f000 fd26 	bl	8006650 <uxQueueMessagesWaiting>
 8005c04:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8005c06:	697b      	ldr	r3, [r7, #20]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4a07      	ldr	r2, [pc, #28]	; (8005c3c <vApplicationGetIdleTaskMemory+0x2c>)
 8005c20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	4a06      	ldr	r2, [pc, #24]	; (8005c40 <vApplicationGetIdleTaskMemory+0x30>)
 8005c26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2280      	movs	r2, #128	; 0x80
 8005c2c:	601a      	str	r2, [r3, #0]
}
 8005c2e:	bf00      	nop
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	20000034 	.word	0x20000034
 8005c40:	20000090 	.word	0x20000090

08005c44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4a07      	ldr	r2, [pc, #28]	; (8005c70 <vApplicationGetTimerTaskMemory+0x2c>)
 8005c54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	4a06      	ldr	r2, [pc, #24]	; (8005c74 <vApplicationGetTimerTaskMemory+0x30>)
 8005c5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c62:	601a      	str	r2, [r3, #0]
}
 8005c64:	bf00      	nop
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	20000290 	.word	0x20000290
 8005c74:	200002ec 	.word	0x200002ec

08005c78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f103 0208 	add.w	r2, r3, #8
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f103 0208 	add.w	r2, r3, #8
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f103 0208 	add.w	r2, r3, #8
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b085      	sub	sp, #20
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	601a      	str	r2, [r3, #0]
}
 8005d0e:	bf00      	nop
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b085      	sub	sp, #20
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d30:	d103      	bne.n	8005d3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	e00c      	b.n	8005d54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	3308      	adds	r3, #8
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	e002      	b.n	8005d48 <vListInsert+0x2e>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d2f6      	bcs.n	8005d42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	1c5a      	adds	r2, r3, #1
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	601a      	str	r2, [r3, #0]
}
 8005d80:	bf00      	nop
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6892      	ldr	r2, [r2, #8]
 8005da2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6852      	ldr	r2, [r2, #4]
 8005dac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d103      	bne.n	8005dc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	1e5a      	subs	r2, r3, #1
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10a      	bne.n	8005e0a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e06:	bf00      	nop
 8005e08:	e7fe      	b.n	8005e08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e0a:	f002 f943 	bl	8008094 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e16:	68f9      	ldr	r1, [r7, #12]
 8005e18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e1a:	fb01 f303 	mul.w	r3, r1, r3
 8005e1e:	441a      	add	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	68f9      	ldr	r1, [r7, #12]
 8005e3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e40:	fb01 f303 	mul.w	r3, r1, r3
 8005e44:	441a      	add	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	22ff      	movs	r2, #255	; 0xff
 8005e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	22ff      	movs	r2, #255	; 0xff
 8005e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d114      	bne.n	8005e8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01a      	beq.n	8005e9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	3310      	adds	r3, #16
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f001 f9f9 	bl	8007264 <xTaskRemoveFromEventList>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d012      	beq.n	8005e9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e78:	4b0c      	ldr	r3, [pc, #48]	; (8005eac <xQueueGenericReset+0xcc>)
 8005e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	e009      	b.n	8005e9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3310      	adds	r3, #16
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7ff fef2 	bl	8005c78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3324      	adds	r3, #36	; 0x24
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff feed 	bl	8005c78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e9e:	f002 f929 	bl	80080f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ea2:	2301      	movs	r3, #1
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	e000ed04 	.word	0xe000ed04

08005eb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08e      	sub	sp, #56	; 0x38
 8005eb4:	af02      	add	r7, sp, #8
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
 8005ebc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10a      	bne.n	8005eda <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ed6:	bf00      	nop
 8005ed8:	e7fe      	b.n	8005ed8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10a      	bne.n	8005ef6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ef2:	bf00      	nop
 8005ef4:	e7fe      	b.n	8005ef4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <xQueueGenericCreateStatic+0x52>
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <xQueueGenericCreateStatic+0x56>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e000      	b.n	8005f08 <xQueueGenericCreateStatic+0x58>
 8005f06:	2300      	movs	r3, #0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10a      	bne.n	8005f22 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	623b      	str	r3, [r7, #32]
}
 8005f1e:	bf00      	nop
 8005f20:	e7fe      	b.n	8005f20 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d102      	bne.n	8005f2e <xQueueGenericCreateStatic+0x7e>
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <xQueueGenericCreateStatic+0x82>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <xQueueGenericCreateStatic+0x84>
 8005f32:	2300      	movs	r3, #0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	61fb      	str	r3, [r7, #28]
}
 8005f4a:	bf00      	nop
 8005f4c:	e7fe      	b.n	8005f4c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f4e:	2350      	movs	r3, #80	; 0x50
 8005f50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2b50      	cmp	r3, #80	; 0x50
 8005f56:	d00a      	beq.n	8005f6e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	61bb      	str	r3, [r7, #24]
}
 8005f6a:	bf00      	nop
 8005f6c:	e7fe      	b.n	8005f6c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f6e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00d      	beq.n	8005f96 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	68b9      	ldr	r1, [r7, #8]
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 f83f 	bl	8006014 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3730      	adds	r7, #48	; 0x30
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08a      	sub	sp, #40	; 0x28
 8005fa4:	af02      	add	r7, sp, #8
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	4613      	mov	r3, r2
 8005fac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10a      	bne.n	8005fca <xQueueGenericCreate+0x2a>
	__asm volatile
 8005fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	613b      	str	r3, [r7, #16]
}
 8005fc6:	bf00      	nop
 8005fc8:	e7fe      	b.n	8005fc8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	fb02 f303 	mul.w	r3, r2, r3
 8005fd2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	3350      	adds	r3, #80	; 0x50
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f002 f97d 	bl	80082d8 <pvPortMalloc>
 8005fde:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d011      	beq.n	800600a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	3350      	adds	r3, #80	; 0x50
 8005fee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ff8:	79fa      	ldrb	r2, [r7, #7]
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	4613      	mov	r3, r2
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	68b9      	ldr	r1, [r7, #8]
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 f805 	bl	8006014 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800600a:	69bb      	ldr	r3, [r7, #24]
	}
 800600c:	4618      	mov	r0, r3
 800600e:	3720      	adds	r7, #32
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
 8006020:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d103      	bne.n	8006030 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	e002      	b.n	8006036 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006042:	2101      	movs	r1, #1
 8006044:	69b8      	ldr	r0, [r7, #24]
 8006046:	f7ff fecb 	bl	8005de0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	78fa      	ldrb	r2, [r7, #3]
 800604e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006052:	bf00      	nop
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08e      	sub	sp, #56	; 0x38
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800606a:	2300      	movs	r3, #0
 800606c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10a      	bne.n	800608e <xQueueGenericSend+0x32>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800608a:	bf00      	nop
 800608c:	e7fe      	b.n	800608c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d103      	bne.n	800609c <xQueueGenericSend+0x40>
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <xQueueGenericSend+0x44>
 800609c:	2301      	movs	r3, #1
 800609e:	e000      	b.n	80060a2 <xQueueGenericSend+0x46>
 80060a0:	2300      	movs	r3, #0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10a      	bne.n	80060bc <xQueueGenericSend+0x60>
	__asm volatile
 80060a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060b8:	bf00      	nop
 80060ba:	e7fe      	b.n	80060ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d103      	bne.n	80060ca <xQueueGenericSend+0x6e>
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d101      	bne.n	80060ce <xQueueGenericSend+0x72>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e000      	b.n	80060d0 <xQueueGenericSend+0x74>
 80060ce:	2300      	movs	r3, #0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10a      	bne.n	80060ea <xQueueGenericSend+0x8e>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	623b      	str	r3, [r7, #32]
}
 80060e6:	bf00      	nop
 80060e8:	e7fe      	b.n	80060e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060ea:	f001 fa79 	bl	80075e0 <xTaskGetSchedulerState>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d102      	bne.n	80060fa <xQueueGenericSend+0x9e>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <xQueueGenericSend+0xa2>
 80060fa:	2301      	movs	r3, #1
 80060fc:	e000      	b.n	8006100 <xQueueGenericSend+0xa4>
 80060fe:	2300      	movs	r3, #0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10a      	bne.n	800611a <xQueueGenericSend+0xbe>
	__asm volatile
 8006104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	61fb      	str	r3, [r7, #28]
}
 8006116:	bf00      	nop
 8006118:	e7fe      	b.n	8006118 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800611a:	f001 ffbb 	bl	8008094 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800611e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006126:	429a      	cmp	r2, r3
 8006128:	d302      	bcc.n	8006130 <xQueueGenericSend+0xd4>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2b02      	cmp	r3, #2
 800612e:	d129      	bne.n	8006184 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	68b9      	ldr	r1, [r7, #8]
 8006134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006136:	f000 fac7 	bl	80066c8 <prvCopyDataToQueue>
 800613a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800613c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	2b00      	cmp	r3, #0
 8006142:	d010      	beq.n	8006166 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006146:	3324      	adds	r3, #36	; 0x24
 8006148:	4618      	mov	r0, r3
 800614a:	f001 f88b 	bl	8007264 <xTaskRemoveFromEventList>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d013      	beq.n	800617c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006154:	4b3f      	ldr	r3, [pc, #252]	; (8006254 <xQueueGenericSend+0x1f8>)
 8006156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	e00a      	b.n	800617c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006168:	2b00      	cmp	r3, #0
 800616a:	d007      	beq.n	800617c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800616c:	4b39      	ldr	r3, [pc, #228]	; (8006254 <xQueueGenericSend+0x1f8>)
 800616e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800617c:	f001 ffba 	bl	80080f4 <vPortExitCritical>
				return pdPASS;
 8006180:	2301      	movs	r3, #1
 8006182:	e063      	b.n	800624c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d103      	bne.n	8006192 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800618a:	f001 ffb3 	bl	80080f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800618e:	2300      	movs	r3, #0
 8006190:	e05c      	b.n	800624c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006194:	2b00      	cmp	r3, #0
 8006196:	d106      	bne.n	80061a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006198:	f107 0314 	add.w	r3, r7, #20
 800619c:	4618      	mov	r0, r3
 800619e:	f001 f8c5 	bl	800732c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061a2:	2301      	movs	r3, #1
 80061a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061a6:	f001 ffa5 	bl	80080f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061aa:	f000 fe37 	bl	8006e1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061ae:	f001 ff71 	bl	8008094 <vPortEnterCritical>
 80061b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061b8:	b25b      	sxtb	r3, r3
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061be:	d103      	bne.n	80061c8 <xQueueGenericSend+0x16c>
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ce:	b25b      	sxtb	r3, r3
 80061d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d4:	d103      	bne.n	80061de <xQueueGenericSend+0x182>
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061de:	f001 ff89 	bl	80080f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061e2:	1d3a      	adds	r2, r7, #4
 80061e4:	f107 0314 	add.w	r3, r7, #20
 80061e8:	4611      	mov	r1, r2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f001 f8b4 	bl	8007358 <xTaskCheckForTimeOut>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d124      	bne.n	8006240 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80061f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061f8:	f000 fb5e 	bl	80068b8 <prvIsQueueFull>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d018      	beq.n	8006234 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	3310      	adds	r3, #16
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	4611      	mov	r1, r2
 800620a:	4618      	mov	r0, r3
 800620c:	f000 ffda 	bl	80071c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006212:	f000 fae9 	bl	80067e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006216:	f000 fe0f 	bl	8006e38 <xTaskResumeAll>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	f47f af7c 	bne.w	800611a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006222:	4b0c      	ldr	r3, [pc, #48]	; (8006254 <xQueueGenericSend+0x1f8>)
 8006224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	e772      	b.n	800611a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006236:	f000 fad7 	bl	80067e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800623a:	f000 fdfd 	bl	8006e38 <xTaskResumeAll>
 800623e:	e76c      	b.n	800611a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006242:	f000 fad1 	bl	80067e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006246:	f000 fdf7 	bl	8006e38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800624a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800624c:	4618      	mov	r0, r3
 800624e:	3738      	adds	r7, #56	; 0x38
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	e000ed04 	.word	0xe000ed04

08006258 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b090      	sub	sp, #64	; 0x40
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800626a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10a      	bne.n	8006286 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006282:	bf00      	nop
 8006284:	e7fe      	b.n	8006284 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d103      	bne.n	8006294 <xQueueGenericSendFromISR+0x3c>
 800628c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <xQueueGenericSendFromISR+0x40>
 8006294:	2301      	movs	r3, #1
 8006296:	e000      	b.n	800629a <xQueueGenericSendFromISR+0x42>
 8006298:	2300      	movs	r3, #0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10a      	bne.n	80062b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062b0:	bf00      	nop
 80062b2:	e7fe      	b.n	80062b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d103      	bne.n	80062c2 <xQueueGenericSendFromISR+0x6a>
 80062ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d101      	bne.n	80062c6 <xQueueGenericSendFromISR+0x6e>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e000      	b.n	80062c8 <xQueueGenericSendFromISR+0x70>
 80062c6:	2300      	movs	r3, #0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10a      	bne.n	80062e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	623b      	str	r3, [r7, #32]
}
 80062de:	bf00      	nop
 80062e0:	e7fe      	b.n	80062e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062e2:	f001 ffb9 	bl	8008258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80062e6:	f3ef 8211 	mrs	r2, BASEPRI
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	61fa      	str	r2, [r7, #28]
 80062fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80062fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006300:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630a:	429a      	cmp	r2, r3
 800630c:	d302      	bcc.n	8006314 <xQueueGenericSendFromISR+0xbc>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b02      	cmp	r3, #2
 8006312:	d12f      	bne.n	8006374 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006316:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800631a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800631e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006322:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	68b9      	ldr	r1, [r7, #8]
 8006328:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800632a:	f000 f9cd 	bl	80066c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800632e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006336:	d112      	bne.n	800635e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	2b00      	cmp	r3, #0
 800633e:	d016      	beq.n	800636e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006342:	3324      	adds	r3, #36	; 0x24
 8006344:	4618      	mov	r0, r3
 8006346:	f000 ff8d 	bl	8007264 <xTaskRemoveFromEventList>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00e      	beq.n	800636e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00b      	beq.n	800636e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	e007      	b.n	800636e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800635e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006362:	3301      	adds	r3, #1
 8006364:	b2db      	uxtb	r3, r3
 8006366:	b25a      	sxtb	r2, r3
 8006368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800636e:	2301      	movs	r3, #1
 8006370:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006372:	e001      	b.n	8006378 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006374:	2300      	movs	r3, #0
 8006376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006382:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006386:	4618      	mov	r0, r3
 8006388:	3740      	adds	r7, #64	; 0x40
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b08c      	sub	sp, #48	; 0x30
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800639c:	2300      	movs	r3, #0
 800639e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10a      	bne.n	80063c0 <xQueueReceive+0x30>
	__asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	623b      	str	r3, [r7, #32]
}
 80063bc:	bf00      	nop
 80063be:	e7fe      	b.n	80063be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d103      	bne.n	80063ce <xQueueReceive+0x3e>
 80063c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <xQueueReceive+0x42>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e000      	b.n	80063d4 <xQueueReceive+0x44>
 80063d2:	2300      	movs	r3, #0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10a      	bne.n	80063ee <xQueueReceive+0x5e>
	__asm volatile
 80063d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	61fb      	str	r3, [r7, #28]
}
 80063ea:	bf00      	nop
 80063ec:	e7fe      	b.n	80063ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063ee:	f001 f8f7 	bl	80075e0 <xTaskGetSchedulerState>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d102      	bne.n	80063fe <xQueueReceive+0x6e>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <xQueueReceive+0x72>
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <xQueueReceive+0x74>
 8006402:	2300      	movs	r3, #0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10a      	bne.n	800641e <xQueueReceive+0x8e>
	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	61bb      	str	r3, [r7, #24]
}
 800641a:	bf00      	nop
 800641c:	e7fe      	b.n	800641c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800641e:	f001 fe39 	bl	8008094 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006426:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	2b00      	cmp	r3, #0
 800642c:	d01f      	beq.n	800646e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800642e:	68b9      	ldr	r1, [r7, #8]
 8006430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006432:	f000 f9b3 	bl	800679c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	1e5a      	subs	r2, r3, #1
 800643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800643e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00f      	beq.n	8006466 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006448:	3310      	adds	r3, #16
 800644a:	4618      	mov	r0, r3
 800644c:	f000 ff0a 	bl	8007264 <xTaskRemoveFromEventList>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d007      	beq.n	8006466 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006456:	4b3d      	ldr	r3, [pc, #244]	; (800654c <xQueueReceive+0x1bc>)
 8006458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006466:	f001 fe45 	bl	80080f4 <vPortExitCritical>
				return pdPASS;
 800646a:	2301      	movs	r3, #1
 800646c:	e069      	b.n	8006542 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d103      	bne.n	800647c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006474:	f001 fe3e 	bl	80080f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006478:	2300      	movs	r3, #0
 800647a:	e062      	b.n	8006542 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800647c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d106      	bne.n	8006490 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006482:	f107 0310 	add.w	r3, r7, #16
 8006486:	4618      	mov	r0, r3
 8006488:	f000 ff50 	bl	800732c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800648c:	2301      	movs	r3, #1
 800648e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006490:	f001 fe30 	bl	80080f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006494:	f000 fcc2 	bl	8006e1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006498:	f001 fdfc 	bl	8008094 <vPortEnterCritical>
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064a2:	b25b      	sxtb	r3, r3
 80064a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a8:	d103      	bne.n	80064b2 <xQueueReceive+0x122>
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064b8:	b25b      	sxtb	r3, r3
 80064ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064be:	d103      	bne.n	80064c8 <xQueueReceive+0x138>
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064c8:	f001 fe14 	bl	80080f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064cc:	1d3a      	adds	r2, r7, #4
 80064ce:	f107 0310 	add.w	r3, r7, #16
 80064d2:	4611      	mov	r1, r2
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 ff3f 	bl	8007358 <xTaskCheckForTimeOut>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d123      	bne.n	8006528 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064e2:	f000 f9d3 	bl	800688c <prvIsQueueEmpty>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d017      	beq.n	800651c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	3324      	adds	r3, #36	; 0x24
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	4611      	mov	r1, r2
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 fe65 	bl	80071c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064fc:	f000 f974 	bl	80067e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006500:	f000 fc9a 	bl	8006e38 <xTaskResumeAll>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d189      	bne.n	800641e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800650a:	4b10      	ldr	r3, [pc, #64]	; (800654c <xQueueReceive+0x1bc>)
 800650c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	e780      	b.n	800641e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800651c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800651e:	f000 f963 	bl	80067e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006522:	f000 fc89 	bl	8006e38 <xTaskResumeAll>
 8006526:	e77a      	b.n	800641e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800652a:	f000 f95d 	bl	80067e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800652e:	f000 fc83 	bl	8006e38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006534:	f000 f9aa 	bl	800688c <prvIsQueueEmpty>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	f43f af6f 	beq.w	800641e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006540:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006542:	4618      	mov	r0, r3
 8006544:	3730      	adds	r7, #48	; 0x30
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	e000ed04 	.word	0xe000ed04

08006550 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08e      	sub	sp, #56	; 0x38
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10a      	bne.n	800657c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	623b      	str	r3, [r7, #32]
}
 8006578:	bf00      	nop
 800657a:	e7fe      	b.n	800657a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d103      	bne.n	800658a <xQueueReceiveFromISR+0x3a>
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <xQueueReceiveFromISR+0x3e>
 800658a:	2301      	movs	r3, #1
 800658c:	e000      	b.n	8006590 <xQueueReceiveFromISR+0x40>
 800658e:	2300      	movs	r3, #0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10a      	bne.n	80065aa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	61fb      	str	r3, [r7, #28]
}
 80065a6:	bf00      	nop
 80065a8:	e7fe      	b.n	80065a8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065aa:	f001 fe55 	bl	8008258 <vPortValidateInterruptPriority>
	__asm volatile
 80065ae:	f3ef 8211 	mrs	r2, BASEPRI
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	61ba      	str	r2, [r7, #24]
 80065c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80065c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d02f      	beq.n	8006636 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065e0:	68b9      	ldr	r1, [r7, #8]
 80065e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065e4:	f000 f8da 	bl	800679c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	1e5a      	subs	r2, r3, #1
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80065f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f8:	d112      	bne.n	8006620 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d016      	beq.n	8006630 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006604:	3310      	adds	r3, #16
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fe2c 	bl	8007264 <xTaskRemoveFromEventList>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00e      	beq.n	8006630 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00b      	beq.n	8006630 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	e007      	b.n	8006630 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006624:	3301      	adds	r3, #1
 8006626:	b2db      	uxtb	r3, r3
 8006628:	b25a      	sxtb	r2, r3
 800662a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006630:	2301      	movs	r3, #1
 8006632:	637b      	str	r3, [r7, #52]	; 0x34
 8006634:	e001      	b.n	800663a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006636:	2300      	movs	r3, #0
 8006638:	637b      	str	r3, [r7, #52]	; 0x34
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f383 8811 	msr	BASEPRI, r3
}
 8006644:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006648:	4618      	mov	r0, r3
 800664a:	3738      	adds	r7, #56	; 0x38
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10a      	bne.n	8006674 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	60bb      	str	r3, [r7, #8]
}
 8006670:	bf00      	nop
 8006672:	e7fe      	b.n	8006672 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006674:	f001 fd0e 	bl	8008094 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800667e:	f001 fd39 	bl	80080f4 <vPortExitCritical>

	return uxReturn;
 8006682:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10a      	bne.n	80066b4 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	60fb      	str	r3, [r7, #12]
}
 80066b0:	bf00      	nop
 80066b2:	e7fe      	b.n	80066b2 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80066ba:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80066bc:	4618      	mov	r0, r3
 80066be:	371c      	adds	r7, #28
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80066d4:	2300      	movs	r3, #0
 80066d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10d      	bne.n	8006702 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d14d      	bne.n	800678a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 ff92 	bl	800761c <xTaskPriorityDisinherit>
 80066f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	609a      	str	r2, [r3, #8]
 8006700:	e043      	b.n	800678a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d119      	bne.n	800673c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6858      	ldr	r0, [r3, #4]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006710:	461a      	mov	r2, r3
 8006712:	68b9      	ldr	r1, [r7, #8]
 8006714:	f001 ffee 	bl	80086f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006720:	441a      	add	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	429a      	cmp	r2, r3
 8006730:	d32b      	bcc.n	800678a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	605a      	str	r2, [r3, #4]
 800673a:	e026      	b.n	800678a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	68d8      	ldr	r0, [r3, #12]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006744:	461a      	mov	r2, r3
 8006746:	68b9      	ldr	r1, [r7, #8]
 8006748:	f001 ffd4 	bl	80086f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	68da      	ldr	r2, [r3, #12]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006754:	425b      	negs	r3, r3
 8006756:	441a      	add	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	68da      	ldr	r2, [r3, #12]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	429a      	cmp	r2, r3
 8006766:	d207      	bcs.n	8006778 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	689a      	ldr	r2, [r3, #8]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006770:	425b      	negs	r3, r3
 8006772:	441a      	add	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b02      	cmp	r3, #2
 800677c:	d105      	bne.n	800678a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	3b01      	subs	r3, #1
 8006788:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006792:	697b      	ldr	r3, [r7, #20]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d018      	beq.n	80067e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	441a      	add	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68da      	ldr	r2, [r3, #12]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d303      	bcc.n	80067d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68d9      	ldr	r1, [r3, #12]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d8:	461a      	mov	r2, r3
 80067da:	6838      	ldr	r0, [r7, #0]
 80067dc:	f001 ff8a 	bl	80086f4 <memcpy>
	}
}
 80067e0:	bf00      	nop
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067f0:	f001 fc50 	bl	8008094 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067fc:	e011      	b.n	8006822 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	2b00      	cmp	r3, #0
 8006804:	d012      	beq.n	800682c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	3324      	adds	r3, #36	; 0x24
 800680a:	4618      	mov	r0, r3
 800680c:	f000 fd2a 	bl	8007264 <xTaskRemoveFromEventList>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006816:	f000 fe01 	bl	800741c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800681a:	7bfb      	ldrb	r3, [r7, #15]
 800681c:	3b01      	subs	r3, #1
 800681e:	b2db      	uxtb	r3, r3
 8006820:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006826:	2b00      	cmp	r3, #0
 8006828:	dce9      	bgt.n	80067fe <prvUnlockQueue+0x16>
 800682a:	e000      	b.n	800682e <prvUnlockQueue+0x46>
					break;
 800682c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	22ff      	movs	r2, #255	; 0xff
 8006832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006836:	f001 fc5d 	bl	80080f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800683a:	f001 fc2b 	bl	8008094 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006844:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006846:	e011      	b.n	800686c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d012      	beq.n	8006876 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	3310      	adds	r3, #16
 8006854:	4618      	mov	r0, r3
 8006856:	f000 fd05 	bl	8007264 <xTaskRemoveFromEventList>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006860:	f000 fddc 	bl	800741c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006864:	7bbb      	ldrb	r3, [r7, #14]
 8006866:	3b01      	subs	r3, #1
 8006868:	b2db      	uxtb	r3, r3
 800686a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800686c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006870:	2b00      	cmp	r3, #0
 8006872:	dce9      	bgt.n	8006848 <prvUnlockQueue+0x60>
 8006874:	e000      	b.n	8006878 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006876:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	22ff      	movs	r2, #255	; 0xff
 800687c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006880:	f001 fc38 	bl	80080f4 <vPortExitCritical>
}
 8006884:	bf00      	nop
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006894:	f001 fbfe 	bl	8008094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689c:	2b00      	cmp	r3, #0
 800689e:	d102      	bne.n	80068a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80068a0:	2301      	movs	r3, #1
 80068a2:	60fb      	str	r3, [r7, #12]
 80068a4:	e001      	b.n	80068aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80068a6:	2300      	movs	r3, #0
 80068a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068aa:	f001 fc23 	bl	80080f4 <vPortExitCritical>

	return xReturn;
 80068ae:	68fb      	ldr	r3, [r7, #12]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068c0:	f001 fbe8 	bl	8008094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d102      	bne.n	80068d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80068d0:	2301      	movs	r3, #1
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	e001      	b.n	80068da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80068d6:	2300      	movs	r3, #0
 80068d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068da:	f001 fc0b 	bl	80080f4 <vPortExitCritical>

	return xReturn;
 80068de:	68fb      	ldr	r3, [r7, #12]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068f2:	2300      	movs	r3, #0
 80068f4:	60fb      	str	r3, [r7, #12]
 80068f6:	e014      	b.n	8006922 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80068f8:	4a0f      	ldr	r2, [pc, #60]	; (8006938 <vQueueAddToRegistry+0x50>)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10b      	bne.n	800691c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006904:	490c      	ldr	r1, [pc, #48]	; (8006938 <vQueueAddToRegistry+0x50>)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800690e:	4a0a      	ldr	r2, [pc, #40]	; (8006938 <vQueueAddToRegistry+0x50>)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	4413      	add	r3, r2
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800691a:	e006      	b.n	800692a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	3301      	adds	r3, #1
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2b07      	cmp	r3, #7
 8006926:	d9e7      	bls.n	80068f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006928:	bf00      	nop
 800692a:	bf00      	nop
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	20001adc 	.word	0x20001adc

0800693c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800694c:	f001 fba2 	bl	8008094 <vPortEnterCritical>
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006956:	b25b      	sxtb	r3, r3
 8006958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695c:	d103      	bne.n	8006966 <vQueueWaitForMessageRestricted+0x2a>
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800696c:	b25b      	sxtb	r3, r3
 800696e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006972:	d103      	bne.n	800697c <vQueueWaitForMessageRestricted+0x40>
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800697c:	f001 fbba 	bl	80080f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006984:	2b00      	cmp	r3, #0
 8006986:	d106      	bne.n	8006996 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	3324      	adds	r3, #36	; 0x24
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	68b9      	ldr	r1, [r7, #8]
 8006990:	4618      	mov	r0, r3
 8006992:	f000 fc3b 	bl	800720c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006996:	6978      	ldr	r0, [r7, #20]
 8006998:	f7ff ff26 	bl	80067e8 <prvUnlockQueue>
	}
 800699c:	bf00      	nop
 800699e:	3718      	adds	r7, #24
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08e      	sub	sp, #56	; 0x38
 80069a8:	af04      	add	r7, sp, #16
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80069b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10a      	bne.n	80069ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	623b      	str	r3, [r7, #32]
}
 80069ca:	bf00      	nop
 80069cc:	e7fe      	b.n	80069cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80069ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10a      	bne.n	80069ea <xTaskCreateStatic+0x46>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	61fb      	str	r3, [r7, #28]
}
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069ea:	235c      	movs	r3, #92	; 0x5c
 80069ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	2b5c      	cmp	r3, #92	; 0x5c
 80069f2:	d00a      	beq.n	8006a0a <xTaskCreateStatic+0x66>
	__asm volatile
 80069f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	61bb      	str	r3, [r7, #24]
}
 8006a06:	bf00      	nop
 8006a08:	e7fe      	b.n	8006a08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d01e      	beq.n	8006a50 <xTaskCreateStatic+0xac>
 8006a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d01b      	beq.n	8006a50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	2202      	movs	r2, #2
 8006a26:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	9303      	str	r3, [sp, #12]
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	9302      	str	r3, [sp, #8]
 8006a32:	f107 0314 	add.w	r3, r7, #20
 8006a36:	9301      	str	r3, [sp, #4]
 8006a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	68b9      	ldr	r1, [r7, #8]
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 f850 	bl	8006ae8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a4a:	f000 f8dd 	bl	8006c08 <prvAddNewTaskToReadyList>
 8006a4e:	e001      	b.n	8006a54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006a50:	2300      	movs	r3, #0
 8006a52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a54:	697b      	ldr	r3, [r7, #20]
	}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3728      	adds	r7, #40	; 0x28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b08c      	sub	sp, #48	; 0x30
 8006a62:	af04      	add	r7, sp, #16
 8006a64:	60f8      	str	r0, [r7, #12]
 8006a66:	60b9      	str	r1, [r7, #8]
 8006a68:	603b      	str	r3, [r7, #0]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a6e:	88fb      	ldrh	r3, [r7, #6]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4618      	mov	r0, r3
 8006a74:	f001 fc30 	bl	80082d8 <pvPortMalloc>
 8006a78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00e      	beq.n	8006a9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a80:	205c      	movs	r0, #92	; 0x5c
 8006a82:	f001 fc29 	bl	80082d8 <pvPortMalloc>
 8006a86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	631a      	str	r2, [r3, #48]	; 0x30
 8006a94:	e005      	b.n	8006aa2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a96:	6978      	ldr	r0, [r7, #20]
 8006a98:	f001 fcea 	bl	8008470 <vPortFree>
 8006a9c:	e001      	b.n	8006aa2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d017      	beq.n	8006ad8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ab0:	88fa      	ldrh	r2, [r7, #6]
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	9303      	str	r3, [sp, #12]
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	9302      	str	r3, [sp, #8]
 8006aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006abc:	9301      	str	r3, [sp, #4]
 8006abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	68b9      	ldr	r1, [r7, #8]
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f000 f80e 	bl	8006ae8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006acc:	69f8      	ldr	r0, [r7, #28]
 8006ace:	f000 f89b 	bl	8006c08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	61bb      	str	r3, [r7, #24]
 8006ad6:	e002      	b.n	8006ade <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8006adc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ade:	69bb      	ldr	r3, [r7, #24]
	}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3720      	adds	r7, #32
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b088      	sub	sp, #32
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
 8006af4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	461a      	mov	r2, r3
 8006b00:	21a5      	movs	r1, #165	; 0xa5
 8006b02:	f001 fe05 	bl	8008710 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b10:	3b01      	subs	r3, #1
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	f023 0307 	bic.w	r3, r3, #7
 8006b1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	617b      	str	r3, [r7, #20]
}
 8006b3c:	bf00      	nop
 8006b3e:	e7fe      	b.n	8006b3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d01f      	beq.n	8006b86 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b46:	2300      	movs	r3, #0
 8006b48:	61fb      	str	r3, [r7, #28]
 8006b4a:	e012      	b.n	8006b72 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	4413      	add	r3, r2
 8006b52:	7819      	ldrb	r1, [r3, #0]
 8006b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	4413      	add	r3, r2
 8006b5a:	3334      	adds	r3, #52	; 0x34
 8006b5c:	460a      	mov	r2, r1
 8006b5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	4413      	add	r3, r2
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d006      	beq.n	8006b7a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	61fb      	str	r3, [r7, #28]
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	2b0f      	cmp	r3, #15
 8006b76:	d9e9      	bls.n	8006b4c <prvInitialiseNewTask+0x64>
 8006b78:	e000      	b.n	8006b7c <prvInitialiseNewTask+0x94>
			{
				break;
 8006b7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b84:	e003      	b.n	8006b8e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	2b37      	cmp	r3, #55	; 0x37
 8006b92:	d901      	bls.n	8006b98 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b94:	2337      	movs	r3, #55	; 0x37
 8006b96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ba2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	3304      	adds	r3, #4
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7ff f882 	bl	8005cb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	3318      	adds	r3, #24
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7ff f87d 	bl	8005cb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	68f9      	ldr	r1, [r7, #12]
 8006be6:	69b8      	ldr	r0, [r7, #24]
 8006be8:	f001 f928 	bl	8007e3c <pxPortInitialiseStack>
 8006bec:	4602      	mov	r2, r0
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bfe:	bf00      	nop
 8006c00:	3720      	adds	r7, #32
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
	...

08006c08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c10:	f001 fa40 	bl	8008094 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c14:	4b2d      	ldr	r3, [pc, #180]	; (8006ccc <prvAddNewTaskToReadyList+0xc4>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	4a2c      	ldr	r2, [pc, #176]	; (8006ccc <prvAddNewTaskToReadyList+0xc4>)
 8006c1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c1e:	4b2c      	ldr	r3, [pc, #176]	; (8006cd0 <prvAddNewTaskToReadyList+0xc8>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d109      	bne.n	8006c3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c26:	4a2a      	ldr	r2, [pc, #168]	; (8006cd0 <prvAddNewTaskToReadyList+0xc8>)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c2c:	4b27      	ldr	r3, [pc, #156]	; (8006ccc <prvAddNewTaskToReadyList+0xc4>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d110      	bne.n	8006c56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c34:	f000 fc16 	bl	8007464 <prvInitialiseTaskLists>
 8006c38:	e00d      	b.n	8006c56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c3a:	4b26      	ldr	r3, [pc, #152]	; (8006cd4 <prvAddNewTaskToReadyList+0xcc>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d109      	bne.n	8006c56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c42:	4b23      	ldr	r3, [pc, #140]	; (8006cd0 <prvAddNewTaskToReadyList+0xc8>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d802      	bhi.n	8006c56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c50:	4a1f      	ldr	r2, [pc, #124]	; (8006cd0 <prvAddNewTaskToReadyList+0xc8>)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c56:	4b20      	ldr	r3, [pc, #128]	; (8006cd8 <prvAddNewTaskToReadyList+0xd0>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	4a1e      	ldr	r2, [pc, #120]	; (8006cd8 <prvAddNewTaskToReadyList+0xd0>)
 8006c5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c60:	4b1d      	ldr	r3, [pc, #116]	; (8006cd8 <prvAddNewTaskToReadyList+0xd0>)
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c6c:	4b1b      	ldr	r3, [pc, #108]	; (8006cdc <prvAddNewTaskToReadyList+0xd4>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d903      	bls.n	8006c7c <prvAddNewTaskToReadyList+0x74>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c78:	4a18      	ldr	r2, [pc, #96]	; (8006cdc <prvAddNewTaskToReadyList+0xd4>)
 8006c7a:	6013      	str	r3, [r2, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c80:	4613      	mov	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4413      	add	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4a15      	ldr	r2, [pc, #84]	; (8006ce0 <prvAddNewTaskToReadyList+0xd8>)
 8006c8a:	441a      	add	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	3304      	adds	r3, #4
 8006c90:	4619      	mov	r1, r3
 8006c92:	4610      	mov	r0, r2
 8006c94:	f7ff f81d 	bl	8005cd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c98:	f001 fa2c 	bl	80080f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c9c:	4b0d      	ldr	r3, [pc, #52]	; (8006cd4 <prvAddNewTaskToReadyList+0xcc>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00e      	beq.n	8006cc2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ca4:	4b0a      	ldr	r3, [pc, #40]	; (8006cd0 <prvAddNewTaskToReadyList+0xc8>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d207      	bcs.n	8006cc2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cb2:	4b0c      	ldr	r3, [pc, #48]	; (8006ce4 <prvAddNewTaskToReadyList+0xdc>)
 8006cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb8:	601a      	str	r2, [r3, #0]
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cc2:	bf00      	nop
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000bc0 	.word	0x20000bc0
 8006cd0:	200006ec 	.word	0x200006ec
 8006cd4:	20000bcc 	.word	0x20000bcc
 8006cd8:	20000bdc 	.word	0x20000bdc
 8006cdc:	20000bc8 	.word	0x20000bc8
 8006ce0:	200006f0 	.word	0x200006f0
 8006ce4:	e000ed04 	.word	0xe000ed04

08006ce8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d017      	beq.n	8006d2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cfa:	4b13      	ldr	r3, [pc, #76]	; (8006d48 <vTaskDelay+0x60>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <vTaskDelay+0x30>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	60bb      	str	r3, [r7, #8]
}
 8006d14:	bf00      	nop
 8006d16:	e7fe      	b.n	8006d16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d18:	f000 f880 	bl	8006e1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fcea 	bl	80076f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d24:	f000 f888 	bl	8006e38 <xTaskResumeAll>
 8006d28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d107      	bne.n	8006d40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d30:	4b06      	ldr	r3, [pc, #24]	; (8006d4c <vTaskDelay+0x64>)
 8006d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d36:	601a      	str	r2, [r3, #0]
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d40:	bf00      	nop
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	20000be8 	.word	0x20000be8
 8006d4c:	e000ed04 	.word	0xe000ed04

08006d50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08a      	sub	sp, #40	; 0x28
 8006d54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d5e:	463a      	mov	r2, r7
 8006d60:	1d39      	adds	r1, r7, #4
 8006d62:	f107 0308 	add.w	r3, r7, #8
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fe ff52 	bl	8005c10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	9202      	str	r2, [sp, #8]
 8006d74:	9301      	str	r3, [sp, #4]
 8006d76:	2300      	movs	r3, #0
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	460a      	mov	r2, r1
 8006d7e:	4921      	ldr	r1, [pc, #132]	; (8006e04 <vTaskStartScheduler+0xb4>)
 8006d80:	4821      	ldr	r0, [pc, #132]	; (8006e08 <vTaskStartScheduler+0xb8>)
 8006d82:	f7ff fe0f 	bl	80069a4 <xTaskCreateStatic>
 8006d86:	4603      	mov	r3, r0
 8006d88:	4a20      	ldr	r2, [pc, #128]	; (8006e0c <vTaskStartScheduler+0xbc>)
 8006d8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d8c:	4b1f      	ldr	r3, [pc, #124]	; (8006e0c <vTaskStartScheduler+0xbc>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d94:	2301      	movs	r3, #1
 8006d96:	617b      	str	r3, [r7, #20]
 8006d98:	e001      	b.n	8006d9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d102      	bne.n	8006daa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006da4:	f000 fcfc 	bl	80077a0 <xTimerCreateTimerTask>
 8006da8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d116      	bne.n	8006dde <vTaskStartScheduler+0x8e>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	613b      	str	r3, [r7, #16]
}
 8006dc2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006dc4:	4b12      	ldr	r3, [pc, #72]	; (8006e10 <vTaskStartScheduler+0xc0>)
 8006dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006dcc:	4b11      	ldr	r3, [pc, #68]	; (8006e14 <vTaskStartScheduler+0xc4>)
 8006dce:	2201      	movs	r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006dd2:	4b11      	ldr	r3, [pc, #68]	; (8006e18 <vTaskStartScheduler+0xc8>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006dd8:	f001 f8ba 	bl	8007f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ddc:	e00e      	b.n	8006dfc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de4:	d10a      	bne.n	8006dfc <vTaskStartScheduler+0xac>
	__asm volatile
 8006de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	60fb      	str	r3, [r7, #12]
}
 8006df8:	bf00      	nop
 8006dfa:	e7fe      	b.n	8006dfa <vTaskStartScheduler+0xaa>
}
 8006dfc:	bf00      	nop
 8006dfe:	3718      	adds	r7, #24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	08008798 	.word	0x08008798
 8006e08:	08007435 	.word	0x08007435
 8006e0c:	20000be4 	.word	0x20000be4
 8006e10:	20000be0 	.word	0x20000be0
 8006e14:	20000bcc 	.word	0x20000bcc
 8006e18:	20000bc4 	.word	0x20000bc4

08006e1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e20:	4b04      	ldr	r3, [pc, #16]	; (8006e34 <vTaskSuspendAll+0x18>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3301      	adds	r3, #1
 8006e26:	4a03      	ldr	r2, [pc, #12]	; (8006e34 <vTaskSuspendAll+0x18>)
 8006e28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e2a:	bf00      	nop
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	20000be8 	.word	0x20000be8

08006e38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e42:	2300      	movs	r3, #0
 8006e44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e46:	4b42      	ldr	r3, [pc, #264]	; (8006f50 <xTaskResumeAll+0x118>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10a      	bne.n	8006e64 <xTaskResumeAll+0x2c>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	603b      	str	r3, [r7, #0]
}
 8006e60:	bf00      	nop
 8006e62:	e7fe      	b.n	8006e62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e64:	f001 f916 	bl	8008094 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e68:	4b39      	ldr	r3, [pc, #228]	; (8006f50 <xTaskResumeAll+0x118>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	4a38      	ldr	r2, [pc, #224]	; (8006f50 <xTaskResumeAll+0x118>)
 8006e70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e72:	4b37      	ldr	r3, [pc, #220]	; (8006f50 <xTaskResumeAll+0x118>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d162      	bne.n	8006f40 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e7a:	4b36      	ldr	r3, [pc, #216]	; (8006f54 <xTaskResumeAll+0x11c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d05e      	beq.n	8006f40 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e82:	e02f      	b.n	8006ee4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e84:	4b34      	ldr	r3, [pc, #208]	; (8006f58 <xTaskResumeAll+0x120>)
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	3318      	adds	r3, #24
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fe ff7b 	bl	8005d8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3304      	adds	r3, #4
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fe ff76 	bl	8005d8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea4:	4b2d      	ldr	r3, [pc, #180]	; (8006f5c <xTaskResumeAll+0x124>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d903      	bls.n	8006eb4 <xTaskResumeAll+0x7c>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb0:	4a2a      	ldr	r2, [pc, #168]	; (8006f5c <xTaskResumeAll+0x124>)
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb8:	4613      	mov	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4a27      	ldr	r2, [pc, #156]	; (8006f60 <xTaskResumeAll+0x128>)
 8006ec2:	441a      	add	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4610      	mov	r0, r2
 8006ecc:	f7fe ff01 	bl	8005cd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed4:	4b23      	ldr	r3, [pc, #140]	; (8006f64 <xTaskResumeAll+0x12c>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d302      	bcc.n	8006ee4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006ede:	4b22      	ldr	r3, [pc, #136]	; (8006f68 <xTaskResumeAll+0x130>)
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ee4:	4b1c      	ldr	r3, [pc, #112]	; (8006f58 <xTaskResumeAll+0x120>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1cb      	bne.n	8006e84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ef2:	f000 fb55 	bl	80075a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ef6:	4b1d      	ldr	r3, [pc, #116]	; (8006f6c <xTaskResumeAll+0x134>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d010      	beq.n	8006f24 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f02:	f000 f847 	bl	8006f94 <xTaskIncrementTick>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f0c:	4b16      	ldr	r3, [pc, #88]	; (8006f68 <xTaskResumeAll+0x130>)
 8006f0e:	2201      	movs	r2, #1
 8006f10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	3b01      	subs	r3, #1
 8006f16:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1f1      	bne.n	8006f02 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006f1e:	4b13      	ldr	r3, [pc, #76]	; (8006f6c <xTaskResumeAll+0x134>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f24:	4b10      	ldr	r3, [pc, #64]	; (8006f68 <xTaskResumeAll+0x130>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d009      	beq.n	8006f40 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f30:	4b0f      	ldr	r3, [pc, #60]	; (8006f70 <xTaskResumeAll+0x138>)
 8006f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f40:	f001 f8d8 	bl	80080f4 <vPortExitCritical>

	return xAlreadyYielded;
 8006f44:	68bb      	ldr	r3, [r7, #8]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	20000be8 	.word	0x20000be8
 8006f54:	20000bc0 	.word	0x20000bc0
 8006f58:	20000b80 	.word	0x20000b80
 8006f5c:	20000bc8 	.word	0x20000bc8
 8006f60:	200006f0 	.word	0x200006f0
 8006f64:	200006ec 	.word	0x200006ec
 8006f68:	20000bd4 	.word	0x20000bd4
 8006f6c:	20000bd0 	.word	0x20000bd0
 8006f70:	e000ed04 	.word	0xe000ed04

08006f74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f7a:	4b05      	ldr	r3, [pc, #20]	; (8006f90 <xTaskGetTickCount+0x1c>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f80:	687b      	ldr	r3, [r7, #4]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	20000bc4 	.word	0x20000bc4

08006f94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f9e:	4b4f      	ldr	r3, [pc, #316]	; (80070dc <xTaskIncrementTick+0x148>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f040 808f 	bne.w	80070c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fa8:	4b4d      	ldr	r3, [pc, #308]	; (80070e0 <xTaskIncrementTick+0x14c>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3301      	adds	r3, #1
 8006fae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fb0:	4a4b      	ldr	r2, [pc, #300]	; (80070e0 <xTaskIncrementTick+0x14c>)
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d120      	bne.n	8006ffe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fbc:	4b49      	ldr	r3, [pc, #292]	; (80070e4 <xTaskIncrementTick+0x150>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00a      	beq.n	8006fdc <xTaskIncrementTick+0x48>
	__asm volatile
 8006fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	603b      	str	r3, [r7, #0]
}
 8006fd8:	bf00      	nop
 8006fda:	e7fe      	b.n	8006fda <xTaskIncrementTick+0x46>
 8006fdc:	4b41      	ldr	r3, [pc, #260]	; (80070e4 <xTaskIncrementTick+0x150>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	4b41      	ldr	r3, [pc, #260]	; (80070e8 <xTaskIncrementTick+0x154>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a3f      	ldr	r2, [pc, #252]	; (80070e4 <xTaskIncrementTick+0x150>)
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	4a3f      	ldr	r2, [pc, #252]	; (80070e8 <xTaskIncrementTick+0x154>)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6013      	str	r3, [r2, #0]
 8006ff0:	4b3e      	ldr	r3, [pc, #248]	; (80070ec <xTaskIncrementTick+0x158>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	4a3d      	ldr	r2, [pc, #244]	; (80070ec <xTaskIncrementTick+0x158>)
 8006ff8:	6013      	str	r3, [r2, #0]
 8006ffa:	f000 fad1 	bl	80075a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ffe:	4b3c      	ldr	r3, [pc, #240]	; (80070f0 <xTaskIncrementTick+0x15c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	429a      	cmp	r2, r3
 8007006:	d349      	bcc.n	800709c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007008:	4b36      	ldr	r3, [pc, #216]	; (80070e4 <xTaskIncrementTick+0x150>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d104      	bne.n	800701c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007012:	4b37      	ldr	r3, [pc, #220]	; (80070f0 <xTaskIncrementTick+0x15c>)
 8007014:	f04f 32ff 	mov.w	r2, #4294967295
 8007018:	601a      	str	r2, [r3, #0]
					break;
 800701a:	e03f      	b.n	800709c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800701c:	4b31      	ldr	r3, [pc, #196]	; (80070e4 <xTaskIncrementTick+0x150>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	429a      	cmp	r2, r3
 8007032:	d203      	bcs.n	800703c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007034:	4a2e      	ldr	r2, [pc, #184]	; (80070f0 <xTaskIncrementTick+0x15c>)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800703a:	e02f      	b.n	800709c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	3304      	adds	r3, #4
 8007040:	4618      	mov	r0, r3
 8007042:	f7fe fea3 	bl	8005d8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704a:	2b00      	cmp	r3, #0
 800704c:	d004      	beq.n	8007058 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	3318      	adds	r3, #24
 8007052:	4618      	mov	r0, r3
 8007054:	f7fe fe9a 	bl	8005d8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705c:	4b25      	ldr	r3, [pc, #148]	; (80070f4 <xTaskIncrementTick+0x160>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	429a      	cmp	r2, r3
 8007062:	d903      	bls.n	800706c <xTaskIncrementTick+0xd8>
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007068:	4a22      	ldr	r2, [pc, #136]	; (80070f4 <xTaskIncrementTick+0x160>)
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007070:	4613      	mov	r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4a1f      	ldr	r2, [pc, #124]	; (80070f8 <xTaskIncrementTick+0x164>)
 800707a:	441a      	add	r2, r3
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	3304      	adds	r3, #4
 8007080:	4619      	mov	r1, r3
 8007082:	4610      	mov	r0, r2
 8007084:	f7fe fe25 	bl	8005cd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708c:	4b1b      	ldr	r3, [pc, #108]	; (80070fc <xTaskIncrementTick+0x168>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007092:	429a      	cmp	r2, r3
 8007094:	d3b8      	bcc.n	8007008 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007096:	2301      	movs	r3, #1
 8007098:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800709a:	e7b5      	b.n	8007008 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800709c:	4b17      	ldr	r3, [pc, #92]	; (80070fc <xTaskIncrementTick+0x168>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a2:	4915      	ldr	r1, [pc, #84]	; (80070f8 <xTaskIncrementTick+0x164>)
 80070a4:	4613      	mov	r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	440b      	add	r3, r1
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d901      	bls.n	80070b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80070b4:	2301      	movs	r3, #1
 80070b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80070b8:	4b11      	ldr	r3, [pc, #68]	; (8007100 <xTaskIncrementTick+0x16c>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d007      	beq.n	80070d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80070c0:	2301      	movs	r3, #1
 80070c2:	617b      	str	r3, [r7, #20]
 80070c4:	e004      	b.n	80070d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80070c6:	4b0f      	ldr	r3, [pc, #60]	; (8007104 <xTaskIncrementTick+0x170>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3301      	adds	r3, #1
 80070cc:	4a0d      	ldr	r2, [pc, #52]	; (8007104 <xTaskIncrementTick+0x170>)
 80070ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80070d0:	697b      	ldr	r3, [r7, #20]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3718      	adds	r7, #24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	20000be8 	.word	0x20000be8
 80070e0:	20000bc4 	.word	0x20000bc4
 80070e4:	20000b78 	.word	0x20000b78
 80070e8:	20000b7c 	.word	0x20000b7c
 80070ec:	20000bd8 	.word	0x20000bd8
 80070f0:	20000be0 	.word	0x20000be0
 80070f4:	20000bc8 	.word	0x20000bc8
 80070f8:	200006f0 	.word	0x200006f0
 80070fc:	200006ec 	.word	0x200006ec
 8007100:	20000bd4 	.word	0x20000bd4
 8007104:	20000bd0 	.word	0x20000bd0

08007108 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800710e:	4b28      	ldr	r3, [pc, #160]	; (80071b0 <vTaskSwitchContext+0xa8>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007116:	4b27      	ldr	r3, [pc, #156]	; (80071b4 <vTaskSwitchContext+0xac>)
 8007118:	2201      	movs	r2, #1
 800711a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800711c:	e041      	b.n	80071a2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800711e:	4b25      	ldr	r3, [pc, #148]	; (80071b4 <vTaskSwitchContext+0xac>)
 8007120:	2200      	movs	r2, #0
 8007122:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007124:	4b24      	ldr	r3, [pc, #144]	; (80071b8 <vTaskSwitchContext+0xb0>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	e010      	b.n	800714e <vTaskSwitchContext+0x46>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10a      	bne.n	8007148 <vTaskSwitchContext+0x40>
	__asm volatile
 8007132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	607b      	str	r3, [r7, #4]
}
 8007144:	bf00      	nop
 8007146:	e7fe      	b.n	8007146 <vTaskSwitchContext+0x3e>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	3b01      	subs	r3, #1
 800714c:	60fb      	str	r3, [r7, #12]
 800714e:	491b      	ldr	r1, [pc, #108]	; (80071bc <vTaskSwitchContext+0xb4>)
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	4613      	mov	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	440b      	add	r3, r1
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0e4      	beq.n	800712c <vTaskSwitchContext+0x24>
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	4613      	mov	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4413      	add	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4a13      	ldr	r2, [pc, #76]	; (80071bc <vTaskSwitchContext+0xb4>)
 800716e:	4413      	add	r3, r2
 8007170:	60bb      	str	r3, [r7, #8]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	605a      	str	r2, [r3, #4]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	685a      	ldr	r2, [r3, #4]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	3308      	adds	r3, #8
 8007184:	429a      	cmp	r2, r3
 8007186:	d104      	bne.n	8007192 <vTaskSwitchContext+0x8a>
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	605a      	str	r2, [r3, #4]
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	4a09      	ldr	r2, [pc, #36]	; (80071c0 <vTaskSwitchContext+0xb8>)
 800719a:	6013      	str	r3, [r2, #0]
 800719c:	4a06      	ldr	r2, [pc, #24]	; (80071b8 <vTaskSwitchContext+0xb0>)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6013      	str	r3, [r2, #0]
}
 80071a2:	bf00      	nop
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	20000be8 	.word	0x20000be8
 80071b4:	20000bd4 	.word	0x20000bd4
 80071b8:	20000bc8 	.word	0x20000bc8
 80071bc:	200006f0 	.word	0x200006f0
 80071c0:	200006ec 	.word	0x200006ec

080071c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10a      	bne.n	80071ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	60fb      	str	r3, [r7, #12]
}
 80071e6:	bf00      	nop
 80071e8:	e7fe      	b.n	80071e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071ea:	4b07      	ldr	r3, [pc, #28]	; (8007208 <vTaskPlaceOnEventList+0x44>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3318      	adds	r3, #24
 80071f0:	4619      	mov	r1, r3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7fe fd91 	bl	8005d1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071f8:	2101      	movs	r1, #1
 80071fa:	6838      	ldr	r0, [r7, #0]
 80071fc:	f000 fa7c 	bl	80076f8 <prvAddCurrentTaskToDelayedList>
}
 8007200:	bf00      	nop
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	200006ec 	.word	0x200006ec

0800720c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10a      	bne.n	8007234 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	617b      	str	r3, [r7, #20]
}
 8007230:	bf00      	nop
 8007232:	e7fe      	b.n	8007232 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007234:	4b0a      	ldr	r3, [pc, #40]	; (8007260 <vTaskPlaceOnEventListRestricted+0x54>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3318      	adds	r3, #24
 800723a:	4619      	mov	r1, r3
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f7fe fd48 	bl	8005cd2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007248:	f04f 33ff 	mov.w	r3, #4294967295
 800724c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800724e:	6879      	ldr	r1, [r7, #4]
 8007250:	68b8      	ldr	r0, [r7, #8]
 8007252:	f000 fa51 	bl	80076f8 <prvAddCurrentTaskToDelayedList>
	}
 8007256:	bf00      	nop
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	200006ec 	.word	0x200006ec

08007264 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10a      	bne.n	8007290 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800727a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	60fb      	str	r3, [r7, #12]
}
 800728c:	bf00      	nop
 800728e:	e7fe      	b.n	800728e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	3318      	adds	r3, #24
 8007294:	4618      	mov	r0, r3
 8007296:	f7fe fd79 	bl	8005d8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800729a:	4b1e      	ldr	r3, [pc, #120]	; (8007314 <xTaskRemoveFromEventList+0xb0>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d11d      	bne.n	80072de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	3304      	adds	r3, #4
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7fe fd70 	bl	8005d8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b0:	4b19      	ldr	r3, [pc, #100]	; (8007318 <xTaskRemoveFromEventList+0xb4>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d903      	bls.n	80072c0 <xTaskRemoveFromEventList+0x5c>
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072bc:	4a16      	ldr	r2, [pc, #88]	; (8007318 <xTaskRemoveFromEventList+0xb4>)
 80072be:	6013      	str	r3, [r2, #0]
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c4:	4613      	mov	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4a13      	ldr	r2, [pc, #76]	; (800731c <xTaskRemoveFromEventList+0xb8>)
 80072ce:	441a      	add	r2, r3
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	3304      	adds	r3, #4
 80072d4:	4619      	mov	r1, r3
 80072d6:	4610      	mov	r0, r2
 80072d8:	f7fe fcfb 	bl	8005cd2 <vListInsertEnd>
 80072dc:	e005      	b.n	80072ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	3318      	adds	r3, #24
 80072e2:	4619      	mov	r1, r3
 80072e4:	480e      	ldr	r0, [pc, #56]	; (8007320 <xTaskRemoveFromEventList+0xbc>)
 80072e6:	f7fe fcf4 	bl	8005cd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ee:	4b0d      	ldr	r3, [pc, #52]	; (8007324 <xTaskRemoveFromEventList+0xc0>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d905      	bls.n	8007304 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072f8:	2301      	movs	r3, #1
 80072fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80072fc:	4b0a      	ldr	r3, [pc, #40]	; (8007328 <xTaskRemoveFromEventList+0xc4>)
 80072fe:	2201      	movs	r2, #1
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	e001      	b.n	8007308 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007304:	2300      	movs	r3, #0
 8007306:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007308:	697b      	ldr	r3, [r7, #20]
}
 800730a:	4618      	mov	r0, r3
 800730c:	3718      	adds	r7, #24
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	20000be8 	.word	0x20000be8
 8007318:	20000bc8 	.word	0x20000bc8
 800731c:	200006f0 	.word	0x200006f0
 8007320:	20000b80 	.word	0x20000b80
 8007324:	200006ec 	.word	0x200006ec
 8007328:	20000bd4 	.word	0x20000bd4

0800732c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007334:	4b06      	ldr	r3, [pc, #24]	; (8007350 <vTaskInternalSetTimeOutState+0x24>)
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800733c:	4b05      	ldr	r3, [pc, #20]	; (8007354 <vTaskInternalSetTimeOutState+0x28>)
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	605a      	str	r2, [r3, #4]
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	20000bd8 	.word	0x20000bd8
 8007354:	20000bc4 	.word	0x20000bc4

08007358 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10a      	bne.n	800737e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	613b      	str	r3, [r7, #16]
}
 800737a:	bf00      	nop
 800737c:	e7fe      	b.n	800737c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10a      	bne.n	800739a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	60fb      	str	r3, [r7, #12]
}
 8007396:	bf00      	nop
 8007398:	e7fe      	b.n	8007398 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800739a:	f000 fe7b 	bl	8008094 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800739e:	4b1d      	ldr	r3, [pc, #116]	; (8007414 <xTaskCheckForTimeOut+0xbc>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b6:	d102      	bne.n	80073be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80073b8:	2300      	movs	r3, #0
 80073ba:	61fb      	str	r3, [r7, #28]
 80073bc:	e023      	b.n	8007406 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	4b15      	ldr	r3, [pc, #84]	; (8007418 <xTaskCheckForTimeOut+0xc0>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d007      	beq.n	80073da <xTaskCheckForTimeOut+0x82>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	69ba      	ldr	r2, [r7, #24]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d302      	bcc.n	80073da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80073d4:	2301      	movs	r3, #1
 80073d6:	61fb      	str	r3, [r7, #28]
 80073d8:	e015      	b.n	8007406 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d20b      	bcs.n	80073fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	1ad2      	subs	r2, r2, r3
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff ff9b 	bl	800732c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073f6:	2300      	movs	r3, #0
 80073f8:	61fb      	str	r3, [r7, #28]
 80073fa:	e004      	b.n	8007406 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	2200      	movs	r2, #0
 8007400:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007402:	2301      	movs	r3, #1
 8007404:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007406:	f000 fe75 	bl	80080f4 <vPortExitCritical>

	return xReturn;
 800740a:	69fb      	ldr	r3, [r7, #28]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3720      	adds	r7, #32
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	20000bc4 	.word	0x20000bc4
 8007418:	20000bd8 	.word	0x20000bd8

0800741c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800741c:	b480      	push	{r7}
 800741e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007420:	4b03      	ldr	r3, [pc, #12]	; (8007430 <vTaskMissedYield+0x14>)
 8007422:	2201      	movs	r2, #1
 8007424:	601a      	str	r2, [r3, #0]
}
 8007426:	bf00      	nop
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	20000bd4 	.word	0x20000bd4

08007434 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800743c:	f000 f852 	bl	80074e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007440:	4b06      	ldr	r3, [pc, #24]	; (800745c <prvIdleTask+0x28>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d9f9      	bls.n	800743c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007448:	4b05      	ldr	r3, [pc, #20]	; (8007460 <prvIdleTask+0x2c>)
 800744a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007458:	e7f0      	b.n	800743c <prvIdleTask+0x8>
 800745a:	bf00      	nop
 800745c:	200006f0 	.word	0x200006f0
 8007460:	e000ed04 	.word	0xe000ed04

08007464 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800746a:	2300      	movs	r3, #0
 800746c:	607b      	str	r3, [r7, #4]
 800746e:	e00c      	b.n	800748a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	4613      	mov	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4a12      	ldr	r2, [pc, #72]	; (80074c4 <prvInitialiseTaskLists+0x60>)
 800747c:	4413      	add	r3, r2
 800747e:	4618      	mov	r0, r3
 8007480:	f7fe fbfa 	bl	8005c78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	3301      	adds	r3, #1
 8007488:	607b      	str	r3, [r7, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b37      	cmp	r3, #55	; 0x37
 800748e:	d9ef      	bls.n	8007470 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007490:	480d      	ldr	r0, [pc, #52]	; (80074c8 <prvInitialiseTaskLists+0x64>)
 8007492:	f7fe fbf1 	bl	8005c78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007496:	480d      	ldr	r0, [pc, #52]	; (80074cc <prvInitialiseTaskLists+0x68>)
 8007498:	f7fe fbee 	bl	8005c78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800749c:	480c      	ldr	r0, [pc, #48]	; (80074d0 <prvInitialiseTaskLists+0x6c>)
 800749e:	f7fe fbeb 	bl	8005c78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80074a2:	480c      	ldr	r0, [pc, #48]	; (80074d4 <prvInitialiseTaskLists+0x70>)
 80074a4:	f7fe fbe8 	bl	8005c78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80074a8:	480b      	ldr	r0, [pc, #44]	; (80074d8 <prvInitialiseTaskLists+0x74>)
 80074aa:	f7fe fbe5 	bl	8005c78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80074ae:	4b0b      	ldr	r3, [pc, #44]	; (80074dc <prvInitialiseTaskLists+0x78>)
 80074b0:	4a05      	ldr	r2, [pc, #20]	; (80074c8 <prvInitialiseTaskLists+0x64>)
 80074b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074b4:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <prvInitialiseTaskLists+0x7c>)
 80074b6:	4a05      	ldr	r2, [pc, #20]	; (80074cc <prvInitialiseTaskLists+0x68>)
 80074b8:	601a      	str	r2, [r3, #0]
}
 80074ba:	bf00      	nop
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	200006f0 	.word	0x200006f0
 80074c8:	20000b50 	.word	0x20000b50
 80074cc:	20000b64 	.word	0x20000b64
 80074d0:	20000b80 	.word	0x20000b80
 80074d4:	20000b94 	.word	0x20000b94
 80074d8:	20000bac 	.word	0x20000bac
 80074dc:	20000b78 	.word	0x20000b78
 80074e0:	20000b7c 	.word	0x20000b7c

080074e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074ea:	e019      	b.n	8007520 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074ec:	f000 fdd2 	bl	8008094 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074f0:	4b10      	ldr	r3, [pc, #64]	; (8007534 <prvCheckTasksWaitingTermination+0x50>)
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	3304      	adds	r3, #4
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7fe fc45 	bl	8005d8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007502:	4b0d      	ldr	r3, [pc, #52]	; (8007538 <prvCheckTasksWaitingTermination+0x54>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3b01      	subs	r3, #1
 8007508:	4a0b      	ldr	r2, [pc, #44]	; (8007538 <prvCheckTasksWaitingTermination+0x54>)
 800750a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800750c:	4b0b      	ldr	r3, [pc, #44]	; (800753c <prvCheckTasksWaitingTermination+0x58>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	3b01      	subs	r3, #1
 8007512:	4a0a      	ldr	r2, [pc, #40]	; (800753c <prvCheckTasksWaitingTermination+0x58>)
 8007514:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007516:	f000 fded 	bl	80080f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f810 	bl	8007540 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007520:	4b06      	ldr	r3, [pc, #24]	; (800753c <prvCheckTasksWaitingTermination+0x58>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1e1      	bne.n	80074ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007528:	bf00      	nop
 800752a:	bf00      	nop
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	20000b94 	.word	0x20000b94
 8007538:	20000bc0 	.word	0x20000bc0
 800753c:	20000ba8 	.word	0x20000ba8

08007540 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800754e:	2b00      	cmp	r3, #0
 8007550:	d108      	bne.n	8007564 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007556:	4618      	mov	r0, r3
 8007558:	f000 ff8a 	bl	8008470 <vPortFree>
				vPortFree( pxTCB );
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 ff87 	bl	8008470 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007562:	e018      	b.n	8007596 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800756a:	2b01      	cmp	r3, #1
 800756c:	d103      	bne.n	8007576 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 ff7e 	bl	8008470 <vPortFree>
	}
 8007574:	e00f      	b.n	8007596 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800757c:	2b02      	cmp	r3, #2
 800757e:	d00a      	beq.n	8007596 <prvDeleteTCB+0x56>
	__asm volatile
 8007580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007584:	f383 8811 	msr	BASEPRI, r3
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	60fb      	str	r3, [r7, #12]
}
 8007592:	bf00      	nop
 8007594:	e7fe      	b.n	8007594 <prvDeleteTCB+0x54>
	}
 8007596:	bf00      	nop
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
	...

080075a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075a6:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <prvResetNextTaskUnblockTime+0x38>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d104      	bne.n	80075ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80075b0:	4b0a      	ldr	r3, [pc, #40]	; (80075dc <prvResetNextTaskUnblockTime+0x3c>)
 80075b2:	f04f 32ff 	mov.w	r2, #4294967295
 80075b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80075b8:	e008      	b.n	80075cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ba:	4b07      	ldr	r3, [pc, #28]	; (80075d8 <prvResetNextTaskUnblockTime+0x38>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	4a04      	ldr	r2, [pc, #16]	; (80075dc <prvResetNextTaskUnblockTime+0x3c>)
 80075ca:	6013      	str	r3, [r2, #0]
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	20000b78 	.word	0x20000b78
 80075dc:	20000be0 	.word	0x20000be0

080075e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075e6:	4b0b      	ldr	r3, [pc, #44]	; (8007614 <xTaskGetSchedulerState+0x34>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d102      	bne.n	80075f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075ee:	2301      	movs	r3, #1
 80075f0:	607b      	str	r3, [r7, #4]
 80075f2:	e008      	b.n	8007606 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075f4:	4b08      	ldr	r3, [pc, #32]	; (8007618 <xTaskGetSchedulerState+0x38>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d102      	bne.n	8007602 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075fc:	2302      	movs	r3, #2
 80075fe:	607b      	str	r3, [r7, #4]
 8007600:	e001      	b.n	8007606 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007602:	2300      	movs	r3, #0
 8007604:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007606:	687b      	ldr	r3, [r7, #4]
	}
 8007608:	4618      	mov	r0, r3
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr
 8007614:	20000bcc 	.word	0x20000bcc
 8007618:	20000be8 	.word	0x20000be8

0800761c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007628:	2300      	movs	r3, #0
 800762a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d056      	beq.n	80076e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007632:	4b2e      	ldr	r3, [pc, #184]	; (80076ec <xTaskPriorityDisinherit+0xd0>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	429a      	cmp	r2, r3
 800763a:	d00a      	beq.n	8007652 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800763c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	60fb      	str	r3, [r7, #12]
}
 800764e:	bf00      	nop
 8007650:	e7fe      	b.n	8007650 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10a      	bne.n	8007670 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800765a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765e:	f383 8811 	msr	BASEPRI, r3
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	60bb      	str	r3, [r7, #8]
}
 800766c:	bf00      	nop
 800766e:	e7fe      	b.n	800766e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007674:	1e5a      	subs	r2, r3, #1
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007682:	429a      	cmp	r2, r3
 8007684:	d02c      	beq.n	80076e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800768a:	2b00      	cmp	r3, #0
 800768c:	d128      	bne.n	80076e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	3304      	adds	r3, #4
 8007692:	4618      	mov	r0, r3
 8007694:	f7fe fb7a 	bl	8005d8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b0:	4b0f      	ldr	r3, [pc, #60]	; (80076f0 <xTaskPriorityDisinherit+0xd4>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d903      	bls.n	80076c0 <xTaskPriorityDisinherit+0xa4>
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	4a0c      	ldr	r2, [pc, #48]	; (80076f0 <xTaskPriorityDisinherit+0xd4>)
 80076be:	6013      	str	r3, [r2, #0]
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c4:	4613      	mov	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4a09      	ldr	r2, [pc, #36]	; (80076f4 <xTaskPriorityDisinherit+0xd8>)
 80076ce:	441a      	add	r2, r3
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	3304      	adds	r3, #4
 80076d4:	4619      	mov	r1, r3
 80076d6:	4610      	mov	r0, r2
 80076d8:	f7fe fafb 	bl	8005cd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80076dc:	2301      	movs	r3, #1
 80076de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076e0:	697b      	ldr	r3, [r7, #20]
	}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3718      	adds	r7, #24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	200006ec 	.word	0x200006ec
 80076f0:	20000bc8 	.word	0x20000bc8
 80076f4:	200006f0 	.word	0x200006f0

080076f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007702:	4b21      	ldr	r3, [pc, #132]	; (8007788 <prvAddCurrentTaskToDelayedList+0x90>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007708:	4b20      	ldr	r3, [pc, #128]	; (800778c <prvAddCurrentTaskToDelayedList+0x94>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	3304      	adds	r3, #4
 800770e:	4618      	mov	r0, r3
 8007710:	f7fe fb3c 	bl	8005d8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771a:	d10a      	bne.n	8007732 <prvAddCurrentTaskToDelayedList+0x3a>
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d007      	beq.n	8007732 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007722:	4b1a      	ldr	r3, [pc, #104]	; (800778c <prvAddCurrentTaskToDelayedList+0x94>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	3304      	adds	r3, #4
 8007728:	4619      	mov	r1, r3
 800772a:	4819      	ldr	r0, [pc, #100]	; (8007790 <prvAddCurrentTaskToDelayedList+0x98>)
 800772c:	f7fe fad1 	bl	8005cd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007730:	e026      	b.n	8007780 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4413      	add	r3, r2
 8007738:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800773a:	4b14      	ldr	r3, [pc, #80]	; (800778c <prvAddCurrentTaskToDelayedList+0x94>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	429a      	cmp	r2, r3
 8007748:	d209      	bcs.n	800775e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800774a:	4b12      	ldr	r3, [pc, #72]	; (8007794 <prvAddCurrentTaskToDelayedList+0x9c>)
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	4b0f      	ldr	r3, [pc, #60]	; (800778c <prvAddCurrentTaskToDelayedList+0x94>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	3304      	adds	r3, #4
 8007754:	4619      	mov	r1, r3
 8007756:	4610      	mov	r0, r2
 8007758:	f7fe fadf 	bl	8005d1a <vListInsert>
}
 800775c:	e010      	b.n	8007780 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800775e:	4b0e      	ldr	r3, [pc, #56]	; (8007798 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	4b0a      	ldr	r3, [pc, #40]	; (800778c <prvAddCurrentTaskToDelayedList+0x94>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3304      	adds	r3, #4
 8007768:	4619      	mov	r1, r3
 800776a:	4610      	mov	r0, r2
 800776c:	f7fe fad5 	bl	8005d1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007770:	4b0a      	ldr	r3, [pc, #40]	; (800779c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	429a      	cmp	r2, r3
 8007778:	d202      	bcs.n	8007780 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800777a:	4a08      	ldr	r2, [pc, #32]	; (800779c <prvAddCurrentTaskToDelayedList+0xa4>)
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	6013      	str	r3, [r2, #0]
}
 8007780:	bf00      	nop
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	20000bc4 	.word	0x20000bc4
 800778c:	200006ec 	.word	0x200006ec
 8007790:	20000bac 	.word	0x20000bac
 8007794:	20000b7c 	.word	0x20000b7c
 8007798:	20000b78 	.word	0x20000b78
 800779c:	20000be0 	.word	0x20000be0

080077a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b08a      	sub	sp, #40	; 0x28
 80077a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80077a6:	2300      	movs	r3, #0
 80077a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80077aa:	f000 fb07 	bl	8007dbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80077ae:	4b1c      	ldr	r3, [pc, #112]	; (8007820 <xTimerCreateTimerTask+0x80>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d021      	beq.n	80077fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80077be:	1d3a      	adds	r2, r7, #4
 80077c0:	f107 0108 	add.w	r1, r7, #8
 80077c4:	f107 030c 	add.w	r3, r7, #12
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7fe fa3b 	bl	8005c44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80077ce:	6879      	ldr	r1, [r7, #4]
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	9202      	str	r2, [sp, #8]
 80077d6:	9301      	str	r3, [sp, #4]
 80077d8:	2302      	movs	r3, #2
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	2300      	movs	r3, #0
 80077de:	460a      	mov	r2, r1
 80077e0:	4910      	ldr	r1, [pc, #64]	; (8007824 <xTimerCreateTimerTask+0x84>)
 80077e2:	4811      	ldr	r0, [pc, #68]	; (8007828 <xTimerCreateTimerTask+0x88>)
 80077e4:	f7ff f8de 	bl	80069a4 <xTaskCreateStatic>
 80077e8:	4603      	mov	r3, r0
 80077ea:	4a10      	ldr	r2, [pc, #64]	; (800782c <xTimerCreateTimerTask+0x8c>)
 80077ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80077ee:	4b0f      	ldr	r3, [pc, #60]	; (800782c <xTimerCreateTimerTask+0x8c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d001      	beq.n	80077fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80077f6:	2301      	movs	r3, #1
 80077f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10a      	bne.n	8007816 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	613b      	str	r3, [r7, #16]
}
 8007812:	bf00      	nop
 8007814:	e7fe      	b.n	8007814 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007816:	697b      	ldr	r3, [r7, #20]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3718      	adds	r7, #24
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	20000c1c 	.word	0x20000c1c
 8007824:	080087a0 	.word	0x080087a0
 8007828:	08007965 	.word	0x08007965
 800782c:	20000c20 	.word	0x20000c20

08007830 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b08a      	sub	sp, #40	; 0x28
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
 800783c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800783e:	2300      	movs	r3, #0
 8007840:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10a      	bne.n	800785e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784c:	f383 8811 	msr	BASEPRI, r3
 8007850:	f3bf 8f6f 	isb	sy
 8007854:	f3bf 8f4f 	dsb	sy
 8007858:	623b      	str	r3, [r7, #32]
}
 800785a:	bf00      	nop
 800785c:	e7fe      	b.n	800785c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800785e:	4b1a      	ldr	r3, [pc, #104]	; (80078c8 <xTimerGenericCommand+0x98>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d02a      	beq.n	80078bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2b05      	cmp	r3, #5
 8007876:	dc18      	bgt.n	80078aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007878:	f7ff feb2 	bl	80075e0 <xTaskGetSchedulerState>
 800787c:	4603      	mov	r3, r0
 800787e:	2b02      	cmp	r3, #2
 8007880:	d109      	bne.n	8007896 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007882:	4b11      	ldr	r3, [pc, #68]	; (80078c8 <xTimerGenericCommand+0x98>)
 8007884:	6818      	ldr	r0, [r3, #0]
 8007886:	f107 0110 	add.w	r1, r7, #16
 800788a:	2300      	movs	r3, #0
 800788c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800788e:	f7fe fbe5 	bl	800605c <xQueueGenericSend>
 8007892:	6278      	str	r0, [r7, #36]	; 0x24
 8007894:	e012      	b.n	80078bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007896:	4b0c      	ldr	r3, [pc, #48]	; (80078c8 <xTimerGenericCommand+0x98>)
 8007898:	6818      	ldr	r0, [r3, #0]
 800789a:	f107 0110 	add.w	r1, r7, #16
 800789e:	2300      	movs	r3, #0
 80078a0:	2200      	movs	r2, #0
 80078a2:	f7fe fbdb 	bl	800605c <xQueueGenericSend>
 80078a6:	6278      	str	r0, [r7, #36]	; 0x24
 80078a8:	e008      	b.n	80078bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80078aa:	4b07      	ldr	r3, [pc, #28]	; (80078c8 <xTimerGenericCommand+0x98>)
 80078ac:	6818      	ldr	r0, [r3, #0]
 80078ae:	f107 0110 	add.w	r1, r7, #16
 80078b2:	2300      	movs	r3, #0
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	f7fe fccf 	bl	8006258 <xQueueGenericSendFromISR>
 80078ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3728      	adds	r7, #40	; 0x28
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	20000c1c 	.word	0x20000c1c

080078cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b088      	sub	sp, #32
 80078d0:	af02      	add	r7, sp, #8
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078d6:	4b22      	ldr	r3, [pc, #136]	; (8007960 <prvProcessExpiredTimer+0x94>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	3304      	adds	r3, #4
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7fe fa51 	bl	8005d8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078f0:	f003 0304 	and.w	r3, r3, #4
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d022      	beq.n	800793e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	699a      	ldr	r2, [r3, #24]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	18d1      	adds	r1, r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	6978      	ldr	r0, [r7, #20]
 8007906:	f000 f8d1 	bl	8007aac <prvInsertTimerInActiveList>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d01f      	beq.n	8007950 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007910:	2300      	movs	r3, #0
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	2300      	movs	r3, #0
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	2100      	movs	r1, #0
 800791a:	6978      	ldr	r0, [r7, #20]
 800791c:	f7ff ff88 	bl	8007830 <xTimerGenericCommand>
 8007920:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d113      	bne.n	8007950 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792c:	f383 8811 	msr	BASEPRI, r3
 8007930:	f3bf 8f6f 	isb	sy
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	60fb      	str	r3, [r7, #12]
}
 800793a:	bf00      	nop
 800793c:	e7fe      	b.n	800793c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007944:	f023 0301 	bic.w	r3, r3, #1
 8007948:	b2da      	uxtb	r2, r3
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	6978      	ldr	r0, [r7, #20]
 8007956:	4798      	blx	r3
}
 8007958:	bf00      	nop
 800795a:	3718      	adds	r7, #24
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	20000c14 	.word	0x20000c14

08007964 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800796c:	f107 0308 	add.w	r3, r7, #8
 8007970:	4618      	mov	r0, r3
 8007972:	f000 f857 	bl	8007a24 <prvGetNextExpireTime>
 8007976:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	4619      	mov	r1, r3
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f000 f803 	bl	8007988 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007982:	f000 f8d5 	bl	8007b30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007986:	e7f1      	b.n	800796c <prvTimerTask+0x8>

08007988 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007992:	f7ff fa43 	bl	8006e1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007996:	f107 0308 	add.w	r3, r7, #8
 800799a:	4618      	mov	r0, r3
 800799c:	f000 f866 	bl	8007a6c <prvSampleTimeNow>
 80079a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d130      	bne.n	8007a0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10a      	bne.n	80079c4 <prvProcessTimerOrBlockTask+0x3c>
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d806      	bhi.n	80079c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80079b6:	f7ff fa3f 	bl	8006e38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80079ba:	68f9      	ldr	r1, [r7, #12]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7ff ff85 	bl	80078cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80079c2:	e024      	b.n	8007a0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d008      	beq.n	80079dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80079ca:	4b13      	ldr	r3, [pc, #76]	; (8007a18 <prvProcessTimerOrBlockTask+0x90>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <prvProcessTimerOrBlockTask+0x50>
 80079d4:	2301      	movs	r3, #1
 80079d6:	e000      	b.n	80079da <prvProcessTimerOrBlockTask+0x52>
 80079d8:	2300      	movs	r3, #0
 80079da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80079dc:	4b0f      	ldr	r3, [pc, #60]	; (8007a1c <prvProcessTimerOrBlockTask+0x94>)
 80079de:	6818      	ldr	r0, [r3, #0]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	683a      	ldr	r2, [r7, #0]
 80079e8:	4619      	mov	r1, r3
 80079ea:	f7fe ffa7 	bl	800693c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80079ee:	f7ff fa23 	bl	8006e38 <xTaskResumeAll>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10a      	bne.n	8007a0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80079f8:	4b09      	ldr	r3, [pc, #36]	; (8007a20 <prvProcessTimerOrBlockTask+0x98>)
 80079fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079fe:	601a      	str	r2, [r3, #0]
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	f3bf 8f6f 	isb	sy
}
 8007a08:	e001      	b.n	8007a0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a0a:	f7ff fa15 	bl	8006e38 <xTaskResumeAll>
}
 8007a0e:	bf00      	nop
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20000c18 	.word	0x20000c18
 8007a1c:	20000c1c 	.word	0x20000c1c
 8007a20:	e000ed04 	.word	0xe000ed04

08007a24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a2c:	4b0e      	ldr	r3, [pc, #56]	; (8007a68 <prvGetNextExpireTime+0x44>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <prvGetNextExpireTime+0x16>
 8007a36:	2201      	movs	r2, #1
 8007a38:	e000      	b.n	8007a3c <prvGetNextExpireTime+0x18>
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d105      	bne.n	8007a54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a48:	4b07      	ldr	r3, [pc, #28]	; (8007a68 <prvGetNextExpireTime+0x44>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	60fb      	str	r3, [r7, #12]
 8007a52:	e001      	b.n	8007a58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007a58:	68fb      	ldr	r3, [r7, #12]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	20000c14 	.word	0x20000c14

08007a6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a74:	f7ff fa7e 	bl	8006f74 <xTaskGetTickCount>
 8007a78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a7a:	4b0b      	ldr	r3, [pc, #44]	; (8007aa8 <prvSampleTimeNow+0x3c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d205      	bcs.n	8007a90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a84:	f000 f936 	bl	8007cf4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	e002      	b.n	8007a96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a96:	4a04      	ldr	r2, [pc, #16]	; (8007aa8 <prvSampleTimeNow+0x3c>)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20000c24 	.word	0x20000c24

08007aac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
 8007ab8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007aba:	2300      	movs	r3, #0
 8007abc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d812      	bhi.n	8007af8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	1ad2      	subs	r2, r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d302      	bcc.n	8007ae6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	617b      	str	r3, [r7, #20]
 8007ae4:	e01b      	b.n	8007b1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ae6:	4b10      	ldr	r3, [pc, #64]	; (8007b28 <prvInsertTimerInActiveList+0x7c>)
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	3304      	adds	r3, #4
 8007aee:	4619      	mov	r1, r3
 8007af0:	4610      	mov	r0, r2
 8007af2:	f7fe f912 	bl	8005d1a <vListInsert>
 8007af6:	e012      	b.n	8007b1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d206      	bcs.n	8007b0e <prvInsertTimerInActiveList+0x62>
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d302      	bcc.n	8007b0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	617b      	str	r3, [r7, #20]
 8007b0c:	e007      	b.n	8007b1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b0e:	4b07      	ldr	r3, [pc, #28]	; (8007b2c <prvInsertTimerInActiveList+0x80>)
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	3304      	adds	r3, #4
 8007b16:	4619      	mov	r1, r3
 8007b18:	4610      	mov	r0, r2
 8007b1a:	f7fe f8fe 	bl	8005d1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b1e:	697b      	ldr	r3, [r7, #20]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3718      	adds	r7, #24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	20000c18 	.word	0x20000c18
 8007b2c:	20000c14 	.word	0x20000c14

08007b30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b08e      	sub	sp, #56	; 0x38
 8007b34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b36:	e0ca      	b.n	8007cce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	da18      	bge.n	8007b70 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b3e:	1d3b      	adds	r3, r7, #4
 8007b40:	3304      	adds	r3, #4
 8007b42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10a      	bne.n	8007b60 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	61fb      	str	r3, [r7, #28]
}
 8007b5c:	bf00      	nop
 8007b5e:	e7fe      	b.n	8007b5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b66:	6850      	ldr	r0, [r2, #4]
 8007b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b6a:	6892      	ldr	r2, [r2, #8]
 8007b6c:	4611      	mov	r1, r2
 8007b6e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f2c0 80aa 	blt.w	8007ccc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d004      	beq.n	8007b8e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	3304      	adds	r3, #4
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7fe f8ff 	bl	8005d8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b8e:	463b      	mov	r3, r7
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7ff ff6b 	bl	8007a6c <prvSampleTimeNow>
 8007b96:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b09      	cmp	r3, #9
 8007b9c:	f200 8097 	bhi.w	8007cce <prvProcessReceivedCommands+0x19e>
 8007ba0:	a201      	add	r2, pc, #4	; (adr r2, 8007ba8 <prvProcessReceivedCommands+0x78>)
 8007ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba6:	bf00      	nop
 8007ba8:	08007bd1 	.word	0x08007bd1
 8007bac:	08007bd1 	.word	0x08007bd1
 8007bb0:	08007bd1 	.word	0x08007bd1
 8007bb4:	08007c45 	.word	0x08007c45
 8007bb8:	08007c59 	.word	0x08007c59
 8007bbc:	08007ca3 	.word	0x08007ca3
 8007bc0:	08007bd1 	.word	0x08007bd1
 8007bc4:	08007bd1 	.word	0x08007bd1
 8007bc8:	08007c45 	.word	0x08007c45
 8007bcc:	08007c59 	.word	0x08007c59
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bd6:	f043 0301 	orr.w	r3, r3, #1
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	18d1      	adds	r1, r2, r3
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bf0:	f7ff ff5c 	bl	8007aac <prvInsertTimerInActiveList>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d069      	beq.n	8007cce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c08:	f003 0304 	and.w	r3, r3, #4
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d05e      	beq.n	8007cce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	441a      	add	r2, r3
 8007c18:	2300      	movs	r3, #0
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	2100      	movs	r1, #0
 8007c20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c22:	f7ff fe05 	bl	8007830 <xTimerGenericCommand>
 8007c26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d14f      	bne.n	8007cce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	61bb      	str	r3, [r7, #24]
}
 8007c40:	bf00      	nop
 8007c42:	e7fe      	b.n	8007c42 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c4a:	f023 0301 	bic.w	r3, r3, #1
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007c56:	e03a      	b.n	8007cce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c5e:	f043 0301 	orr.w	r3, r3, #1
 8007c62:	b2da      	uxtb	r2, r3
 8007c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10a      	bne.n	8007c8e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7c:	f383 8811 	msr	BASEPRI, r3
 8007c80:	f3bf 8f6f 	isb	sy
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	617b      	str	r3, [r7, #20]
}
 8007c8a:	bf00      	nop
 8007c8c:	e7fe      	b.n	8007c8c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c90:	699a      	ldr	r2, [r3, #24]
 8007c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c94:	18d1      	adds	r1, r2, r3
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c9c:	f7ff ff06 	bl	8007aac <prvInsertTimerInActiveList>
					break;
 8007ca0:	e015      	b.n	8007cce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ca8:	f003 0302 	and.w	r3, r3, #2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d103      	bne.n	8007cb8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cb2:	f000 fbdd 	bl	8008470 <vPortFree>
 8007cb6:	e00a      	b.n	8007cce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cbe:	f023 0301 	bic.w	r3, r3, #1
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007cca:	e000      	b.n	8007cce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007ccc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cce:	4b08      	ldr	r3, [pc, #32]	; (8007cf0 <prvProcessReceivedCommands+0x1c0>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	1d39      	adds	r1, r7, #4
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fe fb5a 	bl	8006390 <xQueueReceive>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f47f af2a 	bne.w	8007b38 <prvProcessReceivedCommands+0x8>
	}
}
 8007ce4:	bf00      	nop
 8007ce6:	bf00      	nop
 8007ce8:	3730      	adds	r7, #48	; 0x30
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	20000c1c 	.word	0x20000c1c

08007cf4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b088      	sub	sp, #32
 8007cf8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cfa:	e048      	b.n	8007d8e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cfc:	4b2d      	ldr	r3, [pc, #180]	; (8007db4 <prvSwitchTimerLists+0xc0>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d06:	4b2b      	ldr	r3, [pc, #172]	; (8007db4 <prvSwitchTimerLists+0xc0>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	3304      	adds	r3, #4
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fe f839 	bl	8005d8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d28:	f003 0304 	and.w	r3, r3, #4
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d02e      	beq.n	8007d8e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	4413      	add	r3, r2
 8007d38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d90e      	bls.n	8007d60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d4e:	4b19      	ldr	r3, [pc, #100]	; (8007db4 <prvSwitchTimerLists+0xc0>)
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	3304      	adds	r3, #4
 8007d56:	4619      	mov	r1, r3
 8007d58:	4610      	mov	r0, r2
 8007d5a:	f7fd ffde 	bl	8005d1a <vListInsert>
 8007d5e:	e016      	b.n	8007d8e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d60:	2300      	movs	r3, #0
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	2300      	movs	r3, #0
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	2100      	movs	r1, #0
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f7ff fd60 	bl	8007830 <xTimerGenericCommand>
 8007d70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10a      	bne.n	8007d8e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7c:	f383 8811 	msr	BASEPRI, r3
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	603b      	str	r3, [r7, #0]
}
 8007d8a:	bf00      	nop
 8007d8c:	e7fe      	b.n	8007d8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d8e:	4b09      	ldr	r3, [pc, #36]	; (8007db4 <prvSwitchTimerLists+0xc0>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1b1      	bne.n	8007cfc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d98:	4b06      	ldr	r3, [pc, #24]	; (8007db4 <prvSwitchTimerLists+0xc0>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007d9e:	4b06      	ldr	r3, [pc, #24]	; (8007db8 <prvSwitchTimerLists+0xc4>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a04      	ldr	r2, [pc, #16]	; (8007db4 <prvSwitchTimerLists+0xc0>)
 8007da4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007da6:	4a04      	ldr	r2, [pc, #16]	; (8007db8 <prvSwitchTimerLists+0xc4>)
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	6013      	str	r3, [r2, #0]
}
 8007dac:	bf00      	nop
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	20000c14 	.word	0x20000c14
 8007db8:	20000c18 	.word	0x20000c18

08007dbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007dc2:	f000 f967 	bl	8008094 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007dc6:	4b15      	ldr	r3, [pc, #84]	; (8007e1c <prvCheckForValidListAndQueue+0x60>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d120      	bne.n	8007e10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007dce:	4814      	ldr	r0, [pc, #80]	; (8007e20 <prvCheckForValidListAndQueue+0x64>)
 8007dd0:	f7fd ff52 	bl	8005c78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007dd4:	4813      	ldr	r0, [pc, #76]	; (8007e24 <prvCheckForValidListAndQueue+0x68>)
 8007dd6:	f7fd ff4f 	bl	8005c78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007dda:	4b13      	ldr	r3, [pc, #76]	; (8007e28 <prvCheckForValidListAndQueue+0x6c>)
 8007ddc:	4a10      	ldr	r2, [pc, #64]	; (8007e20 <prvCheckForValidListAndQueue+0x64>)
 8007dde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007de0:	4b12      	ldr	r3, [pc, #72]	; (8007e2c <prvCheckForValidListAndQueue+0x70>)
 8007de2:	4a10      	ldr	r2, [pc, #64]	; (8007e24 <prvCheckForValidListAndQueue+0x68>)
 8007de4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007de6:	2300      	movs	r3, #0
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	4b11      	ldr	r3, [pc, #68]	; (8007e30 <prvCheckForValidListAndQueue+0x74>)
 8007dec:	4a11      	ldr	r2, [pc, #68]	; (8007e34 <prvCheckForValidListAndQueue+0x78>)
 8007dee:	2110      	movs	r1, #16
 8007df0:	200a      	movs	r0, #10
 8007df2:	f7fe f85d 	bl	8005eb0 <xQueueGenericCreateStatic>
 8007df6:	4603      	mov	r3, r0
 8007df8:	4a08      	ldr	r2, [pc, #32]	; (8007e1c <prvCheckForValidListAndQueue+0x60>)
 8007dfa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007dfc:	4b07      	ldr	r3, [pc, #28]	; (8007e1c <prvCheckForValidListAndQueue+0x60>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d005      	beq.n	8007e10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e04:	4b05      	ldr	r3, [pc, #20]	; (8007e1c <prvCheckForValidListAndQueue+0x60>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	490b      	ldr	r1, [pc, #44]	; (8007e38 <prvCheckForValidListAndQueue+0x7c>)
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fe fd6c 	bl	80068e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e10:	f000 f970 	bl	80080f4 <vPortExitCritical>
}
 8007e14:	bf00      	nop
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	20000c1c 	.word	0x20000c1c
 8007e20:	20000bec 	.word	0x20000bec
 8007e24:	20000c00 	.word	0x20000c00
 8007e28:	20000c14 	.word	0x20000c14
 8007e2c:	20000c18 	.word	0x20000c18
 8007e30:	20000cc8 	.word	0x20000cc8
 8007e34:	20000c28 	.word	0x20000c28
 8007e38:	080087a8 	.word	0x080087a8

08007e3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	3b04      	subs	r3, #4
 8007e4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3b04      	subs	r3, #4
 8007e5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f023 0201 	bic.w	r2, r3, #1
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	3b04      	subs	r3, #4
 8007e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e6c:	4a0c      	ldr	r2, [pc, #48]	; (8007ea0 <pxPortInitialiseStack+0x64>)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3b14      	subs	r3, #20
 8007e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	3b04      	subs	r3, #4
 8007e82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f06f 0202 	mvn.w	r2, #2
 8007e8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	3b20      	subs	r3, #32
 8007e90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e92:	68fb      	ldr	r3, [r7, #12]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	08007ea5 	.word	0x08007ea5

08007ea4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007eae:	4b12      	ldr	r3, [pc, #72]	; (8007ef8 <prvTaskExitError+0x54>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb6:	d00a      	beq.n	8007ece <prvTaskExitError+0x2a>
	__asm volatile
 8007eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebc:	f383 8811 	msr	BASEPRI, r3
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	60fb      	str	r3, [r7, #12]
}
 8007eca:	bf00      	nop
 8007ecc:	e7fe      	b.n	8007ecc <prvTaskExitError+0x28>
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	60bb      	str	r3, [r7, #8]
}
 8007ee0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ee2:	bf00      	nop
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d0fc      	beq.n	8007ee4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007eea:	bf00      	nop
 8007eec:	bf00      	nop
 8007eee:	3714      	adds	r7, #20
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr
 8007ef8:	2000000c 	.word	0x2000000c
 8007efc:	00000000 	.word	0x00000000

08007f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f00:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <pxCurrentTCBConst2>)
 8007f02:	6819      	ldr	r1, [r3, #0]
 8007f04:	6808      	ldr	r0, [r1, #0]
 8007f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0a:	f380 8809 	msr	PSP, r0
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f04f 0000 	mov.w	r0, #0
 8007f16:	f380 8811 	msr	BASEPRI, r0
 8007f1a:	4770      	bx	lr
 8007f1c:	f3af 8000 	nop.w

08007f20 <pxCurrentTCBConst2>:
 8007f20:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f24:	bf00      	nop
 8007f26:	bf00      	nop

08007f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f28:	4808      	ldr	r0, [pc, #32]	; (8007f4c <prvPortStartFirstTask+0x24>)
 8007f2a:	6800      	ldr	r0, [r0, #0]
 8007f2c:	6800      	ldr	r0, [r0, #0]
 8007f2e:	f380 8808 	msr	MSP, r0
 8007f32:	f04f 0000 	mov.w	r0, #0
 8007f36:	f380 8814 	msr	CONTROL, r0
 8007f3a:	b662      	cpsie	i
 8007f3c:	b661      	cpsie	f
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	df00      	svc	0
 8007f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f4a:	bf00      	nop
 8007f4c:	e000ed08 	.word	0xe000ed08

08007f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f56:	4b46      	ldr	r3, [pc, #280]	; (8008070 <xPortStartScheduler+0x120>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a46      	ldr	r2, [pc, #280]	; (8008074 <xPortStartScheduler+0x124>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d10a      	bne.n	8007f76 <xPortStartScheduler+0x26>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	613b      	str	r3, [r7, #16]
}
 8007f72:	bf00      	nop
 8007f74:	e7fe      	b.n	8007f74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f76:	4b3e      	ldr	r3, [pc, #248]	; (8008070 <xPortStartScheduler+0x120>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a3f      	ldr	r2, [pc, #252]	; (8008078 <xPortStartScheduler+0x128>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d10a      	bne.n	8007f96 <xPortStartScheduler+0x46>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	60fb      	str	r3, [r7, #12]
}
 8007f92:	bf00      	nop
 8007f94:	e7fe      	b.n	8007f94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f96:	4b39      	ldr	r3, [pc, #228]	; (800807c <xPortStartScheduler+0x12c>)
 8007f98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	22ff      	movs	r2, #255	; 0xff
 8007fa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fb0:	78fb      	ldrb	r3, [r7, #3]
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	4b31      	ldr	r3, [pc, #196]	; (8008080 <xPortStartScheduler+0x130>)
 8007fbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007fbe:	4b31      	ldr	r3, [pc, #196]	; (8008084 <xPortStartScheduler+0x134>)
 8007fc0:	2207      	movs	r2, #7
 8007fc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fc4:	e009      	b.n	8007fda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007fc6:	4b2f      	ldr	r3, [pc, #188]	; (8008084 <xPortStartScheduler+0x134>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	4a2d      	ldr	r2, [pc, #180]	; (8008084 <xPortStartScheduler+0x134>)
 8007fce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fd0:	78fb      	ldrb	r3, [r7, #3]
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	005b      	lsls	r3, r3, #1
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fda:	78fb      	ldrb	r3, [r7, #3]
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe2:	2b80      	cmp	r3, #128	; 0x80
 8007fe4:	d0ef      	beq.n	8007fc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007fe6:	4b27      	ldr	r3, [pc, #156]	; (8008084 <xPortStartScheduler+0x134>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f1c3 0307 	rsb	r3, r3, #7
 8007fee:	2b04      	cmp	r3, #4
 8007ff0:	d00a      	beq.n	8008008 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	60bb      	str	r3, [r7, #8]
}
 8008004:	bf00      	nop
 8008006:	e7fe      	b.n	8008006 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008008:	4b1e      	ldr	r3, [pc, #120]	; (8008084 <xPortStartScheduler+0x134>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	021b      	lsls	r3, r3, #8
 800800e:	4a1d      	ldr	r2, [pc, #116]	; (8008084 <xPortStartScheduler+0x134>)
 8008010:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008012:	4b1c      	ldr	r3, [pc, #112]	; (8008084 <xPortStartScheduler+0x134>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800801a:	4a1a      	ldr	r2, [pc, #104]	; (8008084 <xPortStartScheduler+0x134>)
 800801c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	b2da      	uxtb	r2, r3
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008026:	4b18      	ldr	r3, [pc, #96]	; (8008088 <xPortStartScheduler+0x138>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a17      	ldr	r2, [pc, #92]	; (8008088 <xPortStartScheduler+0x138>)
 800802c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008030:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008032:	4b15      	ldr	r3, [pc, #84]	; (8008088 <xPortStartScheduler+0x138>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a14      	ldr	r2, [pc, #80]	; (8008088 <xPortStartScheduler+0x138>)
 8008038:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800803c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800803e:	f000 f8dd 	bl	80081fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008042:	4b12      	ldr	r3, [pc, #72]	; (800808c <xPortStartScheduler+0x13c>)
 8008044:	2200      	movs	r2, #0
 8008046:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008048:	f000 f8fc 	bl	8008244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800804c:	4b10      	ldr	r3, [pc, #64]	; (8008090 <xPortStartScheduler+0x140>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a0f      	ldr	r2, [pc, #60]	; (8008090 <xPortStartScheduler+0x140>)
 8008052:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008056:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008058:	f7ff ff66 	bl	8007f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800805c:	f7ff f854 	bl	8007108 <vTaskSwitchContext>
	prvTaskExitError();
 8008060:	f7ff ff20 	bl	8007ea4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3718      	adds	r7, #24
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	e000ed00 	.word	0xe000ed00
 8008074:	410fc271 	.word	0x410fc271
 8008078:	410fc270 	.word	0x410fc270
 800807c:	e000e400 	.word	0xe000e400
 8008080:	20000d18 	.word	0x20000d18
 8008084:	20000d1c 	.word	0x20000d1c
 8008088:	e000ed20 	.word	0xe000ed20
 800808c:	2000000c 	.word	0x2000000c
 8008090:	e000ef34 	.word	0xe000ef34

08008094 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	607b      	str	r3, [r7, #4]
}
 80080ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080ae:	4b0f      	ldr	r3, [pc, #60]	; (80080ec <vPortEnterCritical+0x58>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3301      	adds	r3, #1
 80080b4:	4a0d      	ldr	r2, [pc, #52]	; (80080ec <vPortEnterCritical+0x58>)
 80080b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080b8:	4b0c      	ldr	r3, [pc, #48]	; (80080ec <vPortEnterCritical+0x58>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d10f      	bne.n	80080e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080c0:	4b0b      	ldr	r3, [pc, #44]	; (80080f0 <vPortEnterCritical+0x5c>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	603b      	str	r3, [r7, #0]
}
 80080dc:	bf00      	nop
 80080de:	e7fe      	b.n	80080de <vPortEnterCritical+0x4a>
	}
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	2000000c 	.word	0x2000000c
 80080f0:	e000ed04 	.word	0xe000ed04

080080f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080fa:	4b12      	ldr	r3, [pc, #72]	; (8008144 <vPortExitCritical+0x50>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10a      	bne.n	8008118 <vPortExitCritical+0x24>
	__asm volatile
 8008102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	607b      	str	r3, [r7, #4]
}
 8008114:	bf00      	nop
 8008116:	e7fe      	b.n	8008116 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008118:	4b0a      	ldr	r3, [pc, #40]	; (8008144 <vPortExitCritical+0x50>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	3b01      	subs	r3, #1
 800811e:	4a09      	ldr	r2, [pc, #36]	; (8008144 <vPortExitCritical+0x50>)
 8008120:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008122:	4b08      	ldr	r3, [pc, #32]	; (8008144 <vPortExitCritical+0x50>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d105      	bne.n	8008136 <vPortExitCritical+0x42>
 800812a:	2300      	movs	r3, #0
 800812c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	f383 8811 	msr	BASEPRI, r3
}
 8008134:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008136:	bf00      	nop
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	2000000c 	.word	0x2000000c
	...

08008150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008150:	f3ef 8009 	mrs	r0, PSP
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	4b15      	ldr	r3, [pc, #84]	; (80081b0 <pxCurrentTCBConst>)
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	f01e 0f10 	tst.w	lr, #16
 8008160:	bf08      	it	eq
 8008162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816a:	6010      	str	r0, [r2, #0]
 800816c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008174:	f380 8811 	msr	BASEPRI, r0
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f7fe ffc2 	bl	8007108 <vTaskSwitchContext>
 8008184:	f04f 0000 	mov.w	r0, #0
 8008188:	f380 8811 	msr	BASEPRI, r0
 800818c:	bc09      	pop	{r0, r3}
 800818e:	6819      	ldr	r1, [r3, #0]
 8008190:	6808      	ldr	r0, [r1, #0]
 8008192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008196:	f01e 0f10 	tst.w	lr, #16
 800819a:	bf08      	it	eq
 800819c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081a0:	f380 8809 	msr	PSP, r0
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	f3af 8000 	nop.w

080081b0 <pxCurrentTCBConst>:
 80081b0:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081b4:	bf00      	nop
 80081b6:	bf00      	nop

080081b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	607b      	str	r3, [r7, #4]
}
 80081d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081d2:	f7fe fedf 	bl	8006f94 <xTaskIncrementTick>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d003      	beq.n	80081e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081dc:	4b06      	ldr	r3, [pc, #24]	; (80081f8 <xPortSysTickHandler+0x40>)
 80081de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081e2:	601a      	str	r2, [r3, #0]
 80081e4:	2300      	movs	r3, #0
 80081e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	f383 8811 	msr	BASEPRI, r3
}
 80081ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80081f0:	bf00      	nop
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	e000ed04 	.word	0xe000ed04

080081fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081fc:	b480      	push	{r7}
 80081fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008200:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <vPortSetupTimerInterrupt+0x34>)
 8008202:	2200      	movs	r2, #0
 8008204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008206:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <vPortSetupTimerInterrupt+0x38>)
 8008208:	2200      	movs	r2, #0
 800820a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800820c:	4b0a      	ldr	r3, [pc, #40]	; (8008238 <vPortSetupTimerInterrupt+0x3c>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a0a      	ldr	r2, [pc, #40]	; (800823c <vPortSetupTimerInterrupt+0x40>)
 8008212:	fba2 2303 	umull	r2, r3, r2, r3
 8008216:	099b      	lsrs	r3, r3, #6
 8008218:	4a09      	ldr	r2, [pc, #36]	; (8008240 <vPortSetupTimerInterrupt+0x44>)
 800821a:	3b01      	subs	r3, #1
 800821c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800821e:	4b04      	ldr	r3, [pc, #16]	; (8008230 <vPortSetupTimerInterrupt+0x34>)
 8008220:	2207      	movs	r2, #7
 8008222:	601a      	str	r2, [r3, #0]
}
 8008224:	bf00      	nop
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	e000e010 	.word	0xe000e010
 8008234:	e000e018 	.word	0xe000e018
 8008238:	20000000 	.word	0x20000000
 800823c:	10624dd3 	.word	0x10624dd3
 8008240:	e000e014 	.word	0xe000e014

08008244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008244:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008254 <vPortEnableVFP+0x10>
 8008248:	6801      	ldr	r1, [r0, #0]
 800824a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800824e:	6001      	str	r1, [r0, #0]
 8008250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008252:	bf00      	nop
 8008254:	e000ed88 	.word	0xe000ed88

08008258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800825e:	f3ef 8305 	mrs	r3, IPSR
 8008262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2b0f      	cmp	r3, #15
 8008268:	d914      	bls.n	8008294 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800826a:	4a17      	ldr	r2, [pc, #92]	; (80082c8 <vPortValidateInterruptPriority+0x70>)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	4413      	add	r3, r2
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008274:	4b15      	ldr	r3, [pc, #84]	; (80082cc <vPortValidateInterruptPriority+0x74>)
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	7afa      	ldrb	r2, [r7, #11]
 800827a:	429a      	cmp	r2, r3
 800827c:	d20a      	bcs.n	8008294 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	607b      	str	r3, [r7, #4]
}
 8008290:	bf00      	nop
 8008292:	e7fe      	b.n	8008292 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008294:	4b0e      	ldr	r3, [pc, #56]	; (80082d0 <vPortValidateInterruptPriority+0x78>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800829c:	4b0d      	ldr	r3, [pc, #52]	; (80082d4 <vPortValidateInterruptPriority+0x7c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d90a      	bls.n	80082ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80082a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	603b      	str	r3, [r7, #0]
}
 80082b6:	bf00      	nop
 80082b8:	e7fe      	b.n	80082b8 <vPortValidateInterruptPriority+0x60>
	}
 80082ba:	bf00      	nop
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	e000e3f0 	.word	0xe000e3f0
 80082cc:	20000d18 	.word	0x20000d18
 80082d0:	e000ed0c 	.word	0xe000ed0c
 80082d4:	20000d1c 	.word	0x20000d1c

080082d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b08a      	sub	sp, #40	; 0x28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082e0:	2300      	movs	r3, #0
 80082e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082e4:	f7fe fd9a 	bl	8006e1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082e8:	4b5b      	ldr	r3, [pc, #364]	; (8008458 <pvPortMalloc+0x180>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082f0:	f000 f920 	bl	8008534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082f4:	4b59      	ldr	r3, [pc, #356]	; (800845c <pvPortMalloc+0x184>)
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4013      	ands	r3, r2
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f040 8093 	bne.w	8008428 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d01d      	beq.n	8008344 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008308:	2208      	movs	r2, #8
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4413      	add	r3, r2
 800830e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f003 0307 	and.w	r3, r3, #7
 8008316:	2b00      	cmp	r3, #0
 8008318:	d014      	beq.n	8008344 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f023 0307 	bic.w	r3, r3, #7
 8008320:	3308      	adds	r3, #8
 8008322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f003 0307 	and.w	r3, r3, #7
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00a      	beq.n	8008344 <pvPortMalloc+0x6c>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	617b      	str	r3, [r7, #20]
}
 8008340:	bf00      	nop
 8008342:	e7fe      	b.n	8008342 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d06e      	beq.n	8008428 <pvPortMalloc+0x150>
 800834a:	4b45      	ldr	r3, [pc, #276]	; (8008460 <pvPortMalloc+0x188>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	429a      	cmp	r2, r3
 8008352:	d869      	bhi.n	8008428 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008354:	4b43      	ldr	r3, [pc, #268]	; (8008464 <pvPortMalloc+0x18c>)
 8008356:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008358:	4b42      	ldr	r3, [pc, #264]	; (8008464 <pvPortMalloc+0x18c>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800835e:	e004      	b.n	800836a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	429a      	cmp	r2, r3
 8008372:	d903      	bls.n	800837c <pvPortMalloc+0xa4>
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1f1      	bne.n	8008360 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800837c:	4b36      	ldr	r3, [pc, #216]	; (8008458 <pvPortMalloc+0x180>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008382:	429a      	cmp	r2, r3
 8008384:	d050      	beq.n	8008428 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008386:	6a3b      	ldr	r3, [r7, #32]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2208      	movs	r2, #8
 800838c:	4413      	add	r3, r2
 800838e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	6a3b      	ldr	r3, [r7, #32]
 8008396:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839a:	685a      	ldr	r2, [r3, #4]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	1ad2      	subs	r2, r2, r3
 80083a0:	2308      	movs	r3, #8
 80083a2:	005b      	lsls	r3, r3, #1
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d91f      	bls.n	80083e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4413      	add	r3, r2
 80083ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	f003 0307 	and.w	r3, r3, #7
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00a      	beq.n	80083d0 <pvPortMalloc+0xf8>
	__asm volatile
 80083ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	613b      	str	r3, [r7, #16]
}
 80083cc:	bf00      	nop
 80083ce:	e7fe      	b.n	80083ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	1ad2      	subs	r2, r2, r3
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083e2:	69b8      	ldr	r0, [r7, #24]
 80083e4:	f000 f908 	bl	80085f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083e8:	4b1d      	ldr	r3, [pc, #116]	; (8008460 <pvPortMalloc+0x188>)
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	4a1b      	ldr	r2, [pc, #108]	; (8008460 <pvPortMalloc+0x188>)
 80083f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083f6:	4b1a      	ldr	r3, [pc, #104]	; (8008460 <pvPortMalloc+0x188>)
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	4b1b      	ldr	r3, [pc, #108]	; (8008468 <pvPortMalloc+0x190>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d203      	bcs.n	800840a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008402:	4b17      	ldr	r3, [pc, #92]	; (8008460 <pvPortMalloc+0x188>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a18      	ldr	r2, [pc, #96]	; (8008468 <pvPortMalloc+0x190>)
 8008408:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	4b13      	ldr	r3, [pc, #76]	; (800845c <pvPortMalloc+0x184>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	431a      	orrs	r2, r3
 8008414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008416:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841a:	2200      	movs	r2, #0
 800841c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800841e:	4b13      	ldr	r3, [pc, #76]	; (800846c <pvPortMalloc+0x194>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	3301      	adds	r3, #1
 8008424:	4a11      	ldr	r2, [pc, #68]	; (800846c <pvPortMalloc+0x194>)
 8008426:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008428:	f7fe fd06 	bl	8006e38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	f003 0307 	and.w	r3, r3, #7
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00a      	beq.n	800844c <pvPortMalloc+0x174>
	__asm volatile
 8008436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843a:	f383 8811 	msr	BASEPRI, r3
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	60fb      	str	r3, [r7, #12]
}
 8008448:	bf00      	nop
 800844a:	e7fe      	b.n	800844a <pvPortMalloc+0x172>
	return pvReturn;
 800844c:	69fb      	ldr	r3, [r7, #28]
}
 800844e:	4618      	mov	r0, r3
 8008450:	3728      	adds	r7, #40	; 0x28
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	200018e0 	.word	0x200018e0
 800845c:	200018f4 	.word	0x200018f4
 8008460:	200018e4 	.word	0x200018e4
 8008464:	200018d8 	.word	0x200018d8
 8008468:	200018e8 	.word	0x200018e8
 800846c:	200018ec 	.word	0x200018ec

08008470 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d04d      	beq.n	800851e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008482:	2308      	movs	r3, #8
 8008484:	425b      	negs	r3, r3
 8008486:	697a      	ldr	r2, [r7, #20]
 8008488:	4413      	add	r3, r2
 800848a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	685a      	ldr	r2, [r3, #4]
 8008494:	4b24      	ldr	r3, [pc, #144]	; (8008528 <vPortFree+0xb8>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4013      	ands	r3, r2
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10a      	bne.n	80084b4 <vPortFree+0x44>
	__asm volatile
 800849e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	60fb      	str	r3, [r7, #12]
}
 80084b0:	bf00      	nop
 80084b2:	e7fe      	b.n	80084b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00a      	beq.n	80084d2 <vPortFree+0x62>
	__asm volatile
 80084bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	60bb      	str	r3, [r7, #8]
}
 80084ce:	bf00      	nop
 80084d0:	e7fe      	b.n	80084d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	4b14      	ldr	r3, [pc, #80]	; (8008528 <vPortFree+0xb8>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4013      	ands	r3, r2
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d01e      	beq.n	800851e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d11a      	bne.n	800851e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	4b0e      	ldr	r3, [pc, #56]	; (8008528 <vPortFree+0xb8>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	43db      	mvns	r3, r3
 80084f2:	401a      	ands	r2, r3
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084f8:	f7fe fc90 	bl	8006e1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	4b0a      	ldr	r3, [pc, #40]	; (800852c <vPortFree+0xbc>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4413      	add	r3, r2
 8008506:	4a09      	ldr	r2, [pc, #36]	; (800852c <vPortFree+0xbc>)
 8008508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800850a:	6938      	ldr	r0, [r7, #16]
 800850c:	f000 f874 	bl	80085f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008510:	4b07      	ldr	r3, [pc, #28]	; (8008530 <vPortFree+0xc0>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	3301      	adds	r3, #1
 8008516:	4a06      	ldr	r2, [pc, #24]	; (8008530 <vPortFree+0xc0>)
 8008518:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800851a:	f7fe fc8d 	bl	8006e38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800851e:	bf00      	nop
 8008520:	3718      	adds	r7, #24
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	200018f4 	.word	0x200018f4
 800852c:	200018e4 	.word	0x200018e4
 8008530:	200018f0 	.word	0x200018f0

08008534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800853a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800853e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008540:	4b27      	ldr	r3, [pc, #156]	; (80085e0 <prvHeapInit+0xac>)
 8008542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f003 0307 	and.w	r3, r3, #7
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00c      	beq.n	8008568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3307      	adds	r3, #7
 8008552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f023 0307 	bic.w	r3, r3, #7
 800855a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	4a1f      	ldr	r2, [pc, #124]	; (80085e0 <prvHeapInit+0xac>)
 8008564:	4413      	add	r3, r2
 8008566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800856c:	4a1d      	ldr	r2, [pc, #116]	; (80085e4 <prvHeapInit+0xb0>)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008572:	4b1c      	ldr	r3, [pc, #112]	; (80085e4 <prvHeapInit+0xb0>)
 8008574:	2200      	movs	r2, #0
 8008576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	4413      	add	r3, r2
 800857e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008580:	2208      	movs	r2, #8
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	1a9b      	subs	r3, r3, r2
 8008586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f023 0307 	bic.w	r3, r3, #7
 800858e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4a15      	ldr	r2, [pc, #84]	; (80085e8 <prvHeapInit+0xb4>)
 8008594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008596:	4b14      	ldr	r3, [pc, #80]	; (80085e8 <prvHeapInit+0xb4>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2200      	movs	r2, #0
 800859c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800859e:	4b12      	ldr	r3, [pc, #72]	; (80085e8 <prvHeapInit+0xb4>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	1ad2      	subs	r2, r2, r3
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80085b4:	4b0c      	ldr	r3, [pc, #48]	; (80085e8 <prvHeapInit+0xb4>)
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	4a0a      	ldr	r2, [pc, #40]	; (80085ec <prvHeapInit+0xb8>)
 80085c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	4a09      	ldr	r2, [pc, #36]	; (80085f0 <prvHeapInit+0xbc>)
 80085ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085cc:	4b09      	ldr	r3, [pc, #36]	; (80085f4 <prvHeapInit+0xc0>)
 80085ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80085d2:	601a      	str	r2, [r3, #0]
}
 80085d4:	bf00      	nop
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	20000d20 	.word	0x20000d20
 80085e4:	200018d8 	.word	0x200018d8
 80085e8:	200018e0 	.word	0x200018e0
 80085ec:	200018e8 	.word	0x200018e8
 80085f0:	200018e4 	.word	0x200018e4
 80085f4:	200018f4 	.word	0x200018f4

080085f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008600:	4b28      	ldr	r3, [pc, #160]	; (80086a4 <prvInsertBlockIntoFreeList+0xac>)
 8008602:	60fb      	str	r3, [r7, #12]
 8008604:	e002      	b.n	800860c <prvInsertBlockIntoFreeList+0x14>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	429a      	cmp	r2, r3
 8008614:	d8f7      	bhi.n	8008606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	4413      	add	r3, r2
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	429a      	cmp	r2, r3
 8008626:	d108      	bne.n	800863a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	441a      	add	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	441a      	add	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	429a      	cmp	r2, r3
 800864c:	d118      	bne.n	8008680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	4b15      	ldr	r3, [pc, #84]	; (80086a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	429a      	cmp	r2, r3
 8008658:	d00d      	beq.n	8008676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685a      	ldr	r2, [r3, #4]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	441a      	add	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	e008      	b.n	8008688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008676:	4b0c      	ldr	r3, [pc, #48]	; (80086a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	601a      	str	r2, [r3, #0]
 800867e:	e003      	b.n	8008688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	429a      	cmp	r2, r3
 800868e:	d002      	beq.n	8008696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008696:	bf00      	nop
 8008698:	3714      	adds	r7, #20
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	200018d8 	.word	0x200018d8
 80086a8:	200018e0 	.word	0x200018e0

080086ac <__libc_init_array>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	4d0d      	ldr	r5, [pc, #52]	; (80086e4 <__libc_init_array+0x38>)
 80086b0:	4c0d      	ldr	r4, [pc, #52]	; (80086e8 <__libc_init_array+0x3c>)
 80086b2:	1b64      	subs	r4, r4, r5
 80086b4:	10a4      	asrs	r4, r4, #2
 80086b6:	2600      	movs	r6, #0
 80086b8:	42a6      	cmp	r6, r4
 80086ba:	d109      	bne.n	80086d0 <__libc_init_array+0x24>
 80086bc:	4d0b      	ldr	r5, [pc, #44]	; (80086ec <__libc_init_array+0x40>)
 80086be:	4c0c      	ldr	r4, [pc, #48]	; (80086f0 <__libc_init_array+0x44>)
 80086c0:	f000 f842 	bl	8008748 <_init>
 80086c4:	1b64      	subs	r4, r4, r5
 80086c6:	10a4      	asrs	r4, r4, #2
 80086c8:	2600      	movs	r6, #0
 80086ca:	42a6      	cmp	r6, r4
 80086cc:	d105      	bne.n	80086da <__libc_init_array+0x2e>
 80086ce:	bd70      	pop	{r4, r5, r6, pc}
 80086d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80086d4:	4798      	blx	r3
 80086d6:	3601      	adds	r6, #1
 80086d8:	e7ee      	b.n	80086b8 <__libc_init_array+0xc>
 80086da:	f855 3b04 	ldr.w	r3, [r5], #4
 80086de:	4798      	blx	r3
 80086e0:	3601      	adds	r6, #1
 80086e2:	e7f2      	b.n	80086ca <__libc_init_array+0x1e>
 80086e4:	080088a0 	.word	0x080088a0
 80086e8:	080088a0 	.word	0x080088a0
 80086ec:	080088a0 	.word	0x080088a0
 80086f0:	080088a4 	.word	0x080088a4

080086f4 <memcpy>:
 80086f4:	440a      	add	r2, r1
 80086f6:	4291      	cmp	r1, r2
 80086f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80086fc:	d100      	bne.n	8008700 <memcpy+0xc>
 80086fe:	4770      	bx	lr
 8008700:	b510      	push	{r4, lr}
 8008702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008706:	f803 4f01 	strb.w	r4, [r3, #1]!
 800870a:	4291      	cmp	r1, r2
 800870c:	d1f9      	bne.n	8008702 <memcpy+0xe>
 800870e:	bd10      	pop	{r4, pc}

08008710 <memset>:
 8008710:	4402      	add	r2, r0
 8008712:	4603      	mov	r3, r0
 8008714:	4293      	cmp	r3, r2
 8008716:	d100      	bne.n	800871a <memset+0xa>
 8008718:	4770      	bx	lr
 800871a:	f803 1b01 	strb.w	r1, [r3], #1
 800871e:	e7f9      	b.n	8008714 <memset+0x4>

08008720 <strncat>:
 8008720:	b530      	push	{r4, r5, lr}
 8008722:	4604      	mov	r4, r0
 8008724:	7825      	ldrb	r5, [r4, #0]
 8008726:	4623      	mov	r3, r4
 8008728:	3401      	adds	r4, #1
 800872a:	2d00      	cmp	r5, #0
 800872c:	d1fa      	bne.n	8008724 <strncat+0x4>
 800872e:	3a01      	subs	r2, #1
 8008730:	d304      	bcc.n	800873c <strncat+0x1c>
 8008732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008736:	f803 4b01 	strb.w	r4, [r3], #1
 800873a:	b904      	cbnz	r4, 800873e <strncat+0x1e>
 800873c:	bd30      	pop	{r4, r5, pc}
 800873e:	2a00      	cmp	r2, #0
 8008740:	d1f5      	bne.n	800872e <strncat+0xe>
 8008742:	701a      	strb	r2, [r3, #0]
 8008744:	e7f3      	b.n	800872e <strncat+0xe>
	...

08008748 <_init>:
 8008748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874a:	bf00      	nop
 800874c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800874e:	bc08      	pop	{r3}
 8008750:	469e      	mov	lr, r3
 8008752:	4770      	bx	lr

08008754 <_fini>:
 8008754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008756:	bf00      	nop
 8008758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800875a:	bc08      	pop	{r3}
 800875c:	469e      	mov	lr, r3
 800875e:	4770      	bx	lr
