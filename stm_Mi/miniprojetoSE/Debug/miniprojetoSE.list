
miniprojetoSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008610  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080087d0  080087d0  000187d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008940  08008940  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008940  08008940  00018940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008948  08008948  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008948  08008948  00018948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800894c  0800894c  0001894c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b10  20000010  08008960  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b20  08008960  00021b20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fd13  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038be  00000000  00000000  0003fd53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001828  00000000  00000000  00043618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e0  00000000  00000000  00044e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000439a  00000000  00000000  00046520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000198f5  00000000  00000000  0004a8ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114113  00000000  00000000  000641af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001782c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006638  00000000  00000000  00178318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080087b8 	.word	0x080087b8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	080087b8 	.word	0x080087b8

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96e 	b.w	80004f4 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468c      	mov	ip, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	f040 8083 	bne.w	8000346 <__udivmoddi4+0x116>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d947      	bls.n	80002d6 <__udivmoddi4+0xa6>
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	b142      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024c:	f1c2 0020 	rsb	r0, r2, #32
 8000250:	fa24 f000 	lsr.w	r0, r4, r0
 8000254:	4091      	lsls	r1, r2
 8000256:	4097      	lsls	r7, r2
 8000258:	ea40 0c01 	orr.w	ip, r0, r1
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbbc f6f8 	udiv	r6, ip, r8
 8000268:	fa1f fe87 	uxth.w	lr, r7
 800026c:	fb08 c116 	mls	r1, r8, r6, ip
 8000270:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000274:	fb06 f10e 	mul.w	r1, r6, lr
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18fb      	adds	r3, r7, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 8119 	bcs.w	80004b8 <__udivmoddi4+0x288>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8116 	bls.w	80004b8 <__udivmoddi4+0x288>
 800028c:	3e02      	subs	r6, #2
 800028e:	443b      	add	r3, r7
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a4:	45a6      	cmp	lr, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8105 	bcs.w	80004bc <__udivmoddi4+0x28c>
 80002b2:	45a6      	cmp	lr, r4
 80002b4:	f240 8102 	bls.w	80004bc <__udivmoddi4+0x28c>
 80002b8:	3802      	subs	r0, #2
 80002ba:	443c      	add	r4, r7
 80002bc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c0:	eba4 040e 	sub.w	r4, r4, lr
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	b902      	cbnz	r2, 80002da <__udivmoddi4+0xaa>
 80002d8:	deff      	udf	#255	; 0xff
 80002da:	fab2 f282 	clz	r2, r2
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d150      	bne.n	8000384 <__udivmoddi4+0x154>
 80002e2:	1bcb      	subs	r3, r1, r7
 80002e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e8:	fa1f f887 	uxth.w	r8, r7
 80002ec:	2601      	movs	r6, #1
 80002ee:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f2:	0c21      	lsrs	r1, r4, #16
 80002f4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002fc:	fb08 f30c 	mul.w	r3, r8, ip
 8000300:	428b      	cmp	r3, r1
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000304:	1879      	adds	r1, r7, r1
 8000306:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0xe2>
 800030c:	428b      	cmp	r3, r1
 800030e:	f200 80e9 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 8000312:	4684      	mov	ip, r0
 8000314:	1ac9      	subs	r1, r1, r3
 8000316:	b2a3      	uxth	r3, r4
 8000318:	fbb1 f0fe 	udiv	r0, r1, lr
 800031c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000320:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000324:	fb08 f800 	mul.w	r8, r8, r0
 8000328:	45a0      	cmp	r8, r4
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x10c>
 800032c:	193c      	adds	r4, r7, r4
 800032e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x10a>
 8000334:	45a0      	cmp	r8, r4
 8000336:	f200 80d9 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 800033a:	4618      	mov	r0, r3
 800033c:	eba4 0408 	sub.w	r4, r4, r8
 8000340:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000344:	e7bf      	b.n	80002c6 <__udivmoddi4+0x96>
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x12e>
 800034a:	2d00      	cmp	r5, #0
 800034c:	f000 80b1 	beq.w	80004b2 <__udivmoddi4+0x282>
 8000350:	2600      	movs	r6, #0
 8000352:	e9c5 0100 	strd	r0, r1, [r5]
 8000356:	4630      	mov	r0, r6
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f683 	clz	r6, r3
 8000362:	2e00      	cmp	r6, #0
 8000364:	d14a      	bne.n	80003fc <__udivmoddi4+0x1cc>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0x140>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80b8 	bhi.w	80004e0 <__udivmoddi4+0x2b0>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0103 	sbc.w	r1, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	468c      	mov	ip, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0a8      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800037e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000384:	f1c2 0320 	rsb	r3, r2, #32
 8000388:	fa20 f603 	lsr.w	r6, r0, r3
 800038c:	4097      	lsls	r7, r2
 800038e:	fa01 f002 	lsl.w	r0, r1, r2
 8000392:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000396:	40d9      	lsrs	r1, r3
 8000398:	4330      	orrs	r0, r6
 800039a:	0c03      	lsrs	r3, r0, #16
 800039c:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a0:	fa1f f887 	uxth.w	r8, r7
 80003a4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb06 f108 	mul.w	r1, r6, r8
 80003b0:	4299      	cmp	r1, r3
 80003b2:	fa04 f402 	lsl.w	r4, r4, r2
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x19c>
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	f106 3cff 	add.w	ip, r6, #4294967295
 80003be:	f080 808d 	bcs.w	80004dc <__udivmoddi4+0x2ac>
 80003c2:	4299      	cmp	r1, r3
 80003c4:	f240 808a 	bls.w	80004dc <__udivmoddi4+0x2ac>
 80003c8:	3e02      	subs	r6, #2
 80003ca:	443b      	add	r3, r7
 80003cc:	1a5b      	subs	r3, r3, r1
 80003ce:	b281      	uxth	r1, r0
 80003d0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb00 f308 	mul.w	r3, r0, r8
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x1c4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ea:	d273      	bcs.n	80004d4 <__udivmoddi4+0x2a4>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d971      	bls.n	80004d4 <__udivmoddi4+0x2a4>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4439      	add	r1, r7
 80003f4:	1acb      	subs	r3, r1, r3
 80003f6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fa:	e778      	b.n	80002ee <__udivmoddi4+0xbe>
 80003fc:	f1c6 0c20 	rsb	ip, r6, #32
 8000400:	fa03 f406 	lsl.w	r4, r3, r6
 8000404:	fa22 f30c 	lsr.w	r3, r2, ip
 8000408:	431c      	orrs	r4, r3
 800040a:	fa20 f70c 	lsr.w	r7, r0, ip
 800040e:	fa01 f306 	lsl.w	r3, r1, r6
 8000412:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000416:	fa21 f10c 	lsr.w	r1, r1, ip
 800041a:	431f      	orrs	r7, r3
 800041c:	0c3b      	lsrs	r3, r7, #16
 800041e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000422:	fa1f f884 	uxth.w	r8, r4
 8000426:	fb0e 1119 	mls	r1, lr, r9, r1
 800042a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042e:	fb09 fa08 	mul.w	sl, r9, r8
 8000432:	458a      	cmp	sl, r1
 8000434:	fa02 f206 	lsl.w	r2, r2, r6
 8000438:	fa00 f306 	lsl.w	r3, r0, r6
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x220>
 800043e:	1861      	adds	r1, r4, r1
 8000440:	f109 30ff 	add.w	r0, r9, #4294967295
 8000444:	d248      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 8000446:	458a      	cmp	sl, r1
 8000448:	d946      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4421      	add	r1, r4
 8000450:	eba1 010a 	sub.w	r1, r1, sl
 8000454:	b2bf      	uxth	r7, r7
 8000456:	fbb1 f0fe 	udiv	r0, r1, lr
 800045a:	fb0e 1110 	mls	r1, lr, r0, r1
 800045e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000462:	fb00 f808 	mul.w	r8, r0, r8
 8000466:	45b8      	cmp	r8, r7
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x24a>
 800046a:	19e7      	adds	r7, r4, r7
 800046c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000470:	d22e      	bcs.n	80004d0 <__udivmoddi4+0x2a0>
 8000472:	45b8      	cmp	r8, r7
 8000474:	d92c      	bls.n	80004d0 <__udivmoddi4+0x2a0>
 8000476:	3802      	subs	r0, #2
 8000478:	4427      	add	r7, r4
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	eba7 0708 	sub.w	r7, r7, r8
 8000482:	fba0 8902 	umull	r8, r9, r0, r2
 8000486:	454f      	cmp	r7, r9
 8000488:	46c6      	mov	lr, r8
 800048a:	4649      	mov	r1, r9
 800048c:	d31a      	bcc.n	80004c4 <__udivmoddi4+0x294>
 800048e:	d017      	beq.n	80004c0 <__udivmoddi4+0x290>
 8000490:	b15d      	cbz	r5, 80004aa <__udivmoddi4+0x27a>
 8000492:	ebb3 020e 	subs.w	r2, r3, lr
 8000496:	eb67 0701 	sbc.w	r7, r7, r1
 800049a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049e:	40f2      	lsrs	r2, r6
 80004a0:	ea4c 0202 	orr.w	r2, ip, r2
 80004a4:	40f7      	lsrs	r7, r6
 80004a6:	e9c5 2700 	strd	r2, r7, [r5]
 80004aa:	2600      	movs	r6, #0
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e70b      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e9      	b.n	8000290 <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fd      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c0:	4543      	cmp	r3, r8
 80004c2:	d2e5      	bcs.n	8000490 <__udivmoddi4+0x260>
 80004c4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c8:	eb69 0104 	sbc.w	r1, r9, r4
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7df      	b.n	8000490 <__udivmoddi4+0x260>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e7d2      	b.n	800047a <__udivmoddi4+0x24a>
 80004d4:	4660      	mov	r0, ip
 80004d6:	e78d      	b.n	80003f4 <__udivmoddi4+0x1c4>
 80004d8:	4681      	mov	r9, r0
 80004da:	e7b9      	b.n	8000450 <__udivmoddi4+0x220>
 80004dc:	4666      	mov	r6, ip
 80004de:	e775      	b.n	80003cc <__udivmoddi4+0x19c>
 80004e0:	4630      	mov	r0, r6
 80004e2:	e74a      	b.n	800037a <__udivmoddi4+0x14a>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	4439      	add	r1, r7
 80004ea:	e713      	b.n	8000314 <__udivmoddi4+0xe4>
 80004ec:	3802      	subs	r0, #2
 80004ee:	443c      	add	r4, r7
 80004f0:	e724      	b.n	800033c <__udivmoddi4+0x10c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fcc1 	bl	8000e82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f862 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f9a2 	bl	800084c <MX_GPIO_Init>
  MX_DMA_Init();
 8000508:	f000 f976 	bl	80007f8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800050c:	f000 f8d6 	bl	80006bc <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 8000510:	f000 f920 	bl	8000754 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA (&hlpuart1, SR_BUFFER, BUFFER_LEN);
 8000514:	2201      	movs	r2, #1
 8000516:	491b      	ldr	r1, [pc, #108]	; (8000584 <main+0x8c>)
 8000518:	481b      	ldr	r0, [pc, #108]	; (8000588 <main+0x90>)
 800051a:	f003 fb83 	bl	8003c24 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart4, BT_BUFFER, BUFFER_LEN);
 800051e:	2201      	movs	r2, #1
 8000520:	491a      	ldr	r1, [pc, #104]	; (800058c <main+0x94>)
 8000522:	481b      	ldr	r0, [pc, #108]	; (8000590 <main+0x98>)
 8000524:	f003 fb38 	bl	8003b98 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000528:	f005 f960 	bl	80057ec <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of SR_Queue */
  SR_QueueHandle = osMessageQueueNew (64, 1, &SR_Queue_attributes);
 800052c:	4a19      	ldr	r2, [pc, #100]	; (8000594 <main+0x9c>)
 800052e:	2101      	movs	r1, #1
 8000530:	2040      	movs	r0, #64	; 0x40
 8000532:	f005 fa52 	bl	80059da <osMessageQueueNew>
 8000536:	4603      	mov	r3, r0
 8000538:	4a17      	ldr	r2, [pc, #92]	; (8000598 <main+0xa0>)
 800053a:	6013      	str	r3, [r2, #0]

  /* creation of BT_Queue */
  BT_QueueHandle = osMessageQueueNew (64, 1, &BT_Queue_attributes);
 800053c:	4a17      	ldr	r2, [pc, #92]	; (800059c <main+0xa4>)
 800053e:	2101      	movs	r1, #1
 8000540:	2040      	movs	r0, #64	; 0x40
 8000542:	f005 fa4a 	bl	80059da <osMessageQueueNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a15      	ldr	r2, [pc, #84]	; (80005a0 <main+0xa8>)
 800054a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TransmitTask_Se */
  TransmitTask_SeHandle = osThreadNew(StartTransmitTask_Serial, NULL, &TransmitTask_Se_attributes);
 800054c:	4a15      	ldr	r2, [pc, #84]	; (80005a4 <main+0xac>)
 800054e:	2100      	movs	r1, #0
 8000550:	4815      	ldr	r0, [pc, #84]	; (80005a8 <main+0xb0>)
 8000552:	f005 f995 	bl	8005880 <osThreadNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a14      	ldr	r2, [pc, #80]	; (80005ac <main+0xb4>)
 800055a:	6013      	str	r3, [r2, #0]

  /* creation of TransmitTask_BT */
  TransmitTask_BTHandle = osThreadNew(StartTransmitTask_BT, NULL, &TransmitTask_BT_attributes);
 800055c:	4a14      	ldr	r2, [pc, #80]	; (80005b0 <main+0xb8>)
 800055e:	2100      	movs	r1, #0
 8000560:	4814      	ldr	r0, [pc, #80]	; (80005b4 <main+0xbc>)
 8000562:	f005 f98d 	bl	8005880 <osThreadNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a13      	ldr	r2, [pc, #76]	; (80005b8 <main+0xc0>)
 800056a:	6013      	str	r3, [r2, #0]

  /* creation of PingTask */
  PingTaskHandle = osThreadNew(StartPingTask, NULL, &PingTask_attributes);
 800056c:	4a13      	ldr	r2, [pc, #76]	; (80005bc <main+0xc4>)
 800056e:	2100      	movs	r1, #0
 8000570:	4813      	ldr	r0, [pc, #76]	; (80005c0 <main+0xc8>)
 8000572:	f005 f985 	bl	8005880 <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <main+0xcc>)
 800057a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800057c:	f005 f95a 	bl	8005834 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000580:	e7fe      	b.n	8000580 <main+0x88>
 8000582:	bf00      	nop
 8000584:	2000002c 	.word	0x2000002c
 8000588:	20001904 	.word	0x20001904
 800058c:	20001994 	.word	0x20001994
 8000590:	20001a00 	.word	0x20001a00
 8000594:	080088a0 	.word	0x080088a0
 8000598:	200019fc 	.word	0x200019fc
 800059c:	080088b8 	.word	0x080088b8
 80005a0:	200019f8 	.word	0x200019f8
 80005a4:	08008834 	.word	0x08008834
 80005a8:	08000931 	.word	0x08000931
 80005ac:	200018fc 	.word	0x200018fc
 80005b0:	08008858 	.word	0x08008858
 80005b4:	080009cd 	.word	0x080009cd
 80005b8:	200018f8 	.word	0x200018f8
 80005bc:	0800887c 	.word	0x0800887c
 80005c0:	08000a69 	.word	0x08000a69
 80005c4:	20001900 	.word	0x20001900

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b0bc      	sub	sp, #240	; 0xf0
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005d2:	2244      	movs	r2, #68	; 0x44
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f008 f8d2 	bl	8008780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2294      	movs	r2, #148	; 0x94
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f008 f8c4 	bl	8008780 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005fc:	f001 fa3c 	bl	8001a78 <HAL_PWREx_ControlVoltageScaling>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000606:	f000 fa5d 	bl	8000ac4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800060a:	2310      	movs	r3, #16
 800060c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800061c:	2360      	movs	r3, #96	; 0x60
 800061e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000628:	2301      	movs	r3, #1
 800062a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800062e:	2301      	movs	r3, #1
 8000630:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000634:	2320      	movs	r3, #32
 8000636:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fac5 	bl	8001be0 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800065c:	f000 fa32 	bl	8000ac4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2303      	movs	r3, #3
 8000668:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800067e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000682:	2103      	movs	r1, #3
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fed1 	bl	800242c <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000690:	f000 fa18 	bl	8000ac4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_LPUART1;
 8000694:	2328      	movs	r3, #40	; 0x28
 8000696:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000698:	2300      	movs	r3, #0
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800069c:	2300      	movs	r3, #0
 800069e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 f9a6 	bl	80029f4 <HAL_RCCEx_PeriphCLKConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80006ae:	f000 fa09 	bl	8000ac4 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	37f0      	adds	r7, #240	; 0xf0
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006c2:	4a23      	ldr	r2, [pc, #140]	; (8000750 <MX_LPUART1_UART_Init+0x94>)
 80006c4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 8000700:	2200      	movs	r2, #0
 8000702:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000704:	4811      	ldr	r0, [pc, #68]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 8000706:	f003 f95f 	bl	80039c8 <HAL_UART_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000710:	f000 f9d8 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000714:	2100      	movs	r1, #0
 8000716:	480d      	ldr	r0, [pc, #52]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 8000718:	f004 ff5a 	bl	80055d0 <HAL_UARTEx_SetTxFifoThreshold>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000722:	f000 f9cf 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000726:	2100      	movs	r1, #0
 8000728:	4808      	ldr	r0, [pc, #32]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 800072a:	f004 ff8f 	bl	800564c <HAL_UARTEx_SetRxFifoThreshold>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000734:	f000 f9c6 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 800073a:	f004 ff10 	bl	800555e <HAL_UARTEx_DisableFifoMode>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000744:	f000 f9be 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20001904 	.word	0x20001904
 8000750:	40008000 	.word	0x40008000

08000754 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000758:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <MX_UART4_Init+0x9c>)
 800075a:	4a26      	ldr	r2, [pc, #152]	; (80007f4 <MX_UART4_Init+0xa0>)
 800075c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 800075e:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <MX_UART4_Init+0x9c>)
 8000760:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000764:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <MX_UART4_Init+0x9c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <MX_UART4_Init+0x9c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000772:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <MX_UART4_Init+0x9c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <MX_UART4_Init+0x9c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <MX_UART4_Init+0x9c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MX_UART4_Init+0x9c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <MX_UART4_Init+0x9c>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <MX_UART4_Init+0x9c>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <MX_UART4_Init+0x9c>)
 8000798:	2200      	movs	r2, #0
 800079a:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.FifoMode = UART_FIFOMODE_DISABLE;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_UART4_Init+0x9c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80007a2:	2300      	movs	r3, #0
 80007a4:	2200      	movs	r2, #0
 80007a6:	2100      	movs	r1, #0
 80007a8:	4811      	ldr	r0, [pc, #68]	; (80007f0 <MX_UART4_Init+0x9c>)
 80007aa:	f004 fe51 	bl	8005450 <HAL_RS485Ex_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_UART4_Init+0x64>
  {
    Error_Handler();
 80007b4:	f000 f986 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b8:	2100      	movs	r1, #0
 80007ba:	480d      	ldr	r0, [pc, #52]	; (80007f0 <MX_UART4_Init+0x9c>)
 80007bc:	f004 ff08 	bl	80055d0 <HAL_UARTEx_SetTxFifoThreshold>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_UART4_Init+0x76>
  {
    Error_Handler();
 80007c6:	f000 f97d 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ca:	2100      	movs	r1, #0
 80007cc:	4808      	ldr	r0, [pc, #32]	; (80007f0 <MX_UART4_Init+0x9c>)
 80007ce:	f004 ff3d 	bl	800564c <HAL_UARTEx_SetRxFifoThreshold>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_UART4_Init+0x88>
  {
    Error_Handler();
 80007d8:	f000 f974 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_UART4_Init+0x9c>)
 80007de:	f004 febe 	bl	800555e <HAL_UARTEx_DisableFifoMode>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_UART4_Init+0x98>
  {
    Error_Handler();
 80007e8:	f000 f96c 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20001a00 	.word	0x20001a00
 80007f4:	40004c00 	.word	0x40004c00

080007f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_DMA_Init+0x50>)
 8000800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000802:	4a11      	ldr	r2, [pc, #68]	; (8000848 <MX_DMA_Init+0x50>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6493      	str	r3, [r2, #72]	; 0x48
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_DMA_Init+0x50>)
 800080c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_DMA_Init+0x50>)
 8000818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800081a:	4a0b      	ldr	r2, [pc, #44]	; (8000848 <MX_DMA_Init+0x50>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6493      	str	r3, [r2, #72]	; 0x48
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_DMA_Init+0x50>)
 8000824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2105      	movs	r1, #5
 8000832:	200f      	movs	r0, #15
 8000834:	f000 fc16 	bl	8001064 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000838:	200f      	movs	r0, #15
 800083a:	f000 fc2f 	bl	800109c <HAL_NVIC_EnableIRQ>

}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000852:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_GPIO_Init+0x74>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a1a      	ldr	r2, [pc, #104]	; (80008c0 <MX_GPIO_Init+0x74>)
 8000858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_GPIO_Init+0x74>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 800086a:	f001 f9a9 	bl	8001bc0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_GPIO_Init+0x74>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <MX_GPIO_Init+0x74>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_GPIO_Init+0x74>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_GPIO_Init+0x74>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <MX_GPIO_Init+0x74>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_GPIO_Init+0x74>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_GPIO_Init+0x74>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <MX_GPIO_Init+0x74>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <MX_GPIO_Init+0x74>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

}
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000

080008c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1){
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a12      	ldr	r2, [pc, #72]	; (8000918 <HAL_UART_RxCpltCallback+0x54>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d10b      	bne.n	80008ec <HAL_UART_RxCpltCallback+0x28>
		osMessageQueuePut(SR_QueueHandle, SR_BUFFER, 0, 0);
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <HAL_UART_RxCpltCallback+0x58>)
 80008d6:	6818      	ldr	r0, [r3, #0]
 80008d8:	2300      	movs	r3, #0
 80008da:	2200      	movs	r2, #0
 80008dc:	4910      	ldr	r1, [pc, #64]	; (8000920 <HAL_UART_RxCpltCallback+0x5c>)
 80008de:	f005 f8ef 	bl	8005ac0 <osMessageQueuePut>
		HAL_UART_Receive_DMA(&hlpuart1, SR_BUFFER, BUFFER_LEN);
 80008e2:	2201      	movs	r2, #1
 80008e4:	490e      	ldr	r1, [pc, #56]	; (8000920 <HAL_UART_RxCpltCallback+0x5c>)
 80008e6:	480c      	ldr	r0, [pc, #48]	; (8000918 <HAL_UART_RxCpltCallback+0x54>)
 80008e8:	f003 f99c 	bl	8003c24 <HAL_UART_Receive_DMA>
	}
	if(huart->Instance == huart4.Instance){
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <HAL_UART_RxCpltCallback+0x60>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d10b      	bne.n	8000910 <HAL_UART_RxCpltCallback+0x4c>
		osMessageQueuePut(BT_QueueHandle, BT_BUFFER, 0, 0);
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <HAL_UART_RxCpltCallback+0x64>)
 80008fa:	6818      	ldr	r0, [r3, #0]
 80008fc:	2300      	movs	r3, #0
 80008fe:	2200      	movs	r2, #0
 8000900:	490a      	ldr	r1, [pc, #40]	; (800092c <HAL_UART_RxCpltCallback+0x68>)
 8000902:	f005 f8dd 	bl	8005ac0 <osMessageQueuePut>
		HAL_UART_Receive_IT(&huart4, BT_BUFFER, BUFFER_LEN);
 8000906:	2201      	movs	r2, #1
 8000908:	4908      	ldr	r1, [pc, #32]	; (800092c <HAL_UART_RxCpltCallback+0x68>)
 800090a:	4806      	ldr	r0, [pc, #24]	; (8000924 <HAL_UART_RxCpltCallback+0x60>)
 800090c:	f003 f944 	bl	8003b98 <HAL_UART_Receive_IT>
	}
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20001904 	.word	0x20001904
 800091c:	200019fc 	.word	0x200019fc
 8000920:	2000002c 	.word	0x2000002c
 8000924:	20001a00 	.word	0x20001a00
 8000928:	200019f8 	.word	0x200019f8
 800092c:	20001994 	.word	0x20001994

08000930 <StartTransmitTask_Serial>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTransmitTask_Serial */
void StartTransmitTask_Serial(void *argument)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b096      	sub	sp, #88	; 0x58
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	char msg_sr[64];
	uint16_t count_sr = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	char c[1];

  /* Infinite loop */
	for(;;)
	{
		memset(msg_sr,0,64);
 800093e:	f107 0310 	add.w	r3, r7, #16
 8000942:	2240      	movs	r2, #64	; 0x40
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f007 ff1a 	bl	8008780 <memset>
		count_sr = osMessageQueueGetCount(SR_QueueHandle);
 800094c:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <StartTransmitTask_Serial+0x90>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f005 f973 	bl	8005c3c <osMessageQueueGetCount>
 8000956:	4603      	mov	r3, r0
 8000958:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		if(count_sr > 0){
 800095c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000960:	2b00      	cmp	r3, #0
 8000962:	d028      	beq.n	80009b6 <StartTransmitTask_Serial+0x86>
			for (int i = 0; i < count_sr; i++) {
 8000964:	2300      	movs	r3, #0
 8000966:	657b      	str	r3, [r7, #84]	; 0x54
 8000968:	e012      	b.n	8000990 <StartTransmitTask_Serial+0x60>
				osMessageQueueGet(SR_QueueHandle, c, 0, 100);
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <StartTransmitTask_Serial+0x90>)
 800096c:	6818      	ldr	r0, [r3, #0]
 800096e:	f107 010c 	add.w	r1, r7, #12
 8000972:	2364      	movs	r3, #100	; 0x64
 8000974:	2200      	movs	r2, #0
 8000976:	f005 f903 	bl	8005b80 <osMessageQueueGet>
				strncat(msg_sr, c, 1);
 800097a:	f107 010c 	add.w	r1, r7, #12
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	2201      	movs	r2, #1
 8000984:	4618      	mov	r0, r3
 8000986:	f007 ff03 	bl	8008790 <strncat>
			for (int i = 0; i < count_sr; i++) {
 800098a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800098c:	3301      	adds	r3, #1
 800098e:	657b      	str	r3, [r7, #84]	; 0x54
 8000990:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000994:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000996:	429a      	cmp	r2, r3
 8000998:	dbe7      	blt.n	800096a <StartTransmitTask_Serial+0x3a>
			}
			HAL_UART_Transmit(&huart4, (uint8_t *)msg_sr, sizeof(msg_sr), 100);
 800099a:	f107 0110 	add.w	r1, r7, #16
 800099e:	2364      	movs	r3, #100	; 0x64
 80009a0:	2240      	movs	r2, #64	; 0x40
 80009a2:	4808      	ldr	r0, [pc, #32]	; (80009c4 <StartTransmitTask_Serial+0x94>)
 80009a4:	f003 f860 	bl	8003a68 <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg_sr, sizeof(msg_sr), 100);
 80009a8:	f107 0110 	add.w	r1, r7, #16
 80009ac:	2364      	movs	r3, #100	; 0x64
 80009ae:	2240      	movs	r2, #64	; 0x40
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <StartTransmitTask_Serial+0x98>)
 80009b2:	f003 f859 	bl	8003a68 <HAL_UART_Transmit>
		}
		osDelay(100);
 80009b6:	2064      	movs	r0, #100	; 0x64
 80009b8:	f004 fff4 	bl	80059a4 <osDelay>
		memset(msg_sr,0,64);
 80009bc:	e7bf      	b.n	800093e <StartTransmitTask_Serial+0xe>
 80009be:	bf00      	nop
 80009c0:	200019fc 	.word	0x200019fc
 80009c4:	20001a00 	.word	0x20001a00
 80009c8:	20001904 	.word	0x20001904

080009cc <StartTransmitTask_BT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTransmitTask_BT */
void StartTransmitTask_BT(void *argument)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b096      	sub	sp, #88	; 0x58
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTransmitTask_BT */

	char msg_bt[64];
	uint16_t count_bt = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	char b[1];
  /* Infinite loop */
	for(;;)
	{
		memset(msg_bt,0,64);
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	2240      	movs	r2, #64	; 0x40
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f007 fecc 	bl	8008780 <memset>
		count_bt = osMessageQueueGetCount(BT_QueueHandle);
 80009e8:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <StartTransmitTask_BT+0x90>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f005 f925 	bl	8005c3c <osMessageQueueGetCount>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		if(count_bt > 0){
 80009f8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d028      	beq.n	8000a52 <StartTransmitTask_BT+0x86>
			for (int j = 0; j < count_bt; j++) {
 8000a00:	2300      	movs	r3, #0
 8000a02:	657b      	str	r3, [r7, #84]	; 0x54
 8000a04:	e012      	b.n	8000a2c <StartTransmitTask_BT+0x60>
				osMessageQueueGet(BT_QueueHandle, b, 0, 100);
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <StartTransmitTask_BT+0x90>)
 8000a08:	6818      	ldr	r0, [r3, #0]
 8000a0a:	f107 010c 	add.w	r1, r7, #12
 8000a0e:	2364      	movs	r3, #100	; 0x64
 8000a10:	2200      	movs	r2, #0
 8000a12:	f005 f8b5 	bl	8005b80 <osMessageQueueGet>
				strncat(msg_bt,b,1);
 8000a16:	f107 010c 	add.w	r1, r7, #12
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4618      	mov	r0, r3
 8000a22:	f007 feb5 	bl	8008790 <strncat>
			for (int j = 0; j < count_bt; j++) {
 8000a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a28:	3301      	adds	r3, #1
 8000a2a:	657b      	str	r3, [r7, #84]	; 0x54
 8000a2c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000a30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a32:	429a      	cmp	r2, r3
 8000a34:	dbe7      	blt.n	8000a06 <StartTransmitTask_BT+0x3a>
			}
			HAL_UART_Transmit(&huart4, (uint8_t *)msg_bt, sizeof(msg_bt), 100);
 8000a36:	f107 0110 	add.w	r1, r7, #16
 8000a3a:	2364      	movs	r3, #100	; 0x64
 8000a3c:	2240      	movs	r2, #64	; 0x40
 8000a3e:	4808      	ldr	r0, [pc, #32]	; (8000a60 <StartTransmitTask_BT+0x94>)
 8000a40:	f003 f812 	bl	8003a68 <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg_bt, sizeof(msg_bt), 100);
 8000a44:	f107 0110 	add.w	r1, r7, #16
 8000a48:	2364      	movs	r3, #100	; 0x64
 8000a4a:	2240      	movs	r2, #64	; 0x40
 8000a4c:	4805      	ldr	r0, [pc, #20]	; (8000a64 <StartTransmitTask_BT+0x98>)
 8000a4e:	f003 f80b 	bl	8003a68 <HAL_UART_Transmit>
		}
		osDelay(100);
 8000a52:	2064      	movs	r0, #100	; 0x64
 8000a54:	f004 ffa6 	bl	80059a4 <osDelay>
		memset(msg_bt,0,64);
 8000a58:	e7bf      	b.n	80009da <StartTransmitTask_BT+0xe>
 8000a5a:	bf00      	nop
 8000a5c:	200019f8 	.word	0x200019f8
 8000a60:	20001a00 	.word	0x20001a00
 8000a64:	20001904 	.word	0x20001904

08000a68 <StartPingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPingTask */
void StartPingTask(void *argument)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPingTask */
	uint8_t msg[8] = "1234567\n";
 8000a70:	4a09      	ldr	r2, [pc, #36]	; (8000a98 <StartPingTask+0x30>)
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a7a:	e883 0003 	stmia.w	r3, {r0, r1}
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Transmit(&huart4, msg, 8, 100);
 8000a7e:	f107 0108 	add.w	r1, r7, #8
 8000a82:	2364      	movs	r3, #100	; 0x64
 8000a84:	2208      	movs	r2, #8
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <StartPingTask+0x34>)
 8000a88:	f002 ffee 	bl	8003a68 <HAL_UART_Transmit>
    osDelay(5000);
 8000a8c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a90:	f004 ff88 	bl	80059a4 <osDelay>
	HAL_UART_Transmit(&huart4, msg, 8, 100);
 8000a94:	e7f3      	b.n	8000a7e <StartPingTask+0x16>
 8000a96:	bf00      	nop
 8000a98:	08008814 	.word	0x08008814
 8000a9c:	20001a00 	.word	0x20001a00

08000aa0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d101      	bne.n	8000ab6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ab2:	f000 f9ff 	bl	8000eb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40001000 	.word	0x40001000

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	e7fe      	b.n	8000acc <Error_Handler+0x8>
	...

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_MspInit+0x4c>)
 8000ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ada:	4a10      	ldr	r2, [pc, #64]	; (8000b1c <HAL_MspInit+0x4c>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_MspInit+0x4c>)
 8000ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <HAL_MspInit+0x4c>)
 8000af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <HAL_MspInit+0x4c>)
 8000af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af8:	6593      	str	r3, [r2, #88]	; 0x58
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_MspInit+0x4c>)
 8000afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	210f      	movs	r1, #15
 8000b0a:	f06f 0001 	mvn.w	r0, #1
 8000b0e:	f000 faa9 	bl	8001064 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08c      	sub	sp, #48	; 0x30
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a57      	ldr	r2, [pc, #348]	; (8000c9c <HAL_UART_MspInit+0x17c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d154      	bne.n	8000bec <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b42:	4b57      	ldr	r3, [pc, #348]	; (8000ca0 <HAL_UART_MspInit+0x180>)
 8000b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b46:	4a56      	ldr	r2, [pc, #344]	; (8000ca0 <HAL_UART_MspInit+0x180>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b4e:	4b54      	ldr	r3, [pc, #336]	; (8000ca0 <HAL_UART_MspInit+0x180>)
 8000b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	61bb      	str	r3, [r7, #24]
 8000b58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b5a:	4b51      	ldr	r3, [pc, #324]	; (8000ca0 <HAL_UART_MspInit+0x180>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	4a50      	ldr	r2, [pc, #320]	; (8000ca0 <HAL_UART_MspInit+0x180>)
 8000b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b66:	4b4e      	ldr	r3, [pc, #312]	; (8000ca0 <HAL_UART_MspInit+0x180>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8000b72:	f001 f825 	bl	8001bc0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000b76:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b88:	2308      	movs	r3, #8
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	4619      	mov	r1, r3
 8000b92:	4844      	ldr	r0, [pc, #272]	; (8000ca4 <HAL_UART_MspInit+0x184>)
 8000b94:	f000 fdbe 	bl	8001714 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel5;
 8000b98:	4b43      	ldr	r3, [pc, #268]	; (8000ca8 <HAL_UART_MspInit+0x188>)
 8000b9a:	4a44      	ldr	r2, [pc, #272]	; (8000cac <HAL_UART_MspInit+0x18c>)
 8000b9c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000b9e:	4b42      	ldr	r3, [pc, #264]	; (8000ca8 <HAL_UART_MspInit+0x188>)
 8000ba0:	2222      	movs	r2, #34	; 0x22
 8000ba2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ba4:	4b40      	ldr	r3, [pc, #256]	; (8000ca8 <HAL_UART_MspInit+0x188>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000baa:	4b3f      	ldr	r3, [pc, #252]	; (8000ca8 <HAL_UART_MspInit+0x188>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bb0:	4b3d      	ldr	r3, [pc, #244]	; (8000ca8 <HAL_UART_MspInit+0x188>)
 8000bb2:	2280      	movs	r2, #128	; 0x80
 8000bb4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bb6:	4b3c      	ldr	r3, [pc, #240]	; (8000ca8 <HAL_UART_MspInit+0x188>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bbc:	4b3a      	ldr	r3, [pc, #232]	; (8000ca8 <HAL_UART_MspInit+0x188>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000bc2:	4b39      	ldr	r3, [pc, #228]	; (8000ca8 <HAL_UART_MspInit+0x188>)
 8000bc4:	2220      	movs	r2, #32
 8000bc6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bc8:	4b37      	ldr	r3, [pc, #220]	; (8000ca8 <HAL_UART_MspInit+0x188>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000bce:	4836      	ldr	r0, [pc, #216]	; (8000ca8 <HAL_UART_MspInit+0x188>)
 8000bd0:	f000 fa72 	bl	80010b8 <HAL_DMA_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000bda:	f7ff ff73 	bl	8000ac4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a31      	ldr	r2, [pc, #196]	; (8000ca8 <HAL_UART_MspInit+0x188>)
 8000be2:	67da      	str	r2, [r3, #124]	; 0x7c
 8000be4:	4a30      	ldr	r2, [pc, #192]	; (8000ca8 <HAL_UART_MspInit+0x188>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000bea:	e053      	b.n	8000c94 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==UART4)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a2f      	ldr	r2, [pc, #188]	; (8000cb0 <HAL_UART_MspInit+0x190>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d14e      	bne.n	8000c94 <HAL_UART_MspInit+0x174>
    __HAL_RCC_UART4_CLK_ENABLE();
 8000bf6:	4b2a      	ldr	r3, [pc, #168]	; (8000ca0 <HAL_UART_MspInit+0x180>)
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfa:	4a29      	ldr	r2, [pc, #164]	; (8000ca0 <HAL_UART_MspInit+0x180>)
 8000bfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c00:	6593      	str	r3, [r2, #88]	; 0x58
 8000c02:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <HAL_UART_MspInit+0x180>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b24      	ldr	r3, [pc, #144]	; (8000ca0 <HAL_UART_MspInit+0x180>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	4a23      	ldr	r2, [pc, #140]	; (8000ca0 <HAL_UART_MspInit+0x180>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1a:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <HAL_UART_MspInit+0x180>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c26:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <HAL_UART_MspInit+0x180>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	4a1d      	ldr	r2, [pc, #116]	; (8000ca0 <HAL_UART_MspInit+0x180>)
 8000c2c:	f043 0304 	orr.w	r3, r3, #4
 8000c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c32:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <HAL_UART_MspInit+0x180>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c50:	2308      	movs	r3, #8
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5e:	f000 fd59 	bl	8001714 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c74:	2308      	movs	r3, #8
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <HAL_UART_MspInit+0x194>)
 8000c80:	f000 fd48 	bl	8001714 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2105      	movs	r1, #5
 8000c88:	2034      	movs	r0, #52	; 0x34
 8000c8a:	f000 f9eb 	bl	8001064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000c8e:	2034      	movs	r0, #52	; 0x34
 8000c90:	f000 fa04 	bl	800109c <HAL_NVIC_EnableIRQ>
}
 8000c94:	bf00      	nop
 8000c96:	3730      	adds	r7, #48	; 0x30
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40008000 	.word	0x40008000
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	48001800 	.word	0x48001800
 8000ca8:	20001998 	.word	0x20001998
 8000cac:	40020058 	.word	0x40020058
 8000cb0:	40004c00 	.word	0x40004c00
 8000cb4:	48000800 	.word	0x48000800

08000cb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08c      	sub	sp, #48	; 0x30
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	2036      	movs	r0, #54	; 0x36
 8000cce:	f000 f9c9 	bl	8001064 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cd2:	2036      	movs	r0, #54	; 0x36
 8000cd4:	f000 f9e2 	bl	800109c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cd8:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <HAL_InitTick+0x9c>)
 8000cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cdc:	4a1d      	ldr	r2, [pc, #116]	; (8000d54 <HAL_InitTick+0x9c>)
 8000cde:	f043 0310 	orr.w	r3, r3, #16
 8000ce2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <HAL_InitTick+0x9c>)
 8000ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce8:	f003 0310 	and.w	r3, r3, #16
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cf0:	f107 0210 	add.w	r2, r7, #16
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f001 fd86 	bl	800280c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d00:	f001 fd58 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 8000d04:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d08:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <HAL_InitTick+0xa0>)
 8000d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0e:	0c9b      	lsrs	r3, r3, #18
 8000d10:	3b01      	subs	r3, #1
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <HAL_InitTick+0xa4>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <HAL_InitTick+0xa8>)
 8000d18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <HAL_InitTick+0xa4>)
 8000d1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d20:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_InitTick+0xa4>)
 8000d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d26:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_InitTick+0xa4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <HAL_InitTick+0xa4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d34:	4809      	ldr	r0, [pc, #36]	; (8000d5c <HAL_InitTick+0xa4>)
 8000d36:	f002 fb75 	bl	8003424 <HAL_TIM_Base_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d104      	bne.n	8000d4a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d40:	4806      	ldr	r0, [pc, #24]	; (8000d5c <HAL_InitTick+0xa4>)
 8000d42:	f002 fbd1 	bl	80034e8 <HAL_TIM_Base_Start_IT>
 8000d46:	4603      	mov	r3, r0
 8000d48:	e000      	b.n	8000d4c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3730      	adds	r7, #48	; 0x30
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40021000 	.word	0x40021000
 8000d58:	431bde83 	.word	0x431bde83
 8000d5c:	20001a90 	.word	0x20001a90
 8000d60:	40001000 	.word	0x40001000

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <NMI_Handler+0x4>

08000d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <MemManage_Handler+0x4>

08000d76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <DMA1_Channel5_IRQHandler+0x10>)
 8000d96:	f000 fb6d 	bl	8001474 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20001998 	.word	0x20001998

08000da4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <UART4_IRQHandler+0x10>)
 8000daa:	f002 ff81 	bl	8003cb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20001a00 	.word	0x20001a00

08000db8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <TIM6_DAC_IRQHandler+0x10>)
 8000dbe:	f002 fc03 	bl	80035c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20001a90 	.word	0x20001a90

08000dcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <SystemInit+0x5c>)
 8000dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd6:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <SystemInit+0x5c>)
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <SystemInit+0x60>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a11      	ldr	r2, [pc, #68]	; (8000e2c <SystemInit+0x60>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <SystemInit+0x60>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <SystemInit+0x60>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <SystemInit+0x60>)
 8000df8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000dfc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e00:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <SystemInit+0x60>)
 8000e04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e08:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <SystemInit+0x60>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <SystemInit+0x60>)
 8000e10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e14:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <SystemInit+0x60>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00
 8000e2c:	40021000 	.word	0x40021000

08000e30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e34:	f7ff ffca 	bl	8000dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e38:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e3a:	e003      	b.n	8000e44 <LoopCopyDataInit>

08000e3c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e3e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e40:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e42:	3104      	adds	r1, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e44:	480a      	ldr	r0, [pc, #40]	; (8000e70 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e48:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e4a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e4c:	d3f6      	bcc.n	8000e3c <CopyDataInit>
	ldr	r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e50:	e002      	b.n	8000e58 <LoopFillZerobss>

08000e52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e52:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e54:	f842 3b04 	str.w	r3, [r2], #4

08000e58 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <LoopForever+0x16>)
	cmp	r2, r3
 8000e5a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e5c:	d3f9      	bcc.n	8000e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f007 fc5d 	bl	800871c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e62:	f7ff fb49 	bl	80004f8 <main>

08000e66 <LoopForever>:

LoopForever:
    b LoopForever
 8000e66:	e7fe      	b.n	8000e66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e68:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000e6c:	08008950 	.word	0x08008950
	ldr	r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e74:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000e78:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000e7c:	20001b20 	.word	0x20001b20

08000e80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC1_IRQHandler>

08000e82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f000 f8de 	bl	800104e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff ff10 	bl	8000cb8 <HAL_InitTick>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d002      	beq.n	8000ea4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	71fb      	strb	r3, [r7, #7]
 8000ea2:	e001      	b.n	8000ea8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ea4:	f7ff fe14 	bl	8000ad0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x20>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	20001adc 	.word	0x20001adc

08000edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_GetTick+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20001adc 	.word	0x20001adc

08000ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f10:	4013      	ands	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f26:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	60d3      	str	r3, [r2, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <__NVIC_GetPriorityGrouping+0x18>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	f003 0307 	and.w	r3, r3, #7
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db0b      	blt.n	8000f82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f003 021f 	and.w	r2, r3, #31
 8000f70:	4907      	ldr	r1, [pc, #28]	; (8000f90 <__NVIC_EnableIRQ+0x38>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	2001      	movs	r0, #1
 8000f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ff4c 	bl	8000ef4 <__NVIC_SetPriorityGrouping>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001076:	f7ff ff61 	bl	8000f3c <__NVIC_GetPriorityGrouping>
 800107a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	68b9      	ldr	r1, [r7, #8]
 8001080:	6978      	ldr	r0, [r7, #20]
 8001082:	f7ff ffb1 	bl	8000fe8 <NVIC_EncodePriority>
 8001086:	4602      	mov	r2, r0
 8001088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108c:	4611      	mov	r1, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff80 	bl	8000f94 <__NVIC_SetPriority>
}
 8001094:	bf00      	nop
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ff54 	bl	8000f58 <__NVIC_EnableIRQ>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e08d      	b.n	80011e6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <HAL_DMA_Init+0x138>)
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d80f      	bhi.n	80010f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	4b45      	ldr	r3, [pc, #276]	; (80011f4 <HAL_DMA_Init+0x13c>)
 80010de:	4413      	add	r3, r2
 80010e0:	4a45      	ldr	r2, [pc, #276]	; (80011f8 <HAL_DMA_Init+0x140>)
 80010e2:	fba2 2303 	umull	r2, r3, r2, r3
 80010e6:	091b      	lsrs	r3, r3, #4
 80010e8:	009a      	lsls	r2, r3, #2
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a42      	ldr	r2, [pc, #264]	; (80011fc <HAL_DMA_Init+0x144>)
 80010f2:	641a      	str	r2, [r3, #64]	; 0x40
 80010f4:	e00e      	b.n	8001114 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b40      	ldr	r3, [pc, #256]	; (8001200 <HAL_DMA_Init+0x148>)
 80010fe:	4413      	add	r3, r2
 8001100:	4a3d      	ldr	r2, [pc, #244]	; (80011f8 <HAL_DMA_Init+0x140>)
 8001102:	fba2 2303 	umull	r2, r3, r2, r3
 8001106:	091b      	lsrs	r3, r3, #4
 8001108:	009a      	lsls	r2, r3, #2
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a3c      	ldr	r2, [pc, #240]	; (8001204 <HAL_DMA_Init+0x14c>)
 8001112:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2202      	movs	r2, #2
 8001118:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800112a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800112e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001138:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001144:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001150:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	4313      	orrs	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 fa72 	bl	8001650 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001174:	d102      	bne.n	800117c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001190:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d010      	beq.n	80011bc <HAL_DMA_Init+0x104>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b04      	cmp	r3, #4
 80011a0:	d80c      	bhi.n	80011bc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 fa92 	bl	80016cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	e008      	b.n	80011ce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40020407 	.word	0x40020407
 80011f4:	bffdfff8 	.word	0xbffdfff8
 80011f8:	cccccccd 	.word	0xcccccccd
 80011fc:	40020000 	.word	0x40020000
 8001200:	bffdfbf8 	.word	0xbffdfbf8
 8001204:	40020400 	.word	0x40020400

08001208 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
 8001214:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001220:	2b01      	cmp	r3, #1
 8001222:	d101      	bne.n	8001228 <HAL_DMA_Start_IT+0x20>
 8001224:	2302      	movs	r3, #2
 8001226:	e066      	b.n	80012f6 <HAL_DMA_Start_IT+0xee>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b01      	cmp	r3, #1
 800123a:	d155      	bne.n	80012e8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2202      	movs	r2, #2
 8001240:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2200      	movs	r2, #0
 8001248:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 0201 	bic.w	r2, r2, #1
 8001258:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	68b9      	ldr	r1, [r7, #8]
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f000 f9b6 	bl	80015d2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	2b00      	cmp	r3, #0
 800126c:	d008      	beq.n	8001280 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 020e 	orr.w	r2, r2, #14
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	e00f      	b.n	80012a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 0204 	bic.w	r2, r2, #4
 800128e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 020a 	orr.w	r2, r2, #10
 800129e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d007      	beq.n	80012be <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012bc:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d007      	beq.n	80012d6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012d4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f042 0201 	orr.w	r2, r2, #1
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	e005      	b.n	80012f4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80012f0:	2302      	movs	r3, #2
 80012f2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012fe:	b480      	push	{r7}
 8001300:	b085      	sub	sp, #20
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d008      	beq.n	8001328 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2204      	movs	r2, #4
 800131a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e040      	b.n	80013aa <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 020e 	bic.w	r2, r2, #14
 8001336:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001342:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001346:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0201 	bic.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135c:	f003 021c 	and.w	r2, r3, #28
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	2101      	movs	r1, #1
 8001366:	fa01 f202 	lsl.w	r2, r1, r2
 800136a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001374:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00c      	beq.n	8001398 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001388:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800138c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001396:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d005      	beq.n	80013da <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2204      	movs	r2, #4
 80013d2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	e047      	b.n	800146a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 020e 	bic.w	r2, r2, #14
 80013e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0201 	bic.w	r2, r2, #1
 80013f8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001404:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001408:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	f003 021c 	and.w	r2, r3, #28
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	2101      	movs	r1, #1
 8001418:	fa01 f202 	lsl.w	r2, r1, r2
 800141c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001426:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00c      	beq.n	800144a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800143e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001448:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	4798      	blx	r3
    }
  }
  return status;
 800146a:	7bfb      	ldrb	r3, [r7, #15]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001490:	f003 031c 	and.w	r3, r3, #28
 8001494:	2204      	movs	r2, #4
 8001496:	409a      	lsls	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4013      	ands	r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d026      	beq.n	80014ee <HAL_DMA_IRQHandler+0x7a>
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d021      	beq.n	80014ee <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0320 	and.w	r3, r3, #32
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d107      	bne.n	80014c8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0204 	bic.w	r2, r2, #4
 80014c6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014cc:	f003 021c 	and.w	r2, r3, #28
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	2104      	movs	r1, #4
 80014d6:	fa01 f202 	lsl.w	r2, r1, r2
 80014da:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d071      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80014ec:	e06c      	b.n	80015c8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f003 031c 	and.w	r3, r3, #28
 80014f6:	2202      	movs	r2, #2
 80014f8:	409a      	lsls	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4013      	ands	r3, r2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d02e      	beq.n	8001560 <HAL_DMA_IRQHandler+0xec>
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d029      	beq.n	8001560 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0320 	and.w	r3, r3, #32
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10b      	bne.n	8001532 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 020a 	bic.w	r2, r2, #10
 8001528:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f003 021c 	and.w	r2, r3, #28
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	2102      	movs	r1, #2
 8001540:	fa01 f202 	lsl.w	r2, r1, r2
 8001544:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001552:	2b00      	cmp	r3, #0
 8001554:	d038      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800155e:	e033      	b.n	80015c8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001564:	f003 031c 	and.w	r3, r3, #28
 8001568:	2208      	movs	r2, #8
 800156a:	409a      	lsls	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4013      	ands	r3, r2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d02a      	beq.n	80015ca <HAL_DMA_IRQHandler+0x156>
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	2b00      	cmp	r3, #0
 800157c:	d025      	beq.n	80015ca <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 020e 	bic.w	r2, r2, #14
 800158c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f003 021c 	and.w	r2, r3, #28
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	2101      	movs	r1, #1
 800159c:	fa01 f202 	lsl.w	r2, r1, r2
 80015a0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d004      	beq.n	80015ca <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
}
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b085      	sub	sp, #20
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015e8:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d004      	beq.n	80015fc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015fa:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001600:	f003 021c 	and.w	r2, r3, #28
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	2101      	movs	r1, #1
 800160a:	fa01 f202 	lsl.w	r2, r1, r2
 800160e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b10      	cmp	r3, #16
 800161e:	d108      	bne.n	8001632 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001630:	e007      	b.n	8001642 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	60da      	str	r2, [r3, #12]
}
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001660:	429a      	cmp	r2, r3
 8001662:	d80a      	bhi.n	800167a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001670:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6493      	str	r3, [r2, #72]	; 0x48
 8001678:	e007      	b.n	800168a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	009a      	lsls	r2, r3, #2
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001684:	4413      	add	r3, r2
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	3b08      	subs	r3, #8
 8001692:	4a0c      	ldr	r2, [pc, #48]	; (80016c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80016a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f003 031f 	and.w	r3, r3, #31
 80016a8:	2201      	movs	r2, #1
 80016aa:	409a      	lsls	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	651a      	str	r2, [r3, #80]	; 0x50
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	40020407 	.word	0x40020407
 80016c0:	4002081c 	.word	0x4002081c
 80016c4:	cccccccd 	.word	0xcccccccd
 80016c8:	40020880 	.word	0x40020880

080016cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80016e0:	4413      	add	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	461a      	mov	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a08      	ldr	r2, [pc, #32]	; (8001710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80016ee:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2201      	movs	r2, #1
 80016fa:	409a      	lsls	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	1000823f 	.word	0x1000823f
 8001710:	40020940 	.word	0x40020940

08001714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001722:	e166      	b.n	80019f2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	2101      	movs	r1, #1
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	fa01 f303 	lsl.w	r3, r1, r3
 8001730:	4013      	ands	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 8158 	beq.w	80019ec <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d00b      	beq.n	800175c <HAL_GPIO_Init+0x48>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d007      	beq.n	800175c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001750:	2b11      	cmp	r3, #17
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b12      	cmp	r3, #18
 800175a:	d130      	bne.n	80017be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	68da      	ldr	r2, [r3, #12]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001792:	2201      	movs	r2, #1
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	091b      	lsrs	r3, r3, #4
 80017a8:	f003 0201 	and.w	r2, r3, #1
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	2203      	movs	r2, #3
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0xea>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b12      	cmp	r3, #18
 80017fc:	d123      	bne.n	8001846 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	08da      	lsrs	r2, r3, #3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3208      	adds	r2, #8
 8001806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800180a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	220f      	movs	r2, #15
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	691a      	ldr	r2, [r3, #16]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	08da      	lsrs	r2, r3, #3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3208      	adds	r2, #8
 8001840:	6939      	ldr	r1, [r7, #16]
 8001842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0203 	and.w	r2, r3, #3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 80b2 	beq.w	80019ec <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001888:	4b61      	ldr	r3, [pc, #388]	; (8001a10 <HAL_GPIO_Init+0x2fc>)
 800188a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188c:	4a60      	ldr	r2, [pc, #384]	; (8001a10 <HAL_GPIO_Init+0x2fc>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6613      	str	r3, [r2, #96]	; 0x60
 8001894:	4b5e      	ldr	r3, [pc, #376]	; (8001a10 <HAL_GPIO_Init+0x2fc>)
 8001896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018a0:	4a5c      	ldr	r2, [pc, #368]	; (8001a14 <HAL_GPIO_Init+0x300>)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	3302      	adds	r3, #2
 80018a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	220f      	movs	r2, #15
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018ca:	d02b      	beq.n	8001924 <HAL_GPIO_Init+0x210>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a52      	ldr	r2, [pc, #328]	; (8001a18 <HAL_GPIO_Init+0x304>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d025      	beq.n	8001920 <HAL_GPIO_Init+0x20c>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a51      	ldr	r2, [pc, #324]	; (8001a1c <HAL_GPIO_Init+0x308>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d01f      	beq.n	800191c <HAL_GPIO_Init+0x208>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a50      	ldr	r2, [pc, #320]	; (8001a20 <HAL_GPIO_Init+0x30c>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d019      	beq.n	8001918 <HAL_GPIO_Init+0x204>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a4f      	ldr	r2, [pc, #316]	; (8001a24 <HAL_GPIO_Init+0x310>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d013      	beq.n	8001914 <HAL_GPIO_Init+0x200>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a4e      	ldr	r2, [pc, #312]	; (8001a28 <HAL_GPIO_Init+0x314>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d00d      	beq.n	8001910 <HAL_GPIO_Init+0x1fc>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a4d      	ldr	r2, [pc, #308]	; (8001a2c <HAL_GPIO_Init+0x318>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d007      	beq.n	800190c <HAL_GPIO_Init+0x1f8>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a4c      	ldr	r2, [pc, #304]	; (8001a30 <HAL_GPIO_Init+0x31c>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d101      	bne.n	8001908 <HAL_GPIO_Init+0x1f4>
 8001904:	2307      	movs	r3, #7
 8001906:	e00e      	b.n	8001926 <HAL_GPIO_Init+0x212>
 8001908:	2308      	movs	r3, #8
 800190a:	e00c      	b.n	8001926 <HAL_GPIO_Init+0x212>
 800190c:	2306      	movs	r3, #6
 800190e:	e00a      	b.n	8001926 <HAL_GPIO_Init+0x212>
 8001910:	2305      	movs	r3, #5
 8001912:	e008      	b.n	8001926 <HAL_GPIO_Init+0x212>
 8001914:	2304      	movs	r3, #4
 8001916:	e006      	b.n	8001926 <HAL_GPIO_Init+0x212>
 8001918:	2303      	movs	r3, #3
 800191a:	e004      	b.n	8001926 <HAL_GPIO_Init+0x212>
 800191c:	2302      	movs	r3, #2
 800191e:	e002      	b.n	8001926 <HAL_GPIO_Init+0x212>
 8001920:	2301      	movs	r3, #1
 8001922:	e000      	b.n	8001926 <HAL_GPIO_Init+0x212>
 8001924:	2300      	movs	r3, #0
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	f002 0203 	and.w	r2, r2, #3
 800192c:	0092      	lsls	r2, r2, #2
 800192e:	4093      	lsls	r3, r2
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001936:	4937      	ldr	r1, [pc, #220]	; (8001a14 <HAL_GPIO_Init+0x300>)
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	3302      	adds	r3, #2
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001944:	4b3b      	ldr	r3, [pc, #236]	; (8001a34 <HAL_GPIO_Init+0x320>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	43db      	mvns	r3, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001968:	4a32      	ldr	r2, [pc, #200]	; (8001a34 <HAL_GPIO_Init+0x320>)
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800196e:	4b31      	ldr	r3, [pc, #196]	; (8001a34 <HAL_GPIO_Init+0x320>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	43db      	mvns	r3, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4313      	orrs	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001992:	4a28      	ldr	r2, [pc, #160]	; (8001a34 <HAL_GPIO_Init+0x320>)
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001998:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <HAL_GPIO_Init+0x320>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019bc:	4a1d      	ldr	r2, [pc, #116]	; (8001a34 <HAL_GPIO_Init+0x320>)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019c2:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <HAL_GPIO_Init+0x320>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4013      	ands	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019e6:	4a13      	ldr	r2, [pc, #76]	; (8001a34 <HAL_GPIO_Init+0x320>)
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	3301      	adds	r3, #1
 80019f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	fa22 f303 	lsr.w	r3, r2, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f47f ae91 	bne.w	8001724 <HAL_GPIO_Init+0x10>
  }
}
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
 8001a06:	371c      	adds	r7, #28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	40021000 	.word	0x40021000
 8001a14:	40010000 	.word	0x40010000
 8001a18:	48000400 	.word	0x48000400
 8001a1c:	48000800 	.word	0x48000800
 8001a20:	48000c00 	.word	0x48000c00
 8001a24:	48001000 	.word	0x48001000
 8001a28:	48001400 	.word	0x48001400
 8001a2c:	48001800 	.word	0x48001800
 8001a30:	48001c00 	.word	0x48001c00
 8001a34:	40010400 	.word	0x40010400

08001a38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a48:	d102      	bne.n	8001a50 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a4e:	e00b      	b.n	8001a68 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a5e:	d102      	bne.n	8001a66 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a64:	e000      	b.n	8001a68 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001a66:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40007000 	.word	0x40007000

08001a78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d141      	bne.n	8001b0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a86:	4b4b      	ldr	r3, [pc, #300]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a92:	d131      	bne.n	8001af8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a94:	4b47      	ldr	r3, [pc, #284]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a9a:	4a46      	ldr	r2, [pc, #280]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aa0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aa4:	4b43      	ldr	r3, [pc, #268]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aac:	4a41      	ldr	r2, [pc, #260]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001ab4:	4b40      	ldr	r3, [pc, #256]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2232      	movs	r2, #50	; 0x32
 8001aba:	fb02 f303 	mul.w	r3, r2, r3
 8001abe:	4a3f      	ldr	r2, [pc, #252]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac4:	0c9b      	lsrs	r3, r3, #18
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aca:	e002      	b.n	8001ad2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ad2:	4b38      	ldr	r3, [pc, #224]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ade:	d102      	bne.n	8001ae6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f2      	bne.n	8001acc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ae6:	4b33      	ldr	r3, [pc, #204]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af2:	d158      	bne.n	8001ba6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e057      	b.n	8001ba8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001af8:	4b2e      	ldr	r3, [pc, #184]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001afe:	4a2d      	ldr	r2, [pc, #180]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b08:	e04d      	b.n	8001ba6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b10:	d141      	bne.n	8001b96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b12:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1e:	d131      	bne.n	8001b84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b20:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b26:	4a23      	ldr	r2, [pc, #140]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b30:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b38:	4a1e      	ldr	r2, [pc, #120]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001b40:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2232      	movs	r2, #50	; 0x32
 8001b46:	fb02 f303 	mul.w	r3, r2, r3
 8001b4a:	4a1c      	ldr	r2, [pc, #112]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b50:	0c9b      	lsrs	r3, r3, #18
 8001b52:	3301      	adds	r3, #1
 8001b54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b56:	e002      	b.n	8001b5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6a:	d102      	bne.n	8001b72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f2      	bne.n	8001b58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b7e:	d112      	bne.n	8001ba6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e011      	b.n	8001ba8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b94:	e007      	b.n	8001ba6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b9e:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ba4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	40007000 	.word	0x40007000
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	431bde83 	.word	0x431bde83

08001bc0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_PWREx_EnableVddIO2+0x1c>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_PWREx_EnableVddIO2+0x1c>)
 8001bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bce:	6053      	str	r3, [r2, #4]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40007000 	.word	0x40007000

08001be0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d102      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	f000 bc16 	b.w	8002420 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bf4:	4ba0      	ldr	r3, [pc, #640]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bfe:	4b9e      	ldr	r3, [pc, #632]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0310 	and.w	r3, r3, #16
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80e4 	beq.w	8001dde <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d007      	beq.n	8001c2c <HAL_RCC_OscConfig+0x4c>
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	2b0c      	cmp	r3, #12
 8001c20:	f040 808b 	bne.w	8001d3a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	f040 8087 	bne.w	8001d3a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c2c:	4b92      	ldr	r3, [pc, #584]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_RCC_OscConfig+0x64>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e3ed      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1a      	ldr	r2, [r3, #32]
 8001c48:	4b8b      	ldr	r3, [pc, #556]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d004      	beq.n	8001c5e <HAL_RCC_OscConfig+0x7e>
 8001c54:	4b88      	ldr	r3, [pc, #544]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c5c:	e005      	b.n	8001c6a <HAL_RCC_OscConfig+0x8a>
 8001c5e:	4b86      	ldr	r3, [pc, #536]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d223      	bcs.n	8001cb6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 fdfc 	bl	8002870 <RCC_SetFlashLatencyFromMSIRange>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e3ce      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c82:	4b7d      	ldr	r3, [pc, #500]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a7c      	ldr	r2, [pc, #496]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001c88:	f043 0308 	orr.w	r3, r3, #8
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b7a      	ldr	r3, [pc, #488]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	4977      	ldr	r1, [pc, #476]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ca0:	4b75      	ldr	r3, [pc, #468]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	021b      	lsls	r3, r3, #8
 8001cae:	4972      	ldr	r1, [pc, #456]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
 8001cb4:	e025      	b.n	8001d02 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cb6:	4b70      	ldr	r3, [pc, #448]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a6f      	ldr	r2, [pc, #444]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001cbc:	f043 0308 	orr.w	r3, r3, #8
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	4b6d      	ldr	r3, [pc, #436]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	496a      	ldr	r1, [pc, #424]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cd4:	4b68      	ldr	r3, [pc, #416]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	021b      	lsls	r3, r3, #8
 8001ce2:	4965      	ldr	r1, [pc, #404]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d109      	bne.n	8001d02 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 fdbc 	bl	8002870 <RCC_SetFlashLatencyFromMSIRange>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e38e      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d02:	f000 fcbf 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 8001d06:	4602      	mov	r2, r0
 8001d08:	4b5b      	ldr	r3, [pc, #364]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	495a      	ldr	r1, [pc, #360]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001d14:	5ccb      	ldrb	r3, [r1, r3]
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1e:	4a58      	ldr	r2, [pc, #352]	; (8001e80 <HAL_RCC_OscConfig+0x2a0>)
 8001d20:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d22:	4b58      	ldr	r3, [pc, #352]	; (8001e84 <HAL_RCC_OscConfig+0x2a4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe ffc6 	bl	8000cb8 <HAL_InitTick>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d052      	beq.n	8001ddc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	e372      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d032      	beq.n	8001da8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d42:	4b4d      	ldr	r3, [pc, #308]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a4c      	ldr	r2, [pc, #304]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d4e:	f7ff f8c5 	bl	8000edc <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d56:	f7ff f8c1 	bl	8000edc <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e35b      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d68:	4b43      	ldr	r3, [pc, #268]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d74:	4b40      	ldr	r3, [pc, #256]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a3f      	ldr	r2, [pc, #252]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001d7a:	f043 0308 	orr.w	r3, r3, #8
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	4b3d      	ldr	r3, [pc, #244]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	493a      	ldr	r1, [pc, #232]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d92:	4b39      	ldr	r3, [pc, #228]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	021b      	lsls	r3, r3, #8
 8001da0:	4935      	ldr	r1, [pc, #212]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	604b      	str	r3, [r1, #4]
 8001da6:	e01a      	b.n	8001dde <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001da8:	4b33      	ldr	r3, [pc, #204]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a32      	ldr	r2, [pc, #200]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001dae:	f023 0301 	bic.w	r3, r3, #1
 8001db2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001db4:	f7ff f892 	bl	8000edc <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dbc:	f7ff f88e 	bl	8000edc <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e328      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dce:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x1dc>
 8001dda:	e000      	b.n	8001dde <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ddc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d073      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_OscConfig+0x21c>
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2b0c      	cmp	r3, #12
 8001df4:	d10e      	bne.n	8001e14 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d10b      	bne.n	8001e14 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfc:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d063      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x2f0>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d15f      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e305      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1c:	d106      	bne.n	8001e2c <HAL_RCC_OscConfig+0x24c>
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a15      	ldr	r2, [pc, #84]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e01d      	b.n	8001e68 <HAL_RCC_OscConfig+0x288>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x270>
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a0f      	ldr	r2, [pc, #60]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a0c      	ldr	r2, [pc, #48]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	e00b      	b.n	8001e68 <HAL_RCC_OscConfig+0x288>
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a08      	ldr	r2, [pc, #32]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <HAL_RCC_OscConfig+0x298>)
 8001e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d01b      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e70:	f7ff f834 	bl	8000edc <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e76:	e010      	b.n	8001e9a <HAL_RCC_OscConfig+0x2ba>
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	080088d0 	.word	0x080088d0
 8001e80:	20000000 	.word	0x20000000
 8001e84:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e88:	f7ff f828 	bl	8000edc <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	; 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e2c2      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e9a:	4baf      	ldr	r3, [pc, #700]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0x2a8>
 8001ea6:	e014      	b.n	8001ed2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea8:	f7ff f818 	bl	8000edc <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb0:	f7ff f814 	bl	8000edc <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b64      	cmp	r3, #100	; 0x64
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e2ae      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ec2:	4ba5      	ldr	r3, [pc, #660]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x2d0>
 8001ece:	e000      	b.n	8001ed2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d060      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x310>
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	d119      	bne.n	8001f1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d116      	bne.n	8001f1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ef0:	4b99      	ldr	r3, [pc, #612]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_OscConfig+0x328>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e28b      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f08:	4b93      	ldr	r3, [pc, #588]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	061b      	lsls	r3, r3, #24
 8001f16:	4990      	ldr	r1, [pc, #576]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f1c:	e040      	b.n	8001fa0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d023      	beq.n	8001f6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f26:	4b8c      	ldr	r3, [pc, #560]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a8b      	ldr	r2, [pc, #556]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 8001f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f32:	f7fe ffd3 	bl	8000edc <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3a:	f7fe ffcf 	bl	8000edc <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e269      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f4c:	4b82      	ldr	r3, [pc, #520]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f58:	4b7f      	ldr	r3, [pc, #508]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	061b      	lsls	r3, r3, #24
 8001f66:	497c      	ldr	r1, [pc, #496]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
 8001f6c:	e018      	b.n	8001fa0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6e:	4b7a      	ldr	r3, [pc, #488]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a79      	ldr	r2, [pc, #484]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 8001f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f7fe ffaf 	bl	8000edc <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f82:	f7fe ffab 	bl	8000edc <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e245      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f94:	4b70      	ldr	r3, [pc, #448]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1f0      	bne.n	8001f82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d03c      	beq.n	8002026 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d01c      	beq.n	8001fee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb4:	4b68      	ldr	r3, [pc, #416]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 8001fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fba:	4a67      	ldr	r2, [pc, #412]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc4:	f7fe ff8a 	bl	8000edc <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fcc:	f7fe ff86 	bl	8000edc <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e220      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fde:	4b5e      	ldr	r3, [pc, #376]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 8001fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0ef      	beq.n	8001fcc <HAL_RCC_OscConfig+0x3ec>
 8001fec:	e01b      	b.n	8002026 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fee:	4b5a      	ldr	r3, [pc, #360]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 8001ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff4:	4a58      	ldr	r2, [pc, #352]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 8001ff6:	f023 0301 	bic.w	r3, r3, #1
 8001ffa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffe:	f7fe ff6d 	bl	8000edc <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002006:	f7fe ff69 	bl	8000edc <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e203      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002018:	4b4f      	ldr	r3, [pc, #316]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 800201a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1ef      	bne.n	8002006 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 80a6 	beq.w	8002180 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002034:	2300      	movs	r3, #0
 8002036:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002038:	4b47      	ldr	r3, [pc, #284]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 800203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10d      	bne.n	8002060 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002044:	4b44      	ldr	r3, [pc, #272]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 8002046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002048:	4a43      	ldr	r2, [pc, #268]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 800204a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204e:	6593      	str	r3, [r2, #88]	; 0x58
 8002050:	4b41      	ldr	r3, [pc, #260]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205c:	2301      	movs	r3, #1
 800205e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002060:	4b3e      	ldr	r3, [pc, #248]	; (800215c <HAL_RCC_OscConfig+0x57c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002068:	2b00      	cmp	r3, #0
 800206a:	d118      	bne.n	800209e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800206c:	4b3b      	ldr	r3, [pc, #236]	; (800215c <HAL_RCC_OscConfig+0x57c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a3a      	ldr	r2, [pc, #232]	; (800215c <HAL_RCC_OscConfig+0x57c>)
 8002072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002076:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002078:	f7fe ff30 	bl	8000edc <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002080:	f7fe ff2c 	bl	8000edc <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e1c6      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002092:	4b32      	ldr	r3, [pc, #200]	; (800215c <HAL_RCC_OscConfig+0x57c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d108      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4d8>
 80020a6:	4b2c      	ldr	r3, [pc, #176]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 80020a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ac:	4a2a      	ldr	r2, [pc, #168]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020b6:	e024      	b.n	8002102 <HAL_RCC_OscConfig+0x522>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b05      	cmp	r3, #5
 80020be:	d110      	bne.n	80020e2 <HAL_RCC_OscConfig+0x502>
 80020c0:	4b25      	ldr	r3, [pc, #148]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c6:	4a24      	ldr	r2, [pc, #144]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020d0:	4b21      	ldr	r3, [pc, #132]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 80020d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d6:	4a20      	ldr	r2, [pc, #128]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020e0:	e00f      	b.n	8002102 <HAL_RCC_OscConfig+0x522>
 80020e2:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 80020e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e8:	4a1b      	ldr	r2, [pc, #108]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 80020ea:	f023 0301 	bic.w	r3, r3, #1
 80020ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020f2:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 80020f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f8:	4a17      	ldr	r2, [pc, #92]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 80020fa:	f023 0304 	bic.w	r3, r3, #4
 80020fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d016      	beq.n	8002138 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210a:	f7fe fee7 	bl	8000edc <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002110:	e00a      	b.n	8002128 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002112:	f7fe fee3 	bl	8000edc <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002120:	4293      	cmp	r3, r2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e17b      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_RCC_OscConfig+0x578>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0ed      	beq.n	8002112 <HAL_RCC_OscConfig+0x532>
 8002136:	e01a      	b.n	800216e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002138:	f7fe fed0 	bl	8000edc <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800213e:	e00f      	b.n	8002160 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002140:	f7fe fecc 	bl	8000edc <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f241 3288 	movw	r2, #5000	; 0x1388
 800214e:	4293      	cmp	r3, r2
 8002150:	d906      	bls.n	8002160 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e164      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
 8002156:	bf00      	nop
 8002158:	40021000 	.word	0x40021000
 800215c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002160:	4ba8      	ldr	r3, [pc, #672]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 8002162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1e8      	bne.n	8002140 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800216e:	7ffb      	ldrb	r3, [r7, #31]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d105      	bne.n	8002180 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002174:	4ba3      	ldr	r3, [pc, #652]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 8002176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002178:	4aa2      	ldr	r2, [pc, #648]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 800217a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800217e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	2b00      	cmp	r3, #0
 800218a:	d03c      	beq.n	8002206 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	2b00      	cmp	r3, #0
 8002192:	d01c      	beq.n	80021ce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002194:	4b9b      	ldr	r3, [pc, #620]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 8002196:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800219a:	4a9a      	ldr	r2, [pc, #616]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a4:	f7fe fe9a 	bl	8000edc <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021ac:	f7fe fe96 	bl	8000edc <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e130      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021be:	4b91      	ldr	r3, [pc, #580]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 80021c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0ef      	beq.n	80021ac <HAL_RCC_OscConfig+0x5cc>
 80021cc:	e01b      	b.n	8002206 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021ce:	4b8d      	ldr	r3, [pc, #564]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 80021d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021d4:	4a8b      	ldr	r2, [pc, #556]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 80021d6:	f023 0301 	bic.w	r3, r3, #1
 80021da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021de:	f7fe fe7d 	bl	8000edc <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021e6:	f7fe fe79 	bl	8000edc <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e113      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021f8:	4b82      	ldr	r3, [pc, #520]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 80021fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1ef      	bne.n	80021e6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 8107 	beq.w	800241e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	2b02      	cmp	r3, #2
 8002216:	f040 80cb 	bne.w	80023b0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800221a:	4b7a      	ldr	r3, [pc, #488]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f003 0203 	and.w	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222a:	429a      	cmp	r2, r3
 800222c:	d12c      	bne.n	8002288 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	3b01      	subs	r3, #1
 800223a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800223c:	429a      	cmp	r2, r3
 800223e:	d123      	bne.n	8002288 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800224c:	429a      	cmp	r2, r3
 800224e:	d11b      	bne.n	8002288 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800225c:	429a      	cmp	r2, r3
 800225e:	d113      	bne.n	8002288 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226a:	085b      	lsrs	r3, r3, #1
 800226c:	3b01      	subs	r3, #1
 800226e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002270:	429a      	cmp	r2, r3
 8002272:	d109      	bne.n	8002288 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	085b      	lsrs	r3, r3, #1
 8002280:	3b01      	subs	r3, #1
 8002282:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002284:	429a      	cmp	r2, r3
 8002286:	d06d      	beq.n	8002364 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	2b0c      	cmp	r3, #12
 800228c:	d068      	beq.n	8002360 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800228e:	4b5d      	ldr	r3, [pc, #372]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d105      	bne.n	80022a6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800229a:	4b5a      	ldr	r3, [pc, #360]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e0ba      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022aa:	4b56      	ldr	r3, [pc, #344]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a55      	ldr	r2, [pc, #340]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 80022b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022b6:	f7fe fe11 	bl	8000edc <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022be:	f7fe fe0d 	bl	8000edc <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e0a7      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d0:	4b4c      	ldr	r3, [pc, #304]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f0      	bne.n	80022be <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022dc:	4b49      	ldr	r3, [pc, #292]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	4b49      	ldr	r3, [pc, #292]	; (8002408 <HAL_RCC_OscConfig+0x828>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022ec:	3a01      	subs	r2, #1
 80022ee:	0112      	lsls	r2, r2, #4
 80022f0:	4311      	orrs	r1, r2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022f6:	0212      	lsls	r2, r2, #8
 80022f8:	4311      	orrs	r1, r2
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022fe:	0852      	lsrs	r2, r2, #1
 8002300:	3a01      	subs	r2, #1
 8002302:	0552      	lsls	r2, r2, #21
 8002304:	4311      	orrs	r1, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800230a:	0852      	lsrs	r2, r2, #1
 800230c:	3a01      	subs	r2, #1
 800230e:	0652      	lsls	r2, r2, #25
 8002310:	4311      	orrs	r1, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002316:	06d2      	lsls	r2, r2, #27
 8002318:	430a      	orrs	r2, r1
 800231a:	493a      	ldr	r1, [pc, #232]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 800231c:	4313      	orrs	r3, r2
 800231e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002320:	4b38      	ldr	r3, [pc, #224]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a37      	ldr	r2, [pc, #220]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 8002326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800232a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800232c:	4b35      	ldr	r3, [pc, #212]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4a34      	ldr	r2, [pc, #208]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 8002332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002336:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002338:	f7fe fdd0 	bl	8000edc <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002340:	f7fe fdcc 	bl	8000edc <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e066      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002352:	4b2c      	ldr	r3, [pc, #176]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800235e:	e05e      	b.n	800241e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e05d      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002364:	4b27      	ldr	r3, [pc, #156]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d156      	bne.n	800241e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002370:	4b24      	ldr	r3, [pc, #144]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a23      	ldr	r2, [pc, #140]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 8002376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800237a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800237c:	4b21      	ldr	r3, [pc, #132]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4a20      	ldr	r2, [pc, #128]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 8002382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002386:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002388:	f7fe fda8 	bl	8000edc <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002390:	f7fe fda4 	bl	8000edc <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e03e      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a2:	4b18      	ldr	r3, [pc, #96]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0x7b0>
 80023ae:	e036      	b.n	800241e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	2b0c      	cmp	r3, #12
 80023b4:	d031      	beq.n	800241a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b6:	4b13      	ldr	r3, [pc, #76]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a12      	ldr	r2, [pc, #72]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 80023bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023c0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d105      	bne.n	80023da <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80023ce:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	4a0c      	ldr	r2, [pc, #48]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 80023d4:	f023 0303 	bic.w	r3, r3, #3
 80023d8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	4a09      	ldr	r2, [pc, #36]	; (8002404 <HAL_RCC_OscConfig+0x824>)
 80023e0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80023e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ea:	f7fe fd77 	bl	8000edc <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f0:	e00c      	b.n	800240c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f2:	f7fe fd73 	bl	8000edc <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d905      	bls.n	800240c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e00d      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
 8002404:	40021000 	.word	0x40021000
 8002408:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_RCC_OscConfig+0x848>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1ec      	bne.n	80023f2 <HAL_RCC_OscConfig+0x812>
 8002418:	e001      	b.n	800241e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3720      	adds	r7, #32
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000

0800242c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e10f      	b.n	8002664 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002444:	4b89      	ldr	r3, [pc, #548]	; (800266c <HAL_RCC_ClockConfig+0x240>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d910      	bls.n	8002474 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002452:	4b86      	ldr	r3, [pc, #536]	; (800266c <HAL_RCC_ClockConfig+0x240>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 020f 	bic.w	r2, r3, #15
 800245a:	4984      	ldr	r1, [pc, #528]	; (800266c <HAL_RCC_ClockConfig+0x240>)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	4b82      	ldr	r3, [pc, #520]	; (800266c <HAL_RCC_ClockConfig+0x240>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e0f7      	b.n	8002664 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 8089 	beq.w	8002594 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b03      	cmp	r3, #3
 8002488:	d133      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248a:	4b79      	ldr	r3, [pc, #484]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e0e4      	b.n	8002664 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800249a:	f000 fa43 	bl	8002924 <RCC_GetSysClockFreqFromPLLSource>
 800249e:	4603      	mov	r3, r0
 80024a0:	4a74      	ldr	r2, [pc, #464]	; (8002674 <HAL_RCC_ClockConfig+0x248>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d955      	bls.n	8002552 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80024a6:	4b72      	ldr	r3, [pc, #456]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10a      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024b2:	4b6f      	ldr	r3, [pc, #444]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024ba:	4a6d      	ldr	r2, [pc, #436]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 80024bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024c2:	2380      	movs	r3, #128	; 0x80
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	e044      	b.n	8002552 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d03e      	beq.n	8002552 <HAL_RCC_ClockConfig+0x126>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d13a      	bne.n	8002552 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024dc:	4b64      	ldr	r3, [pc, #400]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024e4:	4a62      	ldr	r2, [pc, #392]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 80024e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ea:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	e02f      	b.n	8002552 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024fa:	4b5d      	ldr	r3, [pc, #372]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d115      	bne.n	8002532 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0ac      	b.n	8002664 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002512:	4b57      	ldr	r3, [pc, #348]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e0a0      	b.n	8002664 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002522:	4b53      	ldr	r3, [pc, #332]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e098      	b.n	8002664 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002532:	f000 f8a7 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 8002536:	4603      	mov	r3, r0
 8002538:	4a4e      	ldr	r2, [pc, #312]	; (8002674 <HAL_RCC_ClockConfig+0x248>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d909      	bls.n	8002552 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800253e:	4b4c      	ldr	r3, [pc, #304]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002546:	4a4a      	ldr	r2, [pc, #296]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800254c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002552:	4b47      	ldr	r3, [pc, #284]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f023 0203 	bic.w	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4944      	ldr	r1, [pc, #272]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002560:	4313      	orrs	r3, r2
 8002562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002564:	f7fe fcba 	bl	8000edc <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	e00a      	b.n	8002582 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256c:	f7fe fcb6 	bl	8000edc <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	; 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e070      	b.n	8002664 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002582:	4b3b      	ldr	r3, [pc, #236]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 020c 	and.w	r2, r3, #12
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	429a      	cmp	r2, r3
 8002592:	d1eb      	bne.n	800256c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a0:	4b33      	ldr	r3, [pc, #204]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4930      	ldr	r1, [pc, #192]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2b80      	cmp	r3, #128	; 0x80
 80025b8:	d105      	bne.n	80025c6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80025ba:	4b2d      	ldr	r3, [pc, #180]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	4a2c      	ldr	r2, [pc, #176]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 80025c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025c4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025c6:	4b29      	ldr	r3, [pc, #164]	; (800266c <HAL_RCC_ClockConfig+0x240>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d210      	bcs.n	80025f6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d4:	4b25      	ldr	r3, [pc, #148]	; (800266c <HAL_RCC_ClockConfig+0x240>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 020f 	bic.w	r2, r3, #15
 80025dc:	4923      	ldr	r1, [pc, #140]	; (800266c <HAL_RCC_ClockConfig+0x240>)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e4:	4b21      	ldr	r3, [pc, #132]	; (800266c <HAL_RCC_ClockConfig+0x240>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e036      	b.n	8002664 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d008      	beq.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002602:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	4918      	ldr	r1, [pc, #96]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002610:	4313      	orrs	r3, r2
 8002612:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d009      	beq.n	8002634 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002620:	4b13      	ldr	r3, [pc, #76]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4910      	ldr	r1, [pc, #64]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002630:	4313      	orrs	r3, r2
 8002632:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002634:	f000 f826 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 8002638:	4602      	mov	r2, r0
 800263a:	4b0d      	ldr	r3, [pc, #52]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	091b      	lsrs	r3, r3, #4
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	490c      	ldr	r1, [pc, #48]	; (8002678 <HAL_RCC_ClockConfig+0x24c>)
 8002646:	5ccb      	ldrb	r3, [r1, r3]
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	fa22 f303 	lsr.w	r3, r2, r3
 8002650:	4a0a      	ldr	r2, [pc, #40]	; (800267c <HAL_RCC_ClockConfig+0x250>)
 8002652:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <HAL_RCC_ClockConfig+0x254>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe fb2d 	bl	8000cb8 <HAL_InitTick>
 800265e:	4603      	mov	r3, r0
 8002660:	73fb      	strb	r3, [r7, #15]

  return status;
 8002662:	7bfb      	ldrb	r3, [r7, #15]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40022000 	.word	0x40022000
 8002670:	40021000 	.word	0x40021000
 8002674:	04c4b400 	.word	0x04c4b400
 8002678:	080088d0 	.word	0x080088d0
 800267c:	20000000 	.word	0x20000000
 8002680:	20000004 	.word	0x20000004

08002684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	; 0x24
 8002688:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
 800268e:	2300      	movs	r3, #0
 8002690:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002692:	4b3e      	ldr	r3, [pc, #248]	; (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800269c:	4b3b      	ldr	r3, [pc, #236]	; (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0x34>
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	2b0c      	cmp	r3, #12
 80026b0:	d121      	bne.n	80026f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d11e      	bne.n	80026f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026b8:	4b34      	ldr	r3, [pc, #208]	; (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d107      	bne.n	80026d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026c4:	4b31      	ldr	r3, [pc, #196]	; (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 80026c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	61fb      	str	r3, [r7, #28]
 80026d2:	e005      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026d4:	4b2d      	ldr	r3, [pc, #180]	; (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026e0:	4a2b      	ldr	r2, [pc, #172]	; (8002790 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10d      	bne.n	800270c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026f4:	e00a      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d102      	bne.n	8002702 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026fc:	4b25      	ldr	r3, [pc, #148]	; (8002794 <HAL_RCC_GetSysClockFreq+0x110>)
 80026fe:	61bb      	str	r3, [r7, #24]
 8002700:	e004      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b08      	cmp	r3, #8
 8002706:	d101      	bne.n	800270c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002708:	4b23      	ldr	r3, [pc, #140]	; (8002798 <HAL_RCC_GetSysClockFreq+0x114>)
 800270a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	2b0c      	cmp	r3, #12
 8002710:	d134      	bne.n	800277c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002712:	4b1e      	ldr	r3, [pc, #120]	; (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d003      	beq.n	800272a <HAL_RCC_GetSysClockFreq+0xa6>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d003      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0xac>
 8002728:	e005      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800272a:	4b1a      	ldr	r3, [pc, #104]	; (8002794 <HAL_RCC_GetSysClockFreq+0x110>)
 800272c:	617b      	str	r3, [r7, #20]
      break;
 800272e:	e005      	b.n	800273c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_RCC_GetSysClockFreq+0x114>)
 8002732:	617b      	str	r3, [r7, #20]
      break;
 8002734:	e002      	b.n	800273c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	617b      	str	r3, [r7, #20]
      break;
 800273a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800273c:	4b13      	ldr	r3, [pc, #76]	; (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	3301      	adds	r3, #1
 8002748:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800274a:	4b10      	ldr	r3, [pc, #64]	; (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	fb02 f203 	mul.w	r2, r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002760:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	0e5b      	lsrs	r3, r3, #25
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	3301      	adds	r3, #1
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	fbb2 f3f3 	udiv	r3, r2, r3
 800277a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800277c:	69bb      	ldr	r3, [r7, #24]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3724      	adds	r7, #36	; 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000
 8002790:	080088e8 	.word	0x080088e8
 8002794:	00f42400 	.word	0x00f42400
 8002798:	007a1200 	.word	0x007a1200

0800279c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	20000000 	.word	0x20000000

080027b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027b8:	f7ff fff0 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027bc:	4602      	mov	r2, r0
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	4904      	ldr	r1, [pc, #16]	; (80027dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80027ca:	5ccb      	ldrb	r3, [r1, r3]
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	080088e0 	.word	0x080088e0

080027e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027e4:	f7ff ffda 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027e8:	4602      	mov	r2, r0
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	0adb      	lsrs	r3, r3, #11
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	4904      	ldr	r1, [pc, #16]	; (8002808 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027f6:	5ccb      	ldrb	r3, [r1, r3]
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002800:	4618      	mov	r0, r3
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	080088e0 	.word	0x080088e0

0800280c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	220f      	movs	r2, #15
 800281a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800281c:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_RCC_GetClockConfig+0x5c>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 0203 	and.w	r2, r3, #3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002828:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <HAL_RCC_GetClockConfig+0x5c>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <HAL_RCC_GetClockConfig+0x5c>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <HAL_RCC_GetClockConfig+0x5c>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	08db      	lsrs	r3, r3, #3
 8002846:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800284e:	4b07      	ldr	r3, [pc, #28]	; (800286c <HAL_RCC_GetClockConfig+0x60>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 020f 	and.w	r2, r3, #15
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	601a      	str	r2, [r3, #0]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40021000 	.word	0x40021000
 800286c:	40022000 	.word	0x40022000

08002870 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002878:	2300      	movs	r3, #0
 800287a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800287c:	4b27      	ldr	r3, [pc, #156]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800287e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002888:	f7ff f8d6 	bl	8001a38 <HAL_PWREx_GetVoltageRange>
 800288c:	6178      	str	r0, [r7, #20]
 800288e:	e014      	b.n	80028ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002890:	4b22      	ldr	r3, [pc, #136]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002894:	4a21      	ldr	r2, [pc, #132]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289a:	6593      	str	r3, [r2, #88]	; 0x58
 800289c:	4b1f      	ldr	r3, [pc, #124]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028a8:	f7ff f8c6 	bl	8001a38 <HAL_PWREx_GetVoltageRange>
 80028ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028ae:	4b1b      	ldr	r3, [pc, #108]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b2:	4a1a      	ldr	r2, [pc, #104]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028c0:	d10b      	bne.n	80028da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b80      	cmp	r3, #128	; 0x80
 80028c6:	d913      	bls.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2ba0      	cmp	r3, #160	; 0xa0
 80028cc:	d902      	bls.n	80028d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028ce:	2302      	movs	r3, #2
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	e00d      	b.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028d4:	2301      	movs	r3, #1
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	e00a      	b.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b7f      	cmp	r3, #127	; 0x7f
 80028de:	d902      	bls.n	80028e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80028e0:	2302      	movs	r3, #2
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	e004      	b.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b70      	cmp	r3, #112	; 0x70
 80028ea:	d101      	bne.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028ec:	2301      	movs	r3, #1
 80028ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f023 020f 	bic.w	r2, r3, #15
 80028f8:	4909      	ldr	r1, [pc, #36]	; (8002920 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002900:	4b07      	ldr	r3, [pc, #28]	; (8002920 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 030f 	and.w	r3, r3, #15
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	429a      	cmp	r2, r3
 800290c:	d001      	beq.n	8002912 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40021000 	.word	0x40021000
 8002920:	40022000 	.word	0x40022000

08002924 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800292e:	4b2d      	ldr	r3, [pc, #180]	; (80029e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	2b01      	cmp	r3, #1
 8002938:	d118      	bne.n	800296c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800293a:	4b2a      	ldr	r3, [pc, #168]	; (80029e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d107      	bne.n	8002956 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002946:	4b27      	ldr	r3, [pc, #156]	; (80029e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800294c:	0a1b      	lsrs	r3, r3, #8
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	e005      	b.n	8002962 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002956:	4b23      	ldr	r3, [pc, #140]	; (80029e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	091b      	lsrs	r3, r3, #4
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002962:	4a21      	ldr	r2, [pc, #132]	; (80029e8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800296c:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d003      	beq.n	8002984 <RCC_GetSysClockFreqFromPLLSource+0x60>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b03      	cmp	r3, #3
 8002980:	d003      	beq.n	800298a <RCC_GetSysClockFreqFromPLLSource+0x66>
 8002982:	e005      	b.n	8002990 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002984:	4b19      	ldr	r3, [pc, #100]	; (80029ec <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002986:	613b      	str	r3, [r7, #16]
    break;
 8002988:	e005      	b.n	8002996 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800298a:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800298c:	613b      	str	r3, [r7, #16]
    break;
 800298e:	e002      	b.n	8002996 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	613b      	str	r3, [r7, #16]
    break;
 8002994:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002996:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	3301      	adds	r3, #1
 80029a2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029a4:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	0a1b      	lsrs	r3, r3, #8
 80029aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	fb02 f203 	mul.w	r2, r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ba:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029bc:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	0e5b      	lsrs	r3, r3, #25
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	3301      	adds	r3, #1
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80029d6:	683b      	ldr	r3, [r7, #0]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	371c      	adds	r7, #28
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	40021000 	.word	0x40021000
 80029e8:	080088e8 	.word	0x080088e8
 80029ec:	00f42400 	.word	0x00f42400
 80029f0:	007a1200 	.word	0x007a1200

080029f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029fc:	2300      	movs	r3, #0
 80029fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a00:	2300      	movs	r3, #0
 8002a02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d040      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a14:	2b80      	cmp	r3, #128	; 0x80
 8002a16:	d02a      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a18:	2b80      	cmp	r3, #128	; 0x80
 8002a1a:	d825      	bhi.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002a1c:	2b60      	cmp	r3, #96	; 0x60
 8002a1e:	d026      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a20:	2b60      	cmp	r3, #96	; 0x60
 8002a22:	d821      	bhi.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002a24:	2b40      	cmp	r3, #64	; 0x40
 8002a26:	d006      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002a28:	2b40      	cmp	r3, #64	; 0x40
 8002a2a:	d81d      	bhi.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d009      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	d010      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002a34:	e018      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a36:	4b89      	ldr	r3, [pc, #548]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	4a88      	ldr	r2, [pc, #544]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a40:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a42:	e015      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3304      	adds	r3, #4
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fb02 	bl	8003054 <RCCEx_PLLSAI1_Config>
 8002a50:	4603      	mov	r3, r0
 8002a52:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a54:	e00c      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3320      	adds	r3, #32
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 fbed 	bl	800323c <RCCEx_PLLSAI2_Config>
 8002a62:	4603      	mov	r3, r0
 8002a64:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a66:	e003      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	74fb      	strb	r3, [r7, #19]
      break;
 8002a6c:	e000      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002a6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a70:	7cfb      	ldrb	r3, [r7, #19]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10b      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a76:	4b79      	ldr	r3, [pc, #484]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a7c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a84:	4975      	ldr	r1, [pc, #468]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002a8c:	e001      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a8e:	7cfb      	ldrb	r3, [r7, #19]
 8002a90:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d047      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa6:	d030      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aac:	d82a      	bhi.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002aae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ab2:	d02a      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002ab4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ab8:	d824      	bhi.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002abe:	d008      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac4:	d81e      	bhi.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ace:	d010      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002ad0:	e018      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ad2:	4b62      	ldr	r3, [pc, #392]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	4a61      	ldr	r2, [pc, #388]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002adc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ade:	e015      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 fab4 	bl	8003054 <RCCEx_PLLSAI1_Config>
 8002aec:	4603      	mov	r3, r0
 8002aee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002af0:	e00c      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3320      	adds	r3, #32
 8002af6:	2100      	movs	r1, #0
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 fb9f 	bl	800323c <RCCEx_PLLSAI2_Config>
 8002afe:	4603      	mov	r3, r0
 8002b00:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b02:	e003      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	74fb      	strb	r3, [r7, #19]
      break;
 8002b08:	e000      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002b0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b0c:	7cfb      	ldrb	r3, [r7, #19]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10b      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b12:	4b52      	ldr	r3, [pc, #328]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b20:	494e      	ldr	r1, [pc, #312]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002b28:	e001      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b2a:	7cfb      	ldrb	r3, [r7, #19]
 8002b2c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 809f 	beq.w	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b40:	4b46      	ldr	r3, [pc, #280]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002b50:	2300      	movs	r3, #0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00d      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b56:	4b41      	ldr	r3, [pc, #260]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	4a40      	ldr	r2, [pc, #256]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b60:	6593      	str	r3, [r2, #88]	; 0x58
 8002b62:	4b3e      	ldr	r3, [pc, #248]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b72:	4b3b      	ldr	r3, [pc, #236]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a3a      	ldr	r2, [pc, #232]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b7e:	f7fe f9ad 	bl	8000edc <HAL_GetTick>
 8002b82:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b84:	e009      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b86:	f7fe f9a9 	bl	8000edc <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d902      	bls.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	74fb      	strb	r3, [r7, #19]
        break;
 8002b98:	e005      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b9a:	4b31      	ldr	r3, [pc, #196]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0ef      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002ba6:	7cfb      	ldrb	r3, [r7, #19]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d15b      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bac:	4b2b      	ldr	r3, [pc, #172]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d01f      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d019      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bca:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bd6:	4b21      	ldr	r3, [pc, #132]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bdc:	4a1f      	ldr	r2, [pc, #124]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002be6:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bec:	4a1b      	ldr	r2, [pc, #108]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bf6:	4a19      	ldr	r2, [pc, #100]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d016      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe f968 	bl	8000edc <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c0e:	e00b      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7fe f964 	bl	8000edc <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d902      	bls.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	74fb      	strb	r3, [r7, #19]
            break;
 8002c26:	e006      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0ec      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002c36:	7cfb      	ldrb	r3, [r7, #19]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10c      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c3c:	4b07      	ldr	r3, [pc, #28]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4c:	4903      	ldr	r1, [pc, #12]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c54:	e008      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c56:	7cfb      	ldrb	r3, [r7, #19]
 8002c58:	74bb      	strb	r3, [r7, #18]
 8002c5a:	e005      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c64:	7cfb      	ldrb	r3, [r7, #19]
 8002c66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c68:	7c7b      	ldrb	r3, [r7, #17]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d105      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6e:	4ba0      	ldr	r3, [pc, #640]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c72:	4a9f      	ldr	r2, [pc, #636]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00a      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c86:	4b9a      	ldr	r3, [pc, #616]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8c:	f023 0203 	bic.w	r2, r3, #3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c94:	4996      	ldr	r1, [pc, #600]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00a      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ca8:	4b91      	ldr	r3, [pc, #580]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cae:	f023 020c 	bic.w	r2, r3, #12
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	498e      	ldr	r1, [pc, #568]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cca:	4b89      	ldr	r3, [pc, #548]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd8:	4985      	ldr	r1, [pc, #532]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cec:	4b80      	ldr	r3, [pc, #512]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cfa:	497d      	ldr	r1, [pc, #500]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0310 	and.w	r3, r3, #16
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d0e:	4b78      	ldr	r3, [pc, #480]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1c:	4974      	ldr	r1, [pc, #464]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d30:	4b6f      	ldr	r3, [pc, #444]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d3e:	496c      	ldr	r1, [pc, #432]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d52:	4b67      	ldr	r3, [pc, #412]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d60:	4963      	ldr	r1, [pc, #396]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d74:	4b5e      	ldr	r3, [pc, #376]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d82:	495b      	ldr	r1, [pc, #364]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d96:	4b56      	ldr	r3, [pc, #344]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da4:	4952      	ldr	r1, [pc, #328]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002db8:	4b4d      	ldr	r3, [pc, #308]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc6:	494a      	ldr	r1, [pc, #296]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dda:	4b45      	ldr	r3, [pc, #276]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de8:	4941      	ldr	r1, [pc, #260]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00a      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002dfc:	4b3c      	ldr	r3, [pc, #240]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e02:	f023 0203 	bic.w	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0a:	4939      	ldr	r1, [pc, #228]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d028      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e1e:	4b34      	ldr	r3, [pc, #208]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2c:	4930      	ldr	r1, [pc, #192]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e3c:	d106      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e3e:	4b2c      	ldr	r3, [pc, #176]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	4a2b      	ldr	r2, [pc, #172]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e48:	60d3      	str	r3, [r2, #12]
 8002e4a:	e011      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 f8f9 	bl	8003054 <RCCEx_PLLSAI1_Config>
 8002e62:	4603      	mov	r3, r0
 8002e64:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e66:	7cfb      	ldrb	r3, [r7, #19]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002e6c:	7cfb      	ldrb	r3, [r7, #19]
 8002e6e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d04d      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e84:	d108      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002e86:	4b1a      	ldr	r3, [pc, #104]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e8c:	4a18      	ldr	r2, [pc, #96]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e92:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002e96:	e012      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002e98:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e9e:	4a14      	ldr	r2, [pc, #80]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ea0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ea4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002ea8:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eb6:	490e      	ldr	r1, [pc, #56]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ec2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4a08      	ldr	r2, [pc, #32]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ece:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ed2:	60d3      	str	r3, [r2, #12]
 8002ed4:	e020      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ede:	d109      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ee0:	4b03      	ldr	r3, [pc, #12]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4a02      	ldr	r2, [pc, #8]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eea:	60d3      	str	r3, [r2, #12]
 8002eec:	e014      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ef8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3304      	adds	r3, #4
 8002f02:	2101      	movs	r1, #1
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 f8a5 	bl	8003054 <RCCEx_PLLSAI1_Config>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f0e:	7cfb      	ldrb	r3, [r7, #19]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d028      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f24:	4b4a      	ldr	r3, [pc, #296]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f32:	4947      	ldr	r1, [pc, #284]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f42:	d106      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f44:	4b42      	ldr	r3, [pc, #264]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4a41      	ldr	r2, [pc, #260]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f4e:	60d3      	str	r3, [r2, #12]
 8002f50:	e011      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f5a:	d10c      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3304      	adds	r3, #4
 8002f60:	2101      	movs	r1, #1
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f876 	bl	8003054 <RCCEx_PLLSAI1_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f6c:	7cfb      	ldrb	r3, [r7, #19]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002f72:	7cfb      	ldrb	r3, [r7, #19]
 8002f74:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d01e      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f82:	4b33      	ldr	r3, [pc, #204]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f88:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f92:	492f      	ldr	r1, [pc, #188]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	2102      	movs	r1, #2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 f851 	bl	8003054 <RCCEx_PLLSAI1_Config>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fb6:	7cfb      	ldrb	r3, [r7, #19]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002fbc:	7cfb      	ldrb	r3, [r7, #19]
 8002fbe:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00b      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fcc:	4b20      	ldr	r3, [pc, #128]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fd2:	f023 0204 	bic.w	r2, r3, #4
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fdc:	491c      	ldr	r1, [pc, #112]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00b      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ff0:	4b17      	ldr	r3, [pc, #92]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ff2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ff6:	f023 0218 	bic.w	r2, r3, #24
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003000:	4913      	ldr	r1, [pc, #76]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003002:	4313      	orrs	r3, r2
 8003004:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d017      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003014:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003016:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800301a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003024:	490a      	ldr	r1, [pc, #40]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003032:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003036:	d105      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003038:	4b05      	ldr	r3, [pc, #20]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4a04      	ldr	r2, [pc, #16]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800303e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003042:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003044:	7cbb      	ldrb	r3, [r7, #18]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000

08003054 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003062:	4b72      	ldr	r3, [pc, #456]	; (800322c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00e      	beq.n	800308c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800306e:	4b6f      	ldr	r3, [pc, #444]	; (800322c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f003 0203 	and.w	r2, r3, #3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d103      	bne.n	8003086 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
       ||
 8003082:	2b00      	cmp	r3, #0
 8003084:	d142      	bne.n	800310c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	73fb      	strb	r3, [r7, #15]
 800308a:	e03f      	b.n	800310c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b03      	cmp	r3, #3
 8003092:	d018      	beq.n	80030c6 <RCCEx_PLLSAI1_Config+0x72>
 8003094:	2b03      	cmp	r3, #3
 8003096:	d825      	bhi.n	80030e4 <RCCEx_PLLSAI1_Config+0x90>
 8003098:	2b01      	cmp	r3, #1
 800309a:	d002      	beq.n	80030a2 <RCCEx_PLLSAI1_Config+0x4e>
 800309c:	2b02      	cmp	r3, #2
 800309e:	d009      	beq.n	80030b4 <RCCEx_PLLSAI1_Config+0x60>
 80030a0:	e020      	b.n	80030e4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030a2:	4b62      	ldr	r3, [pc, #392]	; (800322c <RCCEx_PLLSAI1_Config+0x1d8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d11d      	bne.n	80030ea <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b2:	e01a      	b.n	80030ea <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030b4:	4b5d      	ldr	r3, [pc, #372]	; (800322c <RCCEx_PLLSAI1_Config+0x1d8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d116      	bne.n	80030ee <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c4:	e013      	b.n	80030ee <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030c6:	4b59      	ldr	r3, [pc, #356]	; (800322c <RCCEx_PLLSAI1_Config+0x1d8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10f      	bne.n	80030f2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030d2:	4b56      	ldr	r3, [pc, #344]	; (800322c <RCCEx_PLLSAI1_Config+0x1d8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030e2:	e006      	b.n	80030f2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
      break;
 80030e8:	e004      	b.n	80030f4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80030ea:	bf00      	nop
 80030ec:	e002      	b.n	80030f4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80030ee:	bf00      	nop
 80030f0:	e000      	b.n	80030f4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80030f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d108      	bne.n	800310c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80030fa:	4b4c      	ldr	r3, [pc, #304]	; (800322c <RCCEx_PLLSAI1_Config+0x1d8>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f023 0203 	bic.w	r2, r3, #3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4949      	ldr	r1, [pc, #292]	; (800322c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003108:	4313      	orrs	r3, r2
 800310a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f040 8086 	bne.w	8003220 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003114:	4b45      	ldr	r3, [pc, #276]	; (800322c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a44      	ldr	r2, [pc, #272]	; (800322c <RCCEx_PLLSAI1_Config+0x1d8>)
 800311a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800311e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003120:	f7fd fedc 	bl	8000edc <HAL_GetTick>
 8003124:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003126:	e009      	b.n	800313c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003128:	f7fd fed8 	bl	8000edc <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d902      	bls.n	800313c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	73fb      	strb	r3, [r7, #15]
        break;
 800313a:	e005      	b.n	8003148 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800313c:	4b3b      	ldr	r3, [pc, #236]	; (800322c <RCCEx_PLLSAI1_Config+0x1d8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1ef      	bne.n	8003128 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d168      	bne.n	8003220 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d113      	bne.n	800317c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003154:	4b35      	ldr	r3, [pc, #212]	; (800322c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	4b35      	ldr	r3, [pc, #212]	; (8003230 <RCCEx_PLLSAI1_Config+0x1dc>)
 800315a:	4013      	ands	r3, r2
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6892      	ldr	r2, [r2, #8]
 8003160:	0211      	lsls	r1, r2, #8
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68d2      	ldr	r2, [r2, #12]
 8003166:	06d2      	lsls	r2, r2, #27
 8003168:	4311      	orrs	r1, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6852      	ldr	r2, [r2, #4]
 800316e:	3a01      	subs	r2, #1
 8003170:	0112      	lsls	r2, r2, #4
 8003172:	430a      	orrs	r2, r1
 8003174:	492d      	ldr	r1, [pc, #180]	; (800322c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003176:	4313      	orrs	r3, r2
 8003178:	610b      	str	r3, [r1, #16]
 800317a:	e02d      	b.n	80031d8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d115      	bne.n	80031ae <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003182:	4b2a      	ldr	r3, [pc, #168]	; (800322c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	4b2b      	ldr	r3, [pc, #172]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003188:	4013      	ands	r3, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6892      	ldr	r2, [r2, #8]
 800318e:	0211      	lsls	r1, r2, #8
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6912      	ldr	r2, [r2, #16]
 8003194:	0852      	lsrs	r2, r2, #1
 8003196:	3a01      	subs	r2, #1
 8003198:	0552      	lsls	r2, r2, #21
 800319a:	4311      	orrs	r1, r2
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6852      	ldr	r2, [r2, #4]
 80031a0:	3a01      	subs	r2, #1
 80031a2:	0112      	lsls	r2, r2, #4
 80031a4:	430a      	orrs	r2, r1
 80031a6:	4921      	ldr	r1, [pc, #132]	; (800322c <RCCEx_PLLSAI1_Config+0x1d8>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	610b      	str	r3, [r1, #16]
 80031ac:	e014      	b.n	80031d8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031ae:	4b1f      	ldr	r3, [pc, #124]	; (800322c <RCCEx_PLLSAI1_Config+0x1d8>)
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	4b21      	ldr	r3, [pc, #132]	; (8003238 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6892      	ldr	r2, [r2, #8]
 80031ba:	0211      	lsls	r1, r2, #8
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6952      	ldr	r2, [r2, #20]
 80031c0:	0852      	lsrs	r2, r2, #1
 80031c2:	3a01      	subs	r2, #1
 80031c4:	0652      	lsls	r2, r2, #25
 80031c6:	4311      	orrs	r1, r2
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6852      	ldr	r2, [r2, #4]
 80031cc:	3a01      	subs	r2, #1
 80031ce:	0112      	lsls	r2, r2, #4
 80031d0:	430a      	orrs	r2, r1
 80031d2:	4916      	ldr	r1, [pc, #88]	; (800322c <RCCEx_PLLSAI1_Config+0x1d8>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031d8:	4b14      	ldr	r3, [pc, #80]	; (800322c <RCCEx_PLLSAI1_Config+0x1d8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a13      	ldr	r2, [pc, #76]	; (800322c <RCCEx_PLLSAI1_Config+0x1d8>)
 80031de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e4:	f7fd fe7a 	bl	8000edc <HAL_GetTick>
 80031e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031ea:	e009      	b.n	8003200 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031ec:	f7fd fe76 	bl	8000edc <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d902      	bls.n	8003200 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	73fb      	strb	r3, [r7, #15]
          break;
 80031fe:	e005      	b.n	800320c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003200:	4b0a      	ldr	r3, [pc, #40]	; (800322c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0ef      	beq.n	80031ec <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800320c:	7bfb      	ldrb	r3, [r7, #15]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	4904      	ldr	r1, [pc, #16]	; (800322c <RCCEx_PLLSAI1_Config+0x1d8>)
 800321c:	4313      	orrs	r3, r2
 800321e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003220:	7bfb      	ldrb	r3, [r7, #15]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40021000 	.word	0x40021000
 8003230:	07ff800f 	.word	0x07ff800f
 8003234:	ff9f800f 	.word	0xff9f800f
 8003238:	f9ff800f 	.word	0xf9ff800f

0800323c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800324a:	4b72      	ldr	r3, [pc, #456]	; (8003414 <RCCEx_PLLSAI2_Config+0x1d8>)
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00e      	beq.n	8003274 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003256:	4b6f      	ldr	r3, [pc, #444]	; (8003414 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f003 0203 	and.w	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d103      	bne.n	800326e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
       ||
 800326a:	2b00      	cmp	r3, #0
 800326c:	d142      	bne.n	80032f4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	73fb      	strb	r3, [r7, #15]
 8003272:	e03f      	b.n	80032f4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b03      	cmp	r3, #3
 800327a:	d018      	beq.n	80032ae <RCCEx_PLLSAI2_Config+0x72>
 800327c:	2b03      	cmp	r3, #3
 800327e:	d825      	bhi.n	80032cc <RCCEx_PLLSAI2_Config+0x90>
 8003280:	2b01      	cmp	r3, #1
 8003282:	d002      	beq.n	800328a <RCCEx_PLLSAI2_Config+0x4e>
 8003284:	2b02      	cmp	r3, #2
 8003286:	d009      	beq.n	800329c <RCCEx_PLLSAI2_Config+0x60>
 8003288:	e020      	b.n	80032cc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800328a:	4b62      	ldr	r3, [pc, #392]	; (8003414 <RCCEx_PLLSAI2_Config+0x1d8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d11d      	bne.n	80032d2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800329a:	e01a      	b.n	80032d2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800329c:	4b5d      	ldr	r3, [pc, #372]	; (8003414 <RCCEx_PLLSAI2_Config+0x1d8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d116      	bne.n	80032d6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ac:	e013      	b.n	80032d6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032ae:	4b59      	ldr	r3, [pc, #356]	; (8003414 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10f      	bne.n	80032da <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032ba:	4b56      	ldr	r3, [pc, #344]	; (8003414 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d109      	bne.n	80032da <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032ca:	e006      	b.n	80032da <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	73fb      	strb	r3, [r7, #15]
      break;
 80032d0:	e004      	b.n	80032dc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80032d2:	bf00      	nop
 80032d4:	e002      	b.n	80032dc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80032d6:	bf00      	nop
 80032d8:	e000      	b.n	80032dc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80032da:	bf00      	nop
    }

    if(status == HAL_OK)
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d108      	bne.n	80032f4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80032e2:	4b4c      	ldr	r3, [pc, #304]	; (8003414 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f023 0203 	bic.w	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4949      	ldr	r1, [pc, #292]	; (8003414 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f040 8086 	bne.w	8003408 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80032fc:	4b45      	ldr	r3, [pc, #276]	; (8003414 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a44      	ldr	r2, [pc, #272]	; (8003414 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003306:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003308:	f7fd fde8 	bl	8000edc <HAL_GetTick>
 800330c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800330e:	e009      	b.n	8003324 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003310:	f7fd fde4 	bl	8000edc <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d902      	bls.n	8003324 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	73fb      	strb	r3, [r7, #15]
        break;
 8003322:	e005      	b.n	8003330 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003324:	4b3b      	ldr	r3, [pc, #236]	; (8003414 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1ef      	bne.n	8003310 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d168      	bne.n	8003408 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d113      	bne.n	8003364 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800333c:	4b35      	ldr	r3, [pc, #212]	; (8003414 <RCCEx_PLLSAI2_Config+0x1d8>)
 800333e:	695a      	ldr	r2, [r3, #20]
 8003340:	4b35      	ldr	r3, [pc, #212]	; (8003418 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003342:	4013      	ands	r3, r2
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6892      	ldr	r2, [r2, #8]
 8003348:	0211      	lsls	r1, r2, #8
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68d2      	ldr	r2, [r2, #12]
 800334e:	06d2      	lsls	r2, r2, #27
 8003350:	4311      	orrs	r1, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6852      	ldr	r2, [r2, #4]
 8003356:	3a01      	subs	r2, #1
 8003358:	0112      	lsls	r2, r2, #4
 800335a:	430a      	orrs	r2, r1
 800335c:	492d      	ldr	r1, [pc, #180]	; (8003414 <RCCEx_PLLSAI2_Config+0x1d8>)
 800335e:	4313      	orrs	r3, r2
 8003360:	614b      	str	r3, [r1, #20]
 8003362:	e02d      	b.n	80033c0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d115      	bne.n	8003396 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800336a:	4b2a      	ldr	r3, [pc, #168]	; (8003414 <RCCEx_PLLSAI2_Config+0x1d8>)
 800336c:	695a      	ldr	r2, [r3, #20]
 800336e:	4b2b      	ldr	r3, [pc, #172]	; (800341c <RCCEx_PLLSAI2_Config+0x1e0>)
 8003370:	4013      	ands	r3, r2
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6892      	ldr	r2, [r2, #8]
 8003376:	0211      	lsls	r1, r2, #8
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6912      	ldr	r2, [r2, #16]
 800337c:	0852      	lsrs	r2, r2, #1
 800337e:	3a01      	subs	r2, #1
 8003380:	0552      	lsls	r2, r2, #21
 8003382:	4311      	orrs	r1, r2
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6852      	ldr	r2, [r2, #4]
 8003388:	3a01      	subs	r2, #1
 800338a:	0112      	lsls	r2, r2, #4
 800338c:	430a      	orrs	r2, r1
 800338e:	4921      	ldr	r1, [pc, #132]	; (8003414 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003390:	4313      	orrs	r3, r2
 8003392:	614b      	str	r3, [r1, #20]
 8003394:	e014      	b.n	80033c0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003396:	4b1f      	ldr	r3, [pc, #124]	; (8003414 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003398:	695a      	ldr	r2, [r3, #20]
 800339a:	4b21      	ldr	r3, [pc, #132]	; (8003420 <RCCEx_PLLSAI2_Config+0x1e4>)
 800339c:	4013      	ands	r3, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6892      	ldr	r2, [r2, #8]
 80033a2:	0211      	lsls	r1, r2, #8
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6952      	ldr	r2, [r2, #20]
 80033a8:	0852      	lsrs	r2, r2, #1
 80033aa:	3a01      	subs	r2, #1
 80033ac:	0652      	lsls	r2, r2, #25
 80033ae:	4311      	orrs	r1, r2
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6852      	ldr	r2, [r2, #4]
 80033b4:	3a01      	subs	r2, #1
 80033b6:	0112      	lsls	r2, r2, #4
 80033b8:	430a      	orrs	r2, r1
 80033ba:	4916      	ldr	r1, [pc, #88]	; (8003414 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80033c0:	4b14      	ldr	r3, [pc, #80]	; (8003414 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a13      	ldr	r2, [pc, #76]	; (8003414 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033cc:	f7fd fd86 	bl	8000edc <HAL_GetTick>
 80033d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033d2:	e009      	b.n	80033e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033d4:	f7fd fd82 	bl	8000edc <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d902      	bls.n	80033e8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	73fb      	strb	r3, [r7, #15]
          break;
 80033e6:	e005      	b.n	80033f4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ef      	beq.n	80033d4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d106      	bne.n	8003408 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80033fa:	4b06      	ldr	r3, [pc, #24]	; (8003414 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	4904      	ldr	r1, [pc, #16]	; (8003414 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003404:	4313      	orrs	r3, r2
 8003406:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003408:	7bfb      	ldrb	r3, [r7, #15]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40021000 	.word	0x40021000
 8003418:	07ff800f 	.word	0x07ff800f
 800341c:	ff9f800f 	.word	0xff9f800f
 8003420:	f9ff800f 	.word	0xf9ff800f

08003424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e049      	b.n	80034ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f841 	bl	80034d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3304      	adds	r3, #4
 8003460:	4619      	mov	r1, r3
 8003462:	4610      	mov	r0, r2
 8003464:	f000 f9f8 	bl	8003858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
	...

080034e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d001      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e04f      	b.n	80035a0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a23      	ldr	r2, [pc, #140]	; (80035ac <HAL_TIM_Base_Start_IT+0xc4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d01d      	beq.n	800355e <HAL_TIM_Base_Start_IT+0x76>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352a:	d018      	beq.n	800355e <HAL_TIM_Base_Start_IT+0x76>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1f      	ldr	r2, [pc, #124]	; (80035b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d013      	beq.n	800355e <HAL_TIM_Base_Start_IT+0x76>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1e      	ldr	r2, [pc, #120]	; (80035b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d00e      	beq.n	800355e <HAL_TIM_Base_Start_IT+0x76>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a1c      	ldr	r2, [pc, #112]	; (80035b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d009      	beq.n	800355e <HAL_TIM_Base_Start_IT+0x76>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a1b      	ldr	r2, [pc, #108]	; (80035bc <HAL_TIM_Base_Start_IT+0xd4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d004      	beq.n	800355e <HAL_TIM_Base_Start_IT+0x76>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a19      	ldr	r2, [pc, #100]	; (80035c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d115      	bne.n	800358a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	4b17      	ldr	r3, [pc, #92]	; (80035c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003566:	4013      	ands	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2b06      	cmp	r3, #6
 800356e:	d015      	beq.n	800359c <HAL_TIM_Base_Start_IT+0xb4>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003576:	d011      	beq.n	800359c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003588:	e008      	b.n	800359c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0201 	orr.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	e000      	b.n	800359e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	40012c00 	.word	0x40012c00
 80035b0:	40000400 	.word	0x40000400
 80035b4:	40000800 	.word	0x40000800
 80035b8:	40000c00 	.word	0x40000c00
 80035bc:	40013400 	.word	0x40013400
 80035c0:	40014000 	.word	0x40014000
 80035c4:	00010007 	.word	0x00010007

080035c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d122      	bne.n	8003624 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d11b      	bne.n	8003624 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0202 	mvn.w	r2, #2
 80035f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f905 	bl	800381a <HAL_TIM_IC_CaptureCallback>
 8003610:	e005      	b.n	800361e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f8f7 	bl	8003806 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f908 	bl	800382e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b04      	cmp	r3, #4
 8003630:	d122      	bne.n	8003678 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b04      	cmp	r3, #4
 800363e:	d11b      	bne.n	8003678 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0204 	mvn.w	r2, #4
 8003648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2202      	movs	r2, #2
 800364e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f8db 	bl	800381a <HAL_TIM_IC_CaptureCallback>
 8003664:	e005      	b.n	8003672 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f8cd 	bl	8003806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f8de 	bl	800382e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b08      	cmp	r3, #8
 8003684:	d122      	bne.n	80036cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b08      	cmp	r3, #8
 8003692:	d11b      	bne.n	80036cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0208 	mvn.w	r2, #8
 800369c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2204      	movs	r2, #4
 80036a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f8b1 	bl	800381a <HAL_TIM_IC_CaptureCallback>
 80036b8:	e005      	b.n	80036c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f8a3 	bl	8003806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f8b4 	bl	800382e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0310 	and.w	r3, r3, #16
 80036d6:	2b10      	cmp	r3, #16
 80036d8:	d122      	bne.n	8003720 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	2b10      	cmp	r3, #16
 80036e6:	d11b      	bne.n	8003720 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0210 	mvn.w	r2, #16
 80036f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2208      	movs	r2, #8
 80036f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f887 	bl	800381a <HAL_TIM_IC_CaptureCallback>
 800370c:	e005      	b.n	800371a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f879 	bl	8003806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f88a 	bl	800382e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b01      	cmp	r3, #1
 800372c:	d10e      	bne.n	800374c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b01      	cmp	r3, #1
 800373a:	d107      	bne.n	800374c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0201 	mvn.w	r2, #1
 8003744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fd f9aa 	bl	8000aa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003756:	2b80      	cmp	r3, #128	; 0x80
 8003758:	d10e      	bne.n	8003778 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003764:	2b80      	cmp	r3, #128	; 0x80
 8003766:	d107      	bne.n	8003778 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f914 	bl	80039a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003786:	d10e      	bne.n	80037a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003792:	2b80      	cmp	r3, #128	; 0x80
 8003794:	d107      	bne.n	80037a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800379e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f907 	bl	80039b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b0:	2b40      	cmp	r3, #64	; 0x40
 80037b2:	d10e      	bne.n	80037d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037be:	2b40      	cmp	r3, #64	; 0x40
 80037c0:	d107      	bne.n	80037d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f838 	bl	8003842 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b20      	cmp	r3, #32
 80037de:	d10e      	bne.n	80037fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	d107      	bne.n	80037fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f06f 0220 	mvn.w	r2, #32
 80037f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f8c7 	bl	800398c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
	...

08003858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a40      	ldr	r2, [pc, #256]	; (800396c <TIM_Base_SetConfig+0x114>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d013      	beq.n	8003898 <TIM_Base_SetConfig+0x40>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003876:	d00f      	beq.n	8003898 <TIM_Base_SetConfig+0x40>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a3d      	ldr	r2, [pc, #244]	; (8003970 <TIM_Base_SetConfig+0x118>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00b      	beq.n	8003898 <TIM_Base_SetConfig+0x40>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a3c      	ldr	r2, [pc, #240]	; (8003974 <TIM_Base_SetConfig+0x11c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d007      	beq.n	8003898 <TIM_Base_SetConfig+0x40>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a3b      	ldr	r2, [pc, #236]	; (8003978 <TIM_Base_SetConfig+0x120>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d003      	beq.n	8003898 <TIM_Base_SetConfig+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a3a      	ldr	r2, [pc, #232]	; (800397c <TIM_Base_SetConfig+0x124>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d108      	bne.n	80038aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a2f      	ldr	r2, [pc, #188]	; (800396c <TIM_Base_SetConfig+0x114>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d01f      	beq.n	80038f2 <TIM_Base_SetConfig+0x9a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b8:	d01b      	beq.n	80038f2 <TIM_Base_SetConfig+0x9a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a2c      	ldr	r2, [pc, #176]	; (8003970 <TIM_Base_SetConfig+0x118>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d017      	beq.n	80038f2 <TIM_Base_SetConfig+0x9a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a2b      	ldr	r2, [pc, #172]	; (8003974 <TIM_Base_SetConfig+0x11c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d013      	beq.n	80038f2 <TIM_Base_SetConfig+0x9a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a2a      	ldr	r2, [pc, #168]	; (8003978 <TIM_Base_SetConfig+0x120>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00f      	beq.n	80038f2 <TIM_Base_SetConfig+0x9a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a29      	ldr	r2, [pc, #164]	; (800397c <TIM_Base_SetConfig+0x124>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00b      	beq.n	80038f2 <TIM_Base_SetConfig+0x9a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a28      	ldr	r2, [pc, #160]	; (8003980 <TIM_Base_SetConfig+0x128>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d007      	beq.n	80038f2 <TIM_Base_SetConfig+0x9a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a27      	ldr	r2, [pc, #156]	; (8003984 <TIM_Base_SetConfig+0x12c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d003      	beq.n	80038f2 <TIM_Base_SetConfig+0x9a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a26      	ldr	r2, [pc, #152]	; (8003988 <TIM_Base_SetConfig+0x130>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d108      	bne.n	8003904 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a10      	ldr	r2, [pc, #64]	; (800396c <TIM_Base_SetConfig+0x114>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00f      	beq.n	8003950 <TIM_Base_SetConfig+0xf8>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a12      	ldr	r2, [pc, #72]	; (800397c <TIM_Base_SetConfig+0x124>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00b      	beq.n	8003950 <TIM_Base_SetConfig+0xf8>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a11      	ldr	r2, [pc, #68]	; (8003980 <TIM_Base_SetConfig+0x128>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d007      	beq.n	8003950 <TIM_Base_SetConfig+0xf8>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a10      	ldr	r2, [pc, #64]	; (8003984 <TIM_Base_SetConfig+0x12c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d003      	beq.n	8003950 <TIM_Base_SetConfig+0xf8>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a0f      	ldr	r2, [pc, #60]	; (8003988 <TIM_Base_SetConfig+0x130>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d103      	bne.n	8003958 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	615a      	str	r2, [r3, #20]
}
 800395e:	bf00      	nop
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40012c00 	.word	0x40012c00
 8003970:	40000400 	.word	0x40000400
 8003974:	40000800 	.word	0x40000800
 8003978:	40000c00 	.word	0x40000c00
 800397c:	40013400 	.word	0x40013400
 8003980:	40014000 	.word	0x40014000
 8003984:	40014400 	.word	0x40014400
 8003988:	40014800 	.word	0x40014800

0800398c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e042      	b.n	8003a60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d106      	bne.n	80039f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7fd f897 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2224      	movs	r2, #36	; 0x24
 80039f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0201 	bic.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fbae 	bl	800416c <UART_SetConfig>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e022      	b.n	8003a60 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fe6c 	bl	8004700 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fef3 	bl	8004844 <UART_CheckIdleState>
 8003a5e:	4603      	mov	r3, r0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08a      	sub	sp, #40	; 0x28
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	603b      	str	r3, [r7, #0]
 8003a74:	4613      	mov	r3, r2
 8003a76:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a7e:	2b20      	cmp	r3, #32
 8003a80:	f040 8084 	bne.w	8003b8c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <HAL_UART_Transmit+0x28>
 8003a8a:	88fb      	ldrh	r3, [r7, #6]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e07c      	b.n	8003b8e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_UART_Transmit+0x3a>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e075      	b.n	8003b8e <HAL_UART_Transmit+0x126>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2221      	movs	r2, #33	; 0x21
 8003ab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aba:	f7fd fa0f 	bl	8000edc <HAL_GetTick>
 8003abe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	88fa      	ldrh	r2, [r7, #6]
 8003ac4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	88fa      	ldrh	r2, [r7, #6]
 8003acc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad8:	d108      	bne.n	8003aec <HAL_UART_Transmit+0x84>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d104      	bne.n	8003aec <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	e003      	b.n	8003af4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003afc:	e02d      	b.n	8003b5a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2200      	movs	r2, #0
 8003b06:	2180      	movs	r1, #128	; 0x80
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fee6 	bl	80048da <UART_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e03a      	b.n	8003b8e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10b      	bne.n	8003b36 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	881a      	ldrh	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b2a:	b292      	uxth	r2, r2
 8003b2c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	3302      	adds	r3, #2
 8003b32:	61bb      	str	r3, [r7, #24]
 8003b34:	e008      	b.n	8003b48 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	781a      	ldrb	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	b292      	uxth	r2, r2
 8003b40:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	3301      	adds	r3, #1
 8003b46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1cb      	bne.n	8003afe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2140      	movs	r1, #64	; 0x40
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 feb2 	bl	80048da <UART_WaitOnFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e006      	b.n	8003b8e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e000      	b.n	8003b8e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003b8c:	2302      	movs	r3, #2
  }
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3720      	adds	r7, #32
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d131      	bne.n	8003c14 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_UART_Receive_IT+0x24>
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e02a      	b.n	8003c16 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_UART_Receive_IT+0x36>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e023      	b.n	8003c16 <HAL_UART_Receive_IT+0x7e>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a0f      	ldr	r2, [pc, #60]	; (8003c20 <HAL_UART_Receive_IT+0x88>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00e      	beq.n	8003c04 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d007      	beq.n	8003c04 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003c02:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	461a      	mov	r2, r3
 8003c08:	68b9      	ldr	r1, [r7, #8]
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 fee6 	bl	80049dc <UART_Start_Receive_IT>
 8003c10:	4603      	mov	r3, r0
 8003c12:	e000      	b.n	8003c16 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003c14:	2302      	movs	r3, #2
  }
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40008000 	.word	0x40008000

08003c24 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	d131      	bne.n	8003ca0 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <HAL_UART_Receive_DMA+0x24>
 8003c42:	88fb      	ldrh	r3, [r7, #6]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e02a      	b.n	8003ca2 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_UART_Receive_DMA+0x36>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e023      	b.n	8003ca2 <HAL_UART_Receive_DMA+0x7e>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a0f      	ldr	r2, [pc, #60]	; (8003cac <HAL_UART_Receive_DMA+0x88>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00e      	beq.n	8003c90 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d007      	beq.n	8003c90 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003c8e:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	461a      	mov	r2, r3
 8003c94:	68b9      	ldr	r1, [r7, #8]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 ff5e 	bl	8004b58 <UART_Start_Receive_DMA>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	e000      	b.n	8003ca2 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003ca0:	2302      	movs	r3, #2
  }
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40008000 	.word	0x40008000

08003cb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	f640 030f 	movw	r3, #2063	; 0x80f
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d118      	bne.n	8003d12 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d013      	beq.n	8003d12 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d104      	bne.n	8003cfe <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d009      	beq.n	8003d12 <HAL_UART_IRQHandler+0x62>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 81fb 	beq.w	80040fe <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	4798      	blx	r3
      }
      return;
 8003d10:	e1f5      	b.n	80040fe <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 80ef 	beq.w	8003ef8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4b73      	ldr	r3, [pc, #460]	; (8003eec <HAL_UART_IRQHandler+0x23c>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d105      	bne.n	8003d30 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4b72      	ldr	r3, [pc, #456]	; (8003ef0 <HAL_UART_IRQHandler+0x240>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 80e4 	beq.w	8003ef8 <HAL_UART_IRQHandler+0x248>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d010      	beq.n	8003d5c <HAL_UART_IRQHandler+0xac>
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00b      	beq.n	8003d5c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d52:	f043 0201 	orr.w	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d010      	beq.n	8003d88 <HAL_UART_IRQHandler+0xd8>
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00b      	beq.n	8003d88 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2202      	movs	r2, #2
 8003d76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d7e:	f043 0204 	orr.w	r2, r3, #4
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d010      	beq.n	8003db4 <HAL_UART_IRQHandler+0x104>
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00b      	beq.n	8003db4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2204      	movs	r2, #4
 8003da2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003daa:	f043 0202 	orr.w	r2, r3, #2
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d015      	beq.n	8003dea <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d104      	bne.n	8003dd2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	4b48      	ldr	r3, [pc, #288]	; (8003eec <HAL_UART_IRQHandler+0x23c>)
 8003dcc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00b      	beq.n	8003dea <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2208      	movs	r2, #8
 8003dd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003de0:	f043 0208 	orr.w	r2, r3, #8
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d011      	beq.n	8003e18 <HAL_UART_IRQHandler+0x168>
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00c      	beq.n	8003e18 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e0e:	f043 0220 	orr.w	r2, r3, #32
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 816f 	beq.w	8004102 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d011      	beq.n	8003e52 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d104      	bne.n	8003e42 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <HAL_UART_IRQHandler+0x1a2>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e58:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e64:	2b40      	cmp	r3, #64	; 0x40
 8003e66:	d004      	beq.n	8003e72 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d031      	beq.n	8003ed6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fefc 	bl	8004c70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e82:	2b40      	cmp	r3, #64	; 0x40
 8003e84:	d123      	bne.n	8003ece <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e94:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d013      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ea2:	4a14      	ldr	r2, [pc, #80]	; (8003ef4 <HAL_UART_IRQHandler+0x244>)
 8003ea4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fd fa83 	bl	80013b6 <HAL_DMA_Abort_IT>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d017      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec4:	e00f      	b.n	8003ee6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f93a 	bl	8004140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ecc:	e00b      	b.n	8003ee6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f936 	bl	8004140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed4:	e007      	b.n	8003ee6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f932 	bl	8004140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003ee4:	e10d      	b.n	8004102 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee6:	bf00      	nop
    return;
 8003ee8:	e10b      	b.n	8004102 <HAL_UART_IRQHandler+0x452>
 8003eea:	bf00      	nop
 8003eec:	10000001 	.word	0x10000001
 8003ef0:	04000120 	.word	0x04000120
 8003ef4:	08004e27 	.word	0x08004e27

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	f040 80ab 	bne.w	8004058 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 80a5 	beq.w	8004058 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	f003 0310 	and.w	r3, r3, #16
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 809f 	beq.w	8004058 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2210      	movs	r2, #16
 8003f20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	d155      	bne.n	8003fdc <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003f3a:	893b      	ldrh	r3, [r7, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 80e2 	beq.w	8004106 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f48:	893a      	ldrh	r2, [r7, #8]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	f080 80db 	bcs.w	8004106 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	893a      	ldrh	r2, [r7, #8]
 8003f54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d12b      	bne.n	8003fc0 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f76:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0201 	bic.w	r2, r2, #1
 8003f86:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f96:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0210 	bic.w	r2, r2, #16
 8003fb4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fd f99f 	bl	80012fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f8bd 	bl	8004154 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003fda:	e094      	b.n	8004106 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 8087 	beq.w	800410a <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8003ffc:	897b      	ldrh	r3, [r7, #10]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 8083 	beq.w	800410a <HAL_UART_IRQHandler+0x45a>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004012:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6812      	ldr	r2, [r2, #0]
 800401e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004022:	f023 0301 	bic.w	r3, r3, #1
 8004026:	6093      	str	r3, [r2, #8]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2220      	movs	r2, #32
 800402c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0210 	bic.w	r2, r2, #16
 800404a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800404c:	897b      	ldrh	r3, [r7, #10]
 800404e:	4619      	mov	r1, r3
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f87f 	bl	8004154 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004056:	e058      	b.n	800410a <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00d      	beq.n	800407e <HAL_UART_IRQHandler+0x3ce>
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004074:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f001 fa53 	bl	8005522 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800407c:	e048      	b.n	8004110 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004084:	2b00      	cmp	r3, #0
 8004086:	d012      	beq.n	80040ae <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408e:	2b00      	cmp	r3, #0
 8004090:	d104      	bne.n	800409c <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <HAL_UART_IRQHandler+0x3fe>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d034      	beq.n	800410e <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	4798      	blx	r3
    }
    return;
 80040ac:	e02f      	b.n	800410e <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d008      	beq.n	80040ca <HAL_UART_IRQHandler+0x41a>
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fec5 	bl	8004e52 <UART_EndTransmit_IT>
    return;
 80040c8:	e022      	b.n	8004110 <HAL_UART_IRQHandler+0x460>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_UART_IRQHandler+0x436>
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f001 fa33 	bl	800554a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040e4:	e014      	b.n	8004110 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00f      	beq.n	8004110 <HAL_UART_IRQHandler+0x460>
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	da0c      	bge.n	8004110 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f001 fa1d 	bl	8005536 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040fc:	e008      	b.n	8004110 <HAL_UART_IRQHandler+0x460>
      return;
 80040fe:	bf00      	nop
 8004100:	e006      	b.n	8004110 <HAL_UART_IRQHandler+0x460>
    return;
 8004102:	bf00      	nop
 8004104:	e004      	b.n	8004110 <HAL_UART_IRQHandler+0x460>
      return;
 8004106:	bf00      	nop
 8004108:	e002      	b.n	8004110 <HAL_UART_IRQHandler+0x460>
      return;
 800410a:	bf00      	nop
 800410c:	e000      	b.n	8004110 <HAL_UART_IRQHandler+0x460>
    return;
 800410e:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8004110:	3720      	adds	r7, #32
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop

08004118 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800416c:	b5b0      	push	{r4, r5, r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004174:	2300      	movs	r3, #0
 8004176:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	4313      	orrs	r3, r2
 800418e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	4bb1      	ldr	r3, [pc, #708]	; (800445c <UART_SetConfig+0x2f0>)
 8004198:	4013      	ands	r3, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	69f9      	ldr	r1, [r7, #28]
 80041a0:	430b      	orrs	r3, r1
 80041a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4aa6      	ldr	r2, [pc, #664]	; (8004460 <UART_SetConfig+0x2f4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d004      	beq.n	80041d4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80041de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6812      	ldr	r2, [r2, #0]
 80041e6:	69f9      	ldr	r1, [r7, #28]
 80041e8:	430b      	orrs	r3, r1
 80041ea:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	f023 010f 	bic.w	r1, r3, #15
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a97      	ldr	r2, [pc, #604]	; (8004464 <UART_SetConfig+0x2f8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d120      	bne.n	800424e <UART_SetConfig+0xe2>
 800420c:	4b96      	ldr	r3, [pc, #600]	; (8004468 <UART_SetConfig+0x2fc>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	2b03      	cmp	r3, #3
 8004218:	d816      	bhi.n	8004248 <UART_SetConfig+0xdc>
 800421a:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <UART_SetConfig+0xb4>)
 800421c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004220:	08004231 	.word	0x08004231
 8004224:	0800423d 	.word	0x0800423d
 8004228:	08004237 	.word	0x08004237
 800422c:	08004243 	.word	0x08004243
 8004230:	2301      	movs	r3, #1
 8004232:	76fb      	strb	r3, [r7, #27]
 8004234:	e0e7      	b.n	8004406 <UART_SetConfig+0x29a>
 8004236:	2302      	movs	r3, #2
 8004238:	76fb      	strb	r3, [r7, #27]
 800423a:	e0e4      	b.n	8004406 <UART_SetConfig+0x29a>
 800423c:	2304      	movs	r3, #4
 800423e:	76fb      	strb	r3, [r7, #27]
 8004240:	e0e1      	b.n	8004406 <UART_SetConfig+0x29a>
 8004242:	2308      	movs	r3, #8
 8004244:	76fb      	strb	r3, [r7, #27]
 8004246:	e0de      	b.n	8004406 <UART_SetConfig+0x29a>
 8004248:	2310      	movs	r3, #16
 800424a:	76fb      	strb	r3, [r7, #27]
 800424c:	e0db      	b.n	8004406 <UART_SetConfig+0x29a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a86      	ldr	r2, [pc, #536]	; (800446c <UART_SetConfig+0x300>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d132      	bne.n	80042be <UART_SetConfig+0x152>
 8004258:	4b83      	ldr	r3, [pc, #524]	; (8004468 <UART_SetConfig+0x2fc>)
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425e:	f003 030c 	and.w	r3, r3, #12
 8004262:	2b0c      	cmp	r3, #12
 8004264:	d828      	bhi.n	80042b8 <UART_SetConfig+0x14c>
 8004266:	a201      	add	r2, pc, #4	; (adr r2, 800426c <UART_SetConfig+0x100>)
 8004268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426c:	080042a1 	.word	0x080042a1
 8004270:	080042b9 	.word	0x080042b9
 8004274:	080042b9 	.word	0x080042b9
 8004278:	080042b9 	.word	0x080042b9
 800427c:	080042ad 	.word	0x080042ad
 8004280:	080042b9 	.word	0x080042b9
 8004284:	080042b9 	.word	0x080042b9
 8004288:	080042b9 	.word	0x080042b9
 800428c:	080042a7 	.word	0x080042a7
 8004290:	080042b9 	.word	0x080042b9
 8004294:	080042b9 	.word	0x080042b9
 8004298:	080042b9 	.word	0x080042b9
 800429c:	080042b3 	.word	0x080042b3
 80042a0:	2300      	movs	r3, #0
 80042a2:	76fb      	strb	r3, [r7, #27]
 80042a4:	e0af      	b.n	8004406 <UART_SetConfig+0x29a>
 80042a6:	2302      	movs	r3, #2
 80042a8:	76fb      	strb	r3, [r7, #27]
 80042aa:	e0ac      	b.n	8004406 <UART_SetConfig+0x29a>
 80042ac:	2304      	movs	r3, #4
 80042ae:	76fb      	strb	r3, [r7, #27]
 80042b0:	e0a9      	b.n	8004406 <UART_SetConfig+0x29a>
 80042b2:	2308      	movs	r3, #8
 80042b4:	76fb      	strb	r3, [r7, #27]
 80042b6:	e0a6      	b.n	8004406 <UART_SetConfig+0x29a>
 80042b8:	2310      	movs	r3, #16
 80042ba:	76fb      	strb	r3, [r7, #27]
 80042bc:	e0a3      	b.n	8004406 <UART_SetConfig+0x29a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a6b      	ldr	r2, [pc, #428]	; (8004470 <UART_SetConfig+0x304>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d120      	bne.n	800430a <UART_SetConfig+0x19e>
 80042c8:	4b67      	ldr	r3, [pc, #412]	; (8004468 <UART_SetConfig+0x2fc>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042d2:	2b30      	cmp	r3, #48	; 0x30
 80042d4:	d013      	beq.n	80042fe <UART_SetConfig+0x192>
 80042d6:	2b30      	cmp	r3, #48	; 0x30
 80042d8:	d814      	bhi.n	8004304 <UART_SetConfig+0x198>
 80042da:	2b20      	cmp	r3, #32
 80042dc:	d009      	beq.n	80042f2 <UART_SetConfig+0x186>
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d810      	bhi.n	8004304 <UART_SetConfig+0x198>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <UART_SetConfig+0x180>
 80042e6:	2b10      	cmp	r3, #16
 80042e8:	d006      	beq.n	80042f8 <UART_SetConfig+0x18c>
 80042ea:	e00b      	b.n	8004304 <UART_SetConfig+0x198>
 80042ec:	2300      	movs	r3, #0
 80042ee:	76fb      	strb	r3, [r7, #27]
 80042f0:	e089      	b.n	8004406 <UART_SetConfig+0x29a>
 80042f2:	2302      	movs	r3, #2
 80042f4:	76fb      	strb	r3, [r7, #27]
 80042f6:	e086      	b.n	8004406 <UART_SetConfig+0x29a>
 80042f8:	2304      	movs	r3, #4
 80042fa:	76fb      	strb	r3, [r7, #27]
 80042fc:	e083      	b.n	8004406 <UART_SetConfig+0x29a>
 80042fe:	2308      	movs	r3, #8
 8004300:	76fb      	strb	r3, [r7, #27]
 8004302:	e080      	b.n	8004406 <UART_SetConfig+0x29a>
 8004304:	2310      	movs	r3, #16
 8004306:	76fb      	strb	r3, [r7, #27]
 8004308:	e07d      	b.n	8004406 <UART_SetConfig+0x29a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a59      	ldr	r2, [pc, #356]	; (8004474 <UART_SetConfig+0x308>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d120      	bne.n	8004356 <UART_SetConfig+0x1ea>
 8004314:	4b54      	ldr	r3, [pc, #336]	; (8004468 <UART_SetConfig+0x2fc>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800431e:	2bc0      	cmp	r3, #192	; 0xc0
 8004320:	d013      	beq.n	800434a <UART_SetConfig+0x1de>
 8004322:	2bc0      	cmp	r3, #192	; 0xc0
 8004324:	d814      	bhi.n	8004350 <UART_SetConfig+0x1e4>
 8004326:	2b80      	cmp	r3, #128	; 0x80
 8004328:	d009      	beq.n	800433e <UART_SetConfig+0x1d2>
 800432a:	2b80      	cmp	r3, #128	; 0x80
 800432c:	d810      	bhi.n	8004350 <UART_SetConfig+0x1e4>
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <UART_SetConfig+0x1cc>
 8004332:	2b40      	cmp	r3, #64	; 0x40
 8004334:	d006      	beq.n	8004344 <UART_SetConfig+0x1d8>
 8004336:	e00b      	b.n	8004350 <UART_SetConfig+0x1e4>
 8004338:	2300      	movs	r3, #0
 800433a:	76fb      	strb	r3, [r7, #27]
 800433c:	e063      	b.n	8004406 <UART_SetConfig+0x29a>
 800433e:	2302      	movs	r3, #2
 8004340:	76fb      	strb	r3, [r7, #27]
 8004342:	e060      	b.n	8004406 <UART_SetConfig+0x29a>
 8004344:	2304      	movs	r3, #4
 8004346:	76fb      	strb	r3, [r7, #27]
 8004348:	e05d      	b.n	8004406 <UART_SetConfig+0x29a>
 800434a:	2308      	movs	r3, #8
 800434c:	76fb      	strb	r3, [r7, #27]
 800434e:	e05a      	b.n	8004406 <UART_SetConfig+0x29a>
 8004350:	2310      	movs	r3, #16
 8004352:	76fb      	strb	r3, [r7, #27]
 8004354:	e057      	b.n	8004406 <UART_SetConfig+0x29a>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a47      	ldr	r2, [pc, #284]	; (8004478 <UART_SetConfig+0x30c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d125      	bne.n	80043ac <UART_SetConfig+0x240>
 8004360:	4b41      	ldr	r3, [pc, #260]	; (8004468 <UART_SetConfig+0x2fc>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800436e:	d017      	beq.n	80043a0 <UART_SetConfig+0x234>
 8004370:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004374:	d817      	bhi.n	80043a6 <UART_SetConfig+0x23a>
 8004376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800437a:	d00b      	beq.n	8004394 <UART_SetConfig+0x228>
 800437c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004380:	d811      	bhi.n	80043a6 <UART_SetConfig+0x23a>
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <UART_SetConfig+0x222>
 8004386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800438a:	d006      	beq.n	800439a <UART_SetConfig+0x22e>
 800438c:	e00b      	b.n	80043a6 <UART_SetConfig+0x23a>
 800438e:	2300      	movs	r3, #0
 8004390:	76fb      	strb	r3, [r7, #27]
 8004392:	e038      	b.n	8004406 <UART_SetConfig+0x29a>
 8004394:	2302      	movs	r3, #2
 8004396:	76fb      	strb	r3, [r7, #27]
 8004398:	e035      	b.n	8004406 <UART_SetConfig+0x29a>
 800439a:	2304      	movs	r3, #4
 800439c:	76fb      	strb	r3, [r7, #27]
 800439e:	e032      	b.n	8004406 <UART_SetConfig+0x29a>
 80043a0:	2308      	movs	r3, #8
 80043a2:	76fb      	strb	r3, [r7, #27]
 80043a4:	e02f      	b.n	8004406 <UART_SetConfig+0x29a>
 80043a6:	2310      	movs	r3, #16
 80043a8:	76fb      	strb	r3, [r7, #27]
 80043aa:	e02c      	b.n	8004406 <UART_SetConfig+0x29a>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a2b      	ldr	r2, [pc, #172]	; (8004460 <UART_SetConfig+0x2f4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d125      	bne.n	8004402 <UART_SetConfig+0x296>
 80043b6:	4b2c      	ldr	r3, [pc, #176]	; (8004468 <UART_SetConfig+0x2fc>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043c4:	d017      	beq.n	80043f6 <UART_SetConfig+0x28a>
 80043c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043ca:	d817      	bhi.n	80043fc <UART_SetConfig+0x290>
 80043cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043d0:	d00b      	beq.n	80043ea <UART_SetConfig+0x27e>
 80043d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043d6:	d811      	bhi.n	80043fc <UART_SetConfig+0x290>
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <UART_SetConfig+0x278>
 80043dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e0:	d006      	beq.n	80043f0 <UART_SetConfig+0x284>
 80043e2:	e00b      	b.n	80043fc <UART_SetConfig+0x290>
 80043e4:	2300      	movs	r3, #0
 80043e6:	76fb      	strb	r3, [r7, #27]
 80043e8:	e00d      	b.n	8004406 <UART_SetConfig+0x29a>
 80043ea:	2302      	movs	r3, #2
 80043ec:	76fb      	strb	r3, [r7, #27]
 80043ee:	e00a      	b.n	8004406 <UART_SetConfig+0x29a>
 80043f0:	2304      	movs	r3, #4
 80043f2:	76fb      	strb	r3, [r7, #27]
 80043f4:	e007      	b.n	8004406 <UART_SetConfig+0x29a>
 80043f6:	2308      	movs	r3, #8
 80043f8:	76fb      	strb	r3, [r7, #27]
 80043fa:	e004      	b.n	8004406 <UART_SetConfig+0x29a>
 80043fc:	2310      	movs	r3, #16
 80043fe:	76fb      	strb	r3, [r7, #27]
 8004400:	e001      	b.n	8004406 <UART_SetConfig+0x29a>
 8004402:	2310      	movs	r3, #16
 8004404:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a15      	ldr	r2, [pc, #84]	; (8004460 <UART_SetConfig+0x2f4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	f040 809f 	bne.w	8004550 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004412:	7efb      	ldrb	r3, [r7, #27]
 8004414:	2b08      	cmp	r3, #8
 8004416:	d837      	bhi.n	8004488 <UART_SetConfig+0x31c>
 8004418:	a201      	add	r2, pc, #4	; (adr r2, 8004420 <UART_SetConfig+0x2b4>)
 800441a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441e:	bf00      	nop
 8004420:	08004445 	.word	0x08004445
 8004424:	08004489 	.word	0x08004489
 8004428:	0800444d 	.word	0x0800444d
 800442c:	08004489 	.word	0x08004489
 8004430:	08004453 	.word	0x08004453
 8004434:	08004489 	.word	0x08004489
 8004438:	08004489 	.word	0x08004489
 800443c:	08004489 	.word	0x08004489
 8004440:	08004481 	.word	0x08004481
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004444:	f7fe f9b6 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 8004448:	6178      	str	r0, [r7, #20]
        break;
 800444a:	e022      	b.n	8004492 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800444c:	4b0b      	ldr	r3, [pc, #44]	; (800447c <UART_SetConfig+0x310>)
 800444e:	617b      	str	r3, [r7, #20]
        break;
 8004450:	e01f      	b.n	8004492 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004452:	f7fe f917 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 8004456:	6178      	str	r0, [r7, #20]
        break;
 8004458:	e01b      	b.n	8004492 <UART_SetConfig+0x326>
 800445a:	bf00      	nop
 800445c:	cfff69f3 	.word	0xcfff69f3
 8004460:	40008000 	.word	0x40008000
 8004464:	40013800 	.word	0x40013800
 8004468:	40021000 	.word	0x40021000
 800446c:	40004400 	.word	0x40004400
 8004470:	40004800 	.word	0x40004800
 8004474:	40004c00 	.word	0x40004c00
 8004478:	40005000 	.word	0x40005000
 800447c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004484:	617b      	str	r3, [r7, #20]
        break;
 8004486:	e004      	b.n	8004492 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	76bb      	strb	r3, [r7, #26]
        break;
 8004490:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 811b 	beq.w	80046d0 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	4a96      	ldr	r2, [pc, #600]	; (80046f8 <UART_SetConfig+0x58c>)
 80044a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044a4:	461a      	mov	r2, r3
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80044ac:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	4413      	add	r3, r2
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d305      	bcc.n	80044ca <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d902      	bls.n	80044d0 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	76bb      	strb	r3, [r7, #26]
 80044ce:	e0ff      	b.n	80046d0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f04f 0100 	mov.w	r1, #0
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	4a86      	ldr	r2, [pc, #536]	; (80046f8 <UART_SetConfig+0x58c>)
 80044de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	f7fb fe8a 	bl	8000200 <__aeabi_uldivmod>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4610      	mov	r0, r2
 80044f2:	4619      	mov	r1, r3
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	020b      	lsls	r3, r1, #8
 80044fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004502:	0202      	lsls	r2, r0, #8
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	6849      	ldr	r1, [r1, #4]
 8004508:	0849      	lsrs	r1, r1, #1
 800450a:	4608      	mov	r0, r1
 800450c:	f04f 0100 	mov.w	r1, #0
 8004510:	1814      	adds	r4, r2, r0
 8004512:	eb43 0501 	adc.w	r5, r3, r1
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	461a      	mov	r2, r3
 800451c:	f04f 0300 	mov.w	r3, #0
 8004520:	4620      	mov	r0, r4
 8004522:	4629      	mov	r1, r5
 8004524:	f7fb fe6c 	bl	8000200 <__aeabi_uldivmod>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4613      	mov	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004536:	d308      	bcc.n	800454a <UART_SetConfig+0x3de>
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800453e:	d204      	bcs.n	800454a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	60da      	str	r2, [r3, #12]
 8004548:	e0c2      	b.n	80046d0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	76bb      	strb	r3, [r7, #26]
 800454e:	e0bf      	b.n	80046d0 <UART_SetConfig+0x564>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004558:	d165      	bne.n	8004626 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 800455a:	7efb      	ldrb	r3, [r7, #27]
 800455c:	2b08      	cmp	r3, #8
 800455e:	d828      	bhi.n	80045b2 <UART_SetConfig+0x446>
 8004560:	a201      	add	r2, pc, #4	; (adr r2, 8004568 <UART_SetConfig+0x3fc>)
 8004562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004566:	bf00      	nop
 8004568:	0800458d 	.word	0x0800458d
 800456c:	08004595 	.word	0x08004595
 8004570:	0800459d 	.word	0x0800459d
 8004574:	080045b3 	.word	0x080045b3
 8004578:	080045a3 	.word	0x080045a3
 800457c:	080045b3 	.word	0x080045b3
 8004580:	080045b3 	.word	0x080045b3
 8004584:	080045b3 	.word	0x080045b3
 8004588:	080045ab 	.word	0x080045ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800458c:	f7fe f912 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 8004590:	6178      	str	r0, [r7, #20]
        break;
 8004592:	e013      	b.n	80045bc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004594:	f7fe f924 	bl	80027e0 <HAL_RCC_GetPCLK2Freq>
 8004598:	6178      	str	r0, [r7, #20]
        break;
 800459a:	e00f      	b.n	80045bc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800459c:	4b57      	ldr	r3, [pc, #348]	; (80046fc <UART_SetConfig+0x590>)
 800459e:	617b      	str	r3, [r7, #20]
        break;
 80045a0:	e00c      	b.n	80045bc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045a2:	f7fe f86f 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 80045a6:	6178      	str	r0, [r7, #20]
        break;
 80045a8:	e008      	b.n	80045bc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ae:	617b      	str	r3, [r7, #20]
        break;
 80045b0:	e004      	b.n	80045bc <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	76bb      	strb	r3, [r7, #26]
        break;
 80045ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 8086 	beq.w	80046d0 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	4a4b      	ldr	r2, [pc, #300]	; (80046f8 <UART_SetConfig+0x58c>)
 80045ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045ce:	461a      	mov	r2, r3
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80045d6:	005a      	lsls	r2, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	085b      	lsrs	r3, r3, #1
 80045de:	441a      	add	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	2b0f      	cmp	r3, #15
 80045f0:	d916      	bls.n	8004620 <UART_SetConfig+0x4b4>
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f8:	d212      	bcs.n	8004620 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	f023 030f 	bic.w	r3, r3, #15
 8004602:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	085b      	lsrs	r3, r3, #1
 8004608:	b29b      	uxth	r3, r3
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	b29a      	uxth	r2, r3
 8004610:	89fb      	ldrh	r3, [r7, #14]
 8004612:	4313      	orrs	r3, r2
 8004614:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	89fa      	ldrh	r2, [r7, #14]
 800461c:	60da      	str	r2, [r3, #12]
 800461e:	e057      	b.n	80046d0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	76bb      	strb	r3, [r7, #26]
 8004624:	e054      	b.n	80046d0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004626:	7efb      	ldrb	r3, [r7, #27]
 8004628:	2b08      	cmp	r3, #8
 800462a:	d828      	bhi.n	800467e <UART_SetConfig+0x512>
 800462c:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <UART_SetConfig+0x4c8>)
 800462e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004632:	bf00      	nop
 8004634:	08004659 	.word	0x08004659
 8004638:	08004661 	.word	0x08004661
 800463c:	08004669 	.word	0x08004669
 8004640:	0800467f 	.word	0x0800467f
 8004644:	0800466f 	.word	0x0800466f
 8004648:	0800467f 	.word	0x0800467f
 800464c:	0800467f 	.word	0x0800467f
 8004650:	0800467f 	.word	0x0800467f
 8004654:	08004677 	.word	0x08004677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004658:	f7fe f8ac 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 800465c:	6178      	str	r0, [r7, #20]
        break;
 800465e:	e013      	b.n	8004688 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004660:	f7fe f8be 	bl	80027e0 <HAL_RCC_GetPCLK2Freq>
 8004664:	6178      	str	r0, [r7, #20]
        break;
 8004666:	e00f      	b.n	8004688 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004668:	4b24      	ldr	r3, [pc, #144]	; (80046fc <UART_SetConfig+0x590>)
 800466a:	617b      	str	r3, [r7, #20]
        break;
 800466c:	e00c      	b.n	8004688 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800466e:	f7fe f809 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 8004672:	6178      	str	r0, [r7, #20]
        break;
 8004674:	e008      	b.n	8004688 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800467a:	617b      	str	r3, [r7, #20]
        break;
 800467c:	e004      	b.n	8004688 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 800467e:	2300      	movs	r3, #0
 8004680:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	76bb      	strb	r3, [r7, #26]
        break;
 8004686:	bf00      	nop
    }

    if (pclk != 0U)
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d020      	beq.n	80046d0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	4a19      	ldr	r2, [pc, #100]	; (80046f8 <UART_SetConfig+0x58c>)
 8004694:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004698:	461a      	mov	r2, r3
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	fbb3 f2f2 	udiv	r2, r3, r2
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	085b      	lsrs	r3, r3, #1
 80046a6:	441a      	add	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2b0f      	cmp	r3, #15
 80046b8:	d908      	bls.n	80046cc <UART_SetConfig+0x560>
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c0:	d204      	bcs.n	80046cc <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	60da      	str	r2, [r3, #12]
 80046ca:	e001      	b.n	80046d0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80046ec:	7ebb      	ldrb	r3, [r7, #26]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3720      	adds	r7, #32
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bdb0      	pop	{r4, r5, r7, pc}
 80046f6:	bf00      	nop
 80046f8:	08008918 	.word	0x08008918
 80046fc:	00f42400 	.word	0x00f42400

08004700 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d01a      	beq.n	8004816 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047fe:	d10a      	bne.n	8004816 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	605a      	str	r2, [r3, #4]
  }
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af02      	add	r7, sp, #8
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004854:	f7fc fb42 	bl	8000edc <HAL_GetTick>
 8004858:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b08      	cmp	r3, #8
 8004866:	d10e      	bne.n	8004886 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004868:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f82f 	bl	80048da <UART_WaitOnFlagUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e025      	b.n	80048d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b04      	cmp	r3, #4
 8004892:	d10e      	bne.n	80048b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004894:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f819 	bl	80048da <UART_WaitOnFlagUntilTimeout>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e00f      	b.n	80048d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2220      	movs	r2, #32
 80048be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b084      	sub	sp, #16
 80048de:	af00      	add	r7, sp, #0
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	603b      	str	r3, [r7, #0]
 80048e6:	4613      	mov	r3, r2
 80048e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ea:	e062      	b.n	80049b2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f2:	d05e      	beq.n	80049b2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f4:	f7fc faf2 	bl	8000edc <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	429a      	cmp	r2, r3
 8004902:	d302      	bcc.n	800490a <UART_WaitOnFlagUntilTimeout+0x30>
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d11d      	bne.n	8004946 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004918:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0201 	bic.w	r2, r2, #1
 8004928:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2220      	movs	r2, #32
 800492e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2220      	movs	r2, #32
 8004936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e045      	b.n	80049d2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	d02e      	beq.n	80049b2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800495e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004962:	d126      	bne.n	80049b2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800496c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800497c:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0201 	bic.w	r2, r2, #1
 800498c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2220      	movs	r2, #32
 8004992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2220      	movs	r2, #32
 800499a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e00f      	b.n	80049d2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69da      	ldr	r2, [r3, #28]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4013      	ands	r3, r2
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	429a      	cmp	r2, r3
 80049c0:	bf0c      	ite	eq
 80049c2:	2301      	moveq	r3, #1
 80049c4:	2300      	movne	r3, #0
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	461a      	mov	r2, r3
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d08d      	beq.n	80048ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	4613      	mov	r3, r2
 80049e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	88fa      	ldrh	r2, [r7, #6]
 80049f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	88fa      	ldrh	r2, [r7, #6]
 80049fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a0e:	d10e      	bne.n	8004a2e <UART_Start_Receive_IT+0x52>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d105      	bne.n	8004a24 <UART_Start_Receive_IT+0x48>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004a1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a22:	e02d      	b.n	8004a80 <UART_Start_Receive_IT+0xa4>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	22ff      	movs	r2, #255	; 0xff
 8004a28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a2c:	e028      	b.n	8004a80 <UART_Start_Receive_IT+0xa4>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10d      	bne.n	8004a52 <UART_Start_Receive_IT+0x76>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d104      	bne.n	8004a48 <UART_Start_Receive_IT+0x6c>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	22ff      	movs	r2, #255	; 0xff
 8004a42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a46:	e01b      	b.n	8004a80 <UART_Start_Receive_IT+0xa4>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	227f      	movs	r2, #127	; 0x7f
 8004a4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a50:	e016      	b.n	8004a80 <UART_Start_Receive_IT+0xa4>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a5a:	d10d      	bne.n	8004a78 <UART_Start_Receive_IT+0x9c>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d104      	bne.n	8004a6e <UART_Start_Receive_IT+0x92>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	227f      	movs	r2, #127	; 0x7f
 8004a68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a6c:	e008      	b.n	8004a80 <UART_Start_Receive_IT+0xa4>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	223f      	movs	r2, #63	; 0x3f
 8004a72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a76:	e003      	b.n	8004a80 <UART_Start_Receive_IT+0xa4>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2222      	movs	r2, #34	; 0x22
 8004a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	609a      	str	r2, [r3, #8]

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa8:	d12a      	bne.n	8004b00 <UART_Start_Receive_IT+0x124>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004ab0:	88fa      	ldrh	r2, [r7, #6]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d324      	bcc.n	8004b00 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004abe:	d107      	bne.n	8004ad0 <UART_Start_Receive_IT+0xf4>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d103      	bne.n	8004ad0 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4a1f      	ldr	r2, [pc, #124]	; (8004b48 <UART_Start_Receive_IT+0x16c>)
 8004acc:	671a      	str	r2, [r3, #112]	; 0x70
 8004ace:	e002      	b.n	8004ad6 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4a1e      	ldr	r2, [pc, #120]	; (8004b4c <UART_Start_Receive_IT+0x170>)
 8004ad4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aec:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004afc:	609a      	str	r2, [r3, #8]
 8004afe:	e01b      	b.n	8004b38 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b08:	d107      	bne.n	8004b1a <UART_Start_Receive_IT+0x13e>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d103      	bne.n	8004b1a <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4a0e      	ldr	r2, [pc, #56]	; (8004b50 <UART_Start_Receive_IT+0x174>)
 8004b16:	671a      	str	r2, [r3, #112]	; 0x70
 8004b18:	e002      	b.n	8004b20 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4a0d      	ldr	r2, [pc, #52]	; (8004b54 <UART_Start_Receive_IT+0x178>)
 8004b1e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004b36:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(huart);

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	08005249 	.word	0x08005249
 8004b4c:	08005041 	.word	0x08005041
 8004b50:	08004f63 	.word	0x08004f63
 8004b54:	08004e87 	.word	0x08004e87

08004b58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	4613      	mov	r3, r2
 8004b64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	88fa      	ldrh	r2, [r7, #6]
 8004b70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2222      	movs	r2, #34	; 0x22
 8004b80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d02c      	beq.n	8004be6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b90:	4a25      	ldr	r2, [pc, #148]	; (8004c28 <UART_Start_Receive_DMA+0xd0>)
 8004b92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b98:	4a24      	ldr	r2, [pc, #144]	; (8004c2c <UART_Start_Receive_DMA+0xd4>)
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba0:	4a23      	ldr	r2, [pc, #140]	; (8004c30 <UART_Start_Receive_DMA+0xd8>)
 8004ba2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba8:	2200      	movs	r2, #0
 8004baa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3324      	adds	r3, #36	; 0x24
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	88fb      	ldrh	r3, [r7, #6]
 8004bc0:	f7fc fb22 	bl	8001208 <HAL_DMA_Start_IT>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00d      	beq.n	8004be6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2210      	movs	r2, #16
 8004bce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e01c      	b.n	8004c20 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bfc:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0201 	orr.w	r2, r2, #1
 8004c0c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c1c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	08004cd5 	.word	0x08004cd5
 8004c2c:	08004d6f 	.word	0x08004d6f
 8004c30:	08004da7 	.word	0x08004da7

08004c34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004c4a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689a      	ldr	r2, [r3, #8]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004c5a:	609a      	str	r2, [r3, #8]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c86:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6812      	ldr	r2, [r2, #0]
 8004c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c96:	f023 0301 	bic.w	r3, r3, #1
 8004c9a:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d107      	bne.n	8004cb4 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0210 	bic.w	r2, r2, #16
 8004cb2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0320 	and.w	r3, r3, #32
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d12b      	bne.n	8004d48 <UART_DMAReceiveCplt+0x74>
  {
    huart->RxXferCount = 0U;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d06:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0201 	bic.w	r2, r2, #1
 8004d16:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d26:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d107      	bne.n	8004d48 <UART_DMAReceiveCplt+0x74>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0210 	bic.w	r2, r2, #16
 8004d46:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d107      	bne.n	8004d60 <UART_DMAReceiveCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d56:	4619      	mov	r1, r3
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f7ff f9fb 	bl	8004154 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d5e:	e002      	b.n	8004d66 <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f7fb fdaf 	bl	80008c4 <HAL_UART_RxCpltCallback>
}
 8004d66:	bf00      	nop
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b084      	sub	sp, #16
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d109      	bne.n	8004d98 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d8a:	085b      	lsrs	r3, r3, #1
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	4619      	mov	r1, r3
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f7ff f9df 	bl	8004154 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d96:	e002      	b.n	8004d9e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f7ff f9c7 	bl	800412c <HAL_UART_RxHalfCpltCallback>
}
 8004d9e:	bf00      	nop
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b086      	sub	sp, #24
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dba:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dce:	2b80      	cmp	r3, #128	; 0x80
 8004dd0:	d109      	bne.n	8004de6 <UART_DMAError+0x40>
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2b21      	cmp	r3, #33	; 0x21
 8004dd6:	d106      	bne.n	8004de6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8004de0:	6978      	ldr	r0, [r7, #20]
 8004de2:	f7ff ff27 	bl	8004c34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df0:	2b40      	cmp	r3, #64	; 0x40
 8004df2:	d109      	bne.n	8004e08 <UART_DMAError+0x62>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b22      	cmp	r3, #34	; 0x22
 8004df8:	d106      	bne.n	8004e08 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8004e02:	6978      	ldr	r0, [r7, #20]
 8004e04:	f7ff ff34 	bl	8004c70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e0e:	f043 0210 	orr.w	r2, r3, #16
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e18:	6978      	ldr	r0, [r7, #20]
 8004e1a:	f7ff f991 	bl	8004140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e1e:	bf00      	nop
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b084      	sub	sp, #16
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f7ff f97b 	bl	8004140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e4a:	bf00      	nop
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e68:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff f94d 	bl	8004118 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e7e:	bf00      	nop
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004e94:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9c:	2b22      	cmp	r3, #34	; 0x22
 8004e9e:	d152      	bne.n	8004f46 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ea6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004ea8:	89bb      	ldrh	r3, [r7, #12]
 8004eaa:	b2d9      	uxtb	r1, r3
 8004eac:	89fb      	ldrh	r3, [r7, #14]
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb4:	400a      	ands	r2, r1
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d13b      	bne.n	8004f5a <UART_RxISR_8BIT+0xd4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ef0:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0201 	bic.w	r2, r2, #1
 8004f00:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d10f      	bne.n	8004f38 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 0210 	bic.w	r2, r2, #16
 8004f26:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f2e:	4619      	mov	r1, r3
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff f90f 	bl	8004154 <HAL_UARTEx_RxEventCallback>
 8004f36:	e002      	b.n	8004f3e <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7fb fcc3 	bl	80008c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f44:	e009      	b.n	8004f5a <UART_RxISR_8BIT+0xd4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	8b1b      	ldrh	r3, [r3, #24]
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0208 	orr.w	r2, r2, #8
 8004f56:	b292      	uxth	r2, r2
 8004f58:	831a      	strh	r2, [r3, #24]
}
 8004f5a:	bf00      	nop
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b084      	sub	sp, #16
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004f70:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f78:	2b22      	cmp	r3, #34	; 0x22
 8004f7a:	d152      	bne.n	8005022 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004f82:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f88:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004f8a:	89ba      	ldrh	r2, [r7, #12]
 8004f8c:	89fb      	ldrh	r3, [r7, #14]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9a:	1c9a      	adds	r2, r3, #2
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d13b      	bne.n	8005036 <UART_RxISR_16BIT+0xd4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fcc:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0201 	bic.w	r2, r2, #1
 8004fdc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d10f      	bne.n	8005014 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0210 	bic.w	r2, r2, #16
 8005002:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800500a:	4619      	mov	r1, r3
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7ff f8a1 	bl	8004154 <HAL_UARTEx_RxEventCallback>
 8005012:	e002      	b.n	800501a <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7fb fc55 	bl	80008c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005020:	e009      	b.n	8005036 <UART_RxISR_16BIT+0xd4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	8b1b      	ldrh	r3, [r3, #24]
 8005028:	b29a      	uxth	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0208 	orr.w	r2, r2, #8
 8005032:	b292      	uxth	r2, r2
 8005034:	831a      	strh	r2, [r3, #24]
}
 8005036:	bf00      	nop
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800504e:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506e:	2b22      	cmp	r3, #34	; 0x22
 8005070:	f040 80da 	bne.w	8005228 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800507a:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800507c:	e0aa      	b.n	80051d4 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005084:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005086:	89bb      	ldrh	r3, [r7, #12]
 8005088:	b2d9      	uxtb	r1, r3
 800508a:	8b7b      	ldrh	r3, [r7, #26]
 800508c:	b2da      	uxtb	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005092:	400a      	ands	r2, r1
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	3b01      	subs	r3, #1
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d04d      	beq.n	8005162 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d010      	beq.n	80050f2 <UART_RxISR_8BIT_FIFOEN+0xb2>
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00b      	beq.n	80050f2 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2201      	movs	r2, #1
 80050e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050e8:	f043 0201 	orr.w	r2, r3, #1
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d010      	beq.n	800511e <UART_RxISR_8BIT_FIFOEN+0xde>
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00b      	beq.n	800511e <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2202      	movs	r2, #2
 800510c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005114:	f043 0204 	orr.w	r2, r3, #4
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d010      	beq.n	800514a <UART_RxISR_8BIT_FIFOEN+0x10a>
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00b      	beq.n	800514a <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2204      	movs	r2, #4
 8005138:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005140:	f043 0202 	orr.w	r2, r3, #2
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005150:	2b00      	cmp	r3, #0
 8005152:	d006      	beq.n	8005162 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7fe fff3 	bl	8004140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d132      	bne.n	80051d4 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800517c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6812      	ldr	r2, [r2, #0]
 8005188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d10f      	bne.n	80051c8 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0210 	bic.w	r2, r2, #16
 80051b6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051be:	4619      	mov	r1, r3
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7fe ffc7 	bl	8004154 <HAL_UARTEx_RxEventCallback>
 80051c6:	e002      	b.n	80051ce <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7fb fb7b 	bl	80008c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80051d4:	89fb      	ldrh	r3, [r7, #14]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d005      	beq.n	80051e6 <UART_RxISR_8BIT_FIFOEN+0x1a6>
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	f003 0320 	and.w	r3, r3, #32
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f47f af4c 	bne.w	800507e <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051ec:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80051ee:	897b      	ldrh	r3, [r7, #10]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d023      	beq.n	800523c <UART_RxISR_8BIT_FIFOEN+0x1fc>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80051fa:	897a      	ldrh	r2, [r7, #10]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d21d      	bcs.n	800523c <UART_RxISR_8BIT_FIFOEN+0x1fc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800520e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a0c      	ldr	r2, [pc, #48]	; (8005244 <UART_RxISR_8BIT_FIFOEN+0x204>)
 8005214:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f042 0220 	orr.w	r2, r2, #32
 8005224:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005226:	e009      	b.n	800523c <UART_RxISR_8BIT_FIFOEN+0x1fc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	8b1b      	ldrh	r3, [r3, #24]
 800522e:	b29a      	uxth	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f042 0208 	orr.w	r2, r2, #8
 8005238:	b292      	uxth	r2, r2
 800523a:	831a      	strh	r2, [r3, #24]
}
 800523c:	bf00      	nop
 800523e:	3720      	adds	r7, #32
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	08004e87 	.word	0x08004e87

08005248 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b08a      	sub	sp, #40	; 0x28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005256:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005276:	2b22      	cmp	r3, #34	; 0x22
 8005278:	f040 80da 	bne.w	8005430 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005282:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005284:	e0aa      	b.n	80053dc <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800528c:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005292:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8005294:	8aba      	ldrh	r2, [r7, #20]
 8005296:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005298:	4013      	ands	r3, r2
 800529a:	b29a      	uxth	r2, r3
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a4:	1c9a      	adds	r2, r3, #2
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d04d      	beq.n	800536a <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d010      	beq.n	80052fa <UART_RxISR_16BIT_FIFOEN+0xb2>
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00b      	beq.n	80052fa <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2201      	movs	r2, #1
 80052e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052f0:	f043 0201 	orr.w	r2, r3, #1
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d010      	beq.n	8005326 <UART_RxISR_16BIT_FIFOEN+0xde>
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00b      	beq.n	8005326 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2202      	movs	r2, #2
 8005314:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800531c:	f043 0204 	orr.w	r2, r3, #4
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	d010      	beq.n	8005352 <UART_RxISR_16BIT_FIFOEN+0x10a>
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00b      	beq.n	8005352 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2204      	movs	r2, #4
 8005340:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005348:	f043 0202 	orr.w	r2, r3, #2
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005358:	2b00      	cmp	r3, #0
 800535a:	d006      	beq.n	800536a <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7fe feef 	bl	8004140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005370:	b29b      	uxth	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d132      	bne.n	80053dc <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005384:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6812      	ldr	r2, [r2, #0]
 8005390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005394:	f023 0301 	bic.w	r3, r3, #1
 8005398:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2220      	movs	r2, #32
 800539e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d10f      	bne.n	80053d0 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 0210 	bic.w	r2, r2, #16
 80053be:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80053c6:	4619      	mov	r1, r3
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7fe fec3 	bl	8004154 <HAL_UARTEx_RxEventCallback>
 80053ce:	e002      	b.n	80053d6 <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7fb fa77 	bl	80008c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80053dc:	8afb      	ldrh	r3, [r7, #22]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d005      	beq.n	80053ee <UART_RxISR_16BIT_FIFOEN+0x1a6>
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f47f af4c 	bne.w	8005286 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80053f4:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80053f6:	89fb      	ldrh	r3, [r7, #14]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d023      	beq.n	8005444 <UART_RxISR_16BIT_FIFOEN+0x1fc>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005402:	89fa      	ldrh	r2, [r7, #14]
 8005404:	429a      	cmp	r2, r3
 8005406:	d21d      	bcs.n	8005444 <UART_RxISR_16BIT_FIFOEN+0x1fc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689a      	ldr	r2, [r3, #8]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005416:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a0c      	ldr	r2, [pc, #48]	; (800544c <UART_RxISR_16BIT_FIFOEN+0x204>)
 800541c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f042 0220 	orr.w	r2, r2, #32
 800542c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800542e:	e009      	b.n	8005444 <UART_RxISR_16BIT_FIFOEN+0x1fc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	8b1b      	ldrh	r3, [r3, #24]
 8005436:	b29a      	uxth	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f042 0208 	orr.w	r2, r2, #8
 8005440:	b292      	uxth	r2, r2
 8005442:	831a      	strh	r2, [r3, #24]
}
 8005444:	bf00      	nop
 8005446:	3728      	adds	r7, #40	; 0x28
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	08004f63 	.word	0x08004f63

08005450 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e058      	b.n	800551a <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800546e:	2b00      	cmp	r3, #0
 8005470:	d106      	bne.n	8005480 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f7fb fb50 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2224      	movs	r2, #36	; 0x24
 8005484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0201 	bic.w	r2, r2, #1
 8005496:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f7fe fe67 	bl	800416c <UART_SetConfig>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e038      	b.n	800551a <HAL_RS485Ex_Init+0xca>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f7ff f925 	bl	8004700 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054c4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	055b      	lsls	r3, r3, #21
 80054de:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	041b      	lsls	r3, r3, #16
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 80054f4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	6812      	ldr	r2, [r2, #0]
 80054fc:	6979      	ldr	r1, [r7, #20]
 80054fe:	430b      	orrs	r3, r1
 8005500:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 0201 	orr.w	r2, r2, #1
 8005510:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f7ff f996 	bl	8004844 <UART_CheckIdleState>
 8005518:	4603      	mov	r3, r0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800555e:	b480      	push	{r7}
 8005560:	b085      	sub	sp, #20
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <HAL_UARTEx_DisableFifoMode+0x16>
 8005570:	2302      	movs	r3, #2
 8005572:	e027      	b.n	80055c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2224      	movs	r2, #36	; 0x24
 8005580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0201 	bic.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80055a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e02d      	b.n	8005644 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2224      	movs	r2, #36	; 0x24
 80055f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0201 	bic.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f84f 	bl	80056c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2220      	movs	r2, #32
 8005636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800565c:	2b01      	cmp	r3, #1
 800565e:	d101      	bne.n	8005664 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005660:	2302      	movs	r3, #2
 8005662:	e02d      	b.n	80056c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2224      	movs	r2, #36	; 0x24
 8005670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0201 	bic.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f811 	bl	80056c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d108      	bne.n	80056ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80056e8:	e031      	b.n	800574e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80056ea:	2308      	movs	r3, #8
 80056ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80056ee:	2308      	movs	r3, #8
 80056f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	0e5b      	lsrs	r3, r3, #25
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	0f5b      	lsrs	r3, r3, #29
 800570a:	b2db      	uxtb	r3, r3
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005712:	7bbb      	ldrb	r3, [r7, #14]
 8005714:	7b3a      	ldrb	r2, [r7, #12]
 8005716:	4911      	ldr	r1, [pc, #68]	; (800575c <UARTEx_SetNbDataToProcess+0x94>)
 8005718:	5c8a      	ldrb	r2, [r1, r2]
 800571a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800571e:	7b3a      	ldrb	r2, [r7, #12]
 8005720:	490f      	ldr	r1, [pc, #60]	; (8005760 <UARTEx_SetNbDataToProcess+0x98>)
 8005722:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005724:	fb93 f3f2 	sdiv	r3, r3, r2
 8005728:	b29a      	uxth	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	7b7a      	ldrb	r2, [r7, #13]
 8005734:	4909      	ldr	r1, [pc, #36]	; (800575c <UARTEx_SetNbDataToProcess+0x94>)
 8005736:	5c8a      	ldrb	r2, [r1, r2]
 8005738:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800573c:	7b7a      	ldrb	r2, [r7, #13]
 800573e:	4908      	ldr	r1, [pc, #32]	; (8005760 <UARTEx_SetNbDataToProcess+0x98>)
 8005740:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005742:	fb93 f3f2 	sdiv	r3, r3, r2
 8005746:	b29a      	uxth	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800574e:	bf00      	nop
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	08008930 	.word	0x08008930
 8005760:	08008938 	.word	0x08008938

08005764 <__NVIC_SetPriority>:
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	6039      	str	r1, [r7, #0]
 800576e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005774:	2b00      	cmp	r3, #0
 8005776:	db0a      	blt.n	800578e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	b2da      	uxtb	r2, r3
 800577c:	490c      	ldr	r1, [pc, #48]	; (80057b0 <__NVIC_SetPriority+0x4c>)
 800577e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005782:	0112      	lsls	r2, r2, #4
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	440b      	add	r3, r1
 8005788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800578c:	e00a      	b.n	80057a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	b2da      	uxtb	r2, r3
 8005792:	4908      	ldr	r1, [pc, #32]	; (80057b4 <__NVIC_SetPriority+0x50>)
 8005794:	79fb      	ldrb	r3, [r7, #7]
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	3b04      	subs	r3, #4
 800579c:	0112      	lsls	r2, r2, #4
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	440b      	add	r3, r1
 80057a2:	761a      	strb	r2, [r3, #24]
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	e000e100 	.word	0xe000e100
 80057b4:	e000ed00 	.word	0xe000ed00

080057b8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80057bc:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <SysTick_Handler+0x1c>)
 80057be:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80057c0:	f001 ff44 	bl	800764c <xTaskGetSchedulerState>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d001      	beq.n	80057ce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80057ca:	f002 fd2d 	bl	8008228 <xPortSysTickHandler>
  }
}
 80057ce:	bf00      	nop
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	e000e010 	.word	0xe000e010

080057d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80057dc:	2100      	movs	r1, #0
 80057de:	f06f 0004 	mvn.w	r0, #4
 80057e2:	f7ff ffbf 	bl	8005764 <__NVIC_SetPriority>
#endif
}
 80057e6:	bf00      	nop
 80057e8:	bd80      	pop	{r7, pc}
	...

080057ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057f2:	f3ef 8305 	mrs	r3, IPSR
 80057f6:	603b      	str	r3, [r7, #0]
  return(result);
 80057f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80057fe:	f06f 0305 	mvn.w	r3, #5
 8005802:	607b      	str	r3, [r7, #4]
 8005804:	e00c      	b.n	8005820 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005806:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <osKernelInitialize+0x44>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d105      	bne.n	800581a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800580e:	4b08      	ldr	r3, [pc, #32]	; (8005830 <osKernelInitialize+0x44>)
 8005810:	2201      	movs	r2, #1
 8005812:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005814:	2300      	movs	r3, #0
 8005816:	607b      	str	r3, [r7, #4]
 8005818:	e002      	b.n	8005820 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800581a:	f04f 33ff 	mov.w	r3, #4294967295
 800581e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005820:	687b      	ldr	r3, [r7, #4]
}
 8005822:	4618      	mov	r0, r3
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	20000030 	.word	0x20000030

08005834 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800583a:	f3ef 8305 	mrs	r3, IPSR
 800583e:	603b      	str	r3, [r7, #0]
  return(result);
 8005840:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005846:	f06f 0305 	mvn.w	r3, #5
 800584a:	607b      	str	r3, [r7, #4]
 800584c:	e010      	b.n	8005870 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800584e:	4b0b      	ldr	r3, [pc, #44]	; (800587c <osKernelStart+0x48>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d109      	bne.n	800586a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005856:	f7ff ffbf 	bl	80057d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800585a:	4b08      	ldr	r3, [pc, #32]	; (800587c <osKernelStart+0x48>)
 800585c:	2202      	movs	r2, #2
 800585e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005860:	f001 faac 	bl	8006dbc <vTaskStartScheduler>
      stat = osOK;
 8005864:	2300      	movs	r3, #0
 8005866:	607b      	str	r3, [r7, #4]
 8005868:	e002      	b.n	8005870 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800586a:	f04f 33ff 	mov.w	r3, #4294967295
 800586e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005870:	687b      	ldr	r3, [r7, #4]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20000030 	.word	0x20000030

08005880 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005880:	b580      	push	{r7, lr}
 8005882:	b08e      	sub	sp, #56	; 0x38
 8005884:	af04      	add	r7, sp, #16
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800588c:	2300      	movs	r3, #0
 800588e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005890:	f3ef 8305 	mrs	r3, IPSR
 8005894:	617b      	str	r3, [r7, #20]
  return(result);
 8005896:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005898:	2b00      	cmp	r3, #0
 800589a:	d17e      	bne.n	800599a <osThreadNew+0x11a>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d07b      	beq.n	800599a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80058a2:	2380      	movs	r3, #128	; 0x80
 80058a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80058a6:	2318      	movs	r3, #24
 80058a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80058aa:	2300      	movs	r3, #0
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80058ae:	f04f 33ff 	mov.w	r3, #4294967295
 80058b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d045      	beq.n	8005946 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <osThreadNew+0x48>
        name = attr->name;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d008      	beq.n	80058ee <osThreadNew+0x6e>
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	2b38      	cmp	r3, #56	; 0x38
 80058e0:	d805      	bhi.n	80058ee <osThreadNew+0x6e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <osThreadNew+0x72>
        return (NULL);
 80058ee:	2300      	movs	r3, #0
 80058f0:	e054      	b.n	800599c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	089b      	lsrs	r3, r3, #2
 8005900:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00e      	beq.n	8005928 <osThreadNew+0xa8>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	2b5b      	cmp	r3, #91	; 0x5b
 8005910:	d90a      	bls.n	8005928 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005916:	2b00      	cmp	r3, #0
 8005918:	d006      	beq.n	8005928 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <osThreadNew+0xa8>
        mem = 1;
 8005922:	2301      	movs	r3, #1
 8005924:	61bb      	str	r3, [r7, #24]
 8005926:	e010      	b.n	800594a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10c      	bne.n	800594a <osThreadNew+0xca>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d108      	bne.n	800594a <osThreadNew+0xca>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d104      	bne.n	800594a <osThreadNew+0xca>
          mem = 0;
 8005940:	2300      	movs	r3, #0
 8005942:	61bb      	str	r3, [r7, #24]
 8005944:	e001      	b.n	800594a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005946:	2300      	movs	r3, #0
 8005948:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d110      	bne.n	8005972 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005958:	9202      	str	r2, [sp, #8]
 800595a:	9301      	str	r3, [sp, #4]
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	6a3a      	ldr	r2, [r7, #32]
 8005964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f001 f852 	bl	8006a10 <xTaskCreateStatic>
 800596c:	4603      	mov	r3, r0
 800596e:	613b      	str	r3, [r7, #16]
 8005970:	e013      	b.n	800599a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d110      	bne.n	800599a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	b29a      	uxth	r2, r3
 800597c:	f107 0310 	add.w	r3, r7, #16
 8005980:	9301      	str	r3, [sp, #4]
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f001 f89d 	bl	8006aca <xTaskCreate>
 8005990:	4603      	mov	r3, r0
 8005992:	2b01      	cmp	r3, #1
 8005994:	d001      	beq.n	800599a <osThreadNew+0x11a>
            hTask = NULL;
 8005996:	2300      	movs	r3, #0
 8005998:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800599a:	693b      	ldr	r3, [r7, #16]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3728      	adds	r7, #40	; 0x28
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059ac:	f3ef 8305 	mrs	r3, IPSR
 80059b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80059b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <osDelay+0x1c>
    stat = osErrorISR;
 80059b8:	f06f 0305 	mvn.w	r3, #5
 80059bc:	60fb      	str	r3, [r7, #12]
 80059be:	e007      	b.n	80059d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d002      	beq.n	80059d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f001 f9c2 	bl	8006d54 <vTaskDelay>
    }
  }

  return (stat);
 80059d0:	68fb      	ldr	r3, [r7, #12]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80059da:	b580      	push	{r7, lr}
 80059dc:	b08a      	sub	sp, #40	; 0x28
 80059de:	af02      	add	r7, sp, #8
 80059e0:	60f8      	str	r0, [r7, #12]
 80059e2:	60b9      	str	r1, [r7, #8]
 80059e4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80059e6:	2300      	movs	r3, #0
 80059e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059ea:	f3ef 8305 	mrs	r3, IPSR
 80059ee:	613b      	str	r3, [r7, #16]
  return(result);
 80059f0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d15f      	bne.n	8005ab6 <osMessageQueueNew+0xdc>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d05c      	beq.n	8005ab6 <osMessageQueueNew+0xdc>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d059      	beq.n	8005ab6 <osMessageQueueNew+0xdc>
    mem = -1;
 8005a02:	f04f 33ff 	mov.w	r3, #4294967295
 8005a06:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d029      	beq.n	8005a62 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d012      	beq.n	8005a3c <osMessageQueueNew+0x62>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	2b4f      	cmp	r3, #79	; 0x4f
 8005a1c:	d90e      	bls.n	8005a3c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695a      	ldr	r2, [r3, #20]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	fb01 f303 	mul.w	r3, r1, r3
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d302      	bcc.n	8005a3c <osMessageQueueNew+0x62>
        mem = 1;
 8005a36:	2301      	movs	r3, #1
 8005a38:	61bb      	str	r3, [r7, #24]
 8005a3a:	e014      	b.n	8005a66 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d110      	bne.n	8005a66 <osMessageQueueNew+0x8c>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10c      	bne.n	8005a66 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d108      	bne.n	8005a66 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d104      	bne.n	8005a66 <osMessageQueueNew+0x8c>
          mem = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	61bb      	str	r3, [r7, #24]
 8005a60:	e001      	b.n	8005a66 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005a62:	2300      	movs	r3, #0
 8005a64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d10b      	bne.n	8005a84 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691a      	ldr	r2, [r3, #16]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	2100      	movs	r1, #0
 8005a76:	9100      	str	r1, [sp, #0]
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 fa4e 	bl	8005f1c <xQueueGenericCreateStatic>
 8005a80:	61f8      	str	r0, [r7, #28]
 8005a82:	e008      	b.n	8005a96 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d105      	bne.n	8005a96 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 fabc 	bl	800600c <xQueueGenericCreate>
 8005a94:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00c      	beq.n	8005ab6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <osMessageQueueNew+0xd0>
        name = attr->name;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	e001      	b.n	8005aae <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005aae:	6979      	ldr	r1, [r7, #20]
 8005ab0:	69f8      	ldr	r0, [r7, #28]
 8005ab2:	f000 ff4f 	bl	8006954 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005ab6:	69fb      	ldr	r3, [r7, #28]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3720      	adds	r7, #32
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	4613      	mov	r3, r2
 8005ace:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ad8:	f3ef 8305 	mrs	r3, IPSR
 8005adc:	617b      	str	r3, [r7, #20]
  return(result);
 8005ade:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d028      	beq.n	8005b36 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d005      	beq.n	8005af6 <osMessageQueuePut+0x36>
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <osMessageQueuePut+0x36>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005af6:	f06f 0303 	mvn.w	r3, #3
 8005afa:	61fb      	str	r3, [r7, #28]
 8005afc:	e038      	b.n	8005b70 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005afe:	2300      	movs	r3, #0
 8005b00:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005b02:	f107 0210 	add.w	r2, r7, #16
 8005b06:	2300      	movs	r3, #0
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	69b8      	ldr	r0, [r7, #24]
 8005b0c:	f000 fbda 	bl	80062c4 <xQueueGenericSendFromISR>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d003      	beq.n	8005b1e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005b16:	f06f 0302 	mvn.w	r3, #2
 8005b1a:	61fb      	str	r3, [r7, #28]
 8005b1c:	e028      	b.n	8005b70 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d025      	beq.n	8005b70 <osMessageQueuePut+0xb0>
 8005b24:	4b15      	ldr	r3, [pc, #84]	; (8005b7c <osMessageQueuePut+0xbc>)
 8005b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	e01c      	b.n	8005b70 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <osMessageQueuePut+0x82>
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d103      	bne.n	8005b4a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005b42:	f06f 0303 	mvn.w	r3, #3
 8005b46:	61fb      	str	r3, [r7, #28]
 8005b48:	e012      	b.n	8005b70 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	69b8      	ldr	r0, [r7, #24]
 8005b52:	f000 fab9 	bl	80060c8 <xQueueGenericSend>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d009      	beq.n	8005b70 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005b62:	f06f 0301 	mvn.w	r3, #1
 8005b66:	61fb      	str	r3, [r7, #28]
 8005b68:	e002      	b.n	8005b70 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005b6a:	f06f 0302 	mvn.w	r3, #2
 8005b6e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005b70:	69fb      	ldr	r3, [r7, #28]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3720      	adds	r7, #32
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	e000ed04 	.word	0xe000ed04

08005b80 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
 8005b8c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b96:	f3ef 8305 	mrs	r3, IPSR
 8005b9a:	617b      	str	r3, [r7, #20]
  return(result);
 8005b9c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d028      	beq.n	8005bf4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d005      	beq.n	8005bb4 <osMessageQueueGet+0x34>
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d002      	beq.n	8005bb4 <osMessageQueueGet+0x34>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005bb4:	f06f 0303 	mvn.w	r3, #3
 8005bb8:	61fb      	str	r3, [r7, #28]
 8005bba:	e037      	b.n	8005c2c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005bc0:	f107 0310 	add.w	r3, r7, #16
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	68b9      	ldr	r1, [r7, #8]
 8005bc8:	69b8      	ldr	r0, [r7, #24]
 8005bca:	f000 fcf7 	bl	80065bc <xQueueReceiveFromISR>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d003      	beq.n	8005bdc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005bd4:	f06f 0302 	mvn.w	r3, #2
 8005bd8:	61fb      	str	r3, [r7, #28]
 8005bda:	e027      	b.n	8005c2c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d024      	beq.n	8005c2c <osMessageQueueGet+0xac>
 8005be2:	4b15      	ldr	r3, [pc, #84]	; (8005c38 <osMessageQueueGet+0xb8>)
 8005be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	e01b      	b.n	8005c2c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <osMessageQueueGet+0x80>
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d103      	bne.n	8005c08 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005c00:	f06f 0303 	mvn.w	r3, #3
 8005c04:	61fb      	str	r3, [r7, #28]
 8005c06:	e011      	b.n	8005c2c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	68b9      	ldr	r1, [r7, #8]
 8005c0c:	69b8      	ldr	r0, [r7, #24]
 8005c0e:	f000 fbf5 	bl	80063fc <xQueueReceive>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d009      	beq.n	8005c2c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005c1e:	f06f 0301 	mvn.w	r3, #1
 8005c22:	61fb      	str	r3, [r7, #28]
 8005c24:	e002      	b.n	8005c2c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005c26:	f06f 0302 	mvn.w	r3, #2
 8005c2a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005c2c:	69fb      	ldr	r3, [r7, #28]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3720      	adds	r7, #32
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	e000ed04 	.word	0xe000ed04

08005c3c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d102      	bne.n	8005c54 <osMessageQueueGetCount+0x18>
    count = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	e00e      	b.n	8005c72 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c54:	f3ef 8305 	mrs	r3, IPSR
 8005c58:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d004      	beq.n	8005c6a <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005c60:	6938      	ldr	r0, [r7, #16]
 8005c62:	f000 fd49 	bl	80066f8 <uxQueueMessagesWaitingFromISR>
 8005c66:	6178      	str	r0, [r7, #20]
 8005c68:	e003      	b.n	8005c72 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005c6a:	6938      	ldr	r0, [r7, #16]
 8005c6c:	f000 fd26 	bl	80066bc <uxQueueMessagesWaiting>
 8005c70:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8005c72:	697b      	ldr	r3, [r7, #20]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4a07      	ldr	r2, [pc, #28]	; (8005ca8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005c8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	4a06      	ldr	r2, [pc, #24]	; (8005cac <vApplicationGetIdleTaskMemory+0x30>)
 8005c92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2280      	movs	r2, #128	; 0x80
 8005c98:	601a      	str	r2, [r3, #0]
}
 8005c9a:	bf00      	nop
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	20000034 	.word	0x20000034
 8005cac:	20000090 	.word	0x20000090

08005cb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4a07      	ldr	r2, [pc, #28]	; (8005cdc <vApplicationGetTimerTaskMemory+0x2c>)
 8005cc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	4a06      	ldr	r2, [pc, #24]	; (8005ce0 <vApplicationGetTimerTaskMemory+0x30>)
 8005cc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cce:	601a      	str	r2, [r3, #0]
}
 8005cd0:	bf00      	nop
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	20000290 	.word	0x20000290
 8005ce0:	200002ec 	.word	0x200002ec

08005ce4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f103 0208 	add.w	r2, r3, #8
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f103 0208 	add.w	r2, r3, #8
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f103 0208 	add.w	r2, r3, #8
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b085      	sub	sp, #20
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	601a      	str	r2, [r3, #0]
}
 8005d7a:	bf00      	nop
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d86:	b480      	push	{r7}
 8005d88:	b085      	sub	sp, #20
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9c:	d103      	bne.n	8005da6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	e00c      	b.n	8005dc0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3308      	adds	r3, #8
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	e002      	b.n	8005db4 <vListInsert+0x2e>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d2f6      	bcs.n	8005dae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	1c5a      	adds	r2, r3, #1
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	601a      	str	r2, [r3, #0]
}
 8005dec:	bf00      	nop
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6892      	ldr	r2, [r2, #8]
 8005e0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6852      	ldr	r2, [r2, #4]
 8005e18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d103      	bne.n	8005e2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689a      	ldr	r2, [r3, #8]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	1e5a      	subs	r2, r3, #1
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10a      	bne.n	8005e76 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e72:	bf00      	nop
 8005e74:	e7fe      	b.n	8005e74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e76:	f002 f945 	bl	8008104 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e82:	68f9      	ldr	r1, [r7, #12]
 8005e84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e86:	fb01 f303 	mul.w	r3, r1, r3
 8005e8a:	441a      	add	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	68f9      	ldr	r1, [r7, #12]
 8005eaa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005eac:	fb01 f303 	mul.w	r3, r1, r3
 8005eb0:	441a      	add	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	22ff      	movs	r2, #255	; 0xff
 8005eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	22ff      	movs	r2, #255	; 0xff
 8005ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d114      	bne.n	8005ef6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01a      	beq.n	8005f0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	3310      	adds	r3, #16
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f001 f9f9 	bl	80072d0 <xTaskRemoveFromEventList>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d012      	beq.n	8005f0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ee4:	4b0c      	ldr	r3, [pc, #48]	; (8005f18 <xQueueGenericReset+0xcc>)
 8005ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	e009      	b.n	8005f0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3310      	adds	r3, #16
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff fef2 	bl	8005ce4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	3324      	adds	r3, #36	; 0x24
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff feed 	bl	8005ce4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f0a:	f002 f92b 	bl	8008164 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f0e:	2301      	movs	r3, #1
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	e000ed04 	.word	0xe000ed04

08005f1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08e      	sub	sp, #56	; 0x38
 8005f20:	af02      	add	r7, sp, #8
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
 8005f28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10a      	bne.n	8005f46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f42:	bf00      	nop
 8005f44:	e7fe      	b.n	8005f44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10a      	bne.n	8005f62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f5e:	bf00      	nop
 8005f60:	e7fe      	b.n	8005f60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <xQueueGenericCreateStatic+0x52>
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <xQueueGenericCreateStatic+0x56>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e000      	b.n	8005f74 <xQueueGenericCreateStatic+0x58>
 8005f72:	2300      	movs	r3, #0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10a      	bne.n	8005f8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	623b      	str	r3, [r7, #32]
}
 8005f8a:	bf00      	nop
 8005f8c:	e7fe      	b.n	8005f8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d102      	bne.n	8005f9a <xQueueGenericCreateStatic+0x7e>
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <xQueueGenericCreateStatic+0x82>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <xQueueGenericCreateStatic+0x84>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10a      	bne.n	8005fba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	61fb      	str	r3, [r7, #28]
}
 8005fb6:	bf00      	nop
 8005fb8:	e7fe      	b.n	8005fb8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005fba:	2350      	movs	r3, #80	; 0x50
 8005fbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2b50      	cmp	r3, #80	; 0x50
 8005fc2:	d00a      	beq.n	8005fda <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	61bb      	str	r3, [r7, #24]
}
 8005fd6:	bf00      	nop
 8005fd8:	e7fe      	b.n	8005fd8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005fda:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00d      	beq.n	8006002 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	68b9      	ldr	r1, [r7, #8]
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 f83f 	bl	8006080 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006004:	4618      	mov	r0, r3
 8006006:	3730      	adds	r7, #48	; 0x30
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800600c:	b580      	push	{r7, lr}
 800600e:	b08a      	sub	sp, #40	; 0x28
 8006010:	af02      	add	r7, sp, #8
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	4613      	mov	r3, r2
 8006018:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10a      	bne.n	8006036 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	613b      	str	r3, [r7, #16]
}
 8006032:	bf00      	nop
 8006034:	e7fe      	b.n	8006034 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	fb02 f303 	mul.w	r3, r2, r3
 800603e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	3350      	adds	r3, #80	; 0x50
 8006044:	4618      	mov	r0, r3
 8006046:	f002 f97f 	bl	8008348 <pvPortMalloc>
 800604a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d011      	beq.n	8006076 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	3350      	adds	r3, #80	; 0x50
 800605a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006064:	79fa      	ldrb	r2, [r7, #7]
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	4613      	mov	r3, r2
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	68b9      	ldr	r1, [r7, #8]
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 f805 	bl	8006080 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006076:	69bb      	ldr	r3, [r7, #24]
	}
 8006078:	4618      	mov	r0, r3
 800607a:	3720      	adds	r7, #32
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d103      	bne.n	800609c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	e002      	b.n	80060a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060ae:	2101      	movs	r1, #1
 80060b0:	69b8      	ldr	r0, [r7, #24]
 80060b2:	f7ff fecb 	bl	8005e4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	78fa      	ldrb	r2, [r7, #3]
 80060ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060be:	bf00      	nop
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
	...

080060c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b08e      	sub	sp, #56	; 0x38
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80060d6:	2300      	movs	r3, #0
 80060d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10a      	bne.n	80060fa <xQueueGenericSend+0x32>
	__asm volatile
 80060e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e8:	f383 8811 	msr	BASEPRI, r3
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060f6:	bf00      	nop
 80060f8:	e7fe      	b.n	80060f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d103      	bne.n	8006108 <xQueueGenericSend+0x40>
 8006100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <xQueueGenericSend+0x44>
 8006108:	2301      	movs	r3, #1
 800610a:	e000      	b.n	800610e <xQueueGenericSend+0x46>
 800610c:	2300      	movs	r3, #0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10a      	bne.n	8006128 <xQueueGenericSend+0x60>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006124:	bf00      	nop
 8006126:	e7fe      	b.n	8006126 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	2b02      	cmp	r3, #2
 800612c:	d103      	bne.n	8006136 <xQueueGenericSend+0x6e>
 800612e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006132:	2b01      	cmp	r3, #1
 8006134:	d101      	bne.n	800613a <xQueueGenericSend+0x72>
 8006136:	2301      	movs	r3, #1
 8006138:	e000      	b.n	800613c <xQueueGenericSend+0x74>
 800613a:	2300      	movs	r3, #0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10a      	bne.n	8006156 <xQueueGenericSend+0x8e>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	623b      	str	r3, [r7, #32]
}
 8006152:	bf00      	nop
 8006154:	e7fe      	b.n	8006154 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006156:	f001 fa79 	bl	800764c <xTaskGetSchedulerState>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d102      	bne.n	8006166 <xQueueGenericSend+0x9e>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <xQueueGenericSend+0xa2>
 8006166:	2301      	movs	r3, #1
 8006168:	e000      	b.n	800616c <xQueueGenericSend+0xa4>
 800616a:	2300      	movs	r3, #0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10a      	bne.n	8006186 <xQueueGenericSend+0xbe>
	__asm volatile
 8006170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	61fb      	str	r3, [r7, #28]
}
 8006182:	bf00      	nop
 8006184:	e7fe      	b.n	8006184 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006186:	f001 ffbd 	bl	8008104 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006192:	429a      	cmp	r2, r3
 8006194:	d302      	bcc.n	800619c <xQueueGenericSend+0xd4>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2b02      	cmp	r3, #2
 800619a:	d129      	bne.n	80061f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	68b9      	ldr	r1, [r7, #8]
 80061a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061a2:	f000 fac7 	bl	8006734 <prvCopyDataToQueue>
 80061a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d010      	beq.n	80061d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b2:	3324      	adds	r3, #36	; 0x24
 80061b4:	4618      	mov	r0, r3
 80061b6:	f001 f88b 	bl	80072d0 <xTaskRemoveFromEventList>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d013      	beq.n	80061e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061c0:	4b3f      	ldr	r3, [pc, #252]	; (80062c0 <xQueueGenericSend+0x1f8>)
 80061c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	e00a      	b.n	80061e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80061d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d007      	beq.n	80061e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80061d8:	4b39      	ldr	r3, [pc, #228]	; (80062c0 <xQueueGenericSend+0x1f8>)
 80061da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80061e8:	f001 ffbc 	bl	8008164 <vPortExitCritical>
				return pdPASS;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e063      	b.n	80062b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d103      	bne.n	80061fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061f6:	f001 ffb5 	bl	8008164 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80061fa:	2300      	movs	r3, #0
 80061fc:	e05c      	b.n	80062b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006200:	2b00      	cmp	r3, #0
 8006202:	d106      	bne.n	8006212 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006204:	f107 0314 	add.w	r3, r7, #20
 8006208:	4618      	mov	r0, r3
 800620a:	f001 f8c5 	bl	8007398 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800620e:	2301      	movs	r3, #1
 8006210:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006212:	f001 ffa7 	bl	8008164 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006216:	f000 fe37 	bl	8006e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800621a:	f001 ff73 	bl	8008104 <vPortEnterCritical>
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006224:	b25b      	sxtb	r3, r3
 8006226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622a:	d103      	bne.n	8006234 <xQueueGenericSend+0x16c>
 800622c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622e:	2200      	movs	r2, #0
 8006230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006236:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800623a:	b25b      	sxtb	r3, r3
 800623c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006240:	d103      	bne.n	800624a <xQueueGenericSend+0x182>
 8006242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800624a:	f001 ff8b 	bl	8008164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800624e:	1d3a      	adds	r2, r7, #4
 8006250:	f107 0314 	add.w	r3, r7, #20
 8006254:	4611      	mov	r1, r2
 8006256:	4618      	mov	r0, r3
 8006258:	f001 f8b4 	bl	80073c4 <xTaskCheckForTimeOut>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d124      	bne.n	80062ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006262:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006264:	f000 fb5e 	bl	8006924 <prvIsQueueFull>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d018      	beq.n	80062a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800626e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006270:	3310      	adds	r3, #16
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	4611      	mov	r1, r2
 8006276:	4618      	mov	r0, r3
 8006278:	f000 ffda 	bl	8007230 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800627c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800627e:	f000 fae9 	bl	8006854 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006282:	f000 fe0f 	bl	8006ea4 <xTaskResumeAll>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	f47f af7c 	bne.w	8006186 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800628e:	4b0c      	ldr	r3, [pc, #48]	; (80062c0 <xQueueGenericSend+0x1f8>)
 8006290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	e772      	b.n	8006186 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80062a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062a2:	f000 fad7 	bl	8006854 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062a6:	f000 fdfd 	bl	8006ea4 <xTaskResumeAll>
 80062aa:	e76c      	b.n	8006186 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062ae:	f000 fad1 	bl	8006854 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062b2:	f000 fdf7 	bl	8006ea4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3738      	adds	r7, #56	; 0x38
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	e000ed04 	.word	0xe000ed04

080062c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b090      	sub	sp, #64	; 0x40
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80062d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10a      	bne.n	80062f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80062dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062ee:	bf00      	nop
 80062f0:	e7fe      	b.n	80062f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d103      	bne.n	8006300 <xQueueGenericSendFromISR+0x3c>
 80062f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <xQueueGenericSendFromISR+0x40>
 8006300:	2301      	movs	r3, #1
 8006302:	e000      	b.n	8006306 <xQueueGenericSendFromISR+0x42>
 8006304:	2300      	movs	r3, #0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10a      	bne.n	8006320 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800631c:	bf00      	nop
 800631e:	e7fe      	b.n	800631e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d103      	bne.n	800632e <xQueueGenericSendFromISR+0x6a>
 8006326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632a:	2b01      	cmp	r3, #1
 800632c:	d101      	bne.n	8006332 <xQueueGenericSendFromISR+0x6e>
 800632e:	2301      	movs	r3, #1
 8006330:	e000      	b.n	8006334 <xQueueGenericSendFromISR+0x70>
 8006332:	2300      	movs	r3, #0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10a      	bne.n	800634e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	623b      	str	r3, [r7, #32]
}
 800634a:	bf00      	nop
 800634c:	e7fe      	b.n	800634c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800634e:	f001 ffbb 	bl	80082c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006352:	f3ef 8211 	mrs	r2, BASEPRI
 8006356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	61fa      	str	r2, [r7, #28]
 8006368:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800636a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800636c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800636e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006376:	429a      	cmp	r2, r3
 8006378:	d302      	bcc.n	8006380 <xQueueGenericSendFromISR+0xbc>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b02      	cmp	r3, #2
 800637e:	d12f      	bne.n	80063e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006382:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800638a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	68b9      	ldr	r1, [r7, #8]
 8006394:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006396:	f000 f9cd 	bl	8006734 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800639a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800639e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a2:	d112      	bne.n	80063ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d016      	beq.n	80063da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ae:	3324      	adds	r3, #36	; 0x24
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 ff8d 	bl	80072d0 <xTaskRemoveFromEventList>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00e      	beq.n	80063da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00b      	beq.n	80063da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	e007      	b.n	80063da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063ce:	3301      	adds	r3, #1
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	b25a      	sxtb	r2, r3
 80063d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80063da:	2301      	movs	r3, #1
 80063dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80063de:	e001      	b.n	80063e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063e0:	2300      	movs	r3, #0
 80063e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3740      	adds	r7, #64	; 0x40
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
	...

080063fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b08c      	sub	sp, #48	; 0x30
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006408:	2300      	movs	r3, #0
 800640a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10a      	bne.n	800642c <xQueueReceive+0x30>
	__asm volatile
 8006416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641a:	f383 8811 	msr	BASEPRI, r3
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	f3bf 8f4f 	dsb	sy
 8006426:	623b      	str	r3, [r7, #32]
}
 8006428:	bf00      	nop
 800642a:	e7fe      	b.n	800642a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d103      	bne.n	800643a <xQueueReceive+0x3e>
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <xQueueReceive+0x42>
 800643a:	2301      	movs	r3, #1
 800643c:	e000      	b.n	8006440 <xQueueReceive+0x44>
 800643e:	2300      	movs	r3, #0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10a      	bne.n	800645a <xQueueReceive+0x5e>
	__asm volatile
 8006444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	61fb      	str	r3, [r7, #28]
}
 8006456:	bf00      	nop
 8006458:	e7fe      	b.n	8006458 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800645a:	f001 f8f7 	bl	800764c <xTaskGetSchedulerState>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d102      	bne.n	800646a <xQueueReceive+0x6e>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <xQueueReceive+0x72>
 800646a:	2301      	movs	r3, #1
 800646c:	e000      	b.n	8006470 <xQueueReceive+0x74>
 800646e:	2300      	movs	r3, #0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10a      	bne.n	800648a <xQueueReceive+0x8e>
	__asm volatile
 8006474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	61bb      	str	r3, [r7, #24]
}
 8006486:	bf00      	nop
 8006488:	e7fe      	b.n	8006488 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800648a:	f001 fe3b 	bl	8008104 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006492:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	2b00      	cmp	r3, #0
 8006498:	d01f      	beq.n	80064da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800649a:	68b9      	ldr	r1, [r7, #8]
 800649c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800649e:	f000 f9b3 	bl	8006808 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	1e5a      	subs	r2, r3, #1
 80064a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00f      	beq.n	80064d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	3310      	adds	r3, #16
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 ff0a 	bl	80072d0 <xTaskRemoveFromEventList>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d007      	beq.n	80064d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064c2:	4b3d      	ldr	r3, [pc, #244]	; (80065b8 <xQueueReceive+0x1bc>)
 80064c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064d2:	f001 fe47 	bl	8008164 <vPortExitCritical>
				return pdPASS;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e069      	b.n	80065ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d103      	bne.n	80064e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064e0:	f001 fe40 	bl	8008164 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064e4:	2300      	movs	r3, #0
 80064e6:	e062      	b.n	80065ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d106      	bne.n	80064fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064ee:	f107 0310 	add.w	r3, r7, #16
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 ff50 	bl	8007398 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064f8:	2301      	movs	r3, #1
 80064fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064fc:	f001 fe32 	bl	8008164 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006500:	f000 fcc2 	bl	8006e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006504:	f001 fdfe 	bl	8008104 <vPortEnterCritical>
 8006508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800650e:	b25b      	sxtb	r3, r3
 8006510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006514:	d103      	bne.n	800651e <xQueueReceive+0x122>
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006524:	b25b      	sxtb	r3, r3
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652a:	d103      	bne.n	8006534 <xQueueReceive+0x138>
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006534:	f001 fe16 	bl	8008164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006538:	1d3a      	adds	r2, r7, #4
 800653a:	f107 0310 	add.w	r3, r7, #16
 800653e:	4611      	mov	r1, r2
 8006540:	4618      	mov	r0, r3
 8006542:	f000 ff3f 	bl	80073c4 <xTaskCheckForTimeOut>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d123      	bne.n	8006594 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800654c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800654e:	f000 f9d3 	bl	80068f8 <prvIsQueueEmpty>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d017      	beq.n	8006588 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655a:	3324      	adds	r3, #36	; 0x24
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	4611      	mov	r1, r2
 8006560:	4618      	mov	r0, r3
 8006562:	f000 fe65 	bl	8007230 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006568:	f000 f974 	bl	8006854 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800656c:	f000 fc9a 	bl	8006ea4 <xTaskResumeAll>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d189      	bne.n	800648a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006576:	4b10      	ldr	r3, [pc, #64]	; (80065b8 <xQueueReceive+0x1bc>)
 8006578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	e780      	b.n	800648a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800658a:	f000 f963 	bl	8006854 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800658e:	f000 fc89 	bl	8006ea4 <xTaskResumeAll>
 8006592:	e77a      	b.n	800648a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006596:	f000 f95d 	bl	8006854 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800659a:	f000 fc83 	bl	8006ea4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800659e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065a0:	f000 f9aa 	bl	80068f8 <prvIsQueueEmpty>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f43f af6f 	beq.w	800648a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3730      	adds	r7, #48	; 0x30
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	e000ed04 	.word	0xe000ed04

080065bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b08e      	sub	sp, #56	; 0x38
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10a      	bne.n	80065e8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	623b      	str	r3, [r7, #32]
}
 80065e4:	bf00      	nop
 80065e6:	e7fe      	b.n	80065e6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d103      	bne.n	80065f6 <xQueueReceiveFromISR+0x3a>
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <xQueueReceiveFromISR+0x3e>
 80065f6:	2301      	movs	r3, #1
 80065f8:	e000      	b.n	80065fc <xQueueReceiveFromISR+0x40>
 80065fa:	2300      	movs	r3, #0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10a      	bne.n	8006616 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	61fb      	str	r3, [r7, #28]
}
 8006612:	bf00      	nop
 8006614:	e7fe      	b.n	8006614 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006616:	f001 fe57 	bl	80082c8 <vPortValidateInterruptPriority>
	__asm volatile
 800661a:	f3ef 8211 	mrs	r2, BASEPRI
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	61ba      	str	r2, [r7, #24]
 8006630:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006632:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006634:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	2b00      	cmp	r3, #0
 8006640:	d02f      	beq.n	80066a2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006644:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800664c:	68b9      	ldr	r1, [r7, #8]
 800664e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006650:	f000 f8da 	bl	8006808 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006656:	1e5a      	subs	r2, r3, #1
 8006658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800665c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006664:	d112      	bne.n	800668c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d016      	beq.n	800669c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	3310      	adds	r3, #16
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fe2c 	bl	80072d0 <xTaskRemoveFromEventList>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00e      	beq.n	800669c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00b      	beq.n	800669c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	e007      	b.n	800669c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800668c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006690:	3301      	adds	r3, #1
 8006692:	b2db      	uxtb	r3, r3
 8006694:	b25a      	sxtb	r2, r3
 8006696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800669c:	2301      	movs	r3, #1
 800669e:	637b      	str	r3, [r7, #52]	; 0x34
 80066a0:	e001      	b.n	80066a6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80066a2:	2300      	movs	r3, #0
 80066a4:	637b      	str	r3, [r7, #52]	; 0x34
 80066a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f383 8811 	msr	BASEPRI, r3
}
 80066b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3738      	adds	r7, #56	; 0x38
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10a      	bne.n	80066e0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	60bb      	str	r3, [r7, #8]
}
 80066dc:	bf00      	nop
 80066de:	e7fe      	b.n	80066de <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80066e0:	f001 fd10 	bl	8008104 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80066ea:	f001 fd3b 	bl	8008164 <vPortExitCritical>

	return uxReturn;
 80066ee:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10a      	bne.n	8006720 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	60fb      	str	r3, [r7, #12]
}
 800671c:	bf00      	nop
 800671e:	e7fe      	b.n	800671e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006724:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006726:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006728:	4618      	mov	r0, r3
 800672a:	371c      	adds	r7, #28
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006740:	2300      	movs	r3, #0
 8006742:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006748:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10d      	bne.n	800676e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d14d      	bne.n	80067f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	4618      	mov	r0, r3
 8006760:	f000 ff92 	bl	8007688 <xTaskPriorityDisinherit>
 8006764:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	609a      	str	r2, [r3, #8]
 800676c:	e043      	b.n	80067f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d119      	bne.n	80067a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6858      	ldr	r0, [r3, #4]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677c:	461a      	mov	r2, r3
 800677e:	68b9      	ldr	r1, [r7, #8]
 8006780:	f001 fff0 	bl	8008764 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678c:	441a      	add	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	429a      	cmp	r2, r3
 800679c:	d32b      	bcc.n	80067f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	605a      	str	r2, [r3, #4]
 80067a6:	e026      	b.n	80067f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	68d8      	ldr	r0, [r3, #12]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b0:	461a      	mov	r2, r3
 80067b2:	68b9      	ldr	r1, [r7, #8]
 80067b4:	f001 ffd6 	bl	8008764 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	68da      	ldr	r2, [r3, #12]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c0:	425b      	negs	r3, r3
 80067c2:	441a      	add	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d207      	bcs.n	80067e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067dc:	425b      	negs	r3, r3
 80067de:	441a      	add	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d105      	bne.n	80067f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80067fe:	697b      	ldr	r3, [r7, #20]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3718      	adds	r7, #24
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	2b00      	cmp	r3, #0
 8006818:	d018      	beq.n	800684c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68da      	ldr	r2, [r3, #12]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006822:	441a      	add	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68da      	ldr	r2, [r3, #12]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	429a      	cmp	r2, r3
 8006832:	d303      	bcc.n	800683c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68d9      	ldr	r1, [r3, #12]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006844:	461a      	mov	r2, r3
 8006846:	6838      	ldr	r0, [r7, #0]
 8006848:	f001 ff8c 	bl	8008764 <memcpy>
	}
}
 800684c:	bf00      	nop
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800685c:	f001 fc52 	bl	8008104 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006866:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006868:	e011      	b.n	800688e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	2b00      	cmp	r3, #0
 8006870:	d012      	beq.n	8006898 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	3324      	adds	r3, #36	; 0x24
 8006876:	4618      	mov	r0, r3
 8006878:	f000 fd2a 	bl	80072d0 <xTaskRemoveFromEventList>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006882:	f000 fe01 	bl	8007488 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006886:	7bfb      	ldrb	r3, [r7, #15]
 8006888:	3b01      	subs	r3, #1
 800688a:	b2db      	uxtb	r3, r3
 800688c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800688e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006892:	2b00      	cmp	r3, #0
 8006894:	dce9      	bgt.n	800686a <prvUnlockQueue+0x16>
 8006896:	e000      	b.n	800689a <prvUnlockQueue+0x46>
					break;
 8006898:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	22ff      	movs	r2, #255	; 0xff
 800689e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80068a2:	f001 fc5f 	bl	8008164 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068a6:	f001 fc2d 	bl	8008104 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068b2:	e011      	b.n	80068d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d012      	beq.n	80068e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	3310      	adds	r3, #16
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 fd05 	bl	80072d0 <xTaskRemoveFromEventList>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80068cc:	f000 fddc 	bl	8007488 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068d0:	7bbb      	ldrb	r3, [r7, #14]
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	dce9      	bgt.n	80068b4 <prvUnlockQueue+0x60>
 80068e0:	e000      	b.n	80068e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	22ff      	movs	r2, #255	; 0xff
 80068e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80068ec:	f001 fc3a 	bl	8008164 <vPortExitCritical>
}
 80068f0:	bf00      	nop
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006900:	f001 fc00 	bl	8008104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006908:	2b00      	cmp	r3, #0
 800690a:	d102      	bne.n	8006912 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800690c:	2301      	movs	r3, #1
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	e001      	b.n	8006916 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006916:	f001 fc25 	bl	8008164 <vPortExitCritical>

	return xReturn;
 800691a:	68fb      	ldr	r3, [r7, #12]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800692c:	f001 fbea 	bl	8008104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006938:	429a      	cmp	r2, r3
 800693a:	d102      	bne.n	8006942 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800693c:	2301      	movs	r3, #1
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	e001      	b.n	8006946 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006942:	2300      	movs	r3, #0
 8006944:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006946:	f001 fc0d 	bl	8008164 <vPortExitCritical>

	return xReturn;
 800694a:	68fb      	ldr	r3, [r7, #12]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800695e:	2300      	movs	r3, #0
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	e014      	b.n	800698e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006964:	4a0f      	ldr	r2, [pc, #60]	; (80069a4 <vQueueAddToRegistry+0x50>)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10b      	bne.n	8006988 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006970:	490c      	ldr	r1, [pc, #48]	; (80069a4 <vQueueAddToRegistry+0x50>)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800697a:	4a0a      	ldr	r2, [pc, #40]	; (80069a4 <vQueueAddToRegistry+0x50>)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	4413      	add	r3, r2
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006986:	e006      	b.n	8006996 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3301      	adds	r3, #1
 800698c:	60fb      	str	r3, [r7, #12]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2b07      	cmp	r3, #7
 8006992:	d9e7      	bls.n	8006964 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006994:	bf00      	nop
 8006996:	bf00      	nop
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	20001ae0 	.word	0x20001ae0

080069a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80069b8:	f001 fba4 	bl	8008104 <vPortEnterCritical>
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069c2:	b25b      	sxtb	r3, r3
 80069c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c8:	d103      	bne.n	80069d2 <vQueueWaitForMessageRestricted+0x2a>
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069d8:	b25b      	sxtb	r3, r3
 80069da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069de:	d103      	bne.n	80069e8 <vQueueWaitForMessageRestricted+0x40>
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069e8:	f001 fbbc 	bl	8008164 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d106      	bne.n	8006a02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	3324      	adds	r3, #36	; 0x24
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	68b9      	ldr	r1, [r7, #8]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f000 fc3b 	bl	8007278 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a02:	6978      	ldr	r0, [r7, #20]
 8006a04:	f7ff ff26 	bl	8006854 <prvUnlockQueue>
	}
 8006a08:	bf00      	nop
 8006a0a:	3718      	adds	r7, #24
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08e      	sub	sp, #56	; 0x38
 8006a14:	af04      	add	r7, sp, #16
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
 8006a1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10a      	bne.n	8006a3a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	623b      	str	r3, [r7, #32]
}
 8006a36:	bf00      	nop
 8006a38:	e7fe      	b.n	8006a38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10a      	bne.n	8006a56 <xTaskCreateStatic+0x46>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	61fb      	str	r3, [r7, #28]
}
 8006a52:	bf00      	nop
 8006a54:	e7fe      	b.n	8006a54 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a56:	235c      	movs	r3, #92	; 0x5c
 8006a58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	2b5c      	cmp	r3, #92	; 0x5c
 8006a5e:	d00a      	beq.n	8006a76 <xTaskCreateStatic+0x66>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	61bb      	str	r3, [r7, #24]
}
 8006a72:	bf00      	nop
 8006a74:	e7fe      	b.n	8006a74 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d01e      	beq.n	8006abc <xTaskCreateStatic+0xac>
 8006a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d01b      	beq.n	8006abc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	2202      	movs	r2, #2
 8006a92:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a96:	2300      	movs	r3, #0
 8006a98:	9303      	str	r3, [sp, #12]
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	9302      	str	r3, [sp, #8]
 8006a9e:	f107 0314 	add.w	r3, r7, #20
 8006aa2:	9301      	str	r3, [sp, #4]
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	68b9      	ldr	r1, [r7, #8]
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 f850 	bl	8006b54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ab6:	f000 f8dd 	bl	8006c74 <prvAddNewTaskToReadyList>
 8006aba:	e001      	b.n	8006ac0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006abc:	2300      	movs	r3, #0
 8006abe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ac0:	697b      	ldr	r3, [r7, #20]
	}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3728      	adds	r7, #40	; 0x28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b08c      	sub	sp, #48	; 0x30
 8006ace:	af04      	add	r7, sp, #16
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	603b      	str	r3, [r7, #0]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ada:	88fb      	ldrh	r3, [r7, #6]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f001 fc32 	bl	8008348 <pvPortMalloc>
 8006ae4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00e      	beq.n	8006b0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006aec:	205c      	movs	r0, #92	; 0x5c
 8006aee:	f001 fc2b 	bl	8008348 <pvPortMalloc>
 8006af2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	631a      	str	r2, [r3, #48]	; 0x30
 8006b00:	e005      	b.n	8006b0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b02:	6978      	ldr	r0, [r7, #20]
 8006b04:	f001 fcec 	bl	80084e0 <vPortFree>
 8006b08:	e001      	b.n	8006b0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d017      	beq.n	8006b44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b1c:	88fa      	ldrh	r2, [r7, #6]
 8006b1e:	2300      	movs	r3, #0
 8006b20:	9303      	str	r3, [sp, #12]
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	9302      	str	r3, [sp, #8]
 8006b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b28:	9301      	str	r3, [sp, #4]
 8006b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	68b9      	ldr	r1, [r7, #8]
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f000 f80e 	bl	8006b54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b38:	69f8      	ldr	r0, [r7, #28]
 8006b3a:	f000 f89b 	bl	8006c74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	61bb      	str	r3, [r7, #24]
 8006b42:	e002      	b.n	8006b4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b44:	f04f 33ff 	mov.w	r3, #4294967295
 8006b48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b4a:	69bb      	ldr	r3, [r7, #24]
	}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3720      	adds	r7, #32
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b088      	sub	sp, #32
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
 8006b60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	21a5      	movs	r1, #165	; 0xa5
 8006b6e:	f001 fe07 	bl	8008780 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	f023 0307 	bic.w	r3, r3, #7
 8006b8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	f003 0307 	and.w	r3, r3, #7
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00a      	beq.n	8006bac <prvInitialiseNewTask+0x58>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	617b      	str	r3, [r7, #20]
}
 8006ba8:	bf00      	nop
 8006baa:	e7fe      	b.n	8006baa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d01f      	beq.n	8006bf2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	61fb      	str	r3, [r7, #28]
 8006bb6:	e012      	b.n	8006bde <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	7819      	ldrb	r1, [r3, #0]
 8006bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	3334      	adds	r3, #52	; 0x34
 8006bc8:	460a      	mov	r2, r1
 8006bca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d006      	beq.n	8006be6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	61fb      	str	r3, [r7, #28]
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	2b0f      	cmp	r3, #15
 8006be2:	d9e9      	bls.n	8006bb8 <prvInitialiseNewTask+0x64>
 8006be4:	e000      	b.n	8006be8 <prvInitialiseNewTask+0x94>
			{
				break;
 8006be6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bf0:	e003      	b.n	8006bfa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfc:	2b37      	cmp	r3, #55	; 0x37
 8006bfe:	d901      	bls.n	8006c04 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c00:	2337      	movs	r3, #55	; 0x37
 8006c02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c0e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	2200      	movs	r2, #0
 8006c14:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	3304      	adds	r3, #4
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7ff f882 	bl	8005d24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c22:	3318      	adds	r3, #24
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff f87d 	bl	8005d24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c42:	2200      	movs	r2, #0
 8006c44:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	68f9      	ldr	r1, [r7, #12]
 8006c52:	69b8      	ldr	r0, [r7, #24]
 8006c54:	f001 f928 	bl	8007ea8 <pxPortInitialiseStack>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d002      	beq.n	8006c6a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c6a:	bf00      	nop
 8006c6c:	3720      	adds	r7, #32
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
	...

08006c74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c7c:	f001 fa42 	bl	8008104 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c80:	4b2d      	ldr	r3, [pc, #180]	; (8006d38 <prvAddNewTaskToReadyList+0xc4>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3301      	adds	r3, #1
 8006c86:	4a2c      	ldr	r2, [pc, #176]	; (8006d38 <prvAddNewTaskToReadyList+0xc4>)
 8006c88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c8a:	4b2c      	ldr	r3, [pc, #176]	; (8006d3c <prvAddNewTaskToReadyList+0xc8>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d109      	bne.n	8006ca6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c92:	4a2a      	ldr	r2, [pc, #168]	; (8006d3c <prvAddNewTaskToReadyList+0xc8>)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c98:	4b27      	ldr	r3, [pc, #156]	; (8006d38 <prvAddNewTaskToReadyList+0xc4>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d110      	bne.n	8006cc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ca0:	f000 fc16 	bl	80074d0 <prvInitialiseTaskLists>
 8006ca4:	e00d      	b.n	8006cc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ca6:	4b26      	ldr	r3, [pc, #152]	; (8006d40 <prvAddNewTaskToReadyList+0xcc>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d109      	bne.n	8006cc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cae:	4b23      	ldr	r3, [pc, #140]	; (8006d3c <prvAddNewTaskToReadyList+0xc8>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d802      	bhi.n	8006cc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cbc:	4a1f      	ldr	r2, [pc, #124]	; (8006d3c <prvAddNewTaskToReadyList+0xc8>)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cc2:	4b20      	ldr	r3, [pc, #128]	; (8006d44 <prvAddNewTaskToReadyList+0xd0>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	4a1e      	ldr	r2, [pc, #120]	; (8006d44 <prvAddNewTaskToReadyList+0xd0>)
 8006cca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ccc:	4b1d      	ldr	r3, [pc, #116]	; (8006d44 <prvAddNewTaskToReadyList+0xd0>)
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd8:	4b1b      	ldr	r3, [pc, #108]	; (8006d48 <prvAddNewTaskToReadyList+0xd4>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d903      	bls.n	8006ce8 <prvAddNewTaskToReadyList+0x74>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	4a18      	ldr	r2, [pc, #96]	; (8006d48 <prvAddNewTaskToReadyList+0xd4>)
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cec:	4613      	mov	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4a15      	ldr	r2, [pc, #84]	; (8006d4c <prvAddNewTaskToReadyList+0xd8>)
 8006cf6:	441a      	add	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	4610      	mov	r0, r2
 8006d00:	f7ff f81d 	bl	8005d3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d04:	f001 fa2e 	bl	8008164 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d08:	4b0d      	ldr	r3, [pc, #52]	; (8006d40 <prvAddNewTaskToReadyList+0xcc>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00e      	beq.n	8006d2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d10:	4b0a      	ldr	r3, [pc, #40]	; (8006d3c <prvAddNewTaskToReadyList+0xc8>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d207      	bcs.n	8006d2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d1e:	4b0c      	ldr	r3, [pc, #48]	; (8006d50 <prvAddNewTaskToReadyList+0xdc>)
 8006d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d2e:	bf00      	nop
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20000bc0 	.word	0x20000bc0
 8006d3c:	200006ec 	.word	0x200006ec
 8006d40:	20000bcc 	.word	0x20000bcc
 8006d44:	20000bdc 	.word	0x20000bdc
 8006d48:	20000bc8 	.word	0x20000bc8
 8006d4c:	200006f0 	.word	0x200006f0
 8006d50:	e000ed04 	.word	0xe000ed04

08006d54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d017      	beq.n	8006d96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d66:	4b13      	ldr	r3, [pc, #76]	; (8006db4 <vTaskDelay+0x60>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00a      	beq.n	8006d84 <vTaskDelay+0x30>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	60bb      	str	r3, [r7, #8]
}
 8006d80:	bf00      	nop
 8006d82:	e7fe      	b.n	8006d82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d84:	f000 f880 	bl	8006e88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d88:	2100      	movs	r1, #0
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fcea 	bl	8007764 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d90:	f000 f888 	bl	8006ea4 <xTaskResumeAll>
 8006d94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d107      	bne.n	8006dac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d9c:	4b06      	ldr	r3, [pc, #24]	; (8006db8 <vTaskDelay+0x64>)
 8006d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006dac:	bf00      	nop
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	20000be8 	.word	0x20000be8
 8006db8:	e000ed04 	.word	0xe000ed04

08006dbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b08a      	sub	sp, #40	; 0x28
 8006dc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006dca:	463a      	mov	r2, r7
 8006dcc:	1d39      	adds	r1, r7, #4
 8006dce:	f107 0308 	add.w	r3, r7, #8
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fe ff52 	bl	8005c7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	9202      	str	r2, [sp, #8]
 8006de0:	9301      	str	r3, [sp, #4]
 8006de2:	2300      	movs	r3, #0
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	2300      	movs	r3, #0
 8006de8:	460a      	mov	r2, r1
 8006dea:	4921      	ldr	r1, [pc, #132]	; (8006e70 <vTaskStartScheduler+0xb4>)
 8006dec:	4821      	ldr	r0, [pc, #132]	; (8006e74 <vTaskStartScheduler+0xb8>)
 8006dee:	f7ff fe0f 	bl	8006a10 <xTaskCreateStatic>
 8006df2:	4603      	mov	r3, r0
 8006df4:	4a20      	ldr	r2, [pc, #128]	; (8006e78 <vTaskStartScheduler+0xbc>)
 8006df6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006df8:	4b1f      	ldr	r3, [pc, #124]	; (8006e78 <vTaskStartScheduler+0xbc>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e00:	2301      	movs	r3, #1
 8006e02:	617b      	str	r3, [r7, #20]
 8006e04:	e001      	b.n	8006e0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e06:	2300      	movs	r3, #0
 8006e08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d102      	bne.n	8006e16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e10:	f000 fcfc 	bl	800780c <xTimerCreateTimerTask>
 8006e14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d116      	bne.n	8006e4a <vTaskStartScheduler+0x8e>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	613b      	str	r3, [r7, #16]
}
 8006e2e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e30:	4b12      	ldr	r3, [pc, #72]	; (8006e7c <vTaskStartScheduler+0xc0>)
 8006e32:	f04f 32ff 	mov.w	r2, #4294967295
 8006e36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e38:	4b11      	ldr	r3, [pc, #68]	; (8006e80 <vTaskStartScheduler+0xc4>)
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e3e:	4b11      	ldr	r3, [pc, #68]	; (8006e84 <vTaskStartScheduler+0xc8>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e44:	f001 f8bc 	bl	8007fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e48:	e00e      	b.n	8006e68 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e50:	d10a      	bne.n	8006e68 <vTaskStartScheduler+0xac>
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	60fb      	str	r3, [r7, #12]
}
 8006e64:	bf00      	nop
 8006e66:	e7fe      	b.n	8006e66 <vTaskStartScheduler+0xaa>
}
 8006e68:	bf00      	nop
 8006e6a:	3718      	adds	r7, #24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	0800881c 	.word	0x0800881c
 8006e74:	080074a1 	.word	0x080074a1
 8006e78:	20000be4 	.word	0x20000be4
 8006e7c:	20000be0 	.word	0x20000be0
 8006e80:	20000bcc 	.word	0x20000bcc
 8006e84:	20000bc4 	.word	0x20000bc4

08006e88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e88:	b480      	push	{r7}
 8006e8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e8c:	4b04      	ldr	r3, [pc, #16]	; (8006ea0 <vTaskSuspendAll+0x18>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3301      	adds	r3, #1
 8006e92:	4a03      	ldr	r2, [pc, #12]	; (8006ea0 <vTaskSuspendAll+0x18>)
 8006e94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e96:	bf00      	nop
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	20000be8 	.word	0x20000be8

08006ea4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006eb2:	4b42      	ldr	r3, [pc, #264]	; (8006fbc <xTaskResumeAll+0x118>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10a      	bne.n	8006ed0 <xTaskResumeAll+0x2c>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	603b      	str	r3, [r7, #0]
}
 8006ecc:	bf00      	nop
 8006ece:	e7fe      	b.n	8006ece <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ed0:	f001 f918 	bl	8008104 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ed4:	4b39      	ldr	r3, [pc, #228]	; (8006fbc <xTaskResumeAll+0x118>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	4a38      	ldr	r2, [pc, #224]	; (8006fbc <xTaskResumeAll+0x118>)
 8006edc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ede:	4b37      	ldr	r3, [pc, #220]	; (8006fbc <xTaskResumeAll+0x118>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d162      	bne.n	8006fac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ee6:	4b36      	ldr	r3, [pc, #216]	; (8006fc0 <xTaskResumeAll+0x11c>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d05e      	beq.n	8006fac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006eee:	e02f      	b.n	8006f50 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ef0:	4b34      	ldr	r3, [pc, #208]	; (8006fc4 <xTaskResumeAll+0x120>)
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	3318      	adds	r3, #24
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fe ff7b 	bl	8005df8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3304      	adds	r3, #4
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fe ff76 	bl	8005df8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f10:	4b2d      	ldr	r3, [pc, #180]	; (8006fc8 <xTaskResumeAll+0x124>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d903      	bls.n	8006f20 <xTaskResumeAll+0x7c>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1c:	4a2a      	ldr	r2, [pc, #168]	; (8006fc8 <xTaskResumeAll+0x124>)
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4a27      	ldr	r2, [pc, #156]	; (8006fcc <xTaskResumeAll+0x128>)
 8006f2e:	441a      	add	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3304      	adds	r3, #4
 8006f34:	4619      	mov	r1, r3
 8006f36:	4610      	mov	r0, r2
 8006f38:	f7fe ff01 	bl	8005d3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f40:	4b23      	ldr	r3, [pc, #140]	; (8006fd0 <xTaskResumeAll+0x12c>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d302      	bcc.n	8006f50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f4a:	4b22      	ldr	r3, [pc, #136]	; (8006fd4 <xTaskResumeAll+0x130>)
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f50:	4b1c      	ldr	r3, [pc, #112]	; (8006fc4 <xTaskResumeAll+0x120>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1cb      	bne.n	8006ef0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f5e:	f000 fb55 	bl	800760c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f62:	4b1d      	ldr	r3, [pc, #116]	; (8006fd8 <xTaskResumeAll+0x134>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d010      	beq.n	8006f90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f6e:	f000 f847 	bl	8007000 <xTaskIncrementTick>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d002      	beq.n	8006f7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f78:	4b16      	ldr	r3, [pc, #88]	; (8006fd4 <xTaskResumeAll+0x130>)
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	3b01      	subs	r3, #1
 8006f82:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1f1      	bne.n	8006f6e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006f8a:	4b13      	ldr	r3, [pc, #76]	; (8006fd8 <xTaskResumeAll+0x134>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f90:	4b10      	ldr	r3, [pc, #64]	; (8006fd4 <xTaskResumeAll+0x130>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d009      	beq.n	8006fac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f9c:	4b0f      	ldr	r3, [pc, #60]	; (8006fdc <xTaskResumeAll+0x138>)
 8006f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fac:	f001 f8da 	bl	8008164 <vPortExitCritical>

	return xAlreadyYielded;
 8006fb0:	68bb      	ldr	r3, [r7, #8]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	20000be8 	.word	0x20000be8
 8006fc0:	20000bc0 	.word	0x20000bc0
 8006fc4:	20000b80 	.word	0x20000b80
 8006fc8:	20000bc8 	.word	0x20000bc8
 8006fcc:	200006f0 	.word	0x200006f0
 8006fd0:	200006ec 	.word	0x200006ec
 8006fd4:	20000bd4 	.word	0x20000bd4
 8006fd8:	20000bd0 	.word	0x20000bd0
 8006fdc:	e000ed04 	.word	0xe000ed04

08006fe0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006fe6:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <xTaskGetTickCount+0x1c>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006fec:	687b      	ldr	r3, [r7, #4]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	20000bc4 	.word	0x20000bc4

08007000 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007006:	2300      	movs	r3, #0
 8007008:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800700a:	4b4f      	ldr	r3, [pc, #316]	; (8007148 <xTaskIncrementTick+0x148>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	f040 808f 	bne.w	8007132 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007014:	4b4d      	ldr	r3, [pc, #308]	; (800714c <xTaskIncrementTick+0x14c>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	3301      	adds	r3, #1
 800701a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800701c:	4a4b      	ldr	r2, [pc, #300]	; (800714c <xTaskIncrementTick+0x14c>)
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d120      	bne.n	800706a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007028:	4b49      	ldr	r3, [pc, #292]	; (8007150 <xTaskIncrementTick+0x150>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <xTaskIncrementTick+0x48>
	__asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	603b      	str	r3, [r7, #0]
}
 8007044:	bf00      	nop
 8007046:	e7fe      	b.n	8007046 <xTaskIncrementTick+0x46>
 8007048:	4b41      	ldr	r3, [pc, #260]	; (8007150 <xTaskIncrementTick+0x150>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	60fb      	str	r3, [r7, #12]
 800704e:	4b41      	ldr	r3, [pc, #260]	; (8007154 <xTaskIncrementTick+0x154>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a3f      	ldr	r2, [pc, #252]	; (8007150 <xTaskIncrementTick+0x150>)
 8007054:	6013      	str	r3, [r2, #0]
 8007056:	4a3f      	ldr	r2, [pc, #252]	; (8007154 <xTaskIncrementTick+0x154>)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	4b3e      	ldr	r3, [pc, #248]	; (8007158 <xTaskIncrementTick+0x158>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3301      	adds	r3, #1
 8007062:	4a3d      	ldr	r2, [pc, #244]	; (8007158 <xTaskIncrementTick+0x158>)
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	f000 fad1 	bl	800760c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800706a:	4b3c      	ldr	r3, [pc, #240]	; (800715c <xTaskIncrementTick+0x15c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	429a      	cmp	r2, r3
 8007072:	d349      	bcc.n	8007108 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007074:	4b36      	ldr	r3, [pc, #216]	; (8007150 <xTaskIncrementTick+0x150>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d104      	bne.n	8007088 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800707e:	4b37      	ldr	r3, [pc, #220]	; (800715c <xTaskIncrementTick+0x15c>)
 8007080:	f04f 32ff 	mov.w	r2, #4294967295
 8007084:	601a      	str	r2, [r3, #0]
					break;
 8007086:	e03f      	b.n	8007108 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007088:	4b31      	ldr	r3, [pc, #196]	; (8007150 <xTaskIncrementTick+0x150>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	429a      	cmp	r2, r3
 800709e:	d203      	bcs.n	80070a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070a0:	4a2e      	ldr	r2, [pc, #184]	; (800715c <xTaskIncrementTick+0x15c>)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070a6:	e02f      	b.n	8007108 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	3304      	adds	r3, #4
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fe fea3 	bl	8005df8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d004      	beq.n	80070c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	3318      	adds	r3, #24
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fe fe9a 	bl	8005df8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c8:	4b25      	ldr	r3, [pc, #148]	; (8007160 <xTaskIncrementTick+0x160>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d903      	bls.n	80070d8 <xTaskIncrementTick+0xd8>
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d4:	4a22      	ldr	r2, [pc, #136]	; (8007160 <xTaskIncrementTick+0x160>)
 80070d6:	6013      	str	r3, [r2, #0]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070dc:	4613      	mov	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4a1f      	ldr	r2, [pc, #124]	; (8007164 <xTaskIncrementTick+0x164>)
 80070e6:	441a      	add	r2, r3
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	3304      	adds	r3, #4
 80070ec:	4619      	mov	r1, r3
 80070ee:	4610      	mov	r0, r2
 80070f0:	f7fe fe25 	bl	8005d3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f8:	4b1b      	ldr	r3, [pc, #108]	; (8007168 <xTaskIncrementTick+0x168>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fe:	429a      	cmp	r2, r3
 8007100:	d3b8      	bcc.n	8007074 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007102:	2301      	movs	r3, #1
 8007104:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007106:	e7b5      	b.n	8007074 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007108:	4b17      	ldr	r3, [pc, #92]	; (8007168 <xTaskIncrementTick+0x168>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800710e:	4915      	ldr	r1, [pc, #84]	; (8007164 <xTaskIncrementTick+0x164>)
 8007110:	4613      	mov	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	440b      	add	r3, r1
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d901      	bls.n	8007124 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007120:	2301      	movs	r3, #1
 8007122:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007124:	4b11      	ldr	r3, [pc, #68]	; (800716c <xTaskIncrementTick+0x16c>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d007      	beq.n	800713c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800712c:	2301      	movs	r3, #1
 800712e:	617b      	str	r3, [r7, #20]
 8007130:	e004      	b.n	800713c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007132:	4b0f      	ldr	r3, [pc, #60]	; (8007170 <xTaskIncrementTick+0x170>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3301      	adds	r3, #1
 8007138:	4a0d      	ldr	r2, [pc, #52]	; (8007170 <xTaskIncrementTick+0x170>)
 800713a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800713c:	697b      	ldr	r3, [r7, #20]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	20000be8 	.word	0x20000be8
 800714c:	20000bc4 	.word	0x20000bc4
 8007150:	20000b78 	.word	0x20000b78
 8007154:	20000b7c 	.word	0x20000b7c
 8007158:	20000bd8 	.word	0x20000bd8
 800715c:	20000be0 	.word	0x20000be0
 8007160:	20000bc8 	.word	0x20000bc8
 8007164:	200006f0 	.word	0x200006f0
 8007168:	200006ec 	.word	0x200006ec
 800716c:	20000bd4 	.word	0x20000bd4
 8007170:	20000bd0 	.word	0x20000bd0

08007174 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800717a:	4b28      	ldr	r3, [pc, #160]	; (800721c <vTaskSwitchContext+0xa8>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d003      	beq.n	800718a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007182:	4b27      	ldr	r3, [pc, #156]	; (8007220 <vTaskSwitchContext+0xac>)
 8007184:	2201      	movs	r2, #1
 8007186:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007188:	e041      	b.n	800720e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800718a:	4b25      	ldr	r3, [pc, #148]	; (8007220 <vTaskSwitchContext+0xac>)
 800718c:	2200      	movs	r2, #0
 800718e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007190:	4b24      	ldr	r3, [pc, #144]	; (8007224 <vTaskSwitchContext+0xb0>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	60fb      	str	r3, [r7, #12]
 8007196:	e010      	b.n	80071ba <vTaskSwitchContext+0x46>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10a      	bne.n	80071b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	607b      	str	r3, [r7, #4]
}
 80071b0:	bf00      	nop
 80071b2:	e7fe      	b.n	80071b2 <vTaskSwitchContext+0x3e>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	3b01      	subs	r3, #1
 80071b8:	60fb      	str	r3, [r7, #12]
 80071ba:	491b      	ldr	r1, [pc, #108]	; (8007228 <vTaskSwitchContext+0xb4>)
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	4613      	mov	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	440b      	add	r3, r1
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d0e4      	beq.n	8007198 <vTaskSwitchContext+0x24>
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	4613      	mov	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4a13      	ldr	r2, [pc, #76]	; (8007228 <vTaskSwitchContext+0xb4>)
 80071da:	4413      	add	r3, r2
 80071dc:	60bb      	str	r3, [r7, #8]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	605a      	str	r2, [r3, #4]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	3308      	adds	r3, #8
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d104      	bne.n	80071fe <vTaskSwitchContext+0x8a>
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	605a      	str	r2, [r3, #4]
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	4a09      	ldr	r2, [pc, #36]	; (800722c <vTaskSwitchContext+0xb8>)
 8007206:	6013      	str	r3, [r2, #0]
 8007208:	4a06      	ldr	r2, [pc, #24]	; (8007224 <vTaskSwitchContext+0xb0>)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6013      	str	r3, [r2, #0]
}
 800720e:	bf00      	nop
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	20000be8 	.word	0x20000be8
 8007220:	20000bd4 	.word	0x20000bd4
 8007224:	20000bc8 	.word	0x20000bc8
 8007228:	200006f0 	.word	0x200006f0
 800722c:	200006ec 	.word	0x200006ec

08007230 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10a      	bne.n	8007256 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	60fb      	str	r3, [r7, #12]
}
 8007252:	bf00      	nop
 8007254:	e7fe      	b.n	8007254 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007256:	4b07      	ldr	r3, [pc, #28]	; (8007274 <vTaskPlaceOnEventList+0x44>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3318      	adds	r3, #24
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7fe fd91 	bl	8005d86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007264:	2101      	movs	r1, #1
 8007266:	6838      	ldr	r0, [r7, #0]
 8007268:	f000 fa7c 	bl	8007764 <prvAddCurrentTaskToDelayedList>
}
 800726c:	bf00      	nop
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	200006ec 	.word	0x200006ec

08007278 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10a      	bne.n	80072a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	617b      	str	r3, [r7, #20]
}
 800729c:	bf00      	nop
 800729e:	e7fe      	b.n	800729e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072a0:	4b0a      	ldr	r3, [pc, #40]	; (80072cc <vTaskPlaceOnEventListRestricted+0x54>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3318      	adds	r3, #24
 80072a6:	4619      	mov	r1, r3
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f7fe fd48 	bl	8005d3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d002      	beq.n	80072ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80072b4:	f04f 33ff 	mov.w	r3, #4294967295
 80072b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072ba:	6879      	ldr	r1, [r7, #4]
 80072bc:	68b8      	ldr	r0, [r7, #8]
 80072be:	f000 fa51 	bl	8007764 <prvAddCurrentTaskToDelayedList>
	}
 80072c2:	bf00      	nop
 80072c4:	3718      	adds	r7, #24
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	200006ec 	.word	0x200006ec

080072d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10a      	bne.n	80072fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80072e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ea:	f383 8811 	msr	BASEPRI, r3
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	f3bf 8f4f 	dsb	sy
 80072f6:	60fb      	str	r3, [r7, #12]
}
 80072f8:	bf00      	nop
 80072fa:	e7fe      	b.n	80072fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	3318      	adds	r3, #24
 8007300:	4618      	mov	r0, r3
 8007302:	f7fe fd79 	bl	8005df8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007306:	4b1e      	ldr	r3, [pc, #120]	; (8007380 <xTaskRemoveFromEventList+0xb0>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d11d      	bne.n	800734a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	3304      	adds	r3, #4
 8007312:	4618      	mov	r0, r3
 8007314:	f7fe fd70 	bl	8005df8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731c:	4b19      	ldr	r3, [pc, #100]	; (8007384 <xTaskRemoveFromEventList+0xb4>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d903      	bls.n	800732c <xTaskRemoveFromEventList+0x5c>
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007328:	4a16      	ldr	r2, [pc, #88]	; (8007384 <xTaskRemoveFromEventList+0xb4>)
 800732a:	6013      	str	r3, [r2, #0]
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007330:	4613      	mov	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4a13      	ldr	r2, [pc, #76]	; (8007388 <xTaskRemoveFromEventList+0xb8>)
 800733a:	441a      	add	r2, r3
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	3304      	adds	r3, #4
 8007340:	4619      	mov	r1, r3
 8007342:	4610      	mov	r0, r2
 8007344:	f7fe fcfb 	bl	8005d3e <vListInsertEnd>
 8007348:	e005      	b.n	8007356 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	3318      	adds	r3, #24
 800734e:	4619      	mov	r1, r3
 8007350:	480e      	ldr	r0, [pc, #56]	; (800738c <xTaskRemoveFromEventList+0xbc>)
 8007352:	f7fe fcf4 	bl	8005d3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735a:	4b0d      	ldr	r3, [pc, #52]	; (8007390 <xTaskRemoveFromEventList+0xc0>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007360:	429a      	cmp	r2, r3
 8007362:	d905      	bls.n	8007370 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007364:	2301      	movs	r3, #1
 8007366:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007368:	4b0a      	ldr	r3, [pc, #40]	; (8007394 <xTaskRemoveFromEventList+0xc4>)
 800736a:	2201      	movs	r2, #1
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	e001      	b.n	8007374 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007370:	2300      	movs	r3, #0
 8007372:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007374:	697b      	ldr	r3, [r7, #20]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3718      	adds	r7, #24
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	20000be8 	.word	0x20000be8
 8007384:	20000bc8 	.word	0x20000bc8
 8007388:	200006f0 	.word	0x200006f0
 800738c:	20000b80 	.word	0x20000b80
 8007390:	200006ec 	.word	0x200006ec
 8007394:	20000bd4 	.word	0x20000bd4

08007398 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073a0:	4b06      	ldr	r3, [pc, #24]	; (80073bc <vTaskInternalSetTimeOutState+0x24>)
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073a8:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <vTaskInternalSetTimeOutState+0x28>)
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	605a      	str	r2, [r3, #4]
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	20000bd8 	.word	0x20000bd8
 80073c0:	20000bc4 	.word	0x20000bc4

080073c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b088      	sub	sp, #32
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10a      	bne.n	80073ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	613b      	str	r3, [r7, #16]
}
 80073e6:	bf00      	nop
 80073e8:	e7fe      	b.n	80073e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10a      	bne.n	8007406 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80073f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	60fb      	str	r3, [r7, #12]
}
 8007402:	bf00      	nop
 8007404:	e7fe      	b.n	8007404 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007406:	f000 fe7d 	bl	8008104 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800740a:	4b1d      	ldr	r3, [pc, #116]	; (8007480 <xTaskCheckForTimeOut+0xbc>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007422:	d102      	bne.n	800742a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007424:	2300      	movs	r3, #0
 8007426:	61fb      	str	r3, [r7, #28]
 8007428:	e023      	b.n	8007472 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	4b15      	ldr	r3, [pc, #84]	; (8007484 <xTaskCheckForTimeOut+0xc0>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	429a      	cmp	r2, r3
 8007434:	d007      	beq.n	8007446 <xTaskCheckForTimeOut+0x82>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	69ba      	ldr	r2, [r7, #24]
 800743c:	429a      	cmp	r2, r3
 800743e:	d302      	bcc.n	8007446 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007440:	2301      	movs	r3, #1
 8007442:	61fb      	str	r3, [r7, #28]
 8007444:	e015      	b.n	8007472 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	429a      	cmp	r2, r3
 800744e:	d20b      	bcs.n	8007468 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	1ad2      	subs	r2, r2, r3
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7ff ff9b 	bl	8007398 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007462:	2300      	movs	r3, #0
 8007464:	61fb      	str	r3, [r7, #28]
 8007466:	e004      	b.n	8007472 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	2200      	movs	r2, #0
 800746c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800746e:	2301      	movs	r3, #1
 8007470:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007472:	f000 fe77 	bl	8008164 <vPortExitCritical>

	return xReturn;
 8007476:	69fb      	ldr	r3, [r7, #28]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3720      	adds	r7, #32
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	20000bc4 	.word	0x20000bc4
 8007484:	20000bd8 	.word	0x20000bd8

08007488 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007488:	b480      	push	{r7}
 800748a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800748c:	4b03      	ldr	r3, [pc, #12]	; (800749c <vTaskMissedYield+0x14>)
 800748e:	2201      	movs	r2, #1
 8007490:	601a      	str	r2, [r3, #0]
}
 8007492:	bf00      	nop
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	20000bd4 	.word	0x20000bd4

080074a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074a8:	f000 f852 	bl	8007550 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074ac:	4b06      	ldr	r3, [pc, #24]	; (80074c8 <prvIdleTask+0x28>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d9f9      	bls.n	80074a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074b4:	4b05      	ldr	r3, [pc, #20]	; (80074cc <prvIdleTask+0x2c>)
 80074b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ba:	601a      	str	r2, [r3, #0]
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074c4:	e7f0      	b.n	80074a8 <prvIdleTask+0x8>
 80074c6:	bf00      	nop
 80074c8:	200006f0 	.word	0x200006f0
 80074cc:	e000ed04 	.word	0xe000ed04

080074d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074d6:	2300      	movs	r3, #0
 80074d8:	607b      	str	r3, [r7, #4]
 80074da:	e00c      	b.n	80074f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	4613      	mov	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4a12      	ldr	r2, [pc, #72]	; (8007530 <prvInitialiseTaskLists+0x60>)
 80074e8:	4413      	add	r3, r2
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fe fbfa 	bl	8005ce4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3301      	adds	r3, #1
 80074f4:	607b      	str	r3, [r7, #4]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b37      	cmp	r3, #55	; 0x37
 80074fa:	d9ef      	bls.n	80074dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80074fc:	480d      	ldr	r0, [pc, #52]	; (8007534 <prvInitialiseTaskLists+0x64>)
 80074fe:	f7fe fbf1 	bl	8005ce4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007502:	480d      	ldr	r0, [pc, #52]	; (8007538 <prvInitialiseTaskLists+0x68>)
 8007504:	f7fe fbee 	bl	8005ce4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007508:	480c      	ldr	r0, [pc, #48]	; (800753c <prvInitialiseTaskLists+0x6c>)
 800750a:	f7fe fbeb 	bl	8005ce4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800750e:	480c      	ldr	r0, [pc, #48]	; (8007540 <prvInitialiseTaskLists+0x70>)
 8007510:	f7fe fbe8 	bl	8005ce4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007514:	480b      	ldr	r0, [pc, #44]	; (8007544 <prvInitialiseTaskLists+0x74>)
 8007516:	f7fe fbe5 	bl	8005ce4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800751a:	4b0b      	ldr	r3, [pc, #44]	; (8007548 <prvInitialiseTaskLists+0x78>)
 800751c:	4a05      	ldr	r2, [pc, #20]	; (8007534 <prvInitialiseTaskLists+0x64>)
 800751e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007520:	4b0a      	ldr	r3, [pc, #40]	; (800754c <prvInitialiseTaskLists+0x7c>)
 8007522:	4a05      	ldr	r2, [pc, #20]	; (8007538 <prvInitialiseTaskLists+0x68>)
 8007524:	601a      	str	r2, [r3, #0]
}
 8007526:	bf00      	nop
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	200006f0 	.word	0x200006f0
 8007534:	20000b50 	.word	0x20000b50
 8007538:	20000b64 	.word	0x20000b64
 800753c:	20000b80 	.word	0x20000b80
 8007540:	20000b94 	.word	0x20000b94
 8007544:	20000bac 	.word	0x20000bac
 8007548:	20000b78 	.word	0x20000b78
 800754c:	20000b7c 	.word	0x20000b7c

08007550 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007556:	e019      	b.n	800758c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007558:	f000 fdd4 	bl	8008104 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800755c:	4b10      	ldr	r3, [pc, #64]	; (80075a0 <prvCheckTasksWaitingTermination+0x50>)
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	3304      	adds	r3, #4
 8007568:	4618      	mov	r0, r3
 800756a:	f7fe fc45 	bl	8005df8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800756e:	4b0d      	ldr	r3, [pc, #52]	; (80075a4 <prvCheckTasksWaitingTermination+0x54>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	3b01      	subs	r3, #1
 8007574:	4a0b      	ldr	r2, [pc, #44]	; (80075a4 <prvCheckTasksWaitingTermination+0x54>)
 8007576:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007578:	4b0b      	ldr	r3, [pc, #44]	; (80075a8 <prvCheckTasksWaitingTermination+0x58>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3b01      	subs	r3, #1
 800757e:	4a0a      	ldr	r2, [pc, #40]	; (80075a8 <prvCheckTasksWaitingTermination+0x58>)
 8007580:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007582:	f000 fdef 	bl	8008164 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f810 	bl	80075ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800758c:	4b06      	ldr	r3, [pc, #24]	; (80075a8 <prvCheckTasksWaitingTermination+0x58>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e1      	bne.n	8007558 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007594:	bf00      	nop
 8007596:	bf00      	nop
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20000b94 	.word	0x20000b94
 80075a4:	20000bc0 	.word	0x20000bc0
 80075a8:	20000ba8 	.word	0x20000ba8

080075ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d108      	bne.n	80075d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c2:	4618      	mov	r0, r3
 80075c4:	f000 ff8c 	bl	80084e0 <vPortFree>
				vPortFree( pxTCB );
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 ff89 	bl	80084e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075ce:	e018      	b.n	8007602 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d103      	bne.n	80075e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 ff80 	bl	80084e0 <vPortFree>
	}
 80075e0:	e00f      	b.n	8007602 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d00a      	beq.n	8007602 <prvDeleteTCB+0x56>
	__asm volatile
 80075ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f0:	f383 8811 	msr	BASEPRI, r3
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	60fb      	str	r3, [r7, #12]
}
 80075fe:	bf00      	nop
 8007600:	e7fe      	b.n	8007600 <prvDeleteTCB+0x54>
	}
 8007602:	bf00      	nop
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
	...

0800760c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007612:	4b0c      	ldr	r3, [pc, #48]	; (8007644 <prvResetNextTaskUnblockTime+0x38>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d104      	bne.n	8007626 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800761c:	4b0a      	ldr	r3, [pc, #40]	; (8007648 <prvResetNextTaskUnblockTime+0x3c>)
 800761e:	f04f 32ff 	mov.w	r2, #4294967295
 8007622:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007624:	e008      	b.n	8007638 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007626:	4b07      	ldr	r3, [pc, #28]	; (8007644 <prvResetNextTaskUnblockTime+0x38>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	4a04      	ldr	r2, [pc, #16]	; (8007648 <prvResetNextTaskUnblockTime+0x3c>)
 8007636:	6013      	str	r3, [r2, #0]
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr
 8007644:	20000b78 	.word	0x20000b78
 8007648:	20000be0 	.word	0x20000be0

0800764c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007652:	4b0b      	ldr	r3, [pc, #44]	; (8007680 <xTaskGetSchedulerState+0x34>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d102      	bne.n	8007660 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800765a:	2301      	movs	r3, #1
 800765c:	607b      	str	r3, [r7, #4]
 800765e:	e008      	b.n	8007672 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007660:	4b08      	ldr	r3, [pc, #32]	; (8007684 <xTaskGetSchedulerState+0x38>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d102      	bne.n	800766e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007668:	2302      	movs	r3, #2
 800766a:	607b      	str	r3, [r7, #4]
 800766c:	e001      	b.n	8007672 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800766e:	2300      	movs	r3, #0
 8007670:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007672:	687b      	ldr	r3, [r7, #4]
	}
 8007674:	4618      	mov	r0, r3
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	20000bcc 	.word	0x20000bcc
 8007684:	20000be8 	.word	0x20000be8

08007688 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007694:	2300      	movs	r3, #0
 8007696:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d056      	beq.n	800774c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800769e:	4b2e      	ldr	r3, [pc, #184]	; (8007758 <xTaskPriorityDisinherit+0xd0>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d00a      	beq.n	80076be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80076a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	60fb      	str	r3, [r7, #12]
}
 80076ba:	bf00      	nop
 80076bc:	e7fe      	b.n	80076bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10a      	bne.n	80076dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80076c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ca:	f383 8811 	msr	BASEPRI, r3
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	60bb      	str	r3, [r7, #8]
}
 80076d8:	bf00      	nop
 80076da:	e7fe      	b.n	80076da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076e0:	1e5a      	subs	r2, r3, #1
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d02c      	beq.n	800774c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d128      	bne.n	800774c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	3304      	adds	r3, #4
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fe fb7a 	bl	8005df8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007710:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771c:	4b0f      	ldr	r3, [pc, #60]	; (800775c <xTaskPriorityDisinherit+0xd4>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	429a      	cmp	r2, r3
 8007722:	d903      	bls.n	800772c <xTaskPriorityDisinherit+0xa4>
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	4a0c      	ldr	r2, [pc, #48]	; (800775c <xTaskPriorityDisinherit+0xd4>)
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007730:	4613      	mov	r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4a09      	ldr	r2, [pc, #36]	; (8007760 <xTaskPriorityDisinherit+0xd8>)
 800773a:	441a      	add	r2, r3
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	3304      	adds	r3, #4
 8007740:	4619      	mov	r1, r3
 8007742:	4610      	mov	r0, r2
 8007744:	f7fe fafb 	bl	8005d3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007748:	2301      	movs	r3, #1
 800774a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800774c:	697b      	ldr	r3, [r7, #20]
	}
 800774e:	4618      	mov	r0, r3
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	200006ec 	.word	0x200006ec
 800775c:	20000bc8 	.word	0x20000bc8
 8007760:	200006f0 	.word	0x200006f0

08007764 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800776e:	4b21      	ldr	r3, [pc, #132]	; (80077f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007774:	4b20      	ldr	r3, [pc, #128]	; (80077f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	3304      	adds	r3, #4
 800777a:	4618      	mov	r0, r3
 800777c:	f7fe fb3c 	bl	8005df8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007786:	d10a      	bne.n	800779e <prvAddCurrentTaskToDelayedList+0x3a>
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d007      	beq.n	800779e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800778e:	4b1a      	ldr	r3, [pc, #104]	; (80077f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3304      	adds	r3, #4
 8007794:	4619      	mov	r1, r3
 8007796:	4819      	ldr	r0, [pc, #100]	; (80077fc <prvAddCurrentTaskToDelayedList+0x98>)
 8007798:	f7fe fad1 	bl	8005d3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800779c:	e026      	b.n	80077ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4413      	add	r3, r2
 80077a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077a6:	4b14      	ldr	r3, [pc, #80]	; (80077f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d209      	bcs.n	80077ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077b6:	4b12      	ldr	r3, [pc, #72]	; (8007800 <prvAddCurrentTaskToDelayedList+0x9c>)
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	4b0f      	ldr	r3, [pc, #60]	; (80077f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	3304      	adds	r3, #4
 80077c0:	4619      	mov	r1, r3
 80077c2:	4610      	mov	r0, r2
 80077c4:	f7fe fadf 	bl	8005d86 <vListInsert>
}
 80077c8:	e010      	b.n	80077ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077ca:	4b0e      	ldr	r3, [pc, #56]	; (8007804 <prvAddCurrentTaskToDelayedList+0xa0>)
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	4b0a      	ldr	r3, [pc, #40]	; (80077f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3304      	adds	r3, #4
 80077d4:	4619      	mov	r1, r3
 80077d6:	4610      	mov	r0, r2
 80077d8:	f7fe fad5 	bl	8005d86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077dc:	4b0a      	ldr	r3, [pc, #40]	; (8007808 <prvAddCurrentTaskToDelayedList+0xa4>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d202      	bcs.n	80077ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80077e6:	4a08      	ldr	r2, [pc, #32]	; (8007808 <prvAddCurrentTaskToDelayedList+0xa4>)
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	6013      	str	r3, [r2, #0]
}
 80077ec:	bf00      	nop
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	20000bc4 	.word	0x20000bc4
 80077f8:	200006ec 	.word	0x200006ec
 80077fc:	20000bac 	.word	0x20000bac
 8007800:	20000b7c 	.word	0x20000b7c
 8007804:	20000b78 	.word	0x20000b78
 8007808:	20000be0 	.word	0x20000be0

0800780c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08a      	sub	sp, #40	; 0x28
 8007810:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007812:	2300      	movs	r3, #0
 8007814:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007816:	f000 fb07 	bl	8007e28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800781a:	4b1c      	ldr	r3, [pc, #112]	; (800788c <xTimerCreateTimerTask+0x80>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d021      	beq.n	8007866 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007822:	2300      	movs	r3, #0
 8007824:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007826:	2300      	movs	r3, #0
 8007828:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800782a:	1d3a      	adds	r2, r7, #4
 800782c:	f107 0108 	add.w	r1, r7, #8
 8007830:	f107 030c 	add.w	r3, r7, #12
 8007834:	4618      	mov	r0, r3
 8007836:	f7fe fa3b 	bl	8005cb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800783a:	6879      	ldr	r1, [r7, #4]
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	9202      	str	r2, [sp, #8]
 8007842:	9301      	str	r3, [sp, #4]
 8007844:	2302      	movs	r3, #2
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	2300      	movs	r3, #0
 800784a:	460a      	mov	r2, r1
 800784c:	4910      	ldr	r1, [pc, #64]	; (8007890 <xTimerCreateTimerTask+0x84>)
 800784e:	4811      	ldr	r0, [pc, #68]	; (8007894 <xTimerCreateTimerTask+0x88>)
 8007850:	f7ff f8de 	bl	8006a10 <xTaskCreateStatic>
 8007854:	4603      	mov	r3, r0
 8007856:	4a10      	ldr	r2, [pc, #64]	; (8007898 <xTimerCreateTimerTask+0x8c>)
 8007858:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800785a:	4b0f      	ldr	r3, [pc, #60]	; (8007898 <xTimerCreateTimerTask+0x8c>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007862:	2301      	movs	r3, #1
 8007864:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10a      	bne.n	8007882 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800786c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007870:	f383 8811 	msr	BASEPRI, r3
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	613b      	str	r3, [r7, #16]
}
 800787e:	bf00      	nop
 8007880:	e7fe      	b.n	8007880 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007882:	697b      	ldr	r3, [r7, #20]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3718      	adds	r7, #24
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	20000c1c 	.word	0x20000c1c
 8007890:	08008824 	.word	0x08008824
 8007894:	080079d1 	.word	0x080079d1
 8007898:	20000c20 	.word	0x20000c20

0800789c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b08a      	sub	sp, #40	; 0x28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
 80078a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80078aa:	2300      	movs	r3, #0
 80078ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10a      	bne.n	80078ca <xTimerGenericCommand+0x2e>
	__asm volatile
 80078b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	623b      	str	r3, [r7, #32]
}
 80078c6:	bf00      	nop
 80078c8:	e7fe      	b.n	80078c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80078ca:	4b1a      	ldr	r3, [pc, #104]	; (8007934 <xTimerGenericCommand+0x98>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d02a      	beq.n	8007928 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	2b05      	cmp	r3, #5
 80078e2:	dc18      	bgt.n	8007916 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80078e4:	f7ff feb2 	bl	800764c <xTaskGetSchedulerState>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d109      	bne.n	8007902 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80078ee:	4b11      	ldr	r3, [pc, #68]	; (8007934 <xTimerGenericCommand+0x98>)
 80078f0:	6818      	ldr	r0, [r3, #0]
 80078f2:	f107 0110 	add.w	r1, r7, #16
 80078f6:	2300      	movs	r3, #0
 80078f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078fa:	f7fe fbe5 	bl	80060c8 <xQueueGenericSend>
 80078fe:	6278      	str	r0, [r7, #36]	; 0x24
 8007900:	e012      	b.n	8007928 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007902:	4b0c      	ldr	r3, [pc, #48]	; (8007934 <xTimerGenericCommand+0x98>)
 8007904:	6818      	ldr	r0, [r3, #0]
 8007906:	f107 0110 	add.w	r1, r7, #16
 800790a:	2300      	movs	r3, #0
 800790c:	2200      	movs	r2, #0
 800790e:	f7fe fbdb 	bl	80060c8 <xQueueGenericSend>
 8007912:	6278      	str	r0, [r7, #36]	; 0x24
 8007914:	e008      	b.n	8007928 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007916:	4b07      	ldr	r3, [pc, #28]	; (8007934 <xTimerGenericCommand+0x98>)
 8007918:	6818      	ldr	r0, [r3, #0]
 800791a:	f107 0110 	add.w	r1, r7, #16
 800791e:	2300      	movs	r3, #0
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	f7fe fccf 	bl	80062c4 <xQueueGenericSendFromISR>
 8007926:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800792a:	4618      	mov	r0, r3
 800792c:	3728      	adds	r7, #40	; 0x28
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	20000c1c 	.word	0x20000c1c

08007938 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b088      	sub	sp, #32
 800793c:	af02      	add	r7, sp, #8
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007942:	4b22      	ldr	r3, [pc, #136]	; (80079cc <prvProcessExpiredTimer+0x94>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	3304      	adds	r3, #4
 8007950:	4618      	mov	r0, r3
 8007952:	f7fe fa51 	bl	8005df8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800795c:	f003 0304 	and.w	r3, r3, #4
 8007960:	2b00      	cmp	r3, #0
 8007962:	d022      	beq.n	80079aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	699a      	ldr	r2, [r3, #24]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	18d1      	adds	r1, r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	6978      	ldr	r0, [r7, #20]
 8007972:	f000 f8d1 	bl	8007b18 <prvInsertTimerInActiveList>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d01f      	beq.n	80079bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800797c:	2300      	movs	r3, #0
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	2300      	movs	r3, #0
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	2100      	movs	r1, #0
 8007986:	6978      	ldr	r0, [r7, #20]
 8007988:	f7ff ff88 	bl	800789c <xTimerGenericCommand>
 800798c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d113      	bne.n	80079bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	60fb      	str	r3, [r7, #12]
}
 80079a6:	bf00      	nop
 80079a8:	e7fe      	b.n	80079a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079b0:	f023 0301 	bic.w	r3, r3, #1
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	6978      	ldr	r0, [r7, #20]
 80079c2:	4798      	blx	r3
}
 80079c4:	bf00      	nop
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	20000c14 	.word	0x20000c14

080079d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079d8:	f107 0308 	add.w	r3, r7, #8
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 f857 	bl	8007a90 <prvGetNextExpireTime>
 80079e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	4619      	mov	r1, r3
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 f803 	bl	80079f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80079ee:	f000 f8d5 	bl	8007b9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079f2:	e7f1      	b.n	80079d8 <prvTimerTask+0x8>

080079f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80079fe:	f7ff fa43 	bl	8006e88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a02:	f107 0308 	add.w	r3, r7, #8
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 f866 	bl	8007ad8 <prvSampleTimeNow>
 8007a0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d130      	bne.n	8007a76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10a      	bne.n	8007a30 <prvProcessTimerOrBlockTask+0x3c>
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d806      	bhi.n	8007a30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a22:	f7ff fa3f 	bl	8006ea4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a26:	68f9      	ldr	r1, [r7, #12]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7ff ff85 	bl	8007938 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a2e:	e024      	b.n	8007a7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d008      	beq.n	8007a48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a36:	4b13      	ldr	r3, [pc, #76]	; (8007a84 <prvProcessTimerOrBlockTask+0x90>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <prvProcessTimerOrBlockTask+0x50>
 8007a40:	2301      	movs	r3, #1
 8007a42:	e000      	b.n	8007a46 <prvProcessTimerOrBlockTask+0x52>
 8007a44:	2300      	movs	r3, #0
 8007a46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a48:	4b0f      	ldr	r3, [pc, #60]	; (8007a88 <prvProcessTimerOrBlockTask+0x94>)
 8007a4a:	6818      	ldr	r0, [r3, #0]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	4619      	mov	r1, r3
 8007a56:	f7fe ffa7 	bl	80069a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a5a:	f7ff fa23 	bl	8006ea4 <xTaskResumeAll>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10a      	bne.n	8007a7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a64:	4b09      	ldr	r3, [pc, #36]	; (8007a8c <prvProcessTimerOrBlockTask+0x98>)
 8007a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a6a:	601a      	str	r2, [r3, #0]
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	f3bf 8f6f 	isb	sy
}
 8007a74:	e001      	b.n	8007a7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a76:	f7ff fa15 	bl	8006ea4 <xTaskResumeAll>
}
 8007a7a:	bf00      	nop
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20000c18 	.word	0x20000c18
 8007a88:	20000c1c 	.word	0x20000c1c
 8007a8c:	e000ed04 	.word	0xe000ed04

08007a90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a98:	4b0e      	ldr	r3, [pc, #56]	; (8007ad4 <prvGetNextExpireTime+0x44>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <prvGetNextExpireTime+0x16>
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	e000      	b.n	8007aa8 <prvGetNextExpireTime+0x18>
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d105      	bne.n	8007ac0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ab4:	4b07      	ldr	r3, [pc, #28]	; (8007ad4 <prvGetNextExpireTime+0x44>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	e001      	b.n	8007ac4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	20000c14 	.word	0x20000c14

08007ad8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ae0:	f7ff fa7e 	bl	8006fe0 <xTaskGetTickCount>
 8007ae4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ae6:	4b0b      	ldr	r3, [pc, #44]	; (8007b14 <prvSampleTimeNow+0x3c>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d205      	bcs.n	8007afc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007af0:	f000 f936 	bl	8007d60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	601a      	str	r2, [r3, #0]
 8007afa:	e002      	b.n	8007b02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b02:	4a04      	ldr	r2, [pc, #16]	; (8007b14 <prvSampleTimeNow+0x3c>)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b08:	68fb      	ldr	r3, [r7, #12]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20000c24 	.word	0x20000c24

08007b18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
 8007b24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b26:	2300      	movs	r3, #0
 8007b28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d812      	bhi.n	8007b64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	1ad2      	subs	r2, r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d302      	bcc.n	8007b52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	617b      	str	r3, [r7, #20]
 8007b50:	e01b      	b.n	8007b8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b52:	4b10      	ldr	r3, [pc, #64]	; (8007b94 <prvInsertTimerInActiveList+0x7c>)
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3304      	adds	r3, #4
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	f7fe f912 	bl	8005d86 <vListInsert>
 8007b62:	e012      	b.n	8007b8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d206      	bcs.n	8007b7a <prvInsertTimerInActiveList+0x62>
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d302      	bcc.n	8007b7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b74:	2301      	movs	r3, #1
 8007b76:	617b      	str	r3, [r7, #20]
 8007b78:	e007      	b.n	8007b8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b7a:	4b07      	ldr	r3, [pc, #28]	; (8007b98 <prvInsertTimerInActiveList+0x80>)
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3304      	adds	r3, #4
 8007b82:	4619      	mov	r1, r3
 8007b84:	4610      	mov	r0, r2
 8007b86:	f7fe f8fe 	bl	8005d86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b8a:	697b      	ldr	r3, [r7, #20]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3718      	adds	r7, #24
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	20000c18 	.word	0x20000c18
 8007b98:	20000c14 	.word	0x20000c14

08007b9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b08e      	sub	sp, #56	; 0x38
 8007ba0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ba2:	e0ca      	b.n	8007d3a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	da18      	bge.n	8007bdc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007baa:	1d3b      	adds	r3, r7, #4
 8007bac:	3304      	adds	r3, #4
 8007bae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10a      	bne.n	8007bcc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	61fb      	str	r3, [r7, #28]
}
 8007bc8:	bf00      	nop
 8007bca:	e7fe      	b.n	8007bca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bd2:	6850      	ldr	r0, [r2, #4]
 8007bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bd6:	6892      	ldr	r2, [r2, #8]
 8007bd8:	4611      	mov	r1, r2
 8007bda:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f2c0 80aa 	blt.w	8007d38 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d004      	beq.n	8007bfa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf2:	3304      	adds	r3, #4
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7fe f8ff 	bl	8005df8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bfa:	463b      	mov	r3, r7
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7ff ff6b 	bl	8007ad8 <prvSampleTimeNow>
 8007c02:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b09      	cmp	r3, #9
 8007c08:	f200 8097 	bhi.w	8007d3a <prvProcessReceivedCommands+0x19e>
 8007c0c:	a201      	add	r2, pc, #4	; (adr r2, 8007c14 <prvProcessReceivedCommands+0x78>)
 8007c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c12:	bf00      	nop
 8007c14:	08007c3d 	.word	0x08007c3d
 8007c18:	08007c3d 	.word	0x08007c3d
 8007c1c:	08007c3d 	.word	0x08007c3d
 8007c20:	08007cb1 	.word	0x08007cb1
 8007c24:	08007cc5 	.word	0x08007cc5
 8007c28:	08007d0f 	.word	0x08007d0f
 8007c2c:	08007c3d 	.word	0x08007c3d
 8007c30:	08007c3d 	.word	0x08007c3d
 8007c34:	08007cb1 	.word	0x08007cb1
 8007c38:	08007cc5 	.word	0x08007cc5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c42:	f043 0301 	orr.w	r3, r3, #1
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	18d1      	adds	r1, r2, r3
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c5c:	f7ff ff5c 	bl	8007b18 <prvInsertTimerInActiveList>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d069      	beq.n	8007d3a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d05e      	beq.n	8007d3a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	441a      	add	r2, r3
 8007c84:	2300      	movs	r3, #0
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	2300      	movs	r3, #0
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c8e:	f7ff fe05 	bl	800789c <xTimerGenericCommand>
 8007c92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c94:	6a3b      	ldr	r3, [r7, #32]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d14f      	bne.n	8007d3a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	61bb      	str	r3, [r7, #24]
}
 8007cac:	bf00      	nop
 8007cae:	e7fe      	b.n	8007cae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cb6:	f023 0301 	bic.w	r3, r3, #1
 8007cba:	b2da      	uxtb	r2, r3
 8007cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007cc2:	e03a      	b.n	8007d3a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cca:	f043 0301 	orr.w	r3, r3, #1
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cda:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10a      	bne.n	8007cfa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	617b      	str	r3, [r7, #20]
}
 8007cf6:	bf00      	nop
 8007cf8:	e7fe      	b.n	8007cf8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfc:	699a      	ldr	r2, [r3, #24]
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d00:	18d1      	adds	r1, r2, r3
 8007d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d08:	f7ff ff06 	bl	8007b18 <prvInsertTimerInActiveList>
					break;
 8007d0c:	e015      	b.n	8007d3a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d14:	f003 0302 	and.w	r3, r3, #2
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d103      	bne.n	8007d24 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007d1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d1e:	f000 fbdf 	bl	80084e0 <vPortFree>
 8007d22:	e00a      	b.n	8007d3a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d2a:	f023 0301 	bic.w	r3, r3, #1
 8007d2e:	b2da      	uxtb	r2, r3
 8007d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d36:	e000      	b.n	8007d3a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d3a:	4b08      	ldr	r3, [pc, #32]	; (8007d5c <prvProcessReceivedCommands+0x1c0>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	1d39      	adds	r1, r7, #4
 8007d40:	2200      	movs	r2, #0
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fe fb5a 	bl	80063fc <xQueueReceive>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f47f af2a 	bne.w	8007ba4 <prvProcessReceivedCommands+0x8>
	}
}
 8007d50:	bf00      	nop
 8007d52:	bf00      	nop
 8007d54:	3730      	adds	r7, #48	; 0x30
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20000c1c 	.word	0x20000c1c

08007d60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b088      	sub	sp, #32
 8007d64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d66:	e048      	b.n	8007dfa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d68:	4b2d      	ldr	r3, [pc, #180]	; (8007e20 <prvSwitchTimerLists+0xc0>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d72:	4b2b      	ldr	r3, [pc, #172]	; (8007e20 <prvSwitchTimerLists+0xc0>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3304      	adds	r3, #4
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7fe f839 	bl	8005df8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d94:	f003 0304 	and.w	r3, r3, #4
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d02e      	beq.n	8007dfa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	4413      	add	r3, r2
 8007da4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d90e      	bls.n	8007dcc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dba:	4b19      	ldr	r3, [pc, #100]	; (8007e20 <prvSwitchTimerLists+0xc0>)
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	f7fd ffde 	bl	8005d86 <vListInsert>
 8007dca:	e016      	b.n	8007dfa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007dcc:	2300      	movs	r3, #0
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f7ff fd60 	bl	800789c <xTimerGenericCommand>
 8007ddc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10a      	bne.n	8007dfa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	603b      	str	r3, [r7, #0]
}
 8007df6:	bf00      	nop
 8007df8:	e7fe      	b.n	8007df8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dfa:	4b09      	ldr	r3, [pc, #36]	; (8007e20 <prvSwitchTimerLists+0xc0>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1b1      	bne.n	8007d68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e04:	4b06      	ldr	r3, [pc, #24]	; (8007e20 <prvSwitchTimerLists+0xc0>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e0a:	4b06      	ldr	r3, [pc, #24]	; (8007e24 <prvSwitchTimerLists+0xc4>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a04      	ldr	r2, [pc, #16]	; (8007e20 <prvSwitchTimerLists+0xc0>)
 8007e10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e12:	4a04      	ldr	r2, [pc, #16]	; (8007e24 <prvSwitchTimerLists+0xc4>)
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	6013      	str	r3, [r2, #0]
}
 8007e18:	bf00      	nop
 8007e1a:	3718      	adds	r7, #24
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	20000c14 	.word	0x20000c14
 8007e24:	20000c18 	.word	0x20000c18

08007e28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e2e:	f000 f969 	bl	8008104 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e32:	4b15      	ldr	r3, [pc, #84]	; (8007e88 <prvCheckForValidListAndQueue+0x60>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d120      	bne.n	8007e7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e3a:	4814      	ldr	r0, [pc, #80]	; (8007e8c <prvCheckForValidListAndQueue+0x64>)
 8007e3c:	f7fd ff52 	bl	8005ce4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e40:	4813      	ldr	r0, [pc, #76]	; (8007e90 <prvCheckForValidListAndQueue+0x68>)
 8007e42:	f7fd ff4f 	bl	8005ce4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e46:	4b13      	ldr	r3, [pc, #76]	; (8007e94 <prvCheckForValidListAndQueue+0x6c>)
 8007e48:	4a10      	ldr	r2, [pc, #64]	; (8007e8c <prvCheckForValidListAndQueue+0x64>)
 8007e4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e4c:	4b12      	ldr	r3, [pc, #72]	; (8007e98 <prvCheckForValidListAndQueue+0x70>)
 8007e4e:	4a10      	ldr	r2, [pc, #64]	; (8007e90 <prvCheckForValidListAndQueue+0x68>)
 8007e50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e52:	2300      	movs	r3, #0
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	4b11      	ldr	r3, [pc, #68]	; (8007e9c <prvCheckForValidListAndQueue+0x74>)
 8007e58:	4a11      	ldr	r2, [pc, #68]	; (8007ea0 <prvCheckForValidListAndQueue+0x78>)
 8007e5a:	2110      	movs	r1, #16
 8007e5c:	200a      	movs	r0, #10
 8007e5e:	f7fe f85d 	bl	8005f1c <xQueueGenericCreateStatic>
 8007e62:	4603      	mov	r3, r0
 8007e64:	4a08      	ldr	r2, [pc, #32]	; (8007e88 <prvCheckForValidListAndQueue+0x60>)
 8007e66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e68:	4b07      	ldr	r3, [pc, #28]	; (8007e88 <prvCheckForValidListAndQueue+0x60>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d005      	beq.n	8007e7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e70:	4b05      	ldr	r3, [pc, #20]	; (8007e88 <prvCheckForValidListAndQueue+0x60>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	490b      	ldr	r1, [pc, #44]	; (8007ea4 <prvCheckForValidListAndQueue+0x7c>)
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fe fd6c 	bl	8006954 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e7c:	f000 f972 	bl	8008164 <vPortExitCritical>
}
 8007e80:	bf00      	nop
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	20000c1c 	.word	0x20000c1c
 8007e8c:	20000bec 	.word	0x20000bec
 8007e90:	20000c00 	.word	0x20000c00
 8007e94:	20000c14 	.word	0x20000c14
 8007e98:	20000c18 	.word	0x20000c18
 8007e9c:	20000cc8 	.word	0x20000cc8
 8007ea0:	20000c28 	.word	0x20000c28
 8007ea4:	0800882c 	.word	0x0800882c

08007ea8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	3b04      	subs	r3, #4
 8007eb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ec0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	3b04      	subs	r3, #4
 8007ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f023 0201 	bic.w	r2, r3, #1
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3b04      	subs	r3, #4
 8007ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ed8:	4a0c      	ldr	r2, [pc, #48]	; (8007f0c <pxPortInitialiseStack+0x64>)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	3b14      	subs	r3, #20
 8007ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	3b04      	subs	r3, #4
 8007eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f06f 0202 	mvn.w	r2, #2
 8007ef6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	3b20      	subs	r3, #32
 8007efc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007efe:	68fb      	ldr	r3, [r7, #12]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	08007f11 	.word	0x08007f11

08007f10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f16:	2300      	movs	r3, #0
 8007f18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f1a:	4b12      	ldr	r3, [pc, #72]	; (8007f64 <prvTaskExitError+0x54>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f22:	d00a      	beq.n	8007f3a <prvTaskExitError+0x2a>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	60fb      	str	r3, [r7, #12]
}
 8007f36:	bf00      	nop
 8007f38:	e7fe      	b.n	8007f38 <prvTaskExitError+0x28>
	__asm volatile
 8007f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3e:	f383 8811 	msr	BASEPRI, r3
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	60bb      	str	r3, [r7, #8]
}
 8007f4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f4e:	bf00      	nop
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d0fc      	beq.n	8007f50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f56:	bf00      	nop
 8007f58:	bf00      	nop
 8007f5a:	3714      	adds	r7, #20
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr
 8007f64:	2000000c 	.word	0x2000000c
	...

08007f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f70:	4b07      	ldr	r3, [pc, #28]	; (8007f90 <pxCurrentTCBConst2>)
 8007f72:	6819      	ldr	r1, [r3, #0]
 8007f74:	6808      	ldr	r0, [r1, #0]
 8007f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7a:	f380 8809 	msr	PSP, r0
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f04f 0000 	mov.w	r0, #0
 8007f86:	f380 8811 	msr	BASEPRI, r0
 8007f8a:	4770      	bx	lr
 8007f8c:	f3af 8000 	nop.w

08007f90 <pxCurrentTCBConst2>:
 8007f90:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop

08007f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f98:	4808      	ldr	r0, [pc, #32]	; (8007fbc <prvPortStartFirstTask+0x24>)
 8007f9a:	6800      	ldr	r0, [r0, #0]
 8007f9c:	6800      	ldr	r0, [r0, #0]
 8007f9e:	f380 8808 	msr	MSP, r0
 8007fa2:	f04f 0000 	mov.w	r0, #0
 8007fa6:	f380 8814 	msr	CONTROL, r0
 8007faa:	b662      	cpsie	i
 8007fac:	b661      	cpsie	f
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	df00      	svc	0
 8007fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007fba:	bf00      	nop
 8007fbc:	e000ed08 	.word	0xe000ed08

08007fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007fc6:	4b46      	ldr	r3, [pc, #280]	; (80080e0 <xPortStartScheduler+0x120>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a46      	ldr	r2, [pc, #280]	; (80080e4 <xPortStartScheduler+0x124>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d10a      	bne.n	8007fe6 <xPortStartScheduler+0x26>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	613b      	str	r3, [r7, #16]
}
 8007fe2:	bf00      	nop
 8007fe4:	e7fe      	b.n	8007fe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fe6:	4b3e      	ldr	r3, [pc, #248]	; (80080e0 <xPortStartScheduler+0x120>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a3f      	ldr	r2, [pc, #252]	; (80080e8 <xPortStartScheduler+0x128>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d10a      	bne.n	8008006 <xPortStartScheduler+0x46>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	60fb      	str	r3, [r7, #12]
}
 8008002:	bf00      	nop
 8008004:	e7fe      	b.n	8008004 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008006:	4b39      	ldr	r3, [pc, #228]	; (80080ec <xPortStartScheduler+0x12c>)
 8008008:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	b2db      	uxtb	r3, r3
 8008010:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	22ff      	movs	r2, #255	; 0xff
 8008016:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	b2db      	uxtb	r3, r3
 800801e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008020:	78fb      	ldrb	r3, [r7, #3]
 8008022:	b2db      	uxtb	r3, r3
 8008024:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008028:	b2da      	uxtb	r2, r3
 800802a:	4b31      	ldr	r3, [pc, #196]	; (80080f0 <xPortStartScheduler+0x130>)
 800802c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800802e:	4b31      	ldr	r3, [pc, #196]	; (80080f4 <xPortStartScheduler+0x134>)
 8008030:	2207      	movs	r2, #7
 8008032:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008034:	e009      	b.n	800804a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008036:	4b2f      	ldr	r3, [pc, #188]	; (80080f4 <xPortStartScheduler+0x134>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3b01      	subs	r3, #1
 800803c:	4a2d      	ldr	r2, [pc, #180]	; (80080f4 <xPortStartScheduler+0x134>)
 800803e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008040:	78fb      	ldrb	r3, [r7, #3]
 8008042:	b2db      	uxtb	r3, r3
 8008044:	005b      	lsls	r3, r3, #1
 8008046:	b2db      	uxtb	r3, r3
 8008048:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800804a:	78fb      	ldrb	r3, [r7, #3]
 800804c:	b2db      	uxtb	r3, r3
 800804e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008052:	2b80      	cmp	r3, #128	; 0x80
 8008054:	d0ef      	beq.n	8008036 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008056:	4b27      	ldr	r3, [pc, #156]	; (80080f4 <xPortStartScheduler+0x134>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f1c3 0307 	rsb	r3, r3, #7
 800805e:	2b04      	cmp	r3, #4
 8008060:	d00a      	beq.n	8008078 <xPortStartScheduler+0xb8>
	__asm volatile
 8008062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008066:	f383 8811 	msr	BASEPRI, r3
 800806a:	f3bf 8f6f 	isb	sy
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	60bb      	str	r3, [r7, #8]
}
 8008074:	bf00      	nop
 8008076:	e7fe      	b.n	8008076 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008078:	4b1e      	ldr	r3, [pc, #120]	; (80080f4 <xPortStartScheduler+0x134>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	021b      	lsls	r3, r3, #8
 800807e:	4a1d      	ldr	r2, [pc, #116]	; (80080f4 <xPortStartScheduler+0x134>)
 8008080:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008082:	4b1c      	ldr	r3, [pc, #112]	; (80080f4 <xPortStartScheduler+0x134>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800808a:	4a1a      	ldr	r2, [pc, #104]	; (80080f4 <xPortStartScheduler+0x134>)
 800808c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	b2da      	uxtb	r2, r3
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008096:	4b18      	ldr	r3, [pc, #96]	; (80080f8 <xPortStartScheduler+0x138>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a17      	ldr	r2, [pc, #92]	; (80080f8 <xPortStartScheduler+0x138>)
 800809c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80080a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80080a2:	4b15      	ldr	r3, [pc, #84]	; (80080f8 <xPortStartScheduler+0x138>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a14      	ldr	r2, [pc, #80]	; (80080f8 <xPortStartScheduler+0x138>)
 80080a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80080ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80080ae:	f000 f8dd 	bl	800826c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80080b2:	4b12      	ldr	r3, [pc, #72]	; (80080fc <xPortStartScheduler+0x13c>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80080b8:	f000 f8fc 	bl	80082b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80080bc:	4b10      	ldr	r3, [pc, #64]	; (8008100 <xPortStartScheduler+0x140>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a0f      	ldr	r2, [pc, #60]	; (8008100 <xPortStartScheduler+0x140>)
 80080c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80080c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80080c8:	f7ff ff66 	bl	8007f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080cc:	f7ff f852 	bl	8007174 <vTaskSwitchContext>
	prvTaskExitError();
 80080d0:	f7ff ff1e 	bl	8007f10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	e000ed00 	.word	0xe000ed00
 80080e4:	410fc271 	.word	0x410fc271
 80080e8:	410fc270 	.word	0x410fc270
 80080ec:	e000e400 	.word	0xe000e400
 80080f0:	20000d18 	.word	0x20000d18
 80080f4:	20000d1c 	.word	0x20000d1c
 80080f8:	e000ed20 	.word	0xe000ed20
 80080fc:	2000000c 	.word	0x2000000c
 8008100:	e000ef34 	.word	0xe000ef34

08008104 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
	__asm volatile
 800810a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	607b      	str	r3, [r7, #4]
}
 800811c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800811e:	4b0f      	ldr	r3, [pc, #60]	; (800815c <vPortEnterCritical+0x58>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3301      	adds	r3, #1
 8008124:	4a0d      	ldr	r2, [pc, #52]	; (800815c <vPortEnterCritical+0x58>)
 8008126:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008128:	4b0c      	ldr	r3, [pc, #48]	; (800815c <vPortEnterCritical+0x58>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d10f      	bne.n	8008150 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008130:	4b0b      	ldr	r3, [pc, #44]	; (8008160 <vPortEnterCritical+0x5c>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00a      	beq.n	8008150 <vPortEnterCritical+0x4c>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	603b      	str	r3, [r7, #0]
}
 800814c:	bf00      	nop
 800814e:	e7fe      	b.n	800814e <vPortEnterCritical+0x4a>
	}
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	2000000c 	.word	0x2000000c
 8008160:	e000ed04 	.word	0xe000ed04

08008164 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800816a:	4b12      	ldr	r3, [pc, #72]	; (80081b4 <vPortExitCritical+0x50>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10a      	bne.n	8008188 <vPortExitCritical+0x24>
	__asm volatile
 8008172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	607b      	str	r3, [r7, #4]
}
 8008184:	bf00      	nop
 8008186:	e7fe      	b.n	8008186 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008188:	4b0a      	ldr	r3, [pc, #40]	; (80081b4 <vPortExitCritical+0x50>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3b01      	subs	r3, #1
 800818e:	4a09      	ldr	r2, [pc, #36]	; (80081b4 <vPortExitCritical+0x50>)
 8008190:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008192:	4b08      	ldr	r3, [pc, #32]	; (80081b4 <vPortExitCritical+0x50>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d105      	bne.n	80081a6 <vPortExitCritical+0x42>
 800819a:	2300      	movs	r3, #0
 800819c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	f383 8811 	msr	BASEPRI, r3
}
 80081a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80081a6:	bf00      	nop
 80081a8:	370c      	adds	r7, #12
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	2000000c 	.word	0x2000000c
	...

080081c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80081c0:	f3ef 8009 	mrs	r0, PSP
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	4b15      	ldr	r3, [pc, #84]	; (8008220 <pxCurrentTCBConst>)
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	f01e 0f10 	tst.w	lr, #16
 80081d0:	bf08      	it	eq
 80081d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081da:	6010      	str	r0, [r2, #0]
 80081dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80081e4:	f380 8811 	msr	BASEPRI, r0
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f7fe ffc0 	bl	8007174 <vTaskSwitchContext>
 80081f4:	f04f 0000 	mov.w	r0, #0
 80081f8:	f380 8811 	msr	BASEPRI, r0
 80081fc:	bc09      	pop	{r0, r3}
 80081fe:	6819      	ldr	r1, [r3, #0]
 8008200:	6808      	ldr	r0, [r1, #0]
 8008202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008206:	f01e 0f10 	tst.w	lr, #16
 800820a:	bf08      	it	eq
 800820c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008210:	f380 8809 	msr	PSP, r0
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	f3af 8000 	nop.w

08008220 <pxCurrentTCBConst>:
 8008220:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008224:	bf00      	nop
 8008226:	bf00      	nop

08008228 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
	__asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	607b      	str	r3, [r7, #4]
}
 8008240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008242:	f7fe fedd 	bl	8007000 <xTaskIncrementTick>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d003      	beq.n	8008254 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800824c:	4b06      	ldr	r3, [pc, #24]	; (8008268 <xPortSysTickHandler+0x40>)
 800824e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	2300      	movs	r3, #0
 8008256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	f383 8811 	msr	BASEPRI, r3
}
 800825e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008260:	bf00      	nop
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	e000ed04 	.word	0xe000ed04

0800826c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800826c:	b480      	push	{r7}
 800826e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008270:	4b0b      	ldr	r3, [pc, #44]	; (80082a0 <vPortSetupTimerInterrupt+0x34>)
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008276:	4b0b      	ldr	r3, [pc, #44]	; (80082a4 <vPortSetupTimerInterrupt+0x38>)
 8008278:	2200      	movs	r2, #0
 800827a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800827c:	4b0a      	ldr	r3, [pc, #40]	; (80082a8 <vPortSetupTimerInterrupt+0x3c>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a0a      	ldr	r2, [pc, #40]	; (80082ac <vPortSetupTimerInterrupt+0x40>)
 8008282:	fba2 2303 	umull	r2, r3, r2, r3
 8008286:	099b      	lsrs	r3, r3, #6
 8008288:	4a09      	ldr	r2, [pc, #36]	; (80082b0 <vPortSetupTimerInterrupt+0x44>)
 800828a:	3b01      	subs	r3, #1
 800828c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800828e:	4b04      	ldr	r3, [pc, #16]	; (80082a0 <vPortSetupTimerInterrupt+0x34>)
 8008290:	2207      	movs	r2, #7
 8008292:	601a      	str	r2, [r3, #0]
}
 8008294:	bf00      	nop
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	e000e010 	.word	0xe000e010
 80082a4:	e000e018 	.word	0xe000e018
 80082a8:	20000000 	.word	0x20000000
 80082ac:	10624dd3 	.word	0x10624dd3
 80082b0:	e000e014 	.word	0xe000e014

080082b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80082b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80082c4 <vPortEnableVFP+0x10>
 80082b8:	6801      	ldr	r1, [r0, #0]
 80082ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80082be:	6001      	str	r1, [r0, #0]
 80082c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80082c2:	bf00      	nop
 80082c4:	e000ed88 	.word	0xe000ed88

080082c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80082ce:	f3ef 8305 	mrs	r3, IPSR
 80082d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2b0f      	cmp	r3, #15
 80082d8:	d914      	bls.n	8008304 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80082da:	4a17      	ldr	r2, [pc, #92]	; (8008338 <vPortValidateInterruptPriority+0x70>)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4413      	add	r3, r2
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082e4:	4b15      	ldr	r3, [pc, #84]	; (800833c <vPortValidateInterruptPriority+0x74>)
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	7afa      	ldrb	r2, [r7, #11]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d20a      	bcs.n	8008304 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	607b      	str	r3, [r7, #4]
}
 8008300:	bf00      	nop
 8008302:	e7fe      	b.n	8008302 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008304:	4b0e      	ldr	r3, [pc, #56]	; (8008340 <vPortValidateInterruptPriority+0x78>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800830c:	4b0d      	ldr	r3, [pc, #52]	; (8008344 <vPortValidateInterruptPriority+0x7c>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	429a      	cmp	r2, r3
 8008312:	d90a      	bls.n	800832a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008318:	f383 8811 	msr	BASEPRI, r3
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	603b      	str	r3, [r7, #0]
}
 8008326:	bf00      	nop
 8008328:	e7fe      	b.n	8008328 <vPortValidateInterruptPriority+0x60>
	}
 800832a:	bf00      	nop
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	e000e3f0 	.word	0xe000e3f0
 800833c:	20000d18 	.word	0x20000d18
 8008340:	e000ed0c 	.word	0xe000ed0c
 8008344:	20000d1c 	.word	0x20000d1c

08008348 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b08a      	sub	sp, #40	; 0x28
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008350:	2300      	movs	r3, #0
 8008352:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008354:	f7fe fd98 	bl	8006e88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008358:	4b5b      	ldr	r3, [pc, #364]	; (80084c8 <pvPortMalloc+0x180>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d101      	bne.n	8008364 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008360:	f000 f920 	bl	80085a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008364:	4b59      	ldr	r3, [pc, #356]	; (80084cc <pvPortMalloc+0x184>)
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4013      	ands	r3, r2
 800836c:	2b00      	cmp	r3, #0
 800836e:	f040 8093 	bne.w	8008498 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d01d      	beq.n	80083b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008378:	2208      	movs	r2, #8
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4413      	add	r3, r2
 800837e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f003 0307 	and.w	r3, r3, #7
 8008386:	2b00      	cmp	r3, #0
 8008388:	d014      	beq.n	80083b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f023 0307 	bic.w	r3, r3, #7
 8008390:	3308      	adds	r3, #8
 8008392:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00a      	beq.n	80083b4 <pvPortMalloc+0x6c>
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	617b      	str	r3, [r7, #20]
}
 80083b0:	bf00      	nop
 80083b2:	e7fe      	b.n	80083b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d06e      	beq.n	8008498 <pvPortMalloc+0x150>
 80083ba:	4b45      	ldr	r3, [pc, #276]	; (80084d0 <pvPortMalloc+0x188>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d869      	bhi.n	8008498 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80083c4:	4b43      	ldr	r3, [pc, #268]	; (80084d4 <pvPortMalloc+0x18c>)
 80083c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80083c8:	4b42      	ldr	r3, [pc, #264]	; (80084d4 <pvPortMalloc+0x18c>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083ce:	e004      	b.n	80083da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d903      	bls.n	80083ec <pvPortMalloc+0xa4>
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1f1      	bne.n	80083d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083ec:	4b36      	ldr	r3, [pc, #216]	; (80084c8 <pvPortMalloc+0x180>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d050      	beq.n	8008498 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2208      	movs	r2, #8
 80083fc:	4413      	add	r3, r2
 80083fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	1ad2      	subs	r2, r2, r3
 8008410:	2308      	movs	r3, #8
 8008412:	005b      	lsls	r3, r3, #1
 8008414:	429a      	cmp	r2, r3
 8008416:	d91f      	bls.n	8008458 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4413      	add	r3, r2
 800841e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	f003 0307 	and.w	r3, r3, #7
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <pvPortMalloc+0xf8>
	__asm volatile
 800842a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	613b      	str	r3, [r7, #16]
}
 800843c:	bf00      	nop
 800843e:	e7fe      	b.n	800843e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008442:	685a      	ldr	r2, [r3, #4]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	1ad2      	subs	r2, r2, r3
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008452:	69b8      	ldr	r0, [r7, #24]
 8008454:	f000 f908 	bl	8008668 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008458:	4b1d      	ldr	r3, [pc, #116]	; (80084d0 <pvPortMalloc+0x188>)
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	4a1b      	ldr	r2, [pc, #108]	; (80084d0 <pvPortMalloc+0x188>)
 8008464:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008466:	4b1a      	ldr	r3, [pc, #104]	; (80084d0 <pvPortMalloc+0x188>)
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	4b1b      	ldr	r3, [pc, #108]	; (80084d8 <pvPortMalloc+0x190>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	429a      	cmp	r2, r3
 8008470:	d203      	bcs.n	800847a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008472:	4b17      	ldr	r3, [pc, #92]	; (80084d0 <pvPortMalloc+0x188>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a18      	ldr	r2, [pc, #96]	; (80084d8 <pvPortMalloc+0x190>)
 8008478:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	4b13      	ldr	r3, [pc, #76]	; (80084cc <pvPortMalloc+0x184>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	431a      	orrs	r2, r3
 8008484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008486:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848a:	2200      	movs	r2, #0
 800848c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800848e:	4b13      	ldr	r3, [pc, #76]	; (80084dc <pvPortMalloc+0x194>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3301      	adds	r3, #1
 8008494:	4a11      	ldr	r2, [pc, #68]	; (80084dc <pvPortMalloc+0x194>)
 8008496:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008498:	f7fe fd04 	bl	8006ea4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	f003 0307 	and.w	r3, r3, #7
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00a      	beq.n	80084bc <pvPortMalloc+0x174>
	__asm volatile
 80084a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084aa:	f383 8811 	msr	BASEPRI, r3
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	60fb      	str	r3, [r7, #12]
}
 80084b8:	bf00      	nop
 80084ba:	e7fe      	b.n	80084ba <pvPortMalloc+0x172>
	return pvReturn;
 80084bc:	69fb      	ldr	r3, [r7, #28]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3728      	adds	r7, #40	; 0x28
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	200018e0 	.word	0x200018e0
 80084cc:	200018f4 	.word	0x200018f4
 80084d0:	200018e4 	.word	0x200018e4
 80084d4:	200018d8 	.word	0x200018d8
 80084d8:	200018e8 	.word	0x200018e8
 80084dc:	200018ec 	.word	0x200018ec

080084e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d04d      	beq.n	800858e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084f2:	2308      	movs	r3, #8
 80084f4:	425b      	negs	r3, r3
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	4413      	add	r3, r2
 80084fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	4b24      	ldr	r3, [pc, #144]	; (8008598 <vPortFree+0xb8>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4013      	ands	r3, r2
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10a      	bne.n	8008524 <vPortFree+0x44>
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	60fb      	str	r3, [r7, #12]
}
 8008520:	bf00      	nop
 8008522:	e7fe      	b.n	8008522 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00a      	beq.n	8008542 <vPortFree+0x62>
	__asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	60bb      	str	r3, [r7, #8]
}
 800853e:	bf00      	nop
 8008540:	e7fe      	b.n	8008540 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	4b14      	ldr	r3, [pc, #80]	; (8008598 <vPortFree+0xb8>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4013      	ands	r3, r2
 800854c:	2b00      	cmp	r3, #0
 800854e:	d01e      	beq.n	800858e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d11a      	bne.n	800858e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	4b0e      	ldr	r3, [pc, #56]	; (8008598 <vPortFree+0xb8>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	43db      	mvns	r3, r3
 8008562:	401a      	ands	r2, r3
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008568:	f7fe fc8e 	bl	8006e88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	685a      	ldr	r2, [r3, #4]
 8008570:	4b0a      	ldr	r3, [pc, #40]	; (800859c <vPortFree+0xbc>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4413      	add	r3, r2
 8008576:	4a09      	ldr	r2, [pc, #36]	; (800859c <vPortFree+0xbc>)
 8008578:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800857a:	6938      	ldr	r0, [r7, #16]
 800857c:	f000 f874 	bl	8008668 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008580:	4b07      	ldr	r3, [pc, #28]	; (80085a0 <vPortFree+0xc0>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	3301      	adds	r3, #1
 8008586:	4a06      	ldr	r2, [pc, #24]	; (80085a0 <vPortFree+0xc0>)
 8008588:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800858a:	f7fe fc8b 	bl	8006ea4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800858e:	bf00      	nop
 8008590:	3718      	adds	r7, #24
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	200018f4 	.word	0x200018f4
 800859c:	200018e4 	.word	0x200018e4
 80085a0:	200018f0 	.word	0x200018f0

080085a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80085ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80085b0:	4b27      	ldr	r3, [pc, #156]	; (8008650 <prvHeapInit+0xac>)
 80085b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f003 0307 	and.w	r3, r3, #7
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00c      	beq.n	80085d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	3307      	adds	r3, #7
 80085c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f023 0307 	bic.w	r3, r3, #7
 80085ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	4a1f      	ldr	r2, [pc, #124]	; (8008650 <prvHeapInit+0xac>)
 80085d4:	4413      	add	r3, r2
 80085d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80085dc:	4a1d      	ldr	r2, [pc, #116]	; (8008654 <prvHeapInit+0xb0>)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80085e2:	4b1c      	ldr	r3, [pc, #112]	; (8008654 <prvHeapInit+0xb0>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	4413      	add	r3, r2
 80085ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80085f0:	2208      	movs	r2, #8
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	1a9b      	subs	r3, r3, r2
 80085f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f023 0307 	bic.w	r3, r3, #7
 80085fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	4a15      	ldr	r2, [pc, #84]	; (8008658 <prvHeapInit+0xb4>)
 8008604:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008606:	4b14      	ldr	r3, [pc, #80]	; (8008658 <prvHeapInit+0xb4>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2200      	movs	r2, #0
 800860c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800860e:	4b12      	ldr	r3, [pc, #72]	; (8008658 <prvHeapInit+0xb4>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2200      	movs	r2, #0
 8008614:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	1ad2      	subs	r2, r2, r3
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008624:	4b0c      	ldr	r3, [pc, #48]	; (8008658 <prvHeapInit+0xb4>)
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	4a0a      	ldr	r2, [pc, #40]	; (800865c <prvHeapInit+0xb8>)
 8008632:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	4a09      	ldr	r2, [pc, #36]	; (8008660 <prvHeapInit+0xbc>)
 800863a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800863c:	4b09      	ldr	r3, [pc, #36]	; (8008664 <prvHeapInit+0xc0>)
 800863e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008642:	601a      	str	r2, [r3, #0]
}
 8008644:	bf00      	nop
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	20000d20 	.word	0x20000d20
 8008654:	200018d8 	.word	0x200018d8
 8008658:	200018e0 	.word	0x200018e0
 800865c:	200018e8 	.word	0x200018e8
 8008660:	200018e4 	.word	0x200018e4
 8008664:	200018f4 	.word	0x200018f4

08008668 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008670:	4b28      	ldr	r3, [pc, #160]	; (8008714 <prvInsertBlockIntoFreeList+0xac>)
 8008672:	60fb      	str	r3, [r7, #12]
 8008674:	e002      	b.n	800867c <prvInsertBlockIntoFreeList+0x14>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	60fb      	str	r3, [r7, #12]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	429a      	cmp	r2, r3
 8008684:	d8f7      	bhi.n	8008676 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	4413      	add	r3, r2
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	429a      	cmp	r2, r3
 8008696:	d108      	bne.n	80086aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	685a      	ldr	r2, [r3, #4]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	441a      	add	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	441a      	add	r2, r3
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d118      	bne.n	80086f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	4b15      	ldr	r3, [pc, #84]	; (8008718 <prvInsertBlockIntoFreeList+0xb0>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d00d      	beq.n	80086e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	685a      	ldr	r2, [r3, #4]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	441a      	add	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	e008      	b.n	80086f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80086e6:	4b0c      	ldr	r3, [pc, #48]	; (8008718 <prvInsertBlockIntoFreeList+0xb0>)
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	e003      	b.n	80086f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d002      	beq.n	8008706 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008706:	bf00      	nop
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	200018d8 	.word	0x200018d8
 8008718:	200018e0 	.word	0x200018e0

0800871c <__libc_init_array>:
 800871c:	b570      	push	{r4, r5, r6, lr}
 800871e:	4d0d      	ldr	r5, [pc, #52]	; (8008754 <__libc_init_array+0x38>)
 8008720:	4c0d      	ldr	r4, [pc, #52]	; (8008758 <__libc_init_array+0x3c>)
 8008722:	1b64      	subs	r4, r4, r5
 8008724:	10a4      	asrs	r4, r4, #2
 8008726:	2600      	movs	r6, #0
 8008728:	42a6      	cmp	r6, r4
 800872a:	d109      	bne.n	8008740 <__libc_init_array+0x24>
 800872c:	4d0b      	ldr	r5, [pc, #44]	; (800875c <__libc_init_array+0x40>)
 800872e:	4c0c      	ldr	r4, [pc, #48]	; (8008760 <__libc_init_array+0x44>)
 8008730:	f000 f842 	bl	80087b8 <_init>
 8008734:	1b64      	subs	r4, r4, r5
 8008736:	10a4      	asrs	r4, r4, #2
 8008738:	2600      	movs	r6, #0
 800873a:	42a6      	cmp	r6, r4
 800873c:	d105      	bne.n	800874a <__libc_init_array+0x2e>
 800873e:	bd70      	pop	{r4, r5, r6, pc}
 8008740:	f855 3b04 	ldr.w	r3, [r5], #4
 8008744:	4798      	blx	r3
 8008746:	3601      	adds	r6, #1
 8008748:	e7ee      	b.n	8008728 <__libc_init_array+0xc>
 800874a:	f855 3b04 	ldr.w	r3, [r5], #4
 800874e:	4798      	blx	r3
 8008750:	3601      	adds	r6, #1
 8008752:	e7f2      	b.n	800873a <__libc_init_array+0x1e>
 8008754:	08008948 	.word	0x08008948
 8008758:	08008948 	.word	0x08008948
 800875c:	08008948 	.word	0x08008948
 8008760:	0800894c 	.word	0x0800894c

08008764 <memcpy>:
 8008764:	440a      	add	r2, r1
 8008766:	4291      	cmp	r1, r2
 8008768:	f100 33ff 	add.w	r3, r0, #4294967295
 800876c:	d100      	bne.n	8008770 <memcpy+0xc>
 800876e:	4770      	bx	lr
 8008770:	b510      	push	{r4, lr}
 8008772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008776:	f803 4f01 	strb.w	r4, [r3, #1]!
 800877a:	4291      	cmp	r1, r2
 800877c:	d1f9      	bne.n	8008772 <memcpy+0xe>
 800877e:	bd10      	pop	{r4, pc}

08008780 <memset>:
 8008780:	4402      	add	r2, r0
 8008782:	4603      	mov	r3, r0
 8008784:	4293      	cmp	r3, r2
 8008786:	d100      	bne.n	800878a <memset+0xa>
 8008788:	4770      	bx	lr
 800878a:	f803 1b01 	strb.w	r1, [r3], #1
 800878e:	e7f9      	b.n	8008784 <memset+0x4>

08008790 <strncat>:
 8008790:	b530      	push	{r4, r5, lr}
 8008792:	4604      	mov	r4, r0
 8008794:	7825      	ldrb	r5, [r4, #0]
 8008796:	4623      	mov	r3, r4
 8008798:	3401      	adds	r4, #1
 800879a:	2d00      	cmp	r5, #0
 800879c:	d1fa      	bne.n	8008794 <strncat+0x4>
 800879e:	3a01      	subs	r2, #1
 80087a0:	d304      	bcc.n	80087ac <strncat+0x1c>
 80087a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087a6:	f803 4b01 	strb.w	r4, [r3], #1
 80087aa:	b904      	cbnz	r4, 80087ae <strncat+0x1e>
 80087ac:	bd30      	pop	{r4, r5, pc}
 80087ae:	2a00      	cmp	r2, #0
 80087b0:	d1f5      	bne.n	800879e <strncat+0xe>
 80087b2:	701a      	strb	r2, [r3, #0]
 80087b4:	e7f3      	b.n	800879e <strncat+0xe>
	...

080087b8 <_init>:
 80087b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ba:	bf00      	nop
 80087bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087be:	bc08      	pop	{r3}
 80087c0:	469e      	mov	lr, r3
 80087c2:	4770      	bx	lr

080087c4 <_fini>:
 80087c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c6:	bf00      	nop
 80087c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ca:	bc08      	pop	{r3}
 80087cc:	469e      	mov	lr, r3
 80087ce:	4770      	bx	lr
