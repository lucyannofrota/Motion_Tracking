
miniprojetoSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008610  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080087d0  080087d0  000187d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008940  08008940  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008940  08008940  00018940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008948  08008948  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008948  08008948  00018948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800894c  0800894c  0001894c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b54  20000010  08008960  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b64  08008960  00021b64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fd47  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038be  00000000  00000000  0003fd87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001828  00000000  00000000  00043648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e0  00000000  00000000  00044e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000438e  00000000  00000000  00046550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019915  00000000  00000000  0004a8de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001140f1  00000000  00000000  000641f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001782e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006638  00000000  00000000  00178338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080087b8 	.word	0x080087b8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	080087b8 	.word	0x080087b8

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96e 	b.w	80004f4 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468c      	mov	ip, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	f040 8083 	bne.w	8000346 <__udivmoddi4+0x116>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d947      	bls.n	80002d6 <__udivmoddi4+0xa6>
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	b142      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024c:	f1c2 0020 	rsb	r0, r2, #32
 8000250:	fa24 f000 	lsr.w	r0, r4, r0
 8000254:	4091      	lsls	r1, r2
 8000256:	4097      	lsls	r7, r2
 8000258:	ea40 0c01 	orr.w	ip, r0, r1
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbbc f6f8 	udiv	r6, ip, r8
 8000268:	fa1f fe87 	uxth.w	lr, r7
 800026c:	fb08 c116 	mls	r1, r8, r6, ip
 8000270:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000274:	fb06 f10e 	mul.w	r1, r6, lr
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18fb      	adds	r3, r7, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 8119 	bcs.w	80004b8 <__udivmoddi4+0x288>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8116 	bls.w	80004b8 <__udivmoddi4+0x288>
 800028c:	3e02      	subs	r6, #2
 800028e:	443b      	add	r3, r7
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a4:	45a6      	cmp	lr, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8105 	bcs.w	80004bc <__udivmoddi4+0x28c>
 80002b2:	45a6      	cmp	lr, r4
 80002b4:	f240 8102 	bls.w	80004bc <__udivmoddi4+0x28c>
 80002b8:	3802      	subs	r0, #2
 80002ba:	443c      	add	r4, r7
 80002bc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c0:	eba4 040e 	sub.w	r4, r4, lr
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	b902      	cbnz	r2, 80002da <__udivmoddi4+0xaa>
 80002d8:	deff      	udf	#255	; 0xff
 80002da:	fab2 f282 	clz	r2, r2
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d150      	bne.n	8000384 <__udivmoddi4+0x154>
 80002e2:	1bcb      	subs	r3, r1, r7
 80002e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e8:	fa1f f887 	uxth.w	r8, r7
 80002ec:	2601      	movs	r6, #1
 80002ee:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f2:	0c21      	lsrs	r1, r4, #16
 80002f4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002fc:	fb08 f30c 	mul.w	r3, r8, ip
 8000300:	428b      	cmp	r3, r1
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000304:	1879      	adds	r1, r7, r1
 8000306:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0xe2>
 800030c:	428b      	cmp	r3, r1
 800030e:	f200 80e9 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 8000312:	4684      	mov	ip, r0
 8000314:	1ac9      	subs	r1, r1, r3
 8000316:	b2a3      	uxth	r3, r4
 8000318:	fbb1 f0fe 	udiv	r0, r1, lr
 800031c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000320:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000324:	fb08 f800 	mul.w	r8, r8, r0
 8000328:	45a0      	cmp	r8, r4
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x10c>
 800032c:	193c      	adds	r4, r7, r4
 800032e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x10a>
 8000334:	45a0      	cmp	r8, r4
 8000336:	f200 80d9 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 800033a:	4618      	mov	r0, r3
 800033c:	eba4 0408 	sub.w	r4, r4, r8
 8000340:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000344:	e7bf      	b.n	80002c6 <__udivmoddi4+0x96>
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x12e>
 800034a:	2d00      	cmp	r5, #0
 800034c:	f000 80b1 	beq.w	80004b2 <__udivmoddi4+0x282>
 8000350:	2600      	movs	r6, #0
 8000352:	e9c5 0100 	strd	r0, r1, [r5]
 8000356:	4630      	mov	r0, r6
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f683 	clz	r6, r3
 8000362:	2e00      	cmp	r6, #0
 8000364:	d14a      	bne.n	80003fc <__udivmoddi4+0x1cc>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0x140>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80b8 	bhi.w	80004e0 <__udivmoddi4+0x2b0>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0103 	sbc.w	r1, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	468c      	mov	ip, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0a8      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800037e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000384:	f1c2 0320 	rsb	r3, r2, #32
 8000388:	fa20 f603 	lsr.w	r6, r0, r3
 800038c:	4097      	lsls	r7, r2
 800038e:	fa01 f002 	lsl.w	r0, r1, r2
 8000392:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000396:	40d9      	lsrs	r1, r3
 8000398:	4330      	orrs	r0, r6
 800039a:	0c03      	lsrs	r3, r0, #16
 800039c:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a0:	fa1f f887 	uxth.w	r8, r7
 80003a4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb06 f108 	mul.w	r1, r6, r8
 80003b0:	4299      	cmp	r1, r3
 80003b2:	fa04 f402 	lsl.w	r4, r4, r2
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x19c>
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	f106 3cff 	add.w	ip, r6, #4294967295
 80003be:	f080 808d 	bcs.w	80004dc <__udivmoddi4+0x2ac>
 80003c2:	4299      	cmp	r1, r3
 80003c4:	f240 808a 	bls.w	80004dc <__udivmoddi4+0x2ac>
 80003c8:	3e02      	subs	r6, #2
 80003ca:	443b      	add	r3, r7
 80003cc:	1a5b      	subs	r3, r3, r1
 80003ce:	b281      	uxth	r1, r0
 80003d0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb00 f308 	mul.w	r3, r0, r8
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x1c4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ea:	d273      	bcs.n	80004d4 <__udivmoddi4+0x2a4>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d971      	bls.n	80004d4 <__udivmoddi4+0x2a4>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4439      	add	r1, r7
 80003f4:	1acb      	subs	r3, r1, r3
 80003f6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fa:	e778      	b.n	80002ee <__udivmoddi4+0xbe>
 80003fc:	f1c6 0c20 	rsb	ip, r6, #32
 8000400:	fa03 f406 	lsl.w	r4, r3, r6
 8000404:	fa22 f30c 	lsr.w	r3, r2, ip
 8000408:	431c      	orrs	r4, r3
 800040a:	fa20 f70c 	lsr.w	r7, r0, ip
 800040e:	fa01 f306 	lsl.w	r3, r1, r6
 8000412:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000416:	fa21 f10c 	lsr.w	r1, r1, ip
 800041a:	431f      	orrs	r7, r3
 800041c:	0c3b      	lsrs	r3, r7, #16
 800041e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000422:	fa1f f884 	uxth.w	r8, r4
 8000426:	fb0e 1119 	mls	r1, lr, r9, r1
 800042a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042e:	fb09 fa08 	mul.w	sl, r9, r8
 8000432:	458a      	cmp	sl, r1
 8000434:	fa02 f206 	lsl.w	r2, r2, r6
 8000438:	fa00 f306 	lsl.w	r3, r0, r6
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x220>
 800043e:	1861      	adds	r1, r4, r1
 8000440:	f109 30ff 	add.w	r0, r9, #4294967295
 8000444:	d248      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 8000446:	458a      	cmp	sl, r1
 8000448:	d946      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4421      	add	r1, r4
 8000450:	eba1 010a 	sub.w	r1, r1, sl
 8000454:	b2bf      	uxth	r7, r7
 8000456:	fbb1 f0fe 	udiv	r0, r1, lr
 800045a:	fb0e 1110 	mls	r1, lr, r0, r1
 800045e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000462:	fb00 f808 	mul.w	r8, r0, r8
 8000466:	45b8      	cmp	r8, r7
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x24a>
 800046a:	19e7      	adds	r7, r4, r7
 800046c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000470:	d22e      	bcs.n	80004d0 <__udivmoddi4+0x2a0>
 8000472:	45b8      	cmp	r8, r7
 8000474:	d92c      	bls.n	80004d0 <__udivmoddi4+0x2a0>
 8000476:	3802      	subs	r0, #2
 8000478:	4427      	add	r7, r4
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	eba7 0708 	sub.w	r7, r7, r8
 8000482:	fba0 8902 	umull	r8, r9, r0, r2
 8000486:	454f      	cmp	r7, r9
 8000488:	46c6      	mov	lr, r8
 800048a:	4649      	mov	r1, r9
 800048c:	d31a      	bcc.n	80004c4 <__udivmoddi4+0x294>
 800048e:	d017      	beq.n	80004c0 <__udivmoddi4+0x290>
 8000490:	b15d      	cbz	r5, 80004aa <__udivmoddi4+0x27a>
 8000492:	ebb3 020e 	subs.w	r2, r3, lr
 8000496:	eb67 0701 	sbc.w	r7, r7, r1
 800049a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049e:	40f2      	lsrs	r2, r6
 80004a0:	ea4c 0202 	orr.w	r2, ip, r2
 80004a4:	40f7      	lsrs	r7, r6
 80004a6:	e9c5 2700 	strd	r2, r7, [r5]
 80004aa:	2600      	movs	r6, #0
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e70b      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e9      	b.n	8000290 <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fd      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c0:	4543      	cmp	r3, r8
 80004c2:	d2e5      	bcs.n	8000490 <__udivmoddi4+0x260>
 80004c4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c8:	eb69 0104 	sbc.w	r1, r9, r4
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7df      	b.n	8000490 <__udivmoddi4+0x260>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e7d2      	b.n	800047a <__udivmoddi4+0x24a>
 80004d4:	4660      	mov	r0, ip
 80004d6:	e78d      	b.n	80003f4 <__udivmoddi4+0x1c4>
 80004d8:	4681      	mov	r9, r0
 80004da:	e7b9      	b.n	8000450 <__udivmoddi4+0x220>
 80004dc:	4666      	mov	r6, ip
 80004de:	e775      	b.n	80003cc <__udivmoddi4+0x19c>
 80004e0:	4630      	mov	r0, r6
 80004e2:	e74a      	b.n	800037a <__udivmoddi4+0x14a>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	4439      	add	r1, r7
 80004ea:	e713      	b.n	8000314 <__udivmoddi4+0xe4>
 80004ec:	3802      	subs	r0, #2
 80004ee:	443c      	add	r4, r7
 80004f0:	e724      	b.n	800033c <__udivmoddi4+0x10c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fcc3 	bl	8000e86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f862 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f9a2 	bl	800084c <MX_GPIO_Init>
  MX_DMA_Init();
 8000508:	f000 f976 	bl	80007f8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800050c:	f000 f8d6 	bl	80006bc <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 8000510:	f000 f920 	bl	8000754 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA (&hlpuart1, SR_BUFFER, BUFFER_LEN);
 8000514:	2201      	movs	r2, #1
 8000516:	491b      	ldr	r1, [pc, #108]	; (8000584 <main+0x8c>)
 8000518:	481b      	ldr	r0, [pc, #108]	; (8000588 <main+0x90>)
 800051a:	f003 fb85 	bl	8003c28 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart4, BT_BUFFER, BUFFER_LEN);
 800051e:	2201      	movs	r2, #1
 8000520:	491a      	ldr	r1, [pc, #104]	; (800058c <main+0x94>)
 8000522:	481b      	ldr	r0, [pc, #108]	; (8000590 <main+0x98>)
 8000524:	f003 fb3a 	bl	8003b9c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000528:	f005 f962 	bl	80057f0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of SR_Queue */
  SR_QueueHandle = osMessageQueueNew (64, 1, &SR_Queue_attributes);
 800052c:	4a19      	ldr	r2, [pc, #100]	; (8000594 <main+0x9c>)
 800052e:	2101      	movs	r1, #1
 8000530:	2040      	movs	r0, #64	; 0x40
 8000532:	f005 fa54 	bl	80059de <osMessageQueueNew>
 8000536:	4603      	mov	r3, r0
 8000538:	4a17      	ldr	r2, [pc, #92]	; (8000598 <main+0xa0>)
 800053a:	6013      	str	r3, [r2, #0]

  /* creation of BT_Queue */
  BT_QueueHandle = osMessageQueueNew (64, 1, &BT_Queue_attributes);
 800053c:	4a17      	ldr	r2, [pc, #92]	; (800059c <main+0xa4>)
 800053e:	2101      	movs	r1, #1
 8000540:	2040      	movs	r0, #64	; 0x40
 8000542:	f005 fa4c 	bl	80059de <osMessageQueueNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a15      	ldr	r2, [pc, #84]	; (80005a0 <main+0xa8>)
 800054a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TransmitTask_Se */
  TransmitTask_SeHandle = osThreadNew(StartTransmitTask_Serial, NULL, &TransmitTask_Se_attributes);
 800054c:	4a15      	ldr	r2, [pc, #84]	; (80005a4 <main+0xac>)
 800054e:	2100      	movs	r1, #0
 8000550:	4815      	ldr	r0, [pc, #84]	; (80005a8 <main+0xb0>)
 8000552:	f005 f997 	bl	8005884 <osThreadNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a14      	ldr	r2, [pc, #80]	; (80005ac <main+0xb4>)
 800055a:	6013      	str	r3, [r2, #0]

  /* creation of TransmitTask_BT */
  TransmitTask_BTHandle = osThreadNew(StartTransmitTask_BT, NULL, &TransmitTask_BT_attributes);
 800055c:	4a14      	ldr	r2, [pc, #80]	; (80005b0 <main+0xb8>)
 800055e:	2100      	movs	r1, #0
 8000560:	4814      	ldr	r0, [pc, #80]	; (80005b4 <main+0xbc>)
 8000562:	f005 f98f 	bl	8005884 <osThreadNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a13      	ldr	r2, [pc, #76]	; (80005b8 <main+0xc0>)
 800056a:	6013      	str	r3, [r2, #0]

  /* creation of PingTask */
  PingTaskHandle = osThreadNew(StartPingTask, NULL, &PingTask_attributes);
 800056c:	4a13      	ldr	r2, [pc, #76]	; (80005bc <main+0xc4>)
 800056e:	2100      	movs	r1, #0
 8000570:	4813      	ldr	r0, [pc, #76]	; (80005c0 <main+0xc8>)
 8000572:	f005 f987 	bl	8005884 <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <main+0xcc>)
 800057a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800057c:	f005 f95c 	bl	8005838 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000580:	e7fe      	b.n	8000580 <main+0x88>
 8000582:	bf00      	nop
 8000584:	2000002c 	.word	0x2000002c
 8000588:	20001904 	.word	0x20001904
 800058c:	200019d8 	.word	0x200019d8
 8000590:	20001a44 	.word	0x20001a44
 8000594:	080088a0 	.word	0x080088a0
 8000598:	20001a40 	.word	0x20001a40
 800059c:	080088b8 	.word	0x080088b8
 80005a0:	20001a3c 	.word	0x20001a3c
 80005a4:	08008834 	.word	0x08008834
 80005a8:	08000931 	.word	0x08000931
 80005ac:	200018fc 	.word	0x200018fc
 80005b0:	08008858 	.word	0x08008858
 80005b4:	080009cd 	.word	0x080009cd
 80005b8:	200018f8 	.word	0x200018f8
 80005bc:	0800887c 	.word	0x0800887c
 80005c0:	08000a69 	.word	0x08000a69
 80005c4:	20001900 	.word	0x20001900

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b0bc      	sub	sp, #240	; 0xf0
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005d2:	2244      	movs	r2, #68	; 0x44
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f008 f8d2 	bl	8008780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2294      	movs	r2, #148	; 0x94
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f008 f8c4 	bl	8008780 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005fc:	f001 fa3e 	bl	8001a7c <HAL_PWREx_ControlVoltageScaling>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000606:	f000 fa5f 	bl	8000ac8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800060a:	2310      	movs	r3, #16
 800060c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800061c:	2360      	movs	r3, #96	; 0x60
 800061e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000628:	2301      	movs	r3, #1
 800062a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800062e:	2301      	movs	r3, #1
 8000630:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000634:	2320      	movs	r3, #32
 8000636:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fac7 	bl	8001be4 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800065c:	f000 fa34 	bl	8000ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2303      	movs	r3, #3
 8000668:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800067e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000682:	2103      	movs	r1, #3
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fed3 	bl	8002430 <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000690:	f000 fa1a 	bl	8000ac8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_LPUART1;
 8000694:	2328      	movs	r3, #40	; 0x28
 8000696:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000698:	2300      	movs	r3, #0
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800069c:	2300      	movs	r3, #0
 800069e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 f9a8 	bl	80029f8 <HAL_RCCEx_PeriphCLKConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80006ae:	f000 fa0b 	bl	8000ac8 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	37f0      	adds	r7, #240	; 0xf0
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006c2:	4a23      	ldr	r2, [pc, #140]	; (8000750 <MX_LPUART1_UART_Init+0x94>)
 80006c4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 8000700:	2200      	movs	r2, #0
 8000702:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000704:	4811      	ldr	r0, [pc, #68]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 8000706:	f003 f961 	bl	80039cc <HAL_UART_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000710:	f000 f9da 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000714:	2100      	movs	r1, #0
 8000716:	480d      	ldr	r0, [pc, #52]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 8000718:	f004 ff5c 	bl	80055d4 <HAL_UARTEx_SetTxFifoThreshold>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000722:	f000 f9d1 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000726:	2100      	movs	r1, #0
 8000728:	4808      	ldr	r0, [pc, #32]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 800072a:	f004 ff91 	bl	8005650 <HAL_UARTEx_SetRxFifoThreshold>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000734:	f000 f9c8 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_LPUART1_UART_Init+0x90>)
 800073a:	f004 ff12 	bl	8005562 <HAL_UARTEx_DisableFifoMode>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000744:	f000 f9c0 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20001904 	.word	0x20001904
 8000750:	40008000 	.word	0x40008000

08000754 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000758:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <MX_UART4_Init+0x9c>)
 800075a:	4a26      	ldr	r2, [pc, #152]	; (80007f4 <MX_UART4_Init+0xa0>)
 800075c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 800075e:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <MX_UART4_Init+0x9c>)
 8000760:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000764:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <MX_UART4_Init+0x9c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <MX_UART4_Init+0x9c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000772:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <MX_UART4_Init+0x9c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <MX_UART4_Init+0x9c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <MX_UART4_Init+0x9c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MX_UART4_Init+0x9c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <MX_UART4_Init+0x9c>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <MX_UART4_Init+0x9c>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <MX_UART4_Init+0x9c>)
 8000798:	2200      	movs	r2, #0
 800079a:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.FifoMode = UART_FIFOMODE_DISABLE;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_UART4_Init+0x9c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80007a2:	2300      	movs	r3, #0
 80007a4:	2200      	movs	r2, #0
 80007a6:	2100      	movs	r1, #0
 80007a8:	4811      	ldr	r0, [pc, #68]	; (80007f0 <MX_UART4_Init+0x9c>)
 80007aa:	f004 fe53 	bl	8005454 <HAL_RS485Ex_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_UART4_Init+0x64>
  {
    Error_Handler();
 80007b4:	f000 f988 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b8:	2100      	movs	r1, #0
 80007ba:	480d      	ldr	r0, [pc, #52]	; (80007f0 <MX_UART4_Init+0x9c>)
 80007bc:	f004 ff0a 	bl	80055d4 <HAL_UARTEx_SetTxFifoThreshold>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_UART4_Init+0x76>
  {
    Error_Handler();
 80007c6:	f000 f97f 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ca:	2100      	movs	r1, #0
 80007cc:	4808      	ldr	r0, [pc, #32]	; (80007f0 <MX_UART4_Init+0x9c>)
 80007ce:	f004 ff3f 	bl	8005650 <HAL_UARTEx_SetRxFifoThreshold>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_UART4_Init+0x88>
  {
    Error_Handler();
 80007d8:	f000 f976 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_UART4_Init+0x9c>)
 80007de:	f004 fec0 	bl	8005562 <HAL_UARTEx_DisableFifoMode>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_UART4_Init+0x98>
  {
    Error_Handler();
 80007e8:	f000 f96e 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20001a44 	.word	0x20001a44
 80007f4:	40004c00 	.word	0x40004c00

080007f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_DMA_Init+0x50>)
 8000800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000802:	4a11      	ldr	r2, [pc, #68]	; (8000848 <MX_DMA_Init+0x50>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6493      	str	r3, [r2, #72]	; 0x48
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_DMA_Init+0x50>)
 800080c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_DMA_Init+0x50>)
 8000818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800081a:	4a0b      	ldr	r2, [pc, #44]	; (8000848 <MX_DMA_Init+0x50>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6493      	str	r3, [r2, #72]	; 0x48
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_DMA_Init+0x50>)
 8000824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2105      	movs	r1, #5
 8000832:	200f      	movs	r0, #15
 8000834:	f000 fc18 	bl	8001068 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000838:	200f      	movs	r0, #15
 800083a:	f000 fc31 	bl	80010a0 <HAL_NVIC_EnableIRQ>

}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000852:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_GPIO_Init+0x74>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a1a      	ldr	r2, [pc, #104]	; (80008c0 <MX_GPIO_Init+0x74>)
 8000858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_GPIO_Init+0x74>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 800086a:	f001 f9ab 	bl	8001bc4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_GPIO_Init+0x74>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <MX_GPIO_Init+0x74>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_GPIO_Init+0x74>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_GPIO_Init+0x74>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <MX_GPIO_Init+0x74>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_GPIO_Init+0x74>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_GPIO_Init+0x74>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <MX_GPIO_Init+0x74>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <MX_GPIO_Init+0x74>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

}
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000

080008c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1){
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a12      	ldr	r2, [pc, #72]	; (8000918 <HAL_UART_RxCpltCallback+0x54>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d10b      	bne.n	80008ec <HAL_UART_RxCpltCallback+0x28>
		osMessageQueuePut(SR_QueueHandle, SR_BUFFER, 0, 0);
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <HAL_UART_RxCpltCallback+0x58>)
 80008d6:	6818      	ldr	r0, [r3, #0]
 80008d8:	2300      	movs	r3, #0
 80008da:	2200      	movs	r2, #0
 80008dc:	4910      	ldr	r1, [pc, #64]	; (8000920 <HAL_UART_RxCpltCallback+0x5c>)
 80008de:	f005 f8f1 	bl	8005ac4 <osMessageQueuePut>
		HAL_UART_Receive_DMA(&hlpuart1, SR_BUFFER, BUFFER_LEN);
 80008e2:	2201      	movs	r2, #1
 80008e4:	490e      	ldr	r1, [pc, #56]	; (8000920 <HAL_UART_RxCpltCallback+0x5c>)
 80008e6:	480c      	ldr	r0, [pc, #48]	; (8000918 <HAL_UART_RxCpltCallback+0x54>)
 80008e8:	f003 f99e 	bl	8003c28 <HAL_UART_Receive_DMA>
	}
	if(huart->Instance == huart4.Instance){
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <HAL_UART_RxCpltCallback+0x60>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d10b      	bne.n	8000910 <HAL_UART_RxCpltCallback+0x4c>
		osMessageQueuePut(BT_QueueHandle, BT_BUFFER, 0, 0);
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <HAL_UART_RxCpltCallback+0x64>)
 80008fa:	6818      	ldr	r0, [r3, #0]
 80008fc:	2300      	movs	r3, #0
 80008fe:	2200      	movs	r2, #0
 8000900:	490a      	ldr	r1, [pc, #40]	; (800092c <HAL_UART_RxCpltCallback+0x68>)
 8000902:	f005 f8df 	bl	8005ac4 <osMessageQueuePut>
		HAL_UART_Receive_IT(&huart4, BT_BUFFER, BUFFER_LEN);
 8000906:	2201      	movs	r2, #1
 8000908:	4908      	ldr	r1, [pc, #32]	; (800092c <HAL_UART_RxCpltCallback+0x68>)
 800090a:	4806      	ldr	r0, [pc, #24]	; (8000924 <HAL_UART_RxCpltCallback+0x60>)
 800090c:	f003 f946 	bl	8003b9c <HAL_UART_Receive_IT>
	}
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20001904 	.word	0x20001904
 800091c:	20001a40 	.word	0x20001a40
 8000920:	2000002c 	.word	0x2000002c
 8000924:	20001a44 	.word	0x20001a44
 8000928:	20001a3c 	.word	0x20001a3c
 800092c:	200019d8 	.word	0x200019d8

08000930 <StartTransmitTask_Serial>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTransmitTask_Serial */
void StartTransmitTask_Serial(void *argument)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b096      	sub	sp, #88	; 0x58
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	char msg_sr[64];
	uint16_t count_sr = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	char c[1];

  /* Infinite loop */
	for(;;)
	{
		memset(msg_sr,0,64);
 800093e:	f107 0310 	add.w	r3, r7, #16
 8000942:	2240      	movs	r2, #64	; 0x40
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f007 ff1a 	bl	8008780 <memset>
		count_sr = osMessageQueueGetCount(SR_QueueHandle);
 800094c:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <StartTransmitTask_Serial+0x90>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f005 f975 	bl	8005c40 <osMessageQueueGetCount>
 8000956:	4603      	mov	r3, r0
 8000958:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		if(count_sr > 0){
 800095c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000960:	2b00      	cmp	r3, #0
 8000962:	d028      	beq.n	80009b6 <StartTransmitTask_Serial+0x86>
			for (int i = 0; i < count_sr; i++) {
 8000964:	2300      	movs	r3, #0
 8000966:	657b      	str	r3, [r7, #84]	; 0x54
 8000968:	e012      	b.n	8000990 <StartTransmitTask_Serial+0x60>
				osMessageQueueGet(SR_QueueHandle, c, 0, 100);
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <StartTransmitTask_Serial+0x90>)
 800096c:	6818      	ldr	r0, [r3, #0]
 800096e:	f107 010c 	add.w	r1, r7, #12
 8000972:	2364      	movs	r3, #100	; 0x64
 8000974:	2200      	movs	r2, #0
 8000976:	f005 f905 	bl	8005b84 <osMessageQueueGet>
				strncat(msg_sr, c, 1);
 800097a:	f107 010c 	add.w	r1, r7, #12
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	2201      	movs	r2, #1
 8000984:	4618      	mov	r0, r3
 8000986:	f007 ff03 	bl	8008790 <strncat>
			for (int i = 0; i < count_sr; i++) {
 800098a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800098c:	3301      	adds	r3, #1
 800098e:	657b      	str	r3, [r7, #84]	; 0x54
 8000990:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000994:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000996:	429a      	cmp	r2, r3
 8000998:	dbe7      	blt.n	800096a <StartTransmitTask_Serial+0x3a>
			}
			HAL_UART_Transmit(&huart4, (uint8_t *)msg_sr, sizeof(msg_sr), 100);
 800099a:	f107 0110 	add.w	r1, r7, #16
 800099e:	2364      	movs	r3, #100	; 0x64
 80009a0:	2240      	movs	r2, #64	; 0x40
 80009a2:	4808      	ldr	r0, [pc, #32]	; (80009c4 <StartTransmitTask_Serial+0x94>)
 80009a4:	f003 f862 	bl	8003a6c <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg_sr, sizeof(msg_sr), 100);
 80009a8:	f107 0110 	add.w	r1, r7, #16
 80009ac:	2364      	movs	r3, #100	; 0x64
 80009ae:	2240      	movs	r2, #64	; 0x40
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <StartTransmitTask_Serial+0x98>)
 80009b2:	f003 f85b 	bl	8003a6c <HAL_UART_Transmit>
		}
		osDelay(100);
 80009b6:	2064      	movs	r0, #100	; 0x64
 80009b8:	f004 fff6 	bl	80059a8 <osDelay>
		memset(msg_sr,0,64);
 80009bc:	e7bf      	b.n	800093e <StartTransmitTask_Serial+0xe>
 80009be:	bf00      	nop
 80009c0:	20001a40 	.word	0x20001a40
 80009c4:	20001a44 	.word	0x20001a44
 80009c8:	20001904 	.word	0x20001904

080009cc <StartTransmitTask_BT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTransmitTask_BT */
void StartTransmitTask_BT(void *argument)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b096      	sub	sp, #88	; 0x58
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTransmitTask_BT */

	char msg_bt[64];
	uint16_t count_bt = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	char b[1];
  /* Infinite loop */
	for(;;)
	{
		memset(msg_bt,0,64);
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	2240      	movs	r2, #64	; 0x40
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f007 fecc 	bl	8008780 <memset>
		count_bt = osMessageQueueGetCount(BT_QueueHandle);
 80009e8:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <StartTransmitTask_BT+0x90>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f005 f927 	bl	8005c40 <osMessageQueueGetCount>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		if(count_bt > 0){
 80009f8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d028      	beq.n	8000a52 <StartTransmitTask_BT+0x86>
			for (int j = 0; j < count_bt; j++) {
 8000a00:	2300      	movs	r3, #0
 8000a02:	657b      	str	r3, [r7, #84]	; 0x54
 8000a04:	e012      	b.n	8000a2c <StartTransmitTask_BT+0x60>
				osMessageQueueGet(BT_QueueHandle, b, 0, 100);
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <StartTransmitTask_BT+0x90>)
 8000a08:	6818      	ldr	r0, [r3, #0]
 8000a0a:	f107 010c 	add.w	r1, r7, #12
 8000a0e:	2364      	movs	r3, #100	; 0x64
 8000a10:	2200      	movs	r2, #0
 8000a12:	f005 f8b7 	bl	8005b84 <osMessageQueueGet>
				strncat(msg_bt,b,1);
 8000a16:	f107 010c 	add.w	r1, r7, #12
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4618      	mov	r0, r3
 8000a22:	f007 feb5 	bl	8008790 <strncat>
			for (int j = 0; j < count_bt; j++) {
 8000a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a28:	3301      	adds	r3, #1
 8000a2a:	657b      	str	r3, [r7, #84]	; 0x54
 8000a2c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000a30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a32:	429a      	cmp	r2, r3
 8000a34:	dbe7      	blt.n	8000a06 <StartTransmitTask_BT+0x3a>
			}
			HAL_UART_Transmit(&huart4, (uint8_t *)msg_bt, sizeof(msg_bt), 100);
 8000a36:	f107 0110 	add.w	r1, r7, #16
 8000a3a:	2364      	movs	r3, #100	; 0x64
 8000a3c:	2240      	movs	r2, #64	; 0x40
 8000a3e:	4808      	ldr	r0, [pc, #32]	; (8000a60 <StartTransmitTask_BT+0x94>)
 8000a40:	f003 f814 	bl	8003a6c <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg_bt, sizeof(msg_bt), 100);
 8000a44:	f107 0110 	add.w	r1, r7, #16
 8000a48:	2364      	movs	r3, #100	; 0x64
 8000a4a:	2240      	movs	r2, #64	; 0x40
 8000a4c:	4805      	ldr	r0, [pc, #20]	; (8000a64 <StartTransmitTask_BT+0x98>)
 8000a4e:	f003 f80d 	bl	8003a6c <HAL_UART_Transmit>
		}
		osDelay(100);
 8000a52:	2064      	movs	r0, #100	; 0x64
 8000a54:	f004 ffa8 	bl	80059a8 <osDelay>
		memset(msg_bt,0,64);
 8000a58:	e7bf      	b.n	80009da <StartTransmitTask_BT+0xe>
 8000a5a:	bf00      	nop
 8000a5c:	20001a3c 	.word	0x20001a3c
 8000a60:	20001a44 	.word	0x20001a44
 8000a64:	20001904 	.word	0x20001904

08000a68 <StartPingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPingTask */
void StartPingTask(void *argument)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPingTask */
	uint8_t msg_[7] = "543210\n";
 8000a70:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <StartPingTask+0x34>)
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a7a:	6018      	str	r0, [r3, #0]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	8019      	strh	r1, [r3, #0]
 8000a80:	3302      	adds	r3, #2
 8000a82:	0c0a      	lsrs	r2, r1, #16
 8000a84:	701a      	strb	r2, [r3, #0]
//	  reset(msgStr, pointer);
//	  addStr(msg_,7, pointer);
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Transmit(&huart4, msg_, 7, 100);
 8000a86:	f107 0108 	add.w	r1, r7, #8
 8000a8a:	2364      	movs	r3, #100	; 0x64
 8000a8c:	2207      	movs	r2, #7
 8000a8e:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <StartPingTask+0x38>)
 8000a90:	f002 ffec 	bl	8003a6c <HAL_UART_Transmit>
//	HAL_UART_Transmit(&hlpuart1, msg_, sizeof(msg_), 100);
//	HAL_UART_Transmit(&hlpuart1, msgStr, sizeof(msgStr), 100);
//	HAL_UART_Transmit(&huart4, msgStr, sizeof(msgStr), 100);

    osDelay(150);
 8000a94:	2096      	movs	r0, #150	; 0x96
 8000a96:	f004 ff87 	bl	80059a8 <osDelay>
	HAL_UART_Transmit(&huart4, msg_, 7, 100);
 8000a9a:	e7f4      	b.n	8000a86 <StartPingTask+0x1e>
 8000a9c:	08008814 	.word	0x08008814
 8000aa0:	20001a44 	.word	0x20001a44

08000aa4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d101      	bne.n	8000aba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ab6:	f000 f9ff 	bl	8000eb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40001000 	.word	0x40001000

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x8>
	...

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <HAL_MspInit+0x4c>)
 8000adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ade:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <HAL_MspInit+0x4c>)
 8000af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <HAL_MspInit+0x4c>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afc:	6593      	str	r3, [r2, #88]	; 0x58
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	210f      	movs	r1, #15
 8000b0e:	f06f 0001 	mvn.w	r0, #1
 8000b12:	f000 faa9 	bl	8001068 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000

08000b24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08c      	sub	sp, #48	; 0x30
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a57      	ldr	r2, [pc, #348]	; (8000ca0 <HAL_UART_MspInit+0x17c>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d154      	bne.n	8000bf0 <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b46:	4b57      	ldr	r3, [pc, #348]	; (8000ca4 <HAL_UART_MspInit+0x180>)
 8000b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b4a:	4a56      	ldr	r2, [pc, #344]	; (8000ca4 <HAL_UART_MspInit+0x180>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b52:	4b54      	ldr	r3, [pc, #336]	; (8000ca4 <HAL_UART_MspInit+0x180>)
 8000b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
 8000b5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b5e:	4b51      	ldr	r3, [pc, #324]	; (8000ca4 <HAL_UART_MspInit+0x180>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	4a50      	ldr	r2, [pc, #320]	; (8000ca4 <HAL_UART_MspInit+0x180>)
 8000b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6a:	4b4e      	ldr	r3, [pc, #312]	; (8000ca4 <HAL_UART_MspInit+0x180>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8000b76:	f001 f825 	bl	8001bc4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000b7a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b8c:	2308      	movs	r3, #8
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	4844      	ldr	r0, [pc, #272]	; (8000ca8 <HAL_UART_MspInit+0x184>)
 8000b98:	f000 fdbe 	bl	8001718 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel5;
 8000b9c:	4b43      	ldr	r3, [pc, #268]	; (8000cac <HAL_UART_MspInit+0x188>)
 8000b9e:	4a44      	ldr	r2, [pc, #272]	; (8000cb0 <HAL_UART_MspInit+0x18c>)
 8000ba0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000ba2:	4b42      	ldr	r3, [pc, #264]	; (8000cac <HAL_UART_MspInit+0x188>)
 8000ba4:	2222      	movs	r2, #34	; 0x22
 8000ba6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ba8:	4b40      	ldr	r3, [pc, #256]	; (8000cac <HAL_UART_MspInit+0x188>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bae:	4b3f      	ldr	r3, [pc, #252]	; (8000cac <HAL_UART_MspInit+0x188>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bb4:	4b3d      	ldr	r3, [pc, #244]	; (8000cac <HAL_UART_MspInit+0x188>)
 8000bb6:	2280      	movs	r2, #128	; 0x80
 8000bb8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bba:	4b3c      	ldr	r3, [pc, #240]	; (8000cac <HAL_UART_MspInit+0x188>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bc0:	4b3a      	ldr	r3, [pc, #232]	; (8000cac <HAL_UART_MspInit+0x188>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000bc6:	4b39      	ldr	r3, [pc, #228]	; (8000cac <HAL_UART_MspInit+0x188>)
 8000bc8:	2220      	movs	r2, #32
 8000bca:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bcc:	4b37      	ldr	r3, [pc, #220]	; (8000cac <HAL_UART_MspInit+0x188>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000bd2:	4836      	ldr	r0, [pc, #216]	; (8000cac <HAL_UART_MspInit+0x188>)
 8000bd4:	f000 fa72 	bl	80010bc <HAL_DMA_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000bde:	f7ff ff73 	bl	8000ac8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a31      	ldr	r2, [pc, #196]	; (8000cac <HAL_UART_MspInit+0x188>)
 8000be6:	67da      	str	r2, [r3, #124]	; 0x7c
 8000be8:	4a30      	ldr	r2, [pc, #192]	; (8000cac <HAL_UART_MspInit+0x188>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000bee:	e053      	b.n	8000c98 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==UART4)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a2f      	ldr	r2, [pc, #188]	; (8000cb4 <HAL_UART_MspInit+0x190>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d14e      	bne.n	8000c98 <HAL_UART_MspInit+0x174>
    __HAL_RCC_UART4_CLK_ENABLE();
 8000bfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ca4 <HAL_UART_MspInit+0x180>)
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfe:	4a29      	ldr	r2, [pc, #164]	; (8000ca4 <HAL_UART_MspInit+0x180>)
 8000c00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c04:	6593      	str	r3, [r2, #88]	; 0x58
 8000c06:	4b27      	ldr	r3, [pc, #156]	; (8000ca4 <HAL_UART_MspInit+0x180>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <HAL_UART_MspInit+0x180>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	4a23      	ldr	r2, [pc, #140]	; (8000ca4 <HAL_UART_MspInit+0x180>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <HAL_UART_MspInit+0x180>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <HAL_UART_MspInit+0x180>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a1d      	ldr	r2, [pc, #116]	; (8000ca4 <HAL_UART_MspInit+0x180>)
 8000c30:	f043 0304 	orr.w	r3, r3, #4
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <HAL_UART_MspInit+0x180>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f003 0304 	and.w	r3, r3, #4
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c54:	2308      	movs	r3, #8
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c62:	f000 fd59 	bl	8001718 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c78:	2308      	movs	r3, #8
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <HAL_UART_MspInit+0x194>)
 8000c84:	f000 fd48 	bl	8001718 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2105      	movs	r1, #5
 8000c8c:	2034      	movs	r0, #52	; 0x34
 8000c8e:	f000 f9eb 	bl	8001068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000c92:	2034      	movs	r0, #52	; 0x34
 8000c94:	f000 fa04 	bl	80010a0 <HAL_NVIC_EnableIRQ>
}
 8000c98:	bf00      	nop
 8000c9a:	3730      	adds	r7, #48	; 0x30
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40008000 	.word	0x40008000
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	48001800 	.word	0x48001800
 8000cac:	200019dc 	.word	0x200019dc
 8000cb0:	40020058 	.word	0x40020058
 8000cb4:	40004c00 	.word	0x40004c00
 8000cb8:	48000800 	.word	0x48000800

08000cbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08c      	sub	sp, #48	; 0x30
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	2036      	movs	r0, #54	; 0x36
 8000cd2:	f000 f9c9 	bl	8001068 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cd6:	2036      	movs	r0, #54	; 0x36
 8000cd8:	f000 f9e2 	bl	80010a0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <HAL_InitTick+0x9c>)
 8000cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce0:	4a1d      	ldr	r2, [pc, #116]	; (8000d58 <HAL_InitTick+0x9c>)
 8000ce2:	f043 0310 	orr.w	r3, r3, #16
 8000ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <HAL_InitTick+0x9c>)
 8000cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cec:	f003 0310 	and.w	r3, r3, #16
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cf4:	f107 0210 	add.w	r2, r7, #16
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f001 fd86 	bl	8002810 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d04:	f001 fd58 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
 8000d08:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d0c:	4a13      	ldr	r2, [pc, #76]	; (8000d5c <HAL_InitTick+0xa0>)
 8000d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d12:	0c9b      	lsrs	r3, r3, #18
 8000d14:	3b01      	subs	r3, #1
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <HAL_InitTick+0xa4>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <HAL_InitTick+0xa8>)
 8000d1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <HAL_InitTick+0xa4>)
 8000d20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d24:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d26:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <HAL_InitTick+0xa4>)
 8000d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <HAL_InitTick+0xa4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <HAL_InitTick+0xa4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d38:	4809      	ldr	r0, [pc, #36]	; (8000d60 <HAL_InitTick+0xa4>)
 8000d3a:	f002 fb75 	bl	8003428 <HAL_TIM_Base_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d104      	bne.n	8000d4e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d44:	4806      	ldr	r0, [pc, #24]	; (8000d60 <HAL_InitTick+0xa4>)
 8000d46:	f002 fbd1 	bl	80034ec <HAL_TIM_Base_Start_IT>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	e000      	b.n	8000d50 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3730      	adds	r7, #48	; 0x30
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	431bde83 	.word	0x431bde83
 8000d60:	20001ad4 	.word	0x20001ad4
 8000d64:	40001000 	.word	0x40001000

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <DMA1_Channel5_IRQHandler+0x10>)
 8000d9a:	f000 fb6d 	bl	8001478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200019dc 	.word	0x200019dc

08000da8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <UART4_IRQHandler+0x10>)
 8000dae:	f002 ff81 	bl	8003cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20001a44 	.word	0x20001a44

08000dbc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <TIM6_DAC_IRQHandler+0x10>)
 8000dc2:	f002 fc03 	bl	80035cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20001ad4 	.word	0x20001ad4

08000dd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <SystemInit+0x5c>)
 8000dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dda:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <SystemInit+0x5c>)
 8000ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <SystemInit+0x60>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a11      	ldr	r2, [pc, #68]	; (8000e30 <SystemInit+0x60>)
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <SystemInit+0x60>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <SystemInit+0x60>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <SystemInit+0x60>)
 8000dfc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e00:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e04:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <SystemInit+0x60>)
 8000e08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e0c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <SystemInit+0x60>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a07      	ldr	r2, [pc, #28]	; (8000e30 <SystemInit+0x60>)
 8000e14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e18:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <SystemInit+0x60>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00
 8000e30:	40021000 	.word	0x40021000

08000e34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e38:	f7ff ffca 	bl	8000dd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e3e:	e003      	b.n	8000e48 <LoopCopyDataInit>

08000e40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e46:	3104      	adds	r1, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e48:	480a      	ldr	r0, [pc, #40]	; (8000e74 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e50:	d3f6      	bcc.n	8000e40 <CopyDataInit>
	ldr	r2, =_sbss
 8000e52:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e54:	e002      	b.n	8000e5c <LoopFillZerobss>

08000e56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e58:	f842 3b04 	str.w	r3, [r2], #4

08000e5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <LoopForever+0x16>)
	cmp	r2, r3
 8000e5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e60:	d3f9      	bcc.n	8000e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e62:	f007 fc5b 	bl	800871c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e66:	f7ff fb47 	bl	80004f8 <main>

08000e6a <LoopForever>:

LoopForever:
    b LoopForever
 8000e6a:	e7fe      	b.n	8000e6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e6c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000e70:	08008950 	.word	0x08008950
	ldr	r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e78:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000e7c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000e80:	20001b64 	.word	0x20001b64

08000e84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC1_IRQHandler>

08000e86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f000 f8de 	bl	8001052 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff ff10 	bl	8000cbc <HAL_InitTick>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d002      	beq.n	8000ea8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	71fb      	strb	r3, [r7, #7]
 8000ea6:	e001      	b.n	8000eac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ea8:	f7ff fe14 	bl	8000ad4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eac:	79fb      	ldrb	r3, [r7, #7]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20001b20 	.word	0x20001b20

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20001b20 	.word	0x20001b20

08000ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	db0b      	blt.n	8000f86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	f003 021f 	and.w	r2, r3, #31
 8000f74:	4907      	ldr	r1, [pc, #28]	; (8000f94 <__NVIC_EnableIRQ+0x38>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	095b      	lsrs	r3, r3, #5
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000e100 	.word	0xe000e100

08000f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	db0a      	blt.n	8000fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <__NVIC_SetPriority+0x4c>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	0112      	lsls	r2, r2, #4
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	440b      	add	r3, r1
 8000fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc0:	e00a      	b.n	8000fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <__NVIC_SetPriority+0x50>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	3b04      	subs	r3, #4
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	761a      	strb	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f1c3 0307 	rsb	r3, r3, #7
 8001006:	2b04      	cmp	r3, #4
 8001008:	bf28      	it	cs
 800100a:	2304      	movcs	r3, #4
 800100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	2b06      	cmp	r3, #6
 8001014:	d902      	bls.n	800101c <NVIC_EncodePriority+0x30>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3b03      	subs	r3, #3
 800101a:	e000      	b.n	800101e <NVIC_EncodePriority+0x32>
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 32ff 	mov.w	r2, #4294967295
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43d9      	mvns	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	4313      	orrs	r3, r2
         );
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ff4c 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800107a:	f7ff ff61 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 800107e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	68b9      	ldr	r1, [r7, #8]
 8001084:	6978      	ldr	r0, [r7, #20]
 8001086:	f7ff ffb1 	bl	8000fec <NVIC_EncodePriority>
 800108a:	4602      	mov	r2, r0
 800108c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001090:	4611      	mov	r1, r2
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff80 	bl	8000f98 <__NVIC_SetPriority>
}
 8001098:	bf00      	nop
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ff54 	bl	8000f5c <__NVIC_EnableIRQ>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e08d      	b.n	80011ea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b47      	ldr	r3, [pc, #284]	; (80011f4 <HAL_DMA_Init+0x138>)
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d80f      	bhi.n	80010fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	4b45      	ldr	r3, [pc, #276]	; (80011f8 <HAL_DMA_Init+0x13c>)
 80010e2:	4413      	add	r3, r2
 80010e4:	4a45      	ldr	r2, [pc, #276]	; (80011fc <HAL_DMA_Init+0x140>)
 80010e6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ea:	091b      	lsrs	r3, r3, #4
 80010ec:	009a      	lsls	r2, r3, #2
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a42      	ldr	r2, [pc, #264]	; (8001200 <HAL_DMA_Init+0x144>)
 80010f6:	641a      	str	r2, [r3, #64]	; 0x40
 80010f8:	e00e      	b.n	8001118 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	4b40      	ldr	r3, [pc, #256]	; (8001204 <HAL_DMA_Init+0x148>)
 8001102:	4413      	add	r3, r2
 8001104:	4a3d      	ldr	r2, [pc, #244]	; (80011fc <HAL_DMA_Init+0x140>)
 8001106:	fba2 2303 	umull	r2, r3, r2, r3
 800110a:	091b      	lsrs	r3, r3, #4
 800110c:	009a      	lsls	r2, r3, #2
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a3c      	ldr	r2, [pc, #240]	; (8001208 <HAL_DMA_Init+0x14c>)
 8001116:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2202      	movs	r2, #2
 800111c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800112e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001132:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800113c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001148:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001154:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 fa72 	bl	8001654 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001178:	d102      	bne.n	8001180 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001194:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d010      	beq.n	80011c0 <HAL_DMA_Init+0x104>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	d80c      	bhi.n	80011c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 fa92 	bl	80016d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	e008      	b.n	80011d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40020407 	.word	0x40020407
 80011f8:	bffdfff8 	.word	0xbffdfff8
 80011fc:	cccccccd 	.word	0xcccccccd
 8001200:	40020000 	.word	0x40020000
 8001204:	bffdfbf8 	.word	0xbffdfbf8
 8001208:	40020400 	.word	0x40020400

0800120c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001224:	2b01      	cmp	r3, #1
 8001226:	d101      	bne.n	800122c <HAL_DMA_Start_IT+0x20>
 8001228:	2302      	movs	r3, #2
 800122a:	e066      	b.n	80012fa <HAL_DMA_Start_IT+0xee>
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2201      	movs	r2, #1
 8001230:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b01      	cmp	r3, #1
 800123e:	d155      	bne.n	80012ec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2202      	movs	r2, #2
 8001244:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2200      	movs	r2, #0
 800124c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0201 	bic.w	r2, r2, #1
 800125c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	68b9      	ldr	r1, [r7, #8]
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f000 f9b6 	bl	80015d6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	2b00      	cmp	r3, #0
 8001270:	d008      	beq.n	8001284 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f042 020e 	orr.w	r2, r2, #14
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	e00f      	b.n	80012a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0204 	bic.w	r2, r2, #4
 8001292:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 020a 	orr.w	r2, r2, #10
 80012a2:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d007      	beq.n	80012c2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012c0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d007      	beq.n	80012da <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012d8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f042 0201 	orr.w	r2, r2, #1
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	e005      	b.n	80012f8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80012f4:	2302      	movs	r3, #2
 80012f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001302:	b480      	push	{r7}
 8001304:	b085      	sub	sp, #20
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d008      	beq.n	800132c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2204      	movs	r2, #4
 800131e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e040      	b.n	80013ae <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 020e 	bic.w	r2, r2, #14
 800133a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001346:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800134a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0201 	bic.w	r2, r2, #1
 800135a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001360:	f003 021c 	and.w	r2, r3, #28
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	2101      	movs	r1, #1
 800136a:	fa01 f202 	lsl.w	r2, r1, r2
 800136e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001378:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00c      	beq.n	800139c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001390:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800139a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d005      	beq.n	80013de <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2204      	movs	r2, #4
 80013d6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	73fb      	strb	r3, [r7, #15]
 80013dc:	e047      	b.n	800146e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 020e 	bic.w	r2, r2, #14
 80013ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0201 	bic.w	r2, r2, #1
 80013fc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800140c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	f003 021c 	and.w	r2, r3, #28
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	2101      	movs	r1, #1
 800141c:	fa01 f202 	lsl.w	r2, r1, r2
 8001420:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800142a:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00c      	beq.n	800144e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001442:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800144c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2201      	movs	r2, #1
 8001452:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	4798      	blx	r3
    }
  }
  return status;
 800146e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001494:	f003 031c 	and.w	r3, r3, #28
 8001498:	2204      	movs	r2, #4
 800149a:	409a      	lsls	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4013      	ands	r3, r2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d026      	beq.n	80014f2 <HAL_DMA_IRQHandler+0x7a>
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d021      	beq.n	80014f2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0320 	and.w	r3, r3, #32
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d107      	bne.n	80014cc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0204 	bic.w	r2, r2, #4
 80014ca:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d0:	f003 021c 	and.w	r2, r3, #28
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	2104      	movs	r1, #4
 80014da:	fa01 f202 	lsl.w	r2, r1, r2
 80014de:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d071      	beq.n	80015cc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80014f0:	e06c      	b.n	80015cc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f003 031c 	and.w	r3, r3, #28
 80014fa:	2202      	movs	r2, #2
 80014fc:	409a      	lsls	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4013      	ands	r3, r2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d02e      	beq.n	8001564 <HAL_DMA_IRQHandler+0xec>
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d029      	beq.n	8001564 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0320 	and.w	r3, r3, #32
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10b      	bne.n	8001536 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 020a 	bic.w	r2, r2, #10
 800152c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f003 021c 	and.w	r2, r3, #28
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	2102      	movs	r1, #2
 8001544:	fa01 f202 	lsl.w	r2, r1, r2
 8001548:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001556:	2b00      	cmp	r3, #0
 8001558:	d038      	beq.n	80015cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001562:	e033      	b.n	80015cc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001568:	f003 031c 	and.w	r3, r3, #28
 800156c:	2208      	movs	r2, #8
 800156e:	409a      	lsls	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4013      	ands	r3, r2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d02a      	beq.n	80015ce <HAL_DMA_IRQHandler+0x156>
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d025      	beq.n	80015ce <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 020e 	bic.w	r2, r2, #14
 8001590:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	f003 021c 	and.w	r2, r3, #28
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	2101      	movs	r1, #1
 80015a0:	fa01 f202 	lsl.w	r2, r1, r2
 80015a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d004      	beq.n	80015ce <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
}
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b085      	sub	sp, #20
 80015da:	af00      	add	r7, sp, #0
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015ec:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d004      	beq.n	8001600 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015fe:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001604:	f003 021c 	and.w	r2, r3, #28
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	2101      	movs	r1, #1
 800160e:	fa01 f202 	lsl.w	r2, r1, r2
 8001612:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b10      	cmp	r3, #16
 8001622:	d108      	bne.n	8001636 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001634:	e007      	b.n	8001646 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	60da      	str	r2, [r3, #12]
}
 8001646:	bf00      	nop
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001664:	429a      	cmp	r2, r3
 8001666:	d80a      	bhi.n	800167e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001674:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6493      	str	r3, [r2, #72]	; 0x48
 800167c:	e007      	b.n	800168e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	089b      	lsrs	r3, r3, #2
 8001684:	009a      	lsls	r2, r3, #2
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001688:	4413      	add	r3, r2
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	3b08      	subs	r3, #8
 8001696:	4a0c      	ldr	r2, [pc, #48]	; (80016c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	091b      	lsrs	r3, r3, #4
 800169e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80016a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f003 031f 	and.w	r3, r3, #31
 80016ac:	2201      	movs	r2, #1
 80016ae:	409a      	lsls	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	40020407 	.word	0x40020407
 80016c4:	4002081c 	.word	0x4002081c
 80016c8:	cccccccd 	.word	0xcccccccd
 80016cc:	40020880 	.word	0x40020880

080016d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80016e4:	4413      	add	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	461a      	mov	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a08      	ldr	r2, [pc, #32]	; (8001714 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80016f2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	2201      	movs	r2, #1
 80016fe:	409a      	lsls	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	1000823f 	.word	0x1000823f
 8001714:	40020940 	.word	0x40020940

08001718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001718:	b480      	push	{r7}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001726:	e166      	b.n	80019f6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2101      	movs	r1, #1
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	fa01 f303 	lsl.w	r3, r1, r3
 8001734:	4013      	ands	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 8158 	beq.w	80019f0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d00b      	beq.n	8001760 <HAL_GPIO_Init+0x48>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d007      	beq.n	8001760 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001754:	2b11      	cmp	r3, #17
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b12      	cmp	r3, #18
 800175e:	d130      	bne.n	80017c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001796:	2201      	movs	r2, #1
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	f003 0201 	and.w	r2, r3, #1
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	2203      	movs	r2, #3
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4013      	ands	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0xea>
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b12      	cmp	r3, #18
 8001800:	d123      	bne.n	800184a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	08da      	lsrs	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3208      	adds	r2, #8
 800180a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800180e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	220f      	movs	r2, #15
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	691a      	ldr	r2, [r3, #16]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	08da      	lsrs	r2, r3, #3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3208      	adds	r2, #8
 8001844:	6939      	ldr	r1, [r7, #16]
 8001846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	2203      	movs	r2, #3
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 0203 	and.w	r2, r3, #3
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 80b2 	beq.w	80019f0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188c:	4b61      	ldr	r3, [pc, #388]	; (8001a14 <HAL_GPIO_Init+0x2fc>)
 800188e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001890:	4a60      	ldr	r2, [pc, #384]	; (8001a14 <HAL_GPIO_Init+0x2fc>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6613      	str	r3, [r2, #96]	; 0x60
 8001898:	4b5e      	ldr	r3, [pc, #376]	; (8001a14 <HAL_GPIO_Init+0x2fc>)
 800189a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018a4:	4a5c      	ldr	r2, [pc, #368]	; (8001a18 <HAL_GPIO_Init+0x300>)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	089b      	lsrs	r3, r3, #2
 80018aa:	3302      	adds	r3, #2
 80018ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	220f      	movs	r2, #15
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018ce:	d02b      	beq.n	8001928 <HAL_GPIO_Init+0x210>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a52      	ldr	r2, [pc, #328]	; (8001a1c <HAL_GPIO_Init+0x304>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d025      	beq.n	8001924 <HAL_GPIO_Init+0x20c>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a51      	ldr	r2, [pc, #324]	; (8001a20 <HAL_GPIO_Init+0x308>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d01f      	beq.n	8001920 <HAL_GPIO_Init+0x208>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a50      	ldr	r2, [pc, #320]	; (8001a24 <HAL_GPIO_Init+0x30c>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d019      	beq.n	800191c <HAL_GPIO_Init+0x204>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a4f      	ldr	r2, [pc, #316]	; (8001a28 <HAL_GPIO_Init+0x310>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d013      	beq.n	8001918 <HAL_GPIO_Init+0x200>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a4e      	ldr	r2, [pc, #312]	; (8001a2c <HAL_GPIO_Init+0x314>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d00d      	beq.n	8001914 <HAL_GPIO_Init+0x1fc>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a4d      	ldr	r2, [pc, #308]	; (8001a30 <HAL_GPIO_Init+0x318>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d007      	beq.n	8001910 <HAL_GPIO_Init+0x1f8>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a4c      	ldr	r2, [pc, #304]	; (8001a34 <HAL_GPIO_Init+0x31c>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d101      	bne.n	800190c <HAL_GPIO_Init+0x1f4>
 8001908:	2307      	movs	r3, #7
 800190a:	e00e      	b.n	800192a <HAL_GPIO_Init+0x212>
 800190c:	2308      	movs	r3, #8
 800190e:	e00c      	b.n	800192a <HAL_GPIO_Init+0x212>
 8001910:	2306      	movs	r3, #6
 8001912:	e00a      	b.n	800192a <HAL_GPIO_Init+0x212>
 8001914:	2305      	movs	r3, #5
 8001916:	e008      	b.n	800192a <HAL_GPIO_Init+0x212>
 8001918:	2304      	movs	r3, #4
 800191a:	e006      	b.n	800192a <HAL_GPIO_Init+0x212>
 800191c:	2303      	movs	r3, #3
 800191e:	e004      	b.n	800192a <HAL_GPIO_Init+0x212>
 8001920:	2302      	movs	r3, #2
 8001922:	e002      	b.n	800192a <HAL_GPIO_Init+0x212>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <HAL_GPIO_Init+0x212>
 8001928:	2300      	movs	r3, #0
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	f002 0203 	and.w	r2, r2, #3
 8001930:	0092      	lsls	r2, r2, #2
 8001932:	4093      	lsls	r3, r2
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800193a:	4937      	ldr	r1, [pc, #220]	; (8001a18 <HAL_GPIO_Init+0x300>)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	089b      	lsrs	r3, r3, #2
 8001940:	3302      	adds	r3, #2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001948:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <HAL_GPIO_Init+0x320>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	43db      	mvns	r3, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800196c:	4a32      	ldr	r2, [pc, #200]	; (8001a38 <HAL_GPIO_Init+0x320>)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001972:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <HAL_GPIO_Init+0x320>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001996:	4a28      	ldr	r2, [pc, #160]	; (8001a38 <HAL_GPIO_Init+0x320>)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800199c:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <HAL_GPIO_Init+0x320>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019c0:	4a1d      	ldr	r2, [pc, #116]	; (8001a38 <HAL_GPIO_Init+0x320>)
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019c6:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <HAL_GPIO_Init+0x320>)
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019ea:	4a13      	ldr	r2, [pc, #76]	; (8001a38 <HAL_GPIO_Init+0x320>)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3301      	adds	r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f47f ae91 	bne.w	8001728 <HAL_GPIO_Init+0x10>
  }
}
 8001a06:	bf00      	nop
 8001a08:	bf00      	nop
 8001a0a:	371c      	adds	r7, #28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40010000 	.word	0x40010000
 8001a1c:	48000400 	.word	0x48000400
 8001a20:	48000800 	.word	0x48000800
 8001a24:	48000c00 	.word	0x48000c00
 8001a28:	48001000 	.word	0x48001000
 8001a2c:	48001400 	.word	0x48001400
 8001a30:	48001800 	.word	0x48001800
 8001a34:	48001c00 	.word	0x48001c00
 8001a38:	40010400 	.word	0x40010400

08001a3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a40:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a4c:	d102      	bne.n	8001a54 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a52:	e00b      	b.n	8001a6c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a62:	d102      	bne.n	8001a6a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a68:	e000      	b.n	8001a6c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001a6a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40007000 	.word	0x40007000

08001a7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d141      	bne.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a8a:	4b4b      	ldr	r3, [pc, #300]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a96:	d131      	bne.n	8001afc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a98:	4b47      	ldr	r3, [pc, #284]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a9e:	4a46      	ldr	r2, [pc, #280]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aa8:	4b43      	ldr	r3, [pc, #268]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ab0:	4a41      	ldr	r2, [pc, #260]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001ab8:	4b40      	ldr	r3, [pc, #256]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2232      	movs	r2, #50	; 0x32
 8001abe:	fb02 f303 	mul.w	r3, r2, r3
 8001ac2:	4a3f      	ldr	r2, [pc, #252]	; (8001bc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac8:	0c9b      	lsrs	r3, r3, #18
 8001aca:	3301      	adds	r3, #1
 8001acc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ace:	e002      	b.n	8001ad6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ad6:	4b38      	ldr	r3, [pc, #224]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ae2:	d102      	bne.n	8001aea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f2      	bne.n	8001ad0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aea:	4b33      	ldr	r3, [pc, #204]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af6:	d158      	bne.n	8001baa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e057      	b.n	8001bac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001afc:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b02:	4a2d      	ldr	r2, [pc, #180]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b0c:	e04d      	b.n	8001baa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b14:	d141      	bne.n	8001b9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b16:	4b28      	ldr	r3, [pc, #160]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b22:	d131      	bne.n	8001b88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b24:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b2a:	4a23      	ldr	r2, [pc, #140]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b34:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b3c:	4a1e      	ldr	r2, [pc, #120]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001b44:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2232      	movs	r2, #50	; 0x32
 8001b4a:	fb02 f303 	mul.w	r3, r2, r3
 8001b4e:	4a1c      	ldr	r2, [pc, #112]	; (8001bc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b50:	fba2 2303 	umull	r2, r3, r2, r3
 8001b54:	0c9b      	lsrs	r3, r3, #18
 8001b56:	3301      	adds	r3, #1
 8001b58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b5a:	e002      	b.n	8001b62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6e:	d102      	bne.n	8001b76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f2      	bne.n	8001b5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b82:	d112      	bne.n	8001baa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e011      	b.n	8001bac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b98:	e007      	b.n	8001baa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ba8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	40007000 	.word	0x40007000
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	431bde83 	.word	0x431bde83

08001bc4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bd2:	6053      	str	r3, [r2, #4]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40007000 	.word	0x40007000

08001be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d102      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	f000 bc16 	b.w	8002424 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bf8:	4ba0      	ldr	r3, [pc, #640]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c02:	4b9e      	ldr	r3, [pc, #632]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0310 	and.w	r3, r3, #16
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80e4 	beq.w	8001de2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d007      	beq.n	8001c30 <HAL_RCC_OscConfig+0x4c>
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	2b0c      	cmp	r3, #12
 8001c24:	f040 808b 	bne.w	8001d3e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	f040 8087 	bne.w	8001d3e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c30:	4b92      	ldr	r3, [pc, #584]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_OscConfig+0x64>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e3ed      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a1a      	ldr	r2, [r3, #32]
 8001c4c:	4b8b      	ldr	r3, [pc, #556]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d004      	beq.n	8001c62 <HAL_RCC_OscConfig+0x7e>
 8001c58:	4b88      	ldr	r3, [pc, #544]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c60:	e005      	b.n	8001c6e <HAL_RCC_OscConfig+0x8a>
 8001c62:	4b86      	ldr	r3, [pc, #536]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d223      	bcs.n	8001cba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 fdfc 	bl	8002874 <RCC_SetFlashLatencyFromMSIRange>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e3ce      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c86:	4b7d      	ldr	r3, [pc, #500]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a7c      	ldr	r2, [pc, #496]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001c8c:	f043 0308 	orr.w	r3, r3, #8
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b7a      	ldr	r3, [pc, #488]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	4977      	ldr	r1, [pc, #476]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ca4:	4b75      	ldr	r3, [pc, #468]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	4972      	ldr	r1, [pc, #456]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]
 8001cb8:	e025      	b.n	8001d06 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cba:	4b70      	ldr	r3, [pc, #448]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a6f      	ldr	r2, [pc, #444]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001cc0:	f043 0308 	orr.w	r3, r3, #8
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	4b6d      	ldr	r3, [pc, #436]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	496a      	ldr	r1, [pc, #424]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cd8:	4b68      	ldr	r3, [pc, #416]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	021b      	lsls	r3, r3, #8
 8001ce6:	4965      	ldr	r1, [pc, #404]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d109      	bne.n	8001d06 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 fdbc 	bl	8002874 <RCC_SetFlashLatencyFromMSIRange>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e38e      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d06:	f000 fcbf 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	4b5b      	ldr	r3, [pc, #364]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	495a      	ldr	r1, [pc, #360]	; (8001e80 <HAL_RCC_OscConfig+0x29c>)
 8001d18:	5ccb      	ldrb	r3, [r1, r3]
 8001d1a:	f003 031f 	and.w	r3, r3, #31
 8001d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d22:	4a58      	ldr	r2, [pc, #352]	; (8001e84 <HAL_RCC_OscConfig+0x2a0>)
 8001d24:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d26:	4b58      	ldr	r3, [pc, #352]	; (8001e88 <HAL_RCC_OscConfig+0x2a4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe ffc6 	bl	8000cbc <HAL_InitTick>
 8001d30:	4603      	mov	r3, r0
 8001d32:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d052      	beq.n	8001de0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	e372      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d032      	beq.n	8001dac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d46:	4b4d      	ldr	r3, [pc, #308]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a4c      	ldr	r2, [pc, #304]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d52:	f7ff f8c5 	bl	8000ee0 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d5a:	f7ff f8c1 	bl	8000ee0 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e35b      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d6c:	4b43      	ldr	r3, [pc, #268]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d78:	4b40      	ldr	r3, [pc, #256]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a3f      	ldr	r2, [pc, #252]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001d7e:	f043 0308 	orr.w	r3, r3, #8
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	493a      	ldr	r1, [pc, #232]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d96:	4b39      	ldr	r3, [pc, #228]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	021b      	lsls	r3, r3, #8
 8001da4:	4935      	ldr	r1, [pc, #212]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]
 8001daa:	e01a      	b.n	8001de2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dac:	4b33      	ldr	r3, [pc, #204]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a32      	ldr	r2, [pc, #200]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001db8:	f7ff f892 	bl	8000ee0 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dc0:	f7ff f88e 	bl	8000ee0 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e328      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dd2:	4b2a      	ldr	r3, [pc, #168]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x1dc>
 8001dde:	e000      	b.n	8001de2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001de0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d073      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_OscConfig+0x21c>
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	2b0c      	cmp	r3, #12
 8001df8:	d10e      	bne.n	8001e18 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d10b      	bne.n	8001e18 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e00:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d063      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x2f0>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d15f      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e305      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e20:	d106      	bne.n	8001e30 <HAL_RCC_OscConfig+0x24c>
 8001e22:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a15      	ldr	r2, [pc, #84]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	e01d      	b.n	8001e6c <HAL_RCC_OscConfig+0x288>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e38:	d10c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x270>
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a0f      	ldr	r2, [pc, #60]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a0c      	ldr	r2, [pc, #48]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e00b      	b.n	8001e6c <HAL_RCC_OscConfig+0x288>
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <HAL_RCC_OscConfig+0x298>)
 8001e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01b      	beq.n	8001eac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7ff f834 	bl	8000ee0 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e7a:	e010      	b.n	8001e9e <HAL_RCC_OscConfig+0x2ba>
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	080088d0 	.word	0x080088d0
 8001e84:	20000000 	.word	0x20000000
 8001e88:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e8c:	f7ff f828 	bl	8000ee0 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	; 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e2c2      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e9e:	4baf      	ldr	r3, [pc, #700]	; (800215c <HAL_RCC_OscConfig+0x578>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x2a8>
 8001eaa:	e014      	b.n	8001ed6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7ff f818 	bl	8000ee0 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7ff f814 	bl	8000ee0 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	; 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e2ae      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ec6:	4ba5      	ldr	r3, [pc, #660]	; (800215c <HAL_RCC_OscConfig+0x578>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x2d0>
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d060      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x310>
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	2b0c      	cmp	r3, #12
 8001eec:	d119      	bne.n	8001f22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d116      	bne.n	8001f22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ef4:	4b99      	ldr	r3, [pc, #612]	; (800215c <HAL_RCC_OscConfig+0x578>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_OscConfig+0x328>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e28b      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0c:	4b93      	ldr	r3, [pc, #588]	; (800215c <HAL_RCC_OscConfig+0x578>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	061b      	lsls	r3, r3, #24
 8001f1a:	4990      	ldr	r1, [pc, #576]	; (800215c <HAL_RCC_OscConfig+0x578>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f20:	e040      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d023      	beq.n	8001f72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f2a:	4b8c      	ldr	r3, [pc, #560]	; (800215c <HAL_RCC_OscConfig+0x578>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a8b      	ldr	r2, [pc, #556]	; (800215c <HAL_RCC_OscConfig+0x578>)
 8001f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f36:	f7fe ffd3 	bl	8000ee0 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3e:	f7fe ffcf 	bl	8000ee0 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e269      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f50:	4b82      	ldr	r3, [pc, #520]	; (800215c <HAL_RCC_OscConfig+0x578>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5c:	4b7f      	ldr	r3, [pc, #508]	; (800215c <HAL_RCC_OscConfig+0x578>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	061b      	lsls	r3, r3, #24
 8001f6a:	497c      	ldr	r1, [pc, #496]	; (800215c <HAL_RCC_OscConfig+0x578>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
 8001f70:	e018      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f72:	4b7a      	ldr	r3, [pc, #488]	; (800215c <HAL_RCC_OscConfig+0x578>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a79      	ldr	r2, [pc, #484]	; (800215c <HAL_RCC_OscConfig+0x578>)
 8001f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7e:	f7fe ffaf 	bl	8000ee0 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f86:	f7fe ffab 	bl	8000ee0 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e245      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f98:	4b70      	ldr	r3, [pc, #448]	; (800215c <HAL_RCC_OscConfig+0x578>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1f0      	bne.n	8001f86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d03c      	beq.n	800202a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d01c      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb8:	4b68      	ldr	r3, [pc, #416]	; (800215c <HAL_RCC_OscConfig+0x578>)
 8001fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fbe:	4a67      	ldr	r2, [pc, #412]	; (800215c <HAL_RCC_OscConfig+0x578>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc8:	f7fe ff8a 	bl	8000ee0 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd0:	f7fe ff86 	bl	8000ee0 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e220      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fe2:	4b5e      	ldr	r3, [pc, #376]	; (800215c <HAL_RCC_OscConfig+0x578>)
 8001fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0ef      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x3ec>
 8001ff0:	e01b      	b.n	800202a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ff2:	4b5a      	ldr	r3, [pc, #360]	; (800215c <HAL_RCC_OscConfig+0x578>)
 8001ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff8:	4a58      	ldr	r2, [pc, #352]	; (800215c <HAL_RCC_OscConfig+0x578>)
 8001ffa:	f023 0301 	bic.w	r3, r3, #1
 8001ffe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002002:	f7fe ff6d 	bl	8000ee0 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200a:	f7fe ff69 	bl	8000ee0 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e203      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800201c:	4b4f      	ldr	r3, [pc, #316]	; (800215c <HAL_RCC_OscConfig+0x578>)
 800201e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1ef      	bne.n	800200a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 80a6 	beq.w	8002184 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002038:	2300      	movs	r3, #0
 800203a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800203c:	4b47      	ldr	r3, [pc, #284]	; (800215c <HAL_RCC_OscConfig+0x578>)
 800203e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10d      	bne.n	8002064 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002048:	4b44      	ldr	r3, [pc, #272]	; (800215c <HAL_RCC_OscConfig+0x578>)
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204c:	4a43      	ldr	r2, [pc, #268]	; (800215c <HAL_RCC_OscConfig+0x578>)
 800204e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002052:	6593      	str	r3, [r2, #88]	; 0x58
 8002054:	4b41      	ldr	r3, [pc, #260]	; (800215c <HAL_RCC_OscConfig+0x578>)
 8002056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002060:	2301      	movs	r3, #1
 8002062:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002064:	4b3e      	ldr	r3, [pc, #248]	; (8002160 <HAL_RCC_OscConfig+0x57c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206c:	2b00      	cmp	r3, #0
 800206e:	d118      	bne.n	80020a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002070:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <HAL_RCC_OscConfig+0x57c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a3a      	ldr	r2, [pc, #232]	; (8002160 <HAL_RCC_OscConfig+0x57c>)
 8002076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800207a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207c:	f7fe ff30 	bl	8000ee0 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002084:	f7fe ff2c 	bl	8000ee0 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e1c6      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002096:	4b32      	ldr	r3, [pc, #200]	; (8002160 <HAL_RCC_OscConfig+0x57c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d108      	bne.n	80020bc <HAL_RCC_OscConfig+0x4d8>
 80020aa:	4b2c      	ldr	r3, [pc, #176]	; (800215c <HAL_RCC_OscConfig+0x578>)
 80020ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b0:	4a2a      	ldr	r2, [pc, #168]	; (800215c <HAL_RCC_OscConfig+0x578>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ba:	e024      	b.n	8002106 <HAL_RCC_OscConfig+0x522>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b05      	cmp	r3, #5
 80020c2:	d110      	bne.n	80020e6 <HAL_RCC_OscConfig+0x502>
 80020c4:	4b25      	ldr	r3, [pc, #148]	; (800215c <HAL_RCC_OscConfig+0x578>)
 80020c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ca:	4a24      	ldr	r2, [pc, #144]	; (800215c <HAL_RCC_OscConfig+0x578>)
 80020cc:	f043 0304 	orr.w	r3, r3, #4
 80020d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020d4:	4b21      	ldr	r3, [pc, #132]	; (800215c <HAL_RCC_OscConfig+0x578>)
 80020d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020da:	4a20      	ldr	r2, [pc, #128]	; (800215c <HAL_RCC_OscConfig+0x578>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020e4:	e00f      	b.n	8002106 <HAL_RCC_OscConfig+0x522>
 80020e6:	4b1d      	ldr	r3, [pc, #116]	; (800215c <HAL_RCC_OscConfig+0x578>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ec:	4a1b      	ldr	r2, [pc, #108]	; (800215c <HAL_RCC_OscConfig+0x578>)
 80020ee:	f023 0301 	bic.w	r3, r3, #1
 80020f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_RCC_OscConfig+0x578>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fc:	4a17      	ldr	r2, [pc, #92]	; (800215c <HAL_RCC_OscConfig+0x578>)
 80020fe:	f023 0304 	bic.w	r3, r3, #4
 8002102:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d016      	beq.n	800213c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210e:	f7fe fee7 	bl	8000ee0 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002114:	e00a      	b.n	800212c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002116:	f7fe fee3 	bl	8000ee0 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	f241 3288 	movw	r2, #5000	; 0x1388
 8002124:	4293      	cmp	r3, r2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e17b      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <HAL_RCC_OscConfig+0x578>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0ed      	beq.n	8002116 <HAL_RCC_OscConfig+0x532>
 800213a:	e01a      	b.n	8002172 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213c:	f7fe fed0 	bl	8000ee0 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002142:	e00f      	b.n	8002164 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002144:	f7fe fecc 	bl	8000ee0 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d906      	bls.n	8002164 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e164      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000
 8002160:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002164:	4ba8      	ldr	r3, [pc, #672]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 8002166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1e8      	bne.n	8002144 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002172:	7ffb      	ldrb	r3, [r7, #31]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d105      	bne.n	8002184 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002178:	4ba3      	ldr	r3, [pc, #652]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 800217a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217c:	4aa2      	ldr	r2, [pc, #648]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 800217e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002182:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0320 	and.w	r3, r3, #32
 800218c:	2b00      	cmp	r3, #0
 800218e:	d03c      	beq.n	800220a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	2b00      	cmp	r3, #0
 8002196:	d01c      	beq.n	80021d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002198:	4b9b      	ldr	r3, [pc, #620]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 800219a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800219e:	4a9a      	ldr	r2, [pc, #616]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a8:	f7fe fe9a 	bl	8000ee0 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021b0:	f7fe fe96 	bl	8000ee0 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e130      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021c2:	4b91      	ldr	r3, [pc, #580]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 80021c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0ef      	beq.n	80021b0 <HAL_RCC_OscConfig+0x5cc>
 80021d0:	e01b      	b.n	800220a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021d2:	4b8d      	ldr	r3, [pc, #564]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 80021d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021d8:	4a8b      	ldr	r2, [pc, #556]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 80021da:	f023 0301 	bic.w	r3, r3, #1
 80021de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e2:	f7fe fe7d 	bl	8000ee0 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021ea:	f7fe fe79 	bl	8000ee0 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e113      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021fc:	4b82      	ldr	r3, [pc, #520]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 80021fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1ef      	bne.n	80021ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 8107 	beq.w	8002422 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	2b02      	cmp	r3, #2
 800221a:	f040 80cb 	bne.w	80023b4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800221e:	4b7a      	ldr	r3, [pc, #488]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f003 0203 	and.w	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	429a      	cmp	r2, r3
 8002230:	d12c      	bne.n	800228c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	3b01      	subs	r3, #1
 800223e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002240:	429a      	cmp	r2, r3
 8002242:	d123      	bne.n	800228c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002250:	429a      	cmp	r2, r3
 8002252:	d11b      	bne.n	800228c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d113      	bne.n	800228c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226e:	085b      	lsrs	r3, r3, #1
 8002270:	3b01      	subs	r3, #1
 8002272:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d109      	bne.n	800228c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	085b      	lsrs	r3, r3, #1
 8002284:	3b01      	subs	r3, #1
 8002286:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002288:	429a      	cmp	r2, r3
 800228a:	d06d      	beq.n	8002368 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	2b0c      	cmp	r3, #12
 8002290:	d068      	beq.n	8002364 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002292:	4b5d      	ldr	r3, [pc, #372]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d105      	bne.n	80022aa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800229e:	4b5a      	ldr	r3, [pc, #360]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0ba      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022ae:	4b56      	ldr	r3, [pc, #344]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a55      	ldr	r2, [pc, #340]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 80022b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022ba:	f7fe fe11 	bl	8000ee0 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c2:	f7fe fe0d 	bl	8000ee0 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e0a7      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d4:	4b4c      	ldr	r3, [pc, #304]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f0      	bne.n	80022c2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e0:	4b49      	ldr	r3, [pc, #292]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	4b49      	ldr	r3, [pc, #292]	; (800240c <HAL_RCC_OscConfig+0x828>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022f0:	3a01      	subs	r2, #1
 80022f2:	0112      	lsls	r2, r2, #4
 80022f4:	4311      	orrs	r1, r2
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022fa:	0212      	lsls	r2, r2, #8
 80022fc:	4311      	orrs	r1, r2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002302:	0852      	lsrs	r2, r2, #1
 8002304:	3a01      	subs	r2, #1
 8002306:	0552      	lsls	r2, r2, #21
 8002308:	4311      	orrs	r1, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800230e:	0852      	lsrs	r2, r2, #1
 8002310:	3a01      	subs	r2, #1
 8002312:	0652      	lsls	r2, r2, #25
 8002314:	4311      	orrs	r1, r2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800231a:	06d2      	lsls	r2, r2, #27
 800231c:	430a      	orrs	r2, r1
 800231e:	493a      	ldr	r1, [pc, #232]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 8002320:	4313      	orrs	r3, r2
 8002322:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002324:	4b38      	ldr	r3, [pc, #224]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a37      	ldr	r2, [pc, #220]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 800232a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800232e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002330:	4b35      	ldr	r3, [pc, #212]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4a34      	ldr	r2, [pc, #208]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 8002336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800233a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800233c:	f7fe fdd0 	bl	8000ee0 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002344:	f7fe fdcc 	bl	8000ee0 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e066      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002356:	4b2c      	ldr	r3, [pc, #176]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f0      	beq.n	8002344 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002362:	e05e      	b.n	8002422 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e05d      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002368:	4b27      	ldr	r3, [pc, #156]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d156      	bne.n	8002422 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002374:	4b24      	ldr	r3, [pc, #144]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a23      	ldr	r2, [pc, #140]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 800237a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800237e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002380:	4b21      	ldr	r3, [pc, #132]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a20      	ldr	r2, [pc, #128]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 8002386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800238a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800238c:	f7fe fda8 	bl	8000ee0 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002394:	f7fe fda4 	bl	8000ee0 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e03e      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a6:	4b18      	ldr	r3, [pc, #96]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x7b0>
 80023b2:	e036      	b.n	8002422 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	2b0c      	cmp	r3, #12
 80023b8:	d031      	beq.n	800241e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ba:	4b13      	ldr	r3, [pc, #76]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a12      	ldr	r2, [pc, #72]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 80023c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023c4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d105      	bne.n	80023de <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	4a0c      	ldr	r2, [pc, #48]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 80023d8:	f023 0303 	bic.w	r3, r3, #3
 80023dc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023de:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	4a09      	ldr	r2, [pc, #36]	; (8002408 <HAL_RCC_OscConfig+0x824>)
 80023e4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80023e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ee:	f7fe fd77 	bl	8000ee0 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f4:	e00c      	b.n	8002410 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f6:	f7fe fd73 	bl	8000ee0 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d905      	bls.n	8002410 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e00d      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
 8002408:	40021000 	.word	0x40021000
 800240c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_RCC_OscConfig+0x848>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1ec      	bne.n	80023f6 <HAL_RCC_OscConfig+0x812>
 800241c:	e001      	b.n	8002422 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3720      	adds	r7, #32
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000

08002430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e10f      	b.n	8002668 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002448:	4b89      	ldr	r3, [pc, #548]	; (8002670 <HAL_RCC_ClockConfig+0x240>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 030f 	and.w	r3, r3, #15
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d910      	bls.n	8002478 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002456:	4b86      	ldr	r3, [pc, #536]	; (8002670 <HAL_RCC_ClockConfig+0x240>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 020f 	bic.w	r2, r3, #15
 800245e:	4984      	ldr	r1, [pc, #528]	; (8002670 <HAL_RCC_ClockConfig+0x240>)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	4313      	orrs	r3, r2
 8002464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	4b82      	ldr	r3, [pc, #520]	; (8002670 <HAL_RCC_ClockConfig+0x240>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d001      	beq.n	8002478 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0f7      	b.n	8002668 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 8089 	beq.w	8002598 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b03      	cmp	r3, #3
 800248c:	d133      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248e:	4b79      	ldr	r3, [pc, #484]	; (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e0e4      	b.n	8002668 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800249e:	f000 fa43 	bl	8002928 <RCC_GetSysClockFreqFromPLLSource>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4a74      	ldr	r2, [pc, #464]	; (8002678 <HAL_RCC_ClockConfig+0x248>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d955      	bls.n	8002556 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80024aa:	4b72      	ldr	r3, [pc, #456]	; (8002674 <HAL_RCC_ClockConfig+0x244>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10a      	bne.n	80024cc <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024b6:	4b6f      	ldr	r3, [pc, #444]	; (8002674 <HAL_RCC_ClockConfig+0x244>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024be:	4a6d      	ldr	r2, [pc, #436]	; (8002674 <HAL_RCC_ClockConfig+0x244>)
 80024c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	e044      	b.n	8002556 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d03e      	beq.n	8002556 <HAL_RCC_ClockConfig+0x126>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d13a      	bne.n	8002556 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024e0:	4b64      	ldr	r3, [pc, #400]	; (8002674 <HAL_RCC_ClockConfig+0x244>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024e8:	4a62      	ldr	r2, [pc, #392]	; (8002674 <HAL_RCC_ClockConfig+0x244>)
 80024ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ee:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	e02f      	b.n	8002556 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d107      	bne.n	800250e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024fe:	4b5d      	ldr	r3, [pc, #372]	; (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d115      	bne.n	8002536 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e0ac      	b.n	8002668 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d107      	bne.n	8002526 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002516:	4b57      	ldr	r3, [pc, #348]	; (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e0a0      	b.n	8002668 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002526:	4b53      	ldr	r3, [pc, #332]	; (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e098      	b.n	8002668 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002536:	f000 f8a7 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 800253a:	4603      	mov	r3, r0
 800253c:	4a4e      	ldr	r2, [pc, #312]	; (8002678 <HAL_RCC_ClockConfig+0x248>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d909      	bls.n	8002556 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002542:	4b4c      	ldr	r3, [pc, #304]	; (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800254a:	4a4a      	ldr	r2, [pc, #296]	; (8002674 <HAL_RCC_ClockConfig+0x244>)
 800254c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002550:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002556:	4b47      	ldr	r3, [pc, #284]	; (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f023 0203 	bic.w	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4944      	ldr	r1, [pc, #272]	; (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002564:	4313      	orrs	r3, r2
 8002566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002568:	f7fe fcba 	bl	8000ee0 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	e00a      	b.n	8002586 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002570:	f7fe fcb6 	bl	8000ee0 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e070      	b.n	8002668 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	4b3b      	ldr	r3, [pc, #236]	; (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 020c 	and.w	r2, r3, #12
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	429a      	cmp	r2, r3
 8002596:	d1eb      	bne.n	8002570 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d009      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a4:	4b33      	ldr	r3, [pc, #204]	; (8002674 <HAL_RCC_ClockConfig+0x244>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	4930      	ldr	r1, [pc, #192]	; (8002674 <HAL_RCC_ClockConfig+0x244>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	608b      	str	r3, [r1, #8]
 80025b6:	e008      	b.n	80025ca <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	2b80      	cmp	r3, #128	; 0x80
 80025bc:	d105      	bne.n	80025ca <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80025be:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <HAL_RCC_ClockConfig+0x244>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	4a2c      	ldr	r2, [pc, #176]	; (8002674 <HAL_RCC_ClockConfig+0x244>)
 80025c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025c8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025ca:	4b29      	ldr	r3, [pc, #164]	; (8002670 <HAL_RCC_ClockConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d210      	bcs.n	80025fa <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d8:	4b25      	ldr	r3, [pc, #148]	; (8002670 <HAL_RCC_ClockConfig+0x240>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f023 020f 	bic.w	r2, r3, #15
 80025e0:	4923      	ldr	r1, [pc, #140]	; (8002670 <HAL_RCC_ClockConfig+0x240>)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e8:	4b21      	ldr	r3, [pc, #132]	; (8002670 <HAL_RCC_ClockConfig+0x240>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 030f 	and.w	r3, r3, #15
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e036      	b.n	8002668 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b00      	cmp	r3, #0
 8002604:	d008      	beq.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	4918      	ldr	r1, [pc, #96]	; (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002614:	4313      	orrs	r3, r2
 8002616:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d009      	beq.n	8002638 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002624:	4b13      	ldr	r3, [pc, #76]	; (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4910      	ldr	r1, [pc, #64]	; (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002634:	4313      	orrs	r3, r2
 8002636:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002638:	f000 f826 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 800263c:	4602      	mov	r2, r0
 800263e:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	490c      	ldr	r1, [pc, #48]	; (800267c <HAL_RCC_ClockConfig+0x24c>)
 800264a:	5ccb      	ldrb	r3, [r1, r3]
 800264c:	f003 031f 	and.w	r3, r3, #31
 8002650:	fa22 f303 	lsr.w	r3, r2, r3
 8002654:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <HAL_RCC_ClockConfig+0x250>)
 8002656:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002658:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <HAL_RCC_ClockConfig+0x254>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7fe fb2d 	bl	8000cbc <HAL_InitTick>
 8002662:	4603      	mov	r3, r0
 8002664:	73fb      	strb	r3, [r7, #15]

  return status;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40022000 	.word	0x40022000
 8002674:	40021000 	.word	0x40021000
 8002678:	04c4b400 	.word	0x04c4b400
 800267c:	080088d0 	.word	0x080088d0
 8002680:	20000000 	.word	0x20000000
 8002684:	20000004 	.word	0x20000004

08002688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002688:	b480      	push	{r7}
 800268a:	b089      	sub	sp, #36	; 0x24
 800268c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002696:	4b3e      	ldr	r3, [pc, #248]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026a0:	4b3b      	ldr	r3, [pc, #236]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_GetSysClockFreq+0x34>
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	2b0c      	cmp	r3, #12
 80026b4:	d121      	bne.n	80026fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d11e      	bne.n	80026fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026bc:	4b34      	ldr	r3, [pc, #208]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d107      	bne.n	80026d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026c8:	4b31      	ldr	r3, [pc, #196]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ce:	0a1b      	lsrs	r3, r3, #8
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	e005      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026d8:	4b2d      	ldr	r3, [pc, #180]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026e4:	4a2b      	ldr	r2, [pc, #172]	; (8002794 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10d      	bne.n	8002710 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026f8:	e00a      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d102      	bne.n	8002706 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002700:	4b25      	ldr	r3, [pc, #148]	; (8002798 <HAL_RCC_GetSysClockFreq+0x110>)
 8002702:	61bb      	str	r3, [r7, #24]
 8002704:	e004      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	2b08      	cmp	r3, #8
 800270a:	d101      	bne.n	8002710 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800270c:	4b23      	ldr	r3, [pc, #140]	; (800279c <HAL_RCC_GetSysClockFreq+0x114>)
 800270e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	2b0c      	cmp	r3, #12
 8002714:	d134      	bne.n	8002780 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002716:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d003      	beq.n	800272e <HAL_RCC_GetSysClockFreq+0xa6>
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b03      	cmp	r3, #3
 800272a:	d003      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0xac>
 800272c:	e005      	b.n	800273a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800272e:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <HAL_RCC_GetSysClockFreq+0x110>)
 8002730:	617b      	str	r3, [r7, #20]
      break;
 8002732:	e005      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_RCC_GetSysClockFreq+0x114>)
 8002736:	617b      	str	r3, [r7, #20]
      break;
 8002738:	e002      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	617b      	str	r3, [r7, #20]
      break;
 800273e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002740:	4b13      	ldr	r3, [pc, #76]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	3301      	adds	r3, #1
 800274c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800274e:	4b10      	ldr	r3, [pc, #64]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	0a1b      	lsrs	r3, r3, #8
 8002754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	fb02 f203 	mul.w	r2, r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	0e5b      	lsrs	r3, r3, #25
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	3301      	adds	r3, #1
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	fbb2 f3f3 	udiv	r3, r2, r3
 800277e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002780:	69bb      	ldr	r3, [r7, #24]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3724      	adds	r7, #36	; 0x24
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000
 8002794:	080088e8 	.word	0x080088e8
 8002798:	00f42400 	.word	0x00f42400
 800279c:	007a1200 	.word	0x007a1200

080027a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a4:	4b03      	ldr	r3, [pc, #12]	; (80027b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20000000 	.word	0x20000000

080027b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027bc:	f7ff fff0 	bl	80027a0 <HAL_RCC_GetHCLKFreq>
 80027c0:	4602      	mov	r2, r0
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	4904      	ldr	r1, [pc, #16]	; (80027e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027ce:	5ccb      	ldrb	r3, [r1, r3]
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	080088e0 	.word	0x080088e0

080027e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027e8:	f7ff ffda 	bl	80027a0 <HAL_RCC_GetHCLKFreq>
 80027ec:	4602      	mov	r2, r0
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	0adb      	lsrs	r3, r3, #11
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	4904      	ldr	r1, [pc, #16]	; (800280c <HAL_RCC_GetPCLK2Freq+0x28>)
 80027fa:	5ccb      	ldrb	r3, [r1, r3]
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002804:	4618      	mov	r0, r3
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40021000 	.word	0x40021000
 800280c:	080088e0 	.word	0x080088e0

08002810 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	220f      	movs	r2, #15
 800281e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002820:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_RCC_GetClockConfig+0x5c>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 0203 	and.w	r2, r3, #3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800282c:	4b0f      	ldr	r3, [pc, #60]	; (800286c <HAL_RCC_GetClockConfig+0x5c>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <HAL_RCC_GetClockConfig+0x5c>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <HAL_RCC_GetClockConfig+0x5c>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	08db      	lsrs	r3, r3, #3
 800284a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002852:	4b07      	ldr	r3, [pc, #28]	; (8002870 <HAL_RCC_GetClockConfig+0x60>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 020f 	and.w	r2, r3, #15
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	601a      	str	r2, [r3, #0]
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40021000 	.word	0x40021000
 8002870:	40022000 	.word	0x40022000

08002874 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800287c:	2300      	movs	r3, #0
 800287e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002880:	4b27      	ldr	r3, [pc, #156]	; (8002920 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800288c:	f7ff f8d6 	bl	8001a3c <HAL_PWREx_GetVoltageRange>
 8002890:	6178      	str	r0, [r7, #20]
 8002892:	e014      	b.n	80028be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002894:	4b22      	ldr	r3, [pc, #136]	; (8002920 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002898:	4a21      	ldr	r2, [pc, #132]	; (8002920 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800289a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289e:	6593      	str	r3, [r2, #88]	; 0x58
 80028a0:	4b1f      	ldr	r3, [pc, #124]	; (8002920 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028ac:	f7ff f8c6 	bl	8001a3c <HAL_PWREx_GetVoltageRange>
 80028b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028b2:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	4a1a      	ldr	r2, [pc, #104]	; (8002920 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028c4:	d10b      	bne.n	80028de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b80      	cmp	r3, #128	; 0x80
 80028ca:	d913      	bls.n	80028f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2ba0      	cmp	r3, #160	; 0xa0
 80028d0:	d902      	bls.n	80028d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028d2:	2302      	movs	r3, #2
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	e00d      	b.n	80028f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028d8:	2301      	movs	r3, #1
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	e00a      	b.n	80028f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b7f      	cmp	r3, #127	; 0x7f
 80028e2:	d902      	bls.n	80028ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80028e4:	2302      	movs	r3, #2
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	e004      	b.n	80028f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b70      	cmp	r3, #112	; 0x70
 80028ee:	d101      	bne.n	80028f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028f0:	2301      	movs	r3, #1
 80028f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f023 020f 	bic.w	r2, r3, #15
 80028fc:	4909      	ldr	r1, [pc, #36]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002904:	4b07      	ldr	r3, [pc, #28]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	429a      	cmp	r2, r3
 8002910:	d001      	beq.n	8002916 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40021000 	.word	0x40021000
 8002924:	40022000 	.word	0x40022000

08002928 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002928:	b480      	push	{r7}
 800292a:	b087      	sub	sp, #28
 800292c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002932:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d118      	bne.n	8002970 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800293e:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d107      	bne.n	800295a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800294a:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800294c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002950:	0a1b      	lsrs	r3, r3, #8
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	e005      	b.n	8002966 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800295a:	4b23      	ldr	r3, [pc, #140]	; (80029e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002966:	4a21      	ldr	r2, [pc, #132]	; (80029ec <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002970:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b02      	cmp	r3, #2
 800297e:	d003      	beq.n	8002988 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b03      	cmp	r3, #3
 8002984:	d003      	beq.n	800298e <RCC_GetSysClockFreqFromPLLSource+0x66>
 8002986:	e005      	b.n	8002994 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002988:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800298a:	613b      	str	r3, [r7, #16]
    break;
 800298c:	e005      	b.n	800299a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800298e:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002990:	613b      	str	r3, [r7, #16]
    break;
 8002992:	e002      	b.n	800299a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	613b      	str	r3, [r7, #16]
    break;
 8002998:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800299a:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	091b      	lsrs	r3, r3, #4
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	3301      	adds	r3, #1
 80029a6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029a8:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	fb02 f203 	mul.w	r2, r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80029be:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	0e5b      	lsrs	r3, r3, #25
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	3301      	adds	r3, #1
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80029da:	683b      	ldr	r3, [r7, #0]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	371c      	adds	r7, #28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	40021000 	.word	0x40021000
 80029ec:	080088e8 	.word	0x080088e8
 80029f0:	00f42400 	.word	0x00f42400
 80029f4:	007a1200 	.word	0x007a1200

080029f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a00:	2300      	movs	r3, #0
 8002a02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a04:	2300      	movs	r3, #0
 8002a06:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d040      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a18:	2b80      	cmp	r3, #128	; 0x80
 8002a1a:	d02a      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a1c:	2b80      	cmp	r3, #128	; 0x80
 8002a1e:	d825      	bhi.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002a20:	2b60      	cmp	r3, #96	; 0x60
 8002a22:	d026      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a24:	2b60      	cmp	r3, #96	; 0x60
 8002a26:	d821      	bhi.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002a28:	2b40      	cmp	r3, #64	; 0x40
 8002a2a:	d006      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002a2c:	2b40      	cmp	r3, #64	; 0x40
 8002a2e:	d81d      	bhi.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d009      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002a34:	2b20      	cmp	r3, #32
 8002a36:	d010      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002a38:	e018      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a3a:	4b89      	ldr	r3, [pc, #548]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	4a88      	ldr	r2, [pc, #544]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a44:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a46:	e015      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fb02 	bl	8003058 <RCCEx_PLLSAI1_Config>
 8002a54:	4603      	mov	r3, r0
 8002a56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a58:	e00c      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3320      	adds	r3, #32
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fbed 	bl	8003240 <RCCEx_PLLSAI2_Config>
 8002a66:	4603      	mov	r3, r0
 8002a68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a6a:	e003      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	74fb      	strb	r3, [r7, #19]
      break;
 8002a70:	e000      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a74:	7cfb      	ldrb	r3, [r7, #19]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10b      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a7a:	4b79      	ldr	r3, [pc, #484]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a80:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a88:	4975      	ldr	r1, [pc, #468]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002a90:	e001      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a92:	7cfb      	ldrb	r3, [r7, #19]
 8002a94:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d047      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aaa:	d030      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab0:	d82a      	bhi.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002ab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ab6:	d02a      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002ab8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002abc:	d824      	bhi.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac2:	d008      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac8:	d81e      	bhi.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad2:	d010      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002ad4:	e018      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ad6:	4b62      	ldr	r3, [pc, #392]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	4a61      	ldr	r2, [pc, #388]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ae2:	e015      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fab4 	bl	8003058 <RCCEx_PLLSAI1_Config>
 8002af0:	4603      	mov	r3, r0
 8002af2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002af4:	e00c      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3320      	adds	r3, #32
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 fb9f 	bl	8003240 <RCCEx_PLLSAI2_Config>
 8002b02:	4603      	mov	r3, r0
 8002b04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b06:	e003      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	74fb      	strb	r3, [r7, #19]
      break;
 8002b0c:	e000      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002b0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b10:	7cfb      	ldrb	r3, [r7, #19]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10b      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b16:	4b52      	ldr	r3, [pc, #328]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	494e      	ldr	r1, [pc, #312]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002b2c:	e001      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b2e:	7cfb      	ldrb	r3, [r7, #19]
 8002b30:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 809f 	beq.w	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b40:	2300      	movs	r3, #0
 8002b42:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b44:	4b46      	ldr	r3, [pc, #280]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002b54:	2300      	movs	r3, #0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00d      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5a:	4b41      	ldr	r3, [pc, #260]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5e:	4a40      	ldr	r2, [pc, #256]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b64:	6593      	str	r3, [r2, #88]	; 0x58
 8002b66:	4b3e      	ldr	r3, [pc, #248]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b72:	2301      	movs	r3, #1
 8002b74:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b76:	4b3b      	ldr	r3, [pc, #236]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a3a      	ldr	r2, [pc, #232]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b82:	f7fe f9ad 	bl	8000ee0 <HAL_GetTick>
 8002b86:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b88:	e009      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8a:	f7fe f9a9 	bl	8000ee0 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d902      	bls.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	74fb      	strb	r3, [r7, #19]
        break;
 8002b9c:	e005      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b9e:	4b31      	ldr	r3, [pc, #196]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0ef      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002baa:	7cfb      	ldrb	r3, [r7, #19]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d15b      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bb0:	4b2b      	ldr	r3, [pc, #172]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bba:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d01f      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d019      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bce:	4b24      	ldr	r3, [pc, #144]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bda:	4b21      	ldr	r3, [pc, #132]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be0:	4a1f      	ldr	r2, [pc, #124]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bea:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf0:	4a1b      	ldr	r2, [pc, #108]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bfa:	4a19      	ldr	r2, [pc, #100]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d016      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fe f968 	bl	8000ee0 <HAL_GetTick>
 8002c10:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c12:	e00b      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c14:	f7fe f964 	bl	8000ee0 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d902      	bls.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	74fb      	strb	r3, [r7, #19]
            break;
 8002c2a:	e006      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0ec      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002c3a:	7cfb      	ldrb	r3, [r7, #19]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10c      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c40:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c50:	4903      	ldr	r1, [pc, #12]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c58:	e008      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c5a:	7cfb      	ldrb	r3, [r7, #19]
 8002c5c:	74bb      	strb	r3, [r7, #18]
 8002c5e:	e005      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c68:	7cfb      	ldrb	r3, [r7, #19]
 8002c6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c6c:	7c7b      	ldrb	r3, [r7, #17]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d105      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c72:	4ba0      	ldr	r3, [pc, #640]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c76:	4a9f      	ldr	r2, [pc, #636]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c8a:	4b9a      	ldr	r3, [pc, #616]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c90:	f023 0203 	bic.w	r2, r3, #3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c98:	4996      	ldr	r1, [pc, #600]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cac:	4b91      	ldr	r3, [pc, #580]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb2:	f023 020c 	bic.w	r2, r3, #12
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	498e      	ldr	r1, [pc, #568]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cce:	4b89      	ldr	r3, [pc, #548]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cdc:	4985      	ldr	r1, [pc, #532]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cf0:	4b80      	ldr	r3, [pc, #512]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cfe:	497d      	ldr	r1, [pc, #500]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d12:	4b78      	ldr	r3, [pc, #480]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d20:	4974      	ldr	r1, [pc, #464]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0320 	and.w	r3, r3, #32
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d34:	4b6f      	ldr	r3, [pc, #444]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d42:	496c      	ldr	r1, [pc, #432]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d56:	4b67      	ldr	r3, [pc, #412]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d64:	4963      	ldr	r1, [pc, #396]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d78:	4b5e      	ldr	r3, [pc, #376]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d86:	495b      	ldr	r1, [pc, #364]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d9a:	4b56      	ldr	r3, [pc, #344]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da8:	4952      	ldr	r1, [pc, #328]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dbc:	4b4d      	ldr	r3, [pc, #308]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dca:	494a      	ldr	r1, [pc, #296]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dde:	4b45      	ldr	r3, [pc, #276]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dec:	4941      	ldr	r1, [pc, #260]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e00:	4b3c      	ldr	r3, [pc, #240]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e06:	f023 0203 	bic.w	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0e:	4939      	ldr	r1, [pc, #228]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d028      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e22:	4b34      	ldr	r3, [pc, #208]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e30:	4930      	ldr	r1, [pc, #192]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e40:	d106      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e42:	4b2c      	ldr	r3, [pc, #176]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	4a2b      	ldr	r2, [pc, #172]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e4c:	60d3      	str	r3, [r2, #12]
 8002e4e:	e011      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e58:	d10c      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2101      	movs	r1, #1
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 f8f9 	bl	8003058 <RCCEx_PLLSAI1_Config>
 8002e66:	4603      	mov	r3, r0
 8002e68:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e6a:	7cfb      	ldrb	r3, [r7, #19]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002e70:	7cfb      	ldrb	r3, [r7, #19]
 8002e72:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d04d      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e88:	d108      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002e8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e90:	4a18      	ldr	r2, [pc, #96]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e96:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002e9a:	e012      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002e9c:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ea2:	4a14      	ldr	r2, [pc, #80]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ea4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ea8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eba:	490e      	ldr	r1, [pc, #56]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ec6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eca:	d106      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4a08      	ldr	r2, [pc, #32]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ed6:	60d3      	str	r3, [r2, #12]
 8002ed8:	e020      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ede:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ee2:	d109      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ee4:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4a02      	ldr	r2, [pc, #8]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eee:	60d3      	str	r3, [r2, #12]
 8002ef0:	e014      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002ef2:	bf00      	nop
 8002ef4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002efc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3304      	adds	r3, #4
 8002f06:	2101      	movs	r1, #1
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 f8a5 	bl	8003058 <RCCEx_PLLSAI1_Config>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f12:	7cfb      	ldrb	r3, [r7, #19]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002f18:	7cfb      	ldrb	r3, [r7, #19]
 8002f1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d028      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f28:	4b4a      	ldr	r3, [pc, #296]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f36:	4947      	ldr	r1, [pc, #284]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f46:	d106      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f48:	4b42      	ldr	r3, [pc, #264]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	4a41      	ldr	r2, [pc, #260]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f52:	60d3      	str	r3, [r2, #12]
 8002f54:	e011      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f5e:	d10c      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3304      	adds	r3, #4
 8002f64:	2101      	movs	r1, #1
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f876 	bl	8003058 <RCCEx_PLLSAI1_Config>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f70:	7cfb      	ldrb	r3, [r7, #19]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002f76:	7cfb      	ldrb	r3, [r7, #19]
 8002f78:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d01e      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f86:	4b33      	ldr	r3, [pc, #204]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f96:	492f      	ldr	r1, [pc, #188]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3304      	adds	r3, #4
 8002fae:	2102      	movs	r1, #2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 f851 	bl	8003058 <RCCEx_PLLSAI1_Config>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fba:	7cfb      	ldrb	r3, [r7, #19]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002fc0:	7cfb      	ldrb	r3, [r7, #19]
 8002fc2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00b      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fd0:	4b20      	ldr	r3, [pc, #128]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fd6:	f023 0204 	bic.w	r2, r3, #4
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fe0:	491c      	ldr	r1, [pc, #112]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00b      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ff4:	4b17      	ldr	r3, [pc, #92]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ffa:	f023 0218 	bic.w	r2, r3, #24
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003004:	4913      	ldr	r1, [pc, #76]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d017      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003018:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800301a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800301e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003028:	490a      	ldr	r1, [pc, #40]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003036:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800303a:	d105      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4a04      	ldr	r2, [pc, #16]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003046:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003048:	7cbb      	ldrb	r3, [r7, #18]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40021000 	.word	0x40021000

08003058 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003066:	4b72      	ldr	r3, [pc, #456]	; (8003230 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00e      	beq.n	8003090 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003072:	4b6f      	ldr	r3, [pc, #444]	; (8003230 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f003 0203 	and.w	r2, r3, #3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d103      	bne.n	800308a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
       ||
 8003086:	2b00      	cmp	r3, #0
 8003088:	d142      	bne.n	8003110 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
 800308e:	e03f      	b.n	8003110 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b03      	cmp	r3, #3
 8003096:	d018      	beq.n	80030ca <RCCEx_PLLSAI1_Config+0x72>
 8003098:	2b03      	cmp	r3, #3
 800309a:	d825      	bhi.n	80030e8 <RCCEx_PLLSAI1_Config+0x90>
 800309c:	2b01      	cmp	r3, #1
 800309e:	d002      	beq.n	80030a6 <RCCEx_PLLSAI1_Config+0x4e>
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d009      	beq.n	80030b8 <RCCEx_PLLSAI1_Config+0x60>
 80030a4:	e020      	b.n	80030e8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030a6:	4b62      	ldr	r3, [pc, #392]	; (8003230 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d11d      	bne.n	80030ee <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b6:	e01a      	b.n	80030ee <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030b8:	4b5d      	ldr	r3, [pc, #372]	; (8003230 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d116      	bne.n	80030f2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c8:	e013      	b.n	80030f2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030ca:	4b59      	ldr	r3, [pc, #356]	; (8003230 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10f      	bne.n	80030f6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030d6:	4b56      	ldr	r3, [pc, #344]	; (8003230 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d109      	bne.n	80030f6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030e6:	e006      	b.n	80030f6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      break;
 80030ec:	e004      	b.n	80030f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80030ee:	bf00      	nop
 80030f0:	e002      	b.n	80030f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80030f2:	bf00      	nop
 80030f4:	e000      	b.n	80030f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80030f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d108      	bne.n	8003110 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80030fe:	4b4c      	ldr	r3, [pc, #304]	; (8003230 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f023 0203 	bic.w	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4949      	ldr	r1, [pc, #292]	; (8003230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800310c:	4313      	orrs	r3, r2
 800310e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	2b00      	cmp	r3, #0
 8003114:	f040 8086 	bne.w	8003224 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003118:	4b45      	ldr	r3, [pc, #276]	; (8003230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a44      	ldr	r2, [pc, #272]	; (8003230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800311e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003122:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003124:	f7fd fedc 	bl	8000ee0 <HAL_GetTick>
 8003128:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800312a:	e009      	b.n	8003140 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800312c:	f7fd fed8 	bl	8000ee0 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d902      	bls.n	8003140 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	73fb      	strb	r3, [r7, #15]
        break;
 800313e:	e005      	b.n	800314c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003140:	4b3b      	ldr	r3, [pc, #236]	; (8003230 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1ef      	bne.n	800312c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d168      	bne.n	8003224 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d113      	bne.n	8003180 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003158:	4b35      	ldr	r3, [pc, #212]	; (8003230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	4b35      	ldr	r3, [pc, #212]	; (8003234 <RCCEx_PLLSAI1_Config+0x1dc>)
 800315e:	4013      	ands	r3, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6892      	ldr	r2, [r2, #8]
 8003164:	0211      	lsls	r1, r2, #8
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	68d2      	ldr	r2, [r2, #12]
 800316a:	06d2      	lsls	r2, r2, #27
 800316c:	4311      	orrs	r1, r2
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6852      	ldr	r2, [r2, #4]
 8003172:	3a01      	subs	r2, #1
 8003174:	0112      	lsls	r2, r2, #4
 8003176:	430a      	orrs	r2, r1
 8003178:	492d      	ldr	r1, [pc, #180]	; (8003230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800317a:	4313      	orrs	r3, r2
 800317c:	610b      	str	r3, [r1, #16]
 800317e:	e02d      	b.n	80031dc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d115      	bne.n	80031b2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003186:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003188:	691a      	ldr	r2, [r3, #16]
 800318a:	4b2b      	ldr	r3, [pc, #172]	; (8003238 <RCCEx_PLLSAI1_Config+0x1e0>)
 800318c:	4013      	ands	r3, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6892      	ldr	r2, [r2, #8]
 8003192:	0211      	lsls	r1, r2, #8
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6912      	ldr	r2, [r2, #16]
 8003198:	0852      	lsrs	r2, r2, #1
 800319a:	3a01      	subs	r2, #1
 800319c:	0552      	lsls	r2, r2, #21
 800319e:	4311      	orrs	r1, r2
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6852      	ldr	r2, [r2, #4]
 80031a4:	3a01      	subs	r2, #1
 80031a6:	0112      	lsls	r2, r2, #4
 80031a8:	430a      	orrs	r2, r1
 80031aa:	4921      	ldr	r1, [pc, #132]	; (8003230 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	610b      	str	r3, [r1, #16]
 80031b0:	e014      	b.n	80031dc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031b2:	4b1f      	ldr	r3, [pc, #124]	; (8003230 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031b4:	691a      	ldr	r2, [r3, #16]
 80031b6:	4b21      	ldr	r3, [pc, #132]	; (800323c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6892      	ldr	r2, [r2, #8]
 80031be:	0211      	lsls	r1, r2, #8
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6952      	ldr	r2, [r2, #20]
 80031c4:	0852      	lsrs	r2, r2, #1
 80031c6:	3a01      	subs	r2, #1
 80031c8:	0652      	lsls	r2, r2, #25
 80031ca:	4311      	orrs	r1, r2
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6852      	ldr	r2, [r2, #4]
 80031d0:	3a01      	subs	r2, #1
 80031d2:	0112      	lsls	r2, r2, #4
 80031d4:	430a      	orrs	r2, r1
 80031d6:	4916      	ldr	r1, [pc, #88]	; (8003230 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031dc:	4b14      	ldr	r3, [pc, #80]	; (8003230 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a13      	ldr	r2, [pc, #76]	; (8003230 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fd fe7a 	bl	8000ee0 <HAL_GetTick>
 80031ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031ee:	e009      	b.n	8003204 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031f0:	f7fd fe76 	bl	8000ee0 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d902      	bls.n	8003204 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	73fb      	strb	r3, [r7, #15]
          break;
 8003202:	e005      	b.n	8003210 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003204:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ef      	beq.n	80031f0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003210:	7bfb      	ldrb	r3, [r7, #15]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	4904      	ldr	r1, [pc, #16]	; (8003230 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003220:	4313      	orrs	r3, r2
 8003222:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003224:	7bfb      	ldrb	r3, [r7, #15]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000
 8003234:	07ff800f 	.word	0x07ff800f
 8003238:	ff9f800f 	.word	0xff9f800f
 800323c:	f9ff800f 	.word	0xf9ff800f

08003240 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800324e:	4b72      	ldr	r3, [pc, #456]	; (8003418 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00e      	beq.n	8003278 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800325a:	4b6f      	ldr	r3, [pc, #444]	; (8003418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f003 0203 	and.w	r2, r3, #3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d103      	bne.n	8003272 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
       ||
 800326e:	2b00      	cmp	r3, #0
 8003270:	d142      	bne.n	80032f8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	73fb      	strb	r3, [r7, #15]
 8003276:	e03f      	b.n	80032f8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b03      	cmp	r3, #3
 800327e:	d018      	beq.n	80032b2 <RCCEx_PLLSAI2_Config+0x72>
 8003280:	2b03      	cmp	r3, #3
 8003282:	d825      	bhi.n	80032d0 <RCCEx_PLLSAI2_Config+0x90>
 8003284:	2b01      	cmp	r3, #1
 8003286:	d002      	beq.n	800328e <RCCEx_PLLSAI2_Config+0x4e>
 8003288:	2b02      	cmp	r3, #2
 800328a:	d009      	beq.n	80032a0 <RCCEx_PLLSAI2_Config+0x60>
 800328c:	e020      	b.n	80032d0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800328e:	4b62      	ldr	r3, [pc, #392]	; (8003418 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d11d      	bne.n	80032d6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800329e:	e01a      	b.n	80032d6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032a0:	4b5d      	ldr	r3, [pc, #372]	; (8003418 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d116      	bne.n	80032da <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032b0:	e013      	b.n	80032da <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032b2:	4b59      	ldr	r3, [pc, #356]	; (8003418 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10f      	bne.n	80032de <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032be:	4b56      	ldr	r3, [pc, #344]	; (8003418 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032ce:	e006      	b.n	80032de <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
      break;
 80032d4:	e004      	b.n	80032e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80032d6:	bf00      	nop
 80032d8:	e002      	b.n	80032e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80032da:	bf00      	nop
 80032dc:	e000      	b.n	80032e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80032de:	bf00      	nop
    }

    if(status == HAL_OK)
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d108      	bne.n	80032f8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80032e6:	4b4c      	ldr	r3, [pc, #304]	; (8003418 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f023 0203 	bic.w	r2, r3, #3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4949      	ldr	r1, [pc, #292]	; (8003418 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f040 8086 	bne.w	800340c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003300:	4b45      	ldr	r3, [pc, #276]	; (8003418 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a44      	ldr	r2, [pc, #272]	; (8003418 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800330c:	f7fd fde8 	bl	8000ee0 <HAL_GetTick>
 8003310:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003312:	e009      	b.n	8003328 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003314:	f7fd fde4 	bl	8000ee0 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d902      	bls.n	8003328 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	73fb      	strb	r3, [r7, #15]
        break;
 8003326:	e005      	b.n	8003334 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003328:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1ef      	bne.n	8003314 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003334:	7bfb      	ldrb	r3, [r7, #15]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d168      	bne.n	800340c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d113      	bne.n	8003368 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003340:	4b35      	ldr	r3, [pc, #212]	; (8003418 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003342:	695a      	ldr	r2, [r3, #20]
 8003344:	4b35      	ldr	r3, [pc, #212]	; (800341c <RCCEx_PLLSAI2_Config+0x1dc>)
 8003346:	4013      	ands	r3, r2
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6892      	ldr	r2, [r2, #8]
 800334c:	0211      	lsls	r1, r2, #8
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	68d2      	ldr	r2, [r2, #12]
 8003352:	06d2      	lsls	r2, r2, #27
 8003354:	4311      	orrs	r1, r2
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6852      	ldr	r2, [r2, #4]
 800335a:	3a01      	subs	r2, #1
 800335c:	0112      	lsls	r2, r2, #4
 800335e:	430a      	orrs	r2, r1
 8003360:	492d      	ldr	r1, [pc, #180]	; (8003418 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003362:	4313      	orrs	r3, r2
 8003364:	614b      	str	r3, [r1, #20]
 8003366:	e02d      	b.n	80033c4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d115      	bne.n	800339a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800336e:	4b2a      	ldr	r3, [pc, #168]	; (8003418 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003370:	695a      	ldr	r2, [r3, #20]
 8003372:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003374:	4013      	ands	r3, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6892      	ldr	r2, [r2, #8]
 800337a:	0211      	lsls	r1, r2, #8
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6912      	ldr	r2, [r2, #16]
 8003380:	0852      	lsrs	r2, r2, #1
 8003382:	3a01      	subs	r2, #1
 8003384:	0552      	lsls	r2, r2, #21
 8003386:	4311      	orrs	r1, r2
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6852      	ldr	r2, [r2, #4]
 800338c:	3a01      	subs	r2, #1
 800338e:	0112      	lsls	r2, r2, #4
 8003390:	430a      	orrs	r2, r1
 8003392:	4921      	ldr	r1, [pc, #132]	; (8003418 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003394:	4313      	orrs	r3, r2
 8003396:	614b      	str	r3, [r1, #20]
 8003398:	e014      	b.n	80033c4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800339a:	4b1f      	ldr	r3, [pc, #124]	; (8003418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800339c:	695a      	ldr	r2, [r3, #20]
 800339e:	4b21      	ldr	r3, [pc, #132]	; (8003424 <RCCEx_PLLSAI2_Config+0x1e4>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6892      	ldr	r2, [r2, #8]
 80033a6:	0211      	lsls	r1, r2, #8
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6952      	ldr	r2, [r2, #20]
 80033ac:	0852      	lsrs	r2, r2, #1
 80033ae:	3a01      	subs	r2, #1
 80033b0:	0652      	lsls	r2, r2, #25
 80033b2:	4311      	orrs	r1, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6852      	ldr	r2, [r2, #4]
 80033b8:	3a01      	subs	r2, #1
 80033ba:	0112      	lsls	r2, r2, #4
 80033bc:	430a      	orrs	r2, r1
 80033be:	4916      	ldr	r1, [pc, #88]	; (8003418 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80033c4:	4b14      	ldr	r3, [pc, #80]	; (8003418 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a13      	ldr	r2, [pc, #76]	; (8003418 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7fd fd86 	bl	8000ee0 <HAL_GetTick>
 80033d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033d6:	e009      	b.n	80033ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033d8:	f7fd fd82 	bl	8000ee0 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d902      	bls.n	80033ec <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	73fb      	strb	r3, [r7, #15]
          break;
 80033ea:	e005      	b.n	80033f8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033ec:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0ef      	beq.n	80033d8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80033fe:	4b06      	ldr	r3, [pc, #24]	; (8003418 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003400:	695a      	ldr	r2, [r3, #20]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	4904      	ldr	r1, [pc, #16]	; (8003418 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003408:	4313      	orrs	r3, r2
 800340a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800340c:	7bfb      	ldrb	r3, [r7, #15]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
 800341c:	07ff800f 	.word	0x07ff800f
 8003420:	ff9f800f 	.word	0xff9f800f
 8003424:	f9ff800f 	.word	0xf9ff800f

08003428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e049      	b.n	80034ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d106      	bne.n	8003454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f841 	bl	80034d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3304      	adds	r3, #4
 8003464:	4619      	mov	r1, r3
 8003466:	4610      	mov	r0, r2
 8003468:	f000 f9f8 	bl	800385c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
	...

080034ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d001      	beq.n	8003504 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e04f      	b.n	80035a4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a23      	ldr	r2, [pc, #140]	; (80035b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d01d      	beq.n	8003562 <HAL_TIM_Base_Start_IT+0x76>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352e:	d018      	beq.n	8003562 <HAL_TIM_Base_Start_IT+0x76>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a1f      	ldr	r2, [pc, #124]	; (80035b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d013      	beq.n	8003562 <HAL_TIM_Base_Start_IT+0x76>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a1e      	ldr	r2, [pc, #120]	; (80035b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00e      	beq.n	8003562 <HAL_TIM_Base_Start_IT+0x76>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a1c      	ldr	r2, [pc, #112]	; (80035bc <HAL_TIM_Base_Start_IT+0xd0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d009      	beq.n	8003562 <HAL_TIM_Base_Start_IT+0x76>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1b      	ldr	r2, [pc, #108]	; (80035c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d004      	beq.n	8003562 <HAL_TIM_Base_Start_IT+0x76>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a19      	ldr	r2, [pc, #100]	; (80035c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d115      	bne.n	800358e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	4b17      	ldr	r3, [pc, #92]	; (80035c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800356a:	4013      	ands	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b06      	cmp	r3, #6
 8003572:	d015      	beq.n	80035a0 <HAL_TIM_Base_Start_IT+0xb4>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357a:	d011      	beq.n	80035a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0201 	orr.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358c:	e008      	b.n	80035a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0201 	orr.w	r2, r2, #1
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	e000      	b.n	80035a2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	40012c00 	.word	0x40012c00
 80035b4:	40000400 	.word	0x40000400
 80035b8:	40000800 	.word	0x40000800
 80035bc:	40000c00 	.word	0x40000c00
 80035c0:	40013400 	.word	0x40013400
 80035c4:	40014000 	.word	0x40014000
 80035c8:	00010007 	.word	0x00010007

080035cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d122      	bne.n	8003628 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d11b      	bne.n	8003628 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0202 	mvn.w	r2, #2
 80035f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f905 	bl	800381e <HAL_TIM_IC_CaptureCallback>
 8003614:	e005      	b.n	8003622 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f8f7 	bl	800380a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f908 	bl	8003832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b04      	cmp	r3, #4
 8003634:	d122      	bne.n	800367c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b04      	cmp	r3, #4
 8003642:	d11b      	bne.n	800367c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0204 	mvn.w	r2, #4
 800364c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2202      	movs	r2, #2
 8003652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f8db 	bl	800381e <HAL_TIM_IC_CaptureCallback>
 8003668:	e005      	b.n	8003676 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f8cd 	bl	800380a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f8de 	bl	8003832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b08      	cmp	r3, #8
 8003688:	d122      	bne.n	80036d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b08      	cmp	r3, #8
 8003696:	d11b      	bne.n	80036d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0208 	mvn.w	r2, #8
 80036a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2204      	movs	r2, #4
 80036a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f8b1 	bl	800381e <HAL_TIM_IC_CaptureCallback>
 80036bc:	e005      	b.n	80036ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f8a3 	bl	800380a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f8b4 	bl	8003832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	2b10      	cmp	r3, #16
 80036dc:	d122      	bne.n	8003724 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b10      	cmp	r3, #16
 80036ea:	d11b      	bne.n	8003724 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0210 	mvn.w	r2, #16
 80036f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2208      	movs	r2, #8
 80036fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f887 	bl	800381e <HAL_TIM_IC_CaptureCallback>
 8003710:	e005      	b.n	800371e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f879 	bl	800380a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f88a 	bl	8003832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b01      	cmp	r3, #1
 8003730:	d10e      	bne.n	8003750 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b01      	cmp	r3, #1
 800373e:	d107      	bne.n	8003750 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0201 	mvn.w	r2, #1
 8003748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fd f9aa 	bl	8000aa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375a:	2b80      	cmp	r3, #128	; 0x80
 800375c:	d10e      	bne.n	800377c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003768:	2b80      	cmp	r3, #128	; 0x80
 800376a:	d107      	bne.n	800377c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f914 	bl	80039a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800378a:	d10e      	bne.n	80037aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003796:	2b80      	cmp	r3, #128	; 0x80
 8003798:	d107      	bne.n	80037aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f907 	bl	80039b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b4:	2b40      	cmp	r3, #64	; 0x40
 80037b6:	d10e      	bne.n	80037d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c2:	2b40      	cmp	r3, #64	; 0x40
 80037c4:	d107      	bne.n	80037d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f838 	bl	8003846 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	d10e      	bne.n	8003802 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b20      	cmp	r3, #32
 80037f0:	d107      	bne.n	8003802 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f06f 0220 	mvn.w	r2, #32
 80037fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f8c7 	bl	8003990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
	...

0800385c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a40      	ldr	r2, [pc, #256]	; (8003970 <TIM_Base_SetConfig+0x114>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d013      	beq.n	800389c <TIM_Base_SetConfig+0x40>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387a:	d00f      	beq.n	800389c <TIM_Base_SetConfig+0x40>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a3d      	ldr	r2, [pc, #244]	; (8003974 <TIM_Base_SetConfig+0x118>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00b      	beq.n	800389c <TIM_Base_SetConfig+0x40>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a3c      	ldr	r2, [pc, #240]	; (8003978 <TIM_Base_SetConfig+0x11c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d007      	beq.n	800389c <TIM_Base_SetConfig+0x40>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a3b      	ldr	r2, [pc, #236]	; (800397c <TIM_Base_SetConfig+0x120>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d003      	beq.n	800389c <TIM_Base_SetConfig+0x40>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a3a      	ldr	r2, [pc, #232]	; (8003980 <TIM_Base_SetConfig+0x124>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d108      	bne.n	80038ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a2f      	ldr	r2, [pc, #188]	; (8003970 <TIM_Base_SetConfig+0x114>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01f      	beq.n	80038f6 <TIM_Base_SetConfig+0x9a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038bc:	d01b      	beq.n	80038f6 <TIM_Base_SetConfig+0x9a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a2c      	ldr	r2, [pc, #176]	; (8003974 <TIM_Base_SetConfig+0x118>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d017      	beq.n	80038f6 <TIM_Base_SetConfig+0x9a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a2b      	ldr	r2, [pc, #172]	; (8003978 <TIM_Base_SetConfig+0x11c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <TIM_Base_SetConfig+0x9a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a2a      	ldr	r2, [pc, #168]	; (800397c <TIM_Base_SetConfig+0x120>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00f      	beq.n	80038f6 <TIM_Base_SetConfig+0x9a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a29      	ldr	r2, [pc, #164]	; (8003980 <TIM_Base_SetConfig+0x124>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00b      	beq.n	80038f6 <TIM_Base_SetConfig+0x9a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a28      	ldr	r2, [pc, #160]	; (8003984 <TIM_Base_SetConfig+0x128>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d007      	beq.n	80038f6 <TIM_Base_SetConfig+0x9a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a27      	ldr	r2, [pc, #156]	; (8003988 <TIM_Base_SetConfig+0x12c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d003      	beq.n	80038f6 <TIM_Base_SetConfig+0x9a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a26      	ldr	r2, [pc, #152]	; (800398c <TIM_Base_SetConfig+0x130>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d108      	bne.n	8003908 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a10      	ldr	r2, [pc, #64]	; (8003970 <TIM_Base_SetConfig+0x114>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d00f      	beq.n	8003954 <TIM_Base_SetConfig+0xf8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a12      	ldr	r2, [pc, #72]	; (8003980 <TIM_Base_SetConfig+0x124>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00b      	beq.n	8003954 <TIM_Base_SetConfig+0xf8>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a11      	ldr	r2, [pc, #68]	; (8003984 <TIM_Base_SetConfig+0x128>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d007      	beq.n	8003954 <TIM_Base_SetConfig+0xf8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a10      	ldr	r2, [pc, #64]	; (8003988 <TIM_Base_SetConfig+0x12c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d003      	beq.n	8003954 <TIM_Base_SetConfig+0xf8>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a0f      	ldr	r2, [pc, #60]	; (800398c <TIM_Base_SetConfig+0x130>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d103      	bne.n	800395c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	615a      	str	r2, [r3, #20]
}
 8003962:	bf00      	nop
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40012c00 	.word	0x40012c00
 8003974:	40000400 	.word	0x40000400
 8003978:	40000800 	.word	0x40000800
 800397c:	40000c00 	.word	0x40000c00
 8003980:	40013400 	.word	0x40013400
 8003984:	40014000 	.word	0x40014000
 8003988:	40014400 	.word	0x40014400
 800398c:	40014800 	.word	0x40014800

08003990 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e042      	b.n	8003a64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d106      	bne.n	80039f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7fd f897 	bl	8000b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2224      	movs	r2, #36	; 0x24
 80039fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0201 	bic.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fbae 	bl	8004170 <UART_SetConfig>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e022      	b.n	8003a64 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fe6c 	bl	8004704 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fef3 	bl	8004848 <UART_CheckIdleState>
 8003a62:	4603      	mov	r3, r0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08a      	sub	sp, #40	; 0x28
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	603b      	str	r3, [r7, #0]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	f040 8084 	bne.w	8003b90 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_UART_Transmit+0x28>
 8003a8e:	88fb      	ldrh	r3, [r7, #6]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e07c      	b.n	8003b92 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d101      	bne.n	8003aa6 <HAL_UART_Transmit+0x3a>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e075      	b.n	8003b92 <HAL_UART_Transmit+0x126>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2221      	movs	r2, #33	; 0x21
 8003aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003abe:	f7fd fa0f 	bl	8000ee0 <HAL_GetTick>
 8003ac2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	88fa      	ldrh	r2, [r7, #6]
 8003ac8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	88fa      	ldrh	r2, [r7, #6]
 8003ad0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003adc:	d108      	bne.n	8003af0 <HAL_UART_Transmit+0x84>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d104      	bne.n	8003af0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	61bb      	str	r3, [r7, #24]
 8003aee:	e003      	b.n	8003af8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003b00:	e02d      	b.n	8003b5e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2180      	movs	r1, #128	; 0x80
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 fee6 	bl	80048de <UART_WaitOnFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e03a      	b.n	8003b92 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10b      	bne.n	8003b3a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	881a      	ldrh	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b2e:	b292      	uxth	r2, r2
 8003b30:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	3302      	adds	r3, #2
 8003b36:	61bb      	str	r3, [r7, #24]
 8003b38:	e008      	b.n	8003b4c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	781a      	ldrb	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	b292      	uxth	r2, r2
 8003b44:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1cb      	bne.n	8003b02 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2200      	movs	r2, #0
 8003b72:	2140      	movs	r1, #64	; 0x40
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 feb2 	bl	80048de <UART_WaitOnFlagUntilTimeout>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e006      	b.n	8003b92 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	e000      	b.n	8003b92 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003b90:	2302      	movs	r3, #2
  }
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3720      	adds	r7, #32
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb0:	2b20      	cmp	r3, #32
 8003bb2:	d131      	bne.n	8003c18 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <HAL_UART_Receive_IT+0x24>
 8003bba:	88fb      	ldrh	r3, [r7, #6]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e02a      	b.n	8003c1a <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_UART_Receive_IT+0x36>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e023      	b.n	8003c1a <HAL_UART_Receive_IT+0x7e>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a0f      	ldr	r2, [pc, #60]	; (8003c24 <HAL_UART_Receive_IT+0x88>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00e      	beq.n	8003c08 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d007      	beq.n	8003c08 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003c06:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003c08:	88fb      	ldrh	r3, [r7, #6]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	68b9      	ldr	r1, [r7, #8]
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 fee6 	bl	80049e0 <UART_Start_Receive_IT>
 8003c14:	4603      	mov	r3, r0
 8003c16:	e000      	b.n	8003c1a <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003c18:	2302      	movs	r3, #2
  }
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40008000 	.word	0x40008000

08003c28 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	4613      	mov	r3, r2
 8003c34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d131      	bne.n	8003ca4 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_UART_Receive_DMA+0x24>
 8003c46:	88fb      	ldrh	r3, [r7, #6]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e02a      	b.n	8003ca6 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_UART_Receive_DMA+0x36>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e023      	b.n	8003ca6 <HAL_UART_Receive_DMA+0x7e>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a0f      	ldr	r2, [pc, #60]	; (8003cb0 <HAL_UART_Receive_DMA+0x88>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00e      	beq.n	8003c94 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003c92:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003c94:	88fb      	ldrh	r3, [r7, #6]
 8003c96:	461a      	mov	r2, r3
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 ff5e 	bl	8004b5c <UART_Start_Receive_DMA>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	e000      	b.n	8003ca6 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003ca4:	2302      	movs	r3, #2
  }
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40008000 	.word	0x40008000

08003cb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	f640 030f 	movw	r3, #2063	; 0x80f
 8003cda:	4013      	ands	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d118      	bne.n	8003d16 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d013      	beq.n	8003d16 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d104      	bne.n	8003d02 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <HAL_UART_IRQHandler+0x62>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 81fb 	beq.w	8004102 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	4798      	blx	r3
      }
      return;
 8003d14:	e1f5      	b.n	8004102 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80ef 	beq.w	8003efc <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4b73      	ldr	r3, [pc, #460]	; (8003ef0 <HAL_UART_IRQHandler+0x23c>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d105      	bne.n	8003d34 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	4b72      	ldr	r3, [pc, #456]	; (8003ef4 <HAL_UART_IRQHandler+0x240>)
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 80e4 	beq.w	8003efc <HAL_UART_IRQHandler+0x248>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d010      	beq.n	8003d60 <HAL_UART_IRQHandler+0xac>
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00b      	beq.n	8003d60 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d56:	f043 0201 	orr.w	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d010      	beq.n	8003d8c <HAL_UART_IRQHandler+0xd8>
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00b      	beq.n	8003d8c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d82:	f043 0204 	orr.w	r2, r3, #4
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d010      	beq.n	8003db8 <HAL_UART_IRQHandler+0x104>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00b      	beq.n	8003db8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2204      	movs	r2, #4
 8003da6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dae:	f043 0202 	orr.w	r2, r3, #2
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d015      	beq.n	8003dee <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d104      	bne.n	8003dd6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	4b48      	ldr	r3, [pc, #288]	; (8003ef0 <HAL_UART_IRQHandler+0x23c>)
 8003dd0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00b      	beq.n	8003dee <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2208      	movs	r2, #8
 8003ddc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003de4:	f043 0208 	orr.w	r2, r3, #8
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d011      	beq.n	8003e1c <HAL_UART_IRQHandler+0x168>
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00c      	beq.n	8003e1c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e12:	f043 0220 	orr.w	r2, r3, #32
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 816f 	beq.w	8004106 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d011      	beq.n	8003e56 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d104      	bne.n	8003e46 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d007      	beq.n	8003e56 <HAL_UART_IRQHandler+0x1a2>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e5c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e68:	2b40      	cmp	r3, #64	; 0x40
 8003e6a:	d004      	beq.n	8003e76 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d031      	beq.n	8003eda <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fefc 	bl	8004c74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e86:	2b40      	cmp	r3, #64	; 0x40
 8003e88:	d123      	bne.n	8003ed2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e98:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d013      	beq.n	8003eca <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ea6:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <HAL_UART_IRQHandler+0x244>)
 8003ea8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fd fa83 	bl	80013ba <HAL_DMA_Abort_IT>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d017      	beq.n	8003eea <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec8:	e00f      	b.n	8003eea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f93a 	bl	8004144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed0:	e00b      	b.n	8003eea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f936 	bl	8004144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed8:	e007      	b.n	8003eea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f932 	bl	8004144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003ee8:	e10d      	b.n	8004106 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eea:	bf00      	nop
    return;
 8003eec:	e10b      	b.n	8004106 <HAL_UART_IRQHandler+0x452>
 8003eee:	bf00      	nop
 8003ef0:	10000001 	.word	0x10000001
 8003ef4:	04000120 	.word	0x04000120
 8003ef8:	08004e2b 	.word	0x08004e2b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	f040 80ab 	bne.w	800405c <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 80a5 	beq.w	800405c <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 809f 	beq.w	800405c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2210      	movs	r2, #16
 8003f24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f30:	2b40      	cmp	r3, #64	; 0x40
 8003f32:	d155      	bne.n	8003fe0 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003f3e:	893b      	ldrh	r3, [r7, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 80e2 	beq.w	800410a <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f4c:	893a      	ldrh	r2, [r7, #8]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	f080 80db 	bcs.w	800410a <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	893a      	ldrh	r2, [r7, #8]
 8003f58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0320 	and.w	r3, r3, #32
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d12b      	bne.n	8003fc4 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f7a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0201 	bic.w	r2, r2, #1
 8003f8a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f9a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0210 	bic.w	r2, r2, #16
 8003fb8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fd f99f 	bl	8001302 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f8bd 	bl	8004158 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003fde:	e094      	b.n	800410a <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 8087 	beq.w	800410e <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8004000:	897b      	ldrh	r3, [r7, #10]
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 8083 	beq.w	800410e <HAL_UART_IRQHandler+0x45a>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004016:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004026:	f023 0301 	bic.w	r3, r3, #1
 800402a:	6093      	str	r3, [r2, #8]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0210 	bic.w	r2, r2, #16
 800404e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004050:	897b      	ldrh	r3, [r7, #10]
 8004052:	4619      	mov	r1, r3
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f87f 	bl	8004158 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800405a:	e058      	b.n	800410e <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00d      	beq.n	8004082 <HAL_UART_IRQHandler+0x3ce>
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004078:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f001 fa53 	bl	8005526 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004080:	e048      	b.n	8004114 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004088:	2b00      	cmp	r3, #0
 800408a:	d012      	beq.n	80040b2 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004092:	2b00      	cmp	r3, #0
 8004094:	d104      	bne.n	80040a0 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <HAL_UART_IRQHandler+0x3fe>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d034      	beq.n	8004112 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	4798      	blx	r3
    }
    return;
 80040b0:	e02f      	b.n	8004112 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <HAL_UART_IRQHandler+0x41a>
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fec5 	bl	8004e56 <UART_EndTransmit_IT>
    return;
 80040cc:	e022      	b.n	8004114 <HAL_UART_IRQHandler+0x460>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_UART_IRQHandler+0x436>
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f001 fa33 	bl	800554e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040e8:	e014      	b.n	8004114 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00f      	beq.n	8004114 <HAL_UART_IRQHandler+0x460>
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	da0c      	bge.n	8004114 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f001 fa1d 	bl	800553a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004100:	e008      	b.n	8004114 <HAL_UART_IRQHandler+0x460>
      return;
 8004102:	bf00      	nop
 8004104:	e006      	b.n	8004114 <HAL_UART_IRQHandler+0x460>
    return;
 8004106:	bf00      	nop
 8004108:	e004      	b.n	8004114 <HAL_UART_IRQHandler+0x460>
      return;
 800410a:	bf00      	nop
 800410c:	e002      	b.n	8004114 <HAL_UART_IRQHandler+0x460>
      return;
 800410e:	bf00      	nop
 8004110:	e000      	b.n	8004114 <HAL_UART_IRQHandler+0x460>
    return;
 8004112:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8004114:	3720      	adds	r7, #32
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop

0800411c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004170:	b5b0      	push	{r4, r5, r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	431a      	orrs	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	4313      	orrs	r3, r2
 8004192:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	4bb1      	ldr	r3, [pc, #708]	; (8004460 <UART_SetConfig+0x2f0>)
 800419c:	4013      	ands	r3, r2
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	69f9      	ldr	r1, [r7, #28]
 80041a4:	430b      	orrs	r3, r1
 80041a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4aa6      	ldr	r2, [pc, #664]	; (8004464 <UART_SetConfig+0x2f4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d004      	beq.n	80041d8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	69fa      	ldr	r2, [r7, #28]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80041e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	69f9      	ldr	r1, [r7, #28]
 80041ec:	430b      	orrs	r3, r1
 80041ee:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f6:	f023 010f 	bic.w	r1, r3, #15
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a97      	ldr	r2, [pc, #604]	; (8004468 <UART_SetConfig+0x2f8>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d120      	bne.n	8004252 <UART_SetConfig+0xe2>
 8004210:	4b96      	ldr	r3, [pc, #600]	; (800446c <UART_SetConfig+0x2fc>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b03      	cmp	r3, #3
 800421c:	d816      	bhi.n	800424c <UART_SetConfig+0xdc>
 800421e:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <UART_SetConfig+0xb4>)
 8004220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004224:	08004235 	.word	0x08004235
 8004228:	08004241 	.word	0x08004241
 800422c:	0800423b 	.word	0x0800423b
 8004230:	08004247 	.word	0x08004247
 8004234:	2301      	movs	r3, #1
 8004236:	76fb      	strb	r3, [r7, #27]
 8004238:	e0e7      	b.n	800440a <UART_SetConfig+0x29a>
 800423a:	2302      	movs	r3, #2
 800423c:	76fb      	strb	r3, [r7, #27]
 800423e:	e0e4      	b.n	800440a <UART_SetConfig+0x29a>
 8004240:	2304      	movs	r3, #4
 8004242:	76fb      	strb	r3, [r7, #27]
 8004244:	e0e1      	b.n	800440a <UART_SetConfig+0x29a>
 8004246:	2308      	movs	r3, #8
 8004248:	76fb      	strb	r3, [r7, #27]
 800424a:	e0de      	b.n	800440a <UART_SetConfig+0x29a>
 800424c:	2310      	movs	r3, #16
 800424e:	76fb      	strb	r3, [r7, #27]
 8004250:	e0db      	b.n	800440a <UART_SetConfig+0x29a>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a86      	ldr	r2, [pc, #536]	; (8004470 <UART_SetConfig+0x300>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d132      	bne.n	80042c2 <UART_SetConfig+0x152>
 800425c:	4b83      	ldr	r3, [pc, #524]	; (800446c <UART_SetConfig+0x2fc>)
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004262:	f003 030c 	and.w	r3, r3, #12
 8004266:	2b0c      	cmp	r3, #12
 8004268:	d828      	bhi.n	80042bc <UART_SetConfig+0x14c>
 800426a:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <UART_SetConfig+0x100>)
 800426c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004270:	080042a5 	.word	0x080042a5
 8004274:	080042bd 	.word	0x080042bd
 8004278:	080042bd 	.word	0x080042bd
 800427c:	080042bd 	.word	0x080042bd
 8004280:	080042b1 	.word	0x080042b1
 8004284:	080042bd 	.word	0x080042bd
 8004288:	080042bd 	.word	0x080042bd
 800428c:	080042bd 	.word	0x080042bd
 8004290:	080042ab 	.word	0x080042ab
 8004294:	080042bd 	.word	0x080042bd
 8004298:	080042bd 	.word	0x080042bd
 800429c:	080042bd 	.word	0x080042bd
 80042a0:	080042b7 	.word	0x080042b7
 80042a4:	2300      	movs	r3, #0
 80042a6:	76fb      	strb	r3, [r7, #27]
 80042a8:	e0af      	b.n	800440a <UART_SetConfig+0x29a>
 80042aa:	2302      	movs	r3, #2
 80042ac:	76fb      	strb	r3, [r7, #27]
 80042ae:	e0ac      	b.n	800440a <UART_SetConfig+0x29a>
 80042b0:	2304      	movs	r3, #4
 80042b2:	76fb      	strb	r3, [r7, #27]
 80042b4:	e0a9      	b.n	800440a <UART_SetConfig+0x29a>
 80042b6:	2308      	movs	r3, #8
 80042b8:	76fb      	strb	r3, [r7, #27]
 80042ba:	e0a6      	b.n	800440a <UART_SetConfig+0x29a>
 80042bc:	2310      	movs	r3, #16
 80042be:	76fb      	strb	r3, [r7, #27]
 80042c0:	e0a3      	b.n	800440a <UART_SetConfig+0x29a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a6b      	ldr	r2, [pc, #428]	; (8004474 <UART_SetConfig+0x304>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d120      	bne.n	800430e <UART_SetConfig+0x19e>
 80042cc:	4b67      	ldr	r3, [pc, #412]	; (800446c <UART_SetConfig+0x2fc>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042d6:	2b30      	cmp	r3, #48	; 0x30
 80042d8:	d013      	beq.n	8004302 <UART_SetConfig+0x192>
 80042da:	2b30      	cmp	r3, #48	; 0x30
 80042dc:	d814      	bhi.n	8004308 <UART_SetConfig+0x198>
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d009      	beq.n	80042f6 <UART_SetConfig+0x186>
 80042e2:	2b20      	cmp	r3, #32
 80042e4:	d810      	bhi.n	8004308 <UART_SetConfig+0x198>
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <UART_SetConfig+0x180>
 80042ea:	2b10      	cmp	r3, #16
 80042ec:	d006      	beq.n	80042fc <UART_SetConfig+0x18c>
 80042ee:	e00b      	b.n	8004308 <UART_SetConfig+0x198>
 80042f0:	2300      	movs	r3, #0
 80042f2:	76fb      	strb	r3, [r7, #27]
 80042f4:	e089      	b.n	800440a <UART_SetConfig+0x29a>
 80042f6:	2302      	movs	r3, #2
 80042f8:	76fb      	strb	r3, [r7, #27]
 80042fa:	e086      	b.n	800440a <UART_SetConfig+0x29a>
 80042fc:	2304      	movs	r3, #4
 80042fe:	76fb      	strb	r3, [r7, #27]
 8004300:	e083      	b.n	800440a <UART_SetConfig+0x29a>
 8004302:	2308      	movs	r3, #8
 8004304:	76fb      	strb	r3, [r7, #27]
 8004306:	e080      	b.n	800440a <UART_SetConfig+0x29a>
 8004308:	2310      	movs	r3, #16
 800430a:	76fb      	strb	r3, [r7, #27]
 800430c:	e07d      	b.n	800440a <UART_SetConfig+0x29a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a59      	ldr	r2, [pc, #356]	; (8004478 <UART_SetConfig+0x308>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d120      	bne.n	800435a <UART_SetConfig+0x1ea>
 8004318:	4b54      	ldr	r3, [pc, #336]	; (800446c <UART_SetConfig+0x2fc>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004322:	2bc0      	cmp	r3, #192	; 0xc0
 8004324:	d013      	beq.n	800434e <UART_SetConfig+0x1de>
 8004326:	2bc0      	cmp	r3, #192	; 0xc0
 8004328:	d814      	bhi.n	8004354 <UART_SetConfig+0x1e4>
 800432a:	2b80      	cmp	r3, #128	; 0x80
 800432c:	d009      	beq.n	8004342 <UART_SetConfig+0x1d2>
 800432e:	2b80      	cmp	r3, #128	; 0x80
 8004330:	d810      	bhi.n	8004354 <UART_SetConfig+0x1e4>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <UART_SetConfig+0x1cc>
 8004336:	2b40      	cmp	r3, #64	; 0x40
 8004338:	d006      	beq.n	8004348 <UART_SetConfig+0x1d8>
 800433a:	e00b      	b.n	8004354 <UART_SetConfig+0x1e4>
 800433c:	2300      	movs	r3, #0
 800433e:	76fb      	strb	r3, [r7, #27]
 8004340:	e063      	b.n	800440a <UART_SetConfig+0x29a>
 8004342:	2302      	movs	r3, #2
 8004344:	76fb      	strb	r3, [r7, #27]
 8004346:	e060      	b.n	800440a <UART_SetConfig+0x29a>
 8004348:	2304      	movs	r3, #4
 800434a:	76fb      	strb	r3, [r7, #27]
 800434c:	e05d      	b.n	800440a <UART_SetConfig+0x29a>
 800434e:	2308      	movs	r3, #8
 8004350:	76fb      	strb	r3, [r7, #27]
 8004352:	e05a      	b.n	800440a <UART_SetConfig+0x29a>
 8004354:	2310      	movs	r3, #16
 8004356:	76fb      	strb	r3, [r7, #27]
 8004358:	e057      	b.n	800440a <UART_SetConfig+0x29a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a47      	ldr	r2, [pc, #284]	; (800447c <UART_SetConfig+0x30c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d125      	bne.n	80043b0 <UART_SetConfig+0x240>
 8004364:	4b41      	ldr	r3, [pc, #260]	; (800446c <UART_SetConfig+0x2fc>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004372:	d017      	beq.n	80043a4 <UART_SetConfig+0x234>
 8004374:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004378:	d817      	bhi.n	80043aa <UART_SetConfig+0x23a>
 800437a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800437e:	d00b      	beq.n	8004398 <UART_SetConfig+0x228>
 8004380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004384:	d811      	bhi.n	80043aa <UART_SetConfig+0x23a>
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <UART_SetConfig+0x222>
 800438a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800438e:	d006      	beq.n	800439e <UART_SetConfig+0x22e>
 8004390:	e00b      	b.n	80043aa <UART_SetConfig+0x23a>
 8004392:	2300      	movs	r3, #0
 8004394:	76fb      	strb	r3, [r7, #27]
 8004396:	e038      	b.n	800440a <UART_SetConfig+0x29a>
 8004398:	2302      	movs	r3, #2
 800439a:	76fb      	strb	r3, [r7, #27]
 800439c:	e035      	b.n	800440a <UART_SetConfig+0x29a>
 800439e:	2304      	movs	r3, #4
 80043a0:	76fb      	strb	r3, [r7, #27]
 80043a2:	e032      	b.n	800440a <UART_SetConfig+0x29a>
 80043a4:	2308      	movs	r3, #8
 80043a6:	76fb      	strb	r3, [r7, #27]
 80043a8:	e02f      	b.n	800440a <UART_SetConfig+0x29a>
 80043aa:	2310      	movs	r3, #16
 80043ac:	76fb      	strb	r3, [r7, #27]
 80043ae:	e02c      	b.n	800440a <UART_SetConfig+0x29a>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a2b      	ldr	r2, [pc, #172]	; (8004464 <UART_SetConfig+0x2f4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d125      	bne.n	8004406 <UART_SetConfig+0x296>
 80043ba:	4b2c      	ldr	r3, [pc, #176]	; (800446c <UART_SetConfig+0x2fc>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043c8:	d017      	beq.n	80043fa <UART_SetConfig+0x28a>
 80043ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043ce:	d817      	bhi.n	8004400 <UART_SetConfig+0x290>
 80043d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043d4:	d00b      	beq.n	80043ee <UART_SetConfig+0x27e>
 80043d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043da:	d811      	bhi.n	8004400 <UART_SetConfig+0x290>
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <UART_SetConfig+0x278>
 80043e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e4:	d006      	beq.n	80043f4 <UART_SetConfig+0x284>
 80043e6:	e00b      	b.n	8004400 <UART_SetConfig+0x290>
 80043e8:	2300      	movs	r3, #0
 80043ea:	76fb      	strb	r3, [r7, #27]
 80043ec:	e00d      	b.n	800440a <UART_SetConfig+0x29a>
 80043ee:	2302      	movs	r3, #2
 80043f0:	76fb      	strb	r3, [r7, #27]
 80043f2:	e00a      	b.n	800440a <UART_SetConfig+0x29a>
 80043f4:	2304      	movs	r3, #4
 80043f6:	76fb      	strb	r3, [r7, #27]
 80043f8:	e007      	b.n	800440a <UART_SetConfig+0x29a>
 80043fa:	2308      	movs	r3, #8
 80043fc:	76fb      	strb	r3, [r7, #27]
 80043fe:	e004      	b.n	800440a <UART_SetConfig+0x29a>
 8004400:	2310      	movs	r3, #16
 8004402:	76fb      	strb	r3, [r7, #27]
 8004404:	e001      	b.n	800440a <UART_SetConfig+0x29a>
 8004406:	2310      	movs	r3, #16
 8004408:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a15      	ldr	r2, [pc, #84]	; (8004464 <UART_SetConfig+0x2f4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	f040 809f 	bne.w	8004554 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004416:	7efb      	ldrb	r3, [r7, #27]
 8004418:	2b08      	cmp	r3, #8
 800441a:	d837      	bhi.n	800448c <UART_SetConfig+0x31c>
 800441c:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <UART_SetConfig+0x2b4>)
 800441e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004422:	bf00      	nop
 8004424:	08004449 	.word	0x08004449
 8004428:	0800448d 	.word	0x0800448d
 800442c:	08004451 	.word	0x08004451
 8004430:	0800448d 	.word	0x0800448d
 8004434:	08004457 	.word	0x08004457
 8004438:	0800448d 	.word	0x0800448d
 800443c:	0800448d 	.word	0x0800448d
 8004440:	0800448d 	.word	0x0800448d
 8004444:	08004485 	.word	0x08004485
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004448:	f7fe f9b6 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
 800444c:	6178      	str	r0, [r7, #20]
        break;
 800444e:	e022      	b.n	8004496 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004450:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <UART_SetConfig+0x310>)
 8004452:	617b      	str	r3, [r7, #20]
        break;
 8004454:	e01f      	b.n	8004496 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004456:	f7fe f917 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 800445a:	6178      	str	r0, [r7, #20]
        break;
 800445c:	e01b      	b.n	8004496 <UART_SetConfig+0x326>
 800445e:	bf00      	nop
 8004460:	cfff69f3 	.word	0xcfff69f3
 8004464:	40008000 	.word	0x40008000
 8004468:	40013800 	.word	0x40013800
 800446c:	40021000 	.word	0x40021000
 8004470:	40004400 	.word	0x40004400
 8004474:	40004800 	.word	0x40004800
 8004478:	40004c00 	.word	0x40004c00
 800447c:	40005000 	.word	0x40005000
 8004480:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004488:	617b      	str	r3, [r7, #20]
        break;
 800448a:	e004      	b.n	8004496 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	76bb      	strb	r3, [r7, #26]
        break;
 8004494:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 811b 	beq.w	80046d4 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	4a96      	ldr	r2, [pc, #600]	; (80046fc <UART_SetConfig+0x58c>)
 80044a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044a8:	461a      	mov	r2, r3
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80044b0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	4413      	add	r3, r2
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d305      	bcc.n	80044ce <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d902      	bls.n	80044d4 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	76bb      	strb	r3, [r7, #26]
 80044d2:	e0ff      	b.n	80046d4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f04f 0100 	mov.w	r1, #0
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	4a86      	ldr	r2, [pc, #536]	; (80046fc <UART_SetConfig+0x58c>)
 80044e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	f04f 0300 	mov.w	r3, #0
 80044ec:	f7fb fe88 	bl	8000200 <__aeabi_uldivmod>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4610      	mov	r0, r2
 80044f6:	4619      	mov	r1, r3
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	020b      	lsls	r3, r1, #8
 8004502:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004506:	0202      	lsls	r2, r0, #8
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	6849      	ldr	r1, [r1, #4]
 800450c:	0849      	lsrs	r1, r1, #1
 800450e:	4608      	mov	r0, r1
 8004510:	f04f 0100 	mov.w	r1, #0
 8004514:	1814      	adds	r4, r2, r0
 8004516:	eb43 0501 	adc.w	r5, r3, r1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	461a      	mov	r2, r3
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	4620      	mov	r0, r4
 8004526:	4629      	mov	r1, r5
 8004528:	f7fb fe6a 	bl	8000200 <__aeabi_uldivmod>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4613      	mov	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800453a:	d308      	bcc.n	800454e <UART_SetConfig+0x3de>
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004542:	d204      	bcs.n	800454e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	60da      	str	r2, [r3, #12]
 800454c:	e0c2      	b.n	80046d4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	76bb      	strb	r3, [r7, #26]
 8004552:	e0bf      	b.n	80046d4 <UART_SetConfig+0x564>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800455c:	d165      	bne.n	800462a <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 800455e:	7efb      	ldrb	r3, [r7, #27]
 8004560:	2b08      	cmp	r3, #8
 8004562:	d828      	bhi.n	80045b6 <UART_SetConfig+0x446>
 8004564:	a201      	add	r2, pc, #4	; (adr r2, 800456c <UART_SetConfig+0x3fc>)
 8004566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456a:	bf00      	nop
 800456c:	08004591 	.word	0x08004591
 8004570:	08004599 	.word	0x08004599
 8004574:	080045a1 	.word	0x080045a1
 8004578:	080045b7 	.word	0x080045b7
 800457c:	080045a7 	.word	0x080045a7
 8004580:	080045b7 	.word	0x080045b7
 8004584:	080045b7 	.word	0x080045b7
 8004588:	080045b7 	.word	0x080045b7
 800458c:	080045af 	.word	0x080045af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004590:	f7fe f912 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
 8004594:	6178      	str	r0, [r7, #20]
        break;
 8004596:	e013      	b.n	80045c0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004598:	f7fe f924 	bl	80027e4 <HAL_RCC_GetPCLK2Freq>
 800459c:	6178      	str	r0, [r7, #20]
        break;
 800459e:	e00f      	b.n	80045c0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045a0:	4b57      	ldr	r3, [pc, #348]	; (8004700 <UART_SetConfig+0x590>)
 80045a2:	617b      	str	r3, [r7, #20]
        break;
 80045a4:	e00c      	b.n	80045c0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045a6:	f7fe f86f 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 80045aa:	6178      	str	r0, [r7, #20]
        break;
 80045ac:	e008      	b.n	80045c0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045b2:	617b      	str	r3, [r7, #20]
        break;
 80045b4:	e004      	b.n	80045c0 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	76bb      	strb	r3, [r7, #26]
        break;
 80045be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 8086 	beq.w	80046d4 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	4a4b      	ldr	r2, [pc, #300]	; (80046fc <UART_SetConfig+0x58c>)
 80045ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045d2:	461a      	mov	r2, r3
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80045da:	005a      	lsls	r2, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	085b      	lsrs	r3, r3, #1
 80045e2:	441a      	add	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	2b0f      	cmp	r3, #15
 80045f4:	d916      	bls.n	8004624 <UART_SetConfig+0x4b4>
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045fc:	d212      	bcs.n	8004624 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	b29b      	uxth	r3, r3
 8004602:	f023 030f 	bic.w	r3, r3, #15
 8004606:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	085b      	lsrs	r3, r3, #1
 800460c:	b29b      	uxth	r3, r3
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	b29a      	uxth	r2, r3
 8004614:	89fb      	ldrh	r3, [r7, #14]
 8004616:	4313      	orrs	r3, r2
 8004618:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	89fa      	ldrh	r2, [r7, #14]
 8004620:	60da      	str	r2, [r3, #12]
 8004622:	e057      	b.n	80046d4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	76bb      	strb	r3, [r7, #26]
 8004628:	e054      	b.n	80046d4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800462a:	7efb      	ldrb	r3, [r7, #27]
 800462c:	2b08      	cmp	r3, #8
 800462e:	d828      	bhi.n	8004682 <UART_SetConfig+0x512>
 8004630:	a201      	add	r2, pc, #4	; (adr r2, 8004638 <UART_SetConfig+0x4c8>)
 8004632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004636:	bf00      	nop
 8004638:	0800465d 	.word	0x0800465d
 800463c:	08004665 	.word	0x08004665
 8004640:	0800466d 	.word	0x0800466d
 8004644:	08004683 	.word	0x08004683
 8004648:	08004673 	.word	0x08004673
 800464c:	08004683 	.word	0x08004683
 8004650:	08004683 	.word	0x08004683
 8004654:	08004683 	.word	0x08004683
 8004658:	0800467b 	.word	0x0800467b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800465c:	f7fe f8ac 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
 8004660:	6178      	str	r0, [r7, #20]
        break;
 8004662:	e013      	b.n	800468c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004664:	f7fe f8be 	bl	80027e4 <HAL_RCC_GetPCLK2Freq>
 8004668:	6178      	str	r0, [r7, #20]
        break;
 800466a:	e00f      	b.n	800468c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800466c:	4b24      	ldr	r3, [pc, #144]	; (8004700 <UART_SetConfig+0x590>)
 800466e:	617b      	str	r3, [r7, #20]
        break;
 8004670:	e00c      	b.n	800468c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004672:	f7fe f809 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8004676:	6178      	str	r0, [r7, #20]
        break;
 8004678:	e008      	b.n	800468c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800467a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800467e:	617b      	str	r3, [r7, #20]
        break;
 8004680:	e004      	b.n	800468c <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	76bb      	strb	r3, [r7, #26]
        break;
 800468a:	bf00      	nop
    }

    if (pclk != 0U)
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d020      	beq.n	80046d4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	4a19      	ldr	r2, [pc, #100]	; (80046fc <UART_SetConfig+0x58c>)
 8004698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800469c:	461a      	mov	r2, r3
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	085b      	lsrs	r3, r3, #1
 80046aa:	441a      	add	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	2b0f      	cmp	r3, #15
 80046bc:	d908      	bls.n	80046d0 <UART_SetConfig+0x560>
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c4:	d204      	bcs.n	80046d0 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	60da      	str	r2, [r3, #12]
 80046ce:	e001      	b.n	80046d4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80046f0:	7ebb      	ldrb	r3, [r7, #26]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3720      	adds	r7, #32
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bdb0      	pop	{r4, r5, r7, pc}
 80046fa:	bf00      	nop
 80046fc:	08008918 	.word	0x08008918
 8004700:	00f42400 	.word	0x00f42400

08004704 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004798:	f003 0310 	and.w	r3, r3, #16
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01a      	beq.n	800481a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004802:	d10a      	bne.n	800481a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	605a      	str	r2, [r3, #4]
  }
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af02      	add	r7, sp, #8
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004858:	f7fc fb42 	bl	8000ee0 <HAL_GetTick>
 800485c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0308 	and.w	r3, r3, #8
 8004868:	2b08      	cmp	r3, #8
 800486a:	d10e      	bne.n	800488a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800486c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f82f 	bl	80048de <UART_WaitOnFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e025      	b.n	80048d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b04      	cmp	r3, #4
 8004896:	d10e      	bne.n	80048b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004898:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f819 	bl	80048de <UART_WaitOnFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e00f      	b.n	80048d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b084      	sub	sp, #16
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	603b      	str	r3, [r7, #0]
 80048ea:	4613      	mov	r3, r2
 80048ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ee:	e062      	b.n	80049b6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f6:	d05e      	beq.n	80049b6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f8:	f7fc faf2 	bl	8000ee0 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	429a      	cmp	r2, r3
 8004906:	d302      	bcc.n	800490e <UART_WaitOnFlagUntilTimeout+0x30>
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d11d      	bne.n	800494a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800491c:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0201 	bic.w	r2, r2, #1
 800492c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2220      	movs	r2, #32
 8004932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2220      	movs	r2, #32
 800493a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e045      	b.n	80049d6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d02e      	beq.n	80049b6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004966:	d126      	bne.n	80049b6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004970:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004980:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0201 	bic.w	r2, r2, #1
 8004990:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2220      	movs	r2, #32
 8004996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2220      	movs	r2, #32
 800499e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2220      	movs	r2, #32
 80049a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e00f      	b.n	80049d6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	69da      	ldr	r2, [r3, #28]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	4013      	ands	r3, r2
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	bf0c      	ite	eq
 80049c6:	2301      	moveq	r3, #1
 80049c8:	2300      	movne	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	461a      	mov	r2, r3
 80049ce:	79fb      	ldrb	r3, [r7, #7]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d08d      	beq.n	80048f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	4613      	mov	r3, r2
 80049ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	88fa      	ldrh	r2, [r7, #6]
 80049f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	88fa      	ldrh	r2, [r7, #6]
 8004a00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a12:	d10e      	bne.n	8004a32 <UART_Start_Receive_IT+0x52>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d105      	bne.n	8004a28 <UART_Start_Receive_IT+0x48>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004a22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a26:	e02d      	b.n	8004a84 <UART_Start_Receive_IT+0xa4>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	22ff      	movs	r2, #255	; 0xff
 8004a2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a30:	e028      	b.n	8004a84 <UART_Start_Receive_IT+0xa4>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10d      	bne.n	8004a56 <UART_Start_Receive_IT+0x76>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d104      	bne.n	8004a4c <UART_Start_Receive_IT+0x6c>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	22ff      	movs	r2, #255	; 0xff
 8004a46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a4a:	e01b      	b.n	8004a84 <UART_Start_Receive_IT+0xa4>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	227f      	movs	r2, #127	; 0x7f
 8004a50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a54:	e016      	b.n	8004a84 <UART_Start_Receive_IT+0xa4>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a5e:	d10d      	bne.n	8004a7c <UART_Start_Receive_IT+0x9c>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d104      	bne.n	8004a72 <UART_Start_Receive_IT+0x92>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	227f      	movs	r2, #127	; 0x7f
 8004a6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a70:	e008      	b.n	8004a84 <UART_Start_Receive_IT+0xa4>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	223f      	movs	r2, #63	; 0x3f
 8004a76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a7a:	e003      	b.n	8004a84 <UART_Start_Receive_IT+0xa4>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2222      	movs	r2, #34	; 0x22
 8004a90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0201 	orr.w	r2, r2, #1
 8004aa2:	609a      	str	r2, [r3, #8]

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aac:	d12a      	bne.n	8004b04 <UART_Start_Receive_IT+0x124>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004ab4:	88fa      	ldrh	r2, [r7, #6]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d324      	bcc.n	8004b04 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac2:	d107      	bne.n	8004ad4 <UART_Start_Receive_IT+0xf4>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d103      	bne.n	8004ad4 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4a1f      	ldr	r2, [pc, #124]	; (8004b4c <UART_Start_Receive_IT+0x16c>)
 8004ad0:	671a      	str	r2, [r3, #112]	; 0x70
 8004ad2:	e002      	b.n	8004ada <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4a1e      	ldr	r2, [pc, #120]	; (8004b50 <UART_Start_Receive_IT+0x170>)
 8004ad8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004af0:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004b00:	609a      	str	r2, [r3, #8]
 8004b02:	e01b      	b.n	8004b3c <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0c:	d107      	bne.n	8004b1e <UART_Start_Receive_IT+0x13e>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d103      	bne.n	8004b1e <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4a0e      	ldr	r2, [pc, #56]	; (8004b54 <UART_Start_Receive_IT+0x174>)
 8004b1a:	671a      	str	r2, [r3, #112]	; 0x70
 8004b1c:	e002      	b.n	8004b24 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4a0d      	ldr	r2, [pc, #52]	; (8004b58 <UART_Start_Receive_IT+0x178>)
 8004b22:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004b3a:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(huart);

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	0800524d 	.word	0x0800524d
 8004b50:	08005045 	.word	0x08005045
 8004b54:	08004f67 	.word	0x08004f67
 8004b58:	08004e8b 	.word	0x08004e8b

08004b5c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	4613      	mov	r3, r2
 8004b68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	88fa      	ldrh	r2, [r7, #6]
 8004b74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2222      	movs	r2, #34	; 0x22
 8004b84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d02c      	beq.n	8004bea <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b94:	4a25      	ldr	r2, [pc, #148]	; (8004c2c <UART_Start_Receive_DMA+0xd0>)
 8004b96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b9c:	4a24      	ldr	r2, [pc, #144]	; (8004c30 <UART_Start_Receive_DMA+0xd4>)
 8004b9e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba4:	4a23      	ldr	r2, [pc, #140]	; (8004c34 <UART_Start_Receive_DMA+0xd8>)
 8004ba6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bac:	2200      	movs	r2, #0
 8004bae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3324      	adds	r3, #36	; 0x24
 8004bba:	4619      	mov	r1, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	88fb      	ldrh	r3, [r7, #6]
 8004bc4:	f7fc fb22 	bl	800120c <HAL_DMA_Start_IT>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00d      	beq.n	8004bea <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2210      	movs	r2, #16
 8004bd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e01c      	b.n	8004c24 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c00:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f042 0201 	orr.w	r2, r2, #1
 8004c10:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c20:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	08004cd9 	.word	0x08004cd9
 8004c30:	08004d73 	.word	0x08004d73
 8004c34:	08004dab 	.word	0x08004dab

08004c38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004c4e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004c5e:	609a      	str	r2, [r3, #8]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c8a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6812      	ldr	r2, [r2, #0]
 8004c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c9a:	f023 0301 	bic.w	r3, r3, #1
 8004c9e:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d107      	bne.n	8004cb8 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0210 	bic.w	r2, r2, #16
 8004cb6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0320 	and.w	r3, r3, #32
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d12b      	bne.n	8004d4c <UART_DMAReceiveCplt+0x74>
  {
    huart->RxXferCount = 0U;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d0a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0201 	bic.w	r2, r2, #1
 8004d1a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689a      	ldr	r2, [r3, #8]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d2a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d107      	bne.n	8004d4c <UART_DMAReceiveCplt+0x74>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0210 	bic.w	r2, r2, #16
 8004d4a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d107      	bne.n	8004d64 <UART_DMAReceiveCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f7ff f9fb 	bl	8004158 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d62:	e002      	b.n	8004d6a <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f7fb fdad 	bl	80008c4 <HAL_UART_RxCpltCallback>
}
 8004d6a:	bf00      	nop
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d109      	bne.n	8004d9c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d8e:	085b      	lsrs	r3, r3, #1
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	4619      	mov	r1, r3
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f7ff f9df 	bl	8004158 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d9a:	e002      	b.n	8004da2 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f7ff f9c7 	bl	8004130 <HAL_UART_RxHalfCpltCallback>
}
 8004da2:	bf00      	nop
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b086      	sub	sp, #24
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dbe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd2:	2b80      	cmp	r3, #128	; 0x80
 8004dd4:	d109      	bne.n	8004dea <UART_DMAError+0x40>
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2b21      	cmp	r3, #33	; 0x21
 8004dda:	d106      	bne.n	8004dea <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8004de4:	6978      	ldr	r0, [r7, #20]
 8004de6:	f7ff ff27 	bl	8004c38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df4:	2b40      	cmp	r3, #64	; 0x40
 8004df6:	d109      	bne.n	8004e0c <UART_DMAError+0x62>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b22      	cmp	r3, #34	; 0x22
 8004dfc:	d106      	bne.n	8004e0c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8004e06:	6978      	ldr	r0, [r7, #20]
 8004e08:	f7ff ff34 	bl	8004c74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e12:	f043 0210 	orr.w	r2, r3, #16
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e1c:	6978      	ldr	r0, [r7, #20]
 8004e1e:	f7ff f991 	bl	8004144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e22:	bf00      	nop
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f7ff f97b 	bl	8004144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e4e:	bf00      	nop
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b082      	sub	sp, #8
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e6c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2220      	movs	r2, #32
 8004e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7ff f94d 	bl	800411c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e82:	bf00      	nop
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004e98:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea0:	2b22      	cmp	r3, #34	; 0x22
 8004ea2:	d152      	bne.n	8004f4a <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004eaa:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004eac:	89bb      	ldrh	r3, [r7, #12]
 8004eae:	b2d9      	uxtb	r1, r3
 8004eb0:	89fb      	ldrh	r3, [r7, #14]
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb8:	400a      	ands	r2, r1
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d13b      	bne.n	8004f5e <UART_RxISR_8BIT+0xd4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ef4:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0201 	bic.w	r2, r2, #1
 8004f04:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d10f      	bne.n	8004f3c <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0210 	bic.w	r2, r2, #16
 8004f2a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f32:	4619      	mov	r1, r3
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff f90f 	bl	8004158 <HAL_UARTEx_RxEventCallback>
 8004f3a:	e002      	b.n	8004f42 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7fb fcc1 	bl	80008c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f48:	e009      	b.n	8004f5e <UART_RxISR_8BIT+0xd4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	8b1b      	ldrh	r3, [r3, #24]
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0208 	orr.w	r2, r2, #8
 8004f5a:	b292      	uxth	r2, r2
 8004f5c:	831a      	strh	r2, [r3, #24]
}
 8004f5e:	bf00      	nop
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b084      	sub	sp, #16
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004f74:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7c:	2b22      	cmp	r3, #34	; 0x22
 8004f7e:	d152      	bne.n	8005026 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004f86:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004f8e:	89ba      	ldrh	r2, [r7, #12]
 8004f90:	89fb      	ldrh	r3, [r7, #14]
 8004f92:	4013      	ands	r3, r2
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9e:	1c9a      	adds	r2, r3, #2
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d13b      	bne.n	800503a <UART_RxISR_16BIT+0xd4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fd0:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0201 	bic.w	r2, r2, #1
 8004fe0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d10f      	bne.n	8005018 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0210 	bic.w	r2, r2, #16
 8005006:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800500e:	4619      	mov	r1, r3
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff f8a1 	bl	8004158 <HAL_UARTEx_RxEventCallback>
 8005016:	e002      	b.n	800501e <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7fb fc53 	bl	80008c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005024:	e009      	b.n	800503a <UART_RxISR_16BIT+0xd4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	8b1b      	ldrh	r3, [r3, #24]
 800502c:	b29a      	uxth	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 0208 	orr.w	r2, r2, #8
 8005036:	b292      	uxth	r2, r2
 8005038:	831a      	strh	r2, [r3, #24]
}
 800503a:	bf00      	nop
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005052:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005072:	2b22      	cmp	r3, #34	; 0x22
 8005074:	f040 80da 	bne.w	800522c <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800507e:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005080:	e0aa      	b.n	80051d8 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005088:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800508a:	89bb      	ldrh	r3, [r7, #12]
 800508c:	b2d9      	uxtb	r1, r3
 800508e:	8b7b      	ldrh	r3, [r7, #26]
 8005090:	b2da      	uxtb	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005096:	400a      	ands	r2, r1
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	3b01      	subs	r3, #1
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d04d      	beq.n	8005166 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d010      	beq.n	80050f6 <UART_RxISR_8BIT_FIFOEN+0xb2>
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00b      	beq.n	80050f6 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2201      	movs	r2, #1
 80050e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050ec:	f043 0201 	orr.w	r2, r3, #1
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d010      	beq.n	8005122 <UART_RxISR_8BIT_FIFOEN+0xde>
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00b      	beq.n	8005122 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2202      	movs	r2, #2
 8005110:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005118:	f043 0204 	orr.w	r2, r3, #4
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b00      	cmp	r3, #0
 800512a:	d010      	beq.n	800514e <UART_RxISR_8BIT_FIFOEN+0x10a>
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00b      	beq.n	800514e <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2204      	movs	r2, #4
 800513c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005144:	f043 0202 	orr.w	r2, r3, #2
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005154:	2b00      	cmp	r3, #0
 8005156:	d006      	beq.n	8005166 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7fe fff3 	bl	8004144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d132      	bne.n	80051d8 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005180:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6812      	ldr	r2, [r2, #0]
 800518c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005190:	f023 0301 	bic.w	r3, r3, #1
 8005194:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d10f      	bne.n	80051cc <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0210 	bic.w	r2, r2, #16
 80051ba:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051c2:	4619      	mov	r1, r3
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7fe ffc7 	bl	8004158 <HAL_UARTEx_RxEventCallback>
 80051ca:	e002      	b.n	80051d2 <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7fb fb79 	bl	80008c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80051d8:	89fb      	ldrh	r3, [r7, #14]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d005      	beq.n	80051ea <UART_RxISR_8BIT_FIFOEN+0x1a6>
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	f003 0320 	and.w	r3, r3, #32
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f47f af4c 	bne.w	8005082 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051f0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80051f2:	897b      	ldrh	r3, [r7, #10]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d023      	beq.n	8005240 <UART_RxISR_8BIT_FIFOEN+0x1fc>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80051fe:	897a      	ldrh	r2, [r7, #10]
 8005200:	429a      	cmp	r2, r3
 8005202:	d21d      	bcs.n	8005240 <UART_RxISR_8BIT_FIFOEN+0x1fc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689a      	ldr	r2, [r3, #8]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005212:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a0c      	ldr	r2, [pc, #48]	; (8005248 <UART_RxISR_8BIT_FIFOEN+0x204>)
 8005218:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 0220 	orr.w	r2, r2, #32
 8005228:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800522a:	e009      	b.n	8005240 <UART_RxISR_8BIT_FIFOEN+0x1fc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	8b1b      	ldrh	r3, [r3, #24]
 8005232:	b29a      	uxth	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f042 0208 	orr.w	r2, r2, #8
 800523c:	b292      	uxth	r2, r2
 800523e:	831a      	strh	r2, [r3, #24]
}
 8005240:	bf00      	nop
 8005242:	3720      	adds	r7, #32
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	08004e8b 	.word	0x08004e8b

0800524c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b08a      	sub	sp, #40	; 0x28
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800525a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527a:	2b22      	cmp	r3, #34	; 0x22
 800527c:	f040 80da 	bne.w	8005434 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005286:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005288:	e0aa      	b.n	80053e0 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005290:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005296:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8005298:	8aba      	ldrh	r2, [r7, #20]
 800529a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800529c:	4013      	ands	r3, r2
 800529e:	b29a      	uxth	r2, r3
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a8:	1c9a      	adds	r2, r3, #2
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	3b01      	subs	r3, #1
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d04d      	beq.n	800536e <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d010      	beq.n	80052fe <UART_RxISR_16BIT_FIFOEN+0xb2>
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00b      	beq.n	80052fe <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2201      	movs	r2, #1
 80052ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052f4:	f043 0201 	orr.w	r2, r3, #1
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d010      	beq.n	800532a <UART_RxISR_16BIT_FIFOEN+0xde>
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00b      	beq.n	800532a <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2202      	movs	r2, #2
 8005318:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005320:	f043 0204 	orr.w	r2, r3, #4
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d010      	beq.n	8005356 <UART_RxISR_16BIT_FIFOEN+0x10a>
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00b      	beq.n	8005356 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2204      	movs	r2, #4
 8005344:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800534c:	f043 0202 	orr.w	r2, r3, #2
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800535c:	2b00      	cmp	r3, #0
 800535e:	d006      	beq.n	800536e <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7fe feef 	bl	8004144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005374:	b29b      	uxth	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d132      	bne.n	80053e0 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005388:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005398:	f023 0301 	bic.w	r3, r3, #1
 800539c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d10f      	bne.n	80053d4 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 0210 	bic.w	r2, r2, #16
 80053c2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80053ca:	4619      	mov	r1, r3
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f7fe fec3 	bl	8004158 <HAL_UARTEx_RxEventCallback>
 80053d2:	e002      	b.n	80053da <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7fb fa75 	bl	80008c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80053e0:	8afb      	ldrh	r3, [r7, #22]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d005      	beq.n	80053f2 <UART_RxISR_16BIT_FIFOEN+0x1a6>
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	f003 0320 	and.w	r3, r3, #32
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f47f af4c 	bne.w	800528a <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80053f8:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80053fa:	89fb      	ldrh	r3, [r7, #14]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d023      	beq.n	8005448 <UART_RxISR_16BIT_FIFOEN+0x1fc>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005406:	89fa      	ldrh	r2, [r7, #14]
 8005408:	429a      	cmp	r2, r3
 800540a:	d21d      	bcs.n	8005448 <UART_RxISR_16BIT_FIFOEN+0x1fc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800541a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a0c      	ldr	r2, [pc, #48]	; (8005450 <UART_RxISR_16BIT_FIFOEN+0x204>)
 8005420:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f042 0220 	orr.w	r2, r2, #32
 8005430:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005432:	e009      	b.n	8005448 <UART_RxISR_16BIT_FIFOEN+0x1fc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	8b1b      	ldrh	r3, [r3, #24]
 800543a:	b29a      	uxth	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 0208 	orr.w	r2, r2, #8
 8005444:	b292      	uxth	r2, r2
 8005446:	831a      	strh	r2, [r3, #24]
}
 8005448:	bf00      	nop
 800544a:	3728      	adds	r7, #40	; 0x28
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	08004f67 	.word	0x08004f67

08005454 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
 8005460:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e058      	b.n	800551e <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005472:	2b00      	cmp	r3, #0
 8005474:	d106      	bne.n	8005484 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f7fb fb50 	bl	8000b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2224      	movs	r2, #36	; 0x24
 8005488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0201 	bic.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f7fe fe67 	bl	8004170 <UART_SetConfig>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e038      	b.n	800551e <HAL_RS485Ex_Init+0xca>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f7ff f925 	bl	8004704 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054c8:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	430a      	orrs	r2, r1
 80054dc:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	055b      	lsls	r3, r3, #21
 80054e2:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	041b      	lsls	r3, r3, #16
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 80054f8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	6979      	ldr	r1, [r7, #20]
 8005502:	430b      	orrs	r3, r1
 8005504:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f042 0201 	orr.w	r2, r2, #1
 8005514:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f7ff f996 	bl	8004848 <UART_CheckIdleState>
 800551c:	4603      	mov	r3, r0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005562:	b480      	push	{r7}
 8005564:	b085      	sub	sp, #20
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005570:	2b01      	cmp	r3, #1
 8005572:	d101      	bne.n	8005578 <HAL_UARTEx_DisableFifoMode+0x16>
 8005574:	2302      	movs	r3, #2
 8005576:	e027      	b.n	80055c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2224      	movs	r2, #36	; 0x24
 8005584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0201 	bic.w	r2, r2, #1
 800559e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80055a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e02d      	b.n	8005648 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2224      	movs	r2, #36	; 0x24
 80055f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0201 	bic.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f84f 	bl	80056cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2220      	movs	r2, #32
 800563a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005664:	2302      	movs	r3, #2
 8005666:	e02d      	b.n	80056c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2224      	movs	r2, #36	; 0x24
 8005674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0201 	bic.w	r2, r2, #1
 800568e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f811 	bl	80056cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d108      	bne.n	80056ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80056ec:	e031      	b.n	8005752 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80056ee:	2308      	movs	r3, #8
 80056f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80056f2:	2308      	movs	r3, #8
 80056f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	0e5b      	lsrs	r3, r3, #25
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	f003 0307 	and.w	r3, r3, #7
 8005704:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	0f5b      	lsrs	r3, r3, #29
 800570e:	b2db      	uxtb	r3, r3
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005716:	7bbb      	ldrb	r3, [r7, #14]
 8005718:	7b3a      	ldrb	r2, [r7, #12]
 800571a:	4911      	ldr	r1, [pc, #68]	; (8005760 <UARTEx_SetNbDataToProcess+0x94>)
 800571c:	5c8a      	ldrb	r2, [r1, r2]
 800571e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005722:	7b3a      	ldrb	r2, [r7, #12]
 8005724:	490f      	ldr	r1, [pc, #60]	; (8005764 <UARTEx_SetNbDataToProcess+0x98>)
 8005726:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005728:	fb93 f3f2 	sdiv	r3, r3, r2
 800572c:	b29a      	uxth	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	7b7a      	ldrb	r2, [r7, #13]
 8005738:	4909      	ldr	r1, [pc, #36]	; (8005760 <UARTEx_SetNbDataToProcess+0x94>)
 800573a:	5c8a      	ldrb	r2, [r1, r2]
 800573c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005740:	7b7a      	ldrb	r2, [r7, #13]
 8005742:	4908      	ldr	r1, [pc, #32]	; (8005764 <UARTEx_SetNbDataToProcess+0x98>)
 8005744:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005746:	fb93 f3f2 	sdiv	r3, r3, r2
 800574a:	b29a      	uxth	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005752:	bf00      	nop
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	08008930 	.word	0x08008930
 8005764:	08008938 	.word	0x08008938

08005768 <__NVIC_SetPriority>:
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	4603      	mov	r3, r0
 8005770:	6039      	str	r1, [r7, #0]
 8005772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005778:	2b00      	cmp	r3, #0
 800577a:	db0a      	blt.n	8005792 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	b2da      	uxtb	r2, r3
 8005780:	490c      	ldr	r1, [pc, #48]	; (80057b4 <__NVIC_SetPriority+0x4c>)
 8005782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005786:	0112      	lsls	r2, r2, #4
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	440b      	add	r3, r1
 800578c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005790:	e00a      	b.n	80057a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	b2da      	uxtb	r2, r3
 8005796:	4908      	ldr	r1, [pc, #32]	; (80057b8 <__NVIC_SetPriority+0x50>)
 8005798:	79fb      	ldrb	r3, [r7, #7]
 800579a:	f003 030f 	and.w	r3, r3, #15
 800579e:	3b04      	subs	r3, #4
 80057a0:	0112      	lsls	r2, r2, #4
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	440b      	add	r3, r1
 80057a6:	761a      	strb	r2, [r3, #24]
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	e000e100 	.word	0xe000e100
 80057b8:	e000ed00 	.word	0xe000ed00

080057bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80057c0:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <SysTick_Handler+0x1c>)
 80057c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80057c4:	f001 ff44 	bl	8007650 <xTaskGetSchedulerState>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d001      	beq.n	80057d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80057ce:	f002 fd2b 	bl	8008228 <xPortSysTickHandler>
  }
}
 80057d2:	bf00      	nop
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	e000e010 	.word	0xe000e010

080057dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80057e0:	2100      	movs	r1, #0
 80057e2:	f06f 0004 	mvn.w	r0, #4
 80057e6:	f7ff ffbf 	bl	8005768 <__NVIC_SetPriority>
#endif
}
 80057ea:	bf00      	nop
 80057ec:	bd80      	pop	{r7, pc}
	...

080057f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057f6:	f3ef 8305 	mrs	r3, IPSR
 80057fa:	603b      	str	r3, [r7, #0]
  return(result);
 80057fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005802:	f06f 0305 	mvn.w	r3, #5
 8005806:	607b      	str	r3, [r7, #4]
 8005808:	e00c      	b.n	8005824 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800580a:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <osKernelInitialize+0x44>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d105      	bne.n	800581e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005812:	4b08      	ldr	r3, [pc, #32]	; (8005834 <osKernelInitialize+0x44>)
 8005814:	2201      	movs	r2, #1
 8005816:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005818:	2300      	movs	r3, #0
 800581a:	607b      	str	r3, [r7, #4]
 800581c:	e002      	b.n	8005824 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800581e:	f04f 33ff 	mov.w	r3, #4294967295
 8005822:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005824:	687b      	ldr	r3, [r7, #4]
}
 8005826:	4618      	mov	r0, r3
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	20000030 	.word	0x20000030

08005838 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800583e:	f3ef 8305 	mrs	r3, IPSR
 8005842:	603b      	str	r3, [r7, #0]
  return(result);
 8005844:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <osKernelStart+0x1a>
    stat = osErrorISR;
 800584a:	f06f 0305 	mvn.w	r3, #5
 800584e:	607b      	str	r3, [r7, #4]
 8005850:	e010      	b.n	8005874 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005852:	4b0b      	ldr	r3, [pc, #44]	; (8005880 <osKernelStart+0x48>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d109      	bne.n	800586e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800585a:	f7ff ffbf 	bl	80057dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800585e:	4b08      	ldr	r3, [pc, #32]	; (8005880 <osKernelStart+0x48>)
 8005860:	2202      	movs	r2, #2
 8005862:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005864:	f001 faac 	bl	8006dc0 <vTaskStartScheduler>
      stat = osOK;
 8005868:	2300      	movs	r3, #0
 800586a:	607b      	str	r3, [r7, #4]
 800586c:	e002      	b.n	8005874 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800586e:	f04f 33ff 	mov.w	r3, #4294967295
 8005872:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005874:	687b      	ldr	r3, [r7, #4]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20000030 	.word	0x20000030

08005884 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005884:	b580      	push	{r7, lr}
 8005886:	b08e      	sub	sp, #56	; 0x38
 8005888:	af04      	add	r7, sp, #16
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005890:	2300      	movs	r3, #0
 8005892:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005894:	f3ef 8305 	mrs	r3, IPSR
 8005898:	617b      	str	r3, [r7, #20]
  return(result);
 800589a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800589c:	2b00      	cmp	r3, #0
 800589e:	d17e      	bne.n	800599e <osThreadNew+0x11a>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d07b      	beq.n	800599e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80058a6:	2380      	movs	r3, #128	; 0x80
 80058a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80058aa:	2318      	movs	r3, #24
 80058ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80058b2:	f04f 33ff 	mov.w	r3, #4294967295
 80058b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d045      	beq.n	800594a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <osThreadNew+0x48>
        name = attr->name;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d008      	beq.n	80058f2 <osThreadNew+0x6e>
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	2b38      	cmp	r3, #56	; 0x38
 80058e4:	d805      	bhi.n	80058f2 <osThreadNew+0x6e>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <osThreadNew+0x72>
        return (NULL);
 80058f2:	2300      	movs	r3, #0
 80058f4:	e054      	b.n	80059a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	089b      	lsrs	r3, r3, #2
 8005904:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00e      	beq.n	800592c <osThreadNew+0xa8>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	2b5b      	cmp	r3, #91	; 0x5b
 8005914:	d90a      	bls.n	800592c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800591a:	2b00      	cmp	r3, #0
 800591c:	d006      	beq.n	800592c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <osThreadNew+0xa8>
        mem = 1;
 8005926:	2301      	movs	r3, #1
 8005928:	61bb      	str	r3, [r7, #24]
 800592a:	e010      	b.n	800594e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10c      	bne.n	800594e <osThreadNew+0xca>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d108      	bne.n	800594e <osThreadNew+0xca>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d104      	bne.n	800594e <osThreadNew+0xca>
          mem = 0;
 8005944:	2300      	movs	r3, #0
 8005946:	61bb      	str	r3, [r7, #24]
 8005948:	e001      	b.n	800594e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800594a:	2300      	movs	r3, #0
 800594c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d110      	bne.n	8005976 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800595c:	9202      	str	r2, [sp, #8]
 800595e:	9301      	str	r3, [sp, #4]
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	6a3a      	ldr	r2, [r7, #32]
 8005968:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f001 f852 	bl	8006a14 <xTaskCreateStatic>
 8005970:	4603      	mov	r3, r0
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	e013      	b.n	800599e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d110      	bne.n	800599e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	b29a      	uxth	r2, r3
 8005980:	f107 0310 	add.w	r3, r7, #16
 8005984:	9301      	str	r3, [sp, #4]
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f001 f89d 	bl	8006ace <xTaskCreate>
 8005994:	4603      	mov	r3, r0
 8005996:	2b01      	cmp	r3, #1
 8005998:	d001      	beq.n	800599e <osThreadNew+0x11a>
            hTask = NULL;
 800599a:	2300      	movs	r3, #0
 800599c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800599e:	693b      	ldr	r3, [r7, #16]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3728      	adds	r7, #40	; 0x28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059b0:	f3ef 8305 	mrs	r3, IPSR
 80059b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80059b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <osDelay+0x1c>
    stat = osErrorISR;
 80059bc:	f06f 0305 	mvn.w	r3, #5
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	e007      	b.n	80059d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f001 f9c2 	bl	8006d58 <vTaskDelay>
    }
  }

  return (stat);
 80059d4:	68fb      	ldr	r3, [r7, #12]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80059de:	b580      	push	{r7, lr}
 80059e0:	b08a      	sub	sp, #40	; 0x28
 80059e2:	af02      	add	r7, sp, #8
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	60b9      	str	r1, [r7, #8]
 80059e8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059ee:	f3ef 8305 	mrs	r3, IPSR
 80059f2:	613b      	str	r3, [r7, #16]
  return(result);
 80059f4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d15f      	bne.n	8005aba <osMessageQueueNew+0xdc>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d05c      	beq.n	8005aba <osMessageQueueNew+0xdc>
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d059      	beq.n	8005aba <osMessageQueueNew+0xdc>
    mem = -1;
 8005a06:	f04f 33ff 	mov.w	r3, #4294967295
 8005a0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d029      	beq.n	8005a66 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d012      	beq.n	8005a40 <osMessageQueueNew+0x62>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	2b4f      	cmp	r3, #79	; 0x4f
 8005a20:	d90e      	bls.n	8005a40 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695a      	ldr	r2, [r3, #20]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	68b9      	ldr	r1, [r7, #8]
 8005a32:	fb01 f303 	mul.w	r3, r1, r3
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d302      	bcc.n	8005a40 <osMessageQueueNew+0x62>
        mem = 1;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	61bb      	str	r3, [r7, #24]
 8005a3e:	e014      	b.n	8005a6a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d110      	bne.n	8005a6a <osMessageQueueNew+0x8c>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10c      	bne.n	8005a6a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d108      	bne.n	8005a6a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d104      	bne.n	8005a6a <osMessageQueueNew+0x8c>
          mem = 0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	61bb      	str	r3, [r7, #24]
 8005a64:	e001      	b.n	8005a6a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005a66:	2300      	movs	r3, #0
 8005a68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d10b      	bne.n	8005a88 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	2100      	movs	r1, #0
 8005a7a:	9100      	str	r1, [sp, #0]
 8005a7c:	68b9      	ldr	r1, [r7, #8]
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f000 fa4e 	bl	8005f20 <xQueueGenericCreateStatic>
 8005a84:	61f8      	str	r0, [r7, #28]
 8005a86:	e008      	b.n	8005a9a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d105      	bne.n	8005a9a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005a8e:	2200      	movs	r2, #0
 8005a90:	68b9      	ldr	r1, [r7, #8]
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 fabc 	bl	8006010 <xQueueGenericCreate>
 8005a98:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00c      	beq.n	8005aba <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <osMessageQueueNew+0xd0>
        name = attr->name;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	e001      	b.n	8005ab2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005ab2:	6979      	ldr	r1, [r7, #20]
 8005ab4:	69f8      	ldr	r0, [r7, #28]
 8005ab6:	f000 ff4f 	bl	8006958 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005aba:	69fb      	ldr	r3, [r7, #28]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3720      	adds	r7, #32
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	603b      	str	r3, [r7, #0]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005adc:	f3ef 8305 	mrs	r3, IPSR
 8005ae0:	617b      	str	r3, [r7, #20]
  return(result);
 8005ae2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d028      	beq.n	8005b3a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d005      	beq.n	8005afa <osMessageQueuePut+0x36>
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <osMessageQueuePut+0x36>
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005afa:	f06f 0303 	mvn.w	r3, #3
 8005afe:	61fb      	str	r3, [r7, #28]
 8005b00:	e038      	b.n	8005b74 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005b02:	2300      	movs	r3, #0
 8005b04:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005b06:	f107 0210 	add.w	r2, r7, #16
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	68b9      	ldr	r1, [r7, #8]
 8005b0e:	69b8      	ldr	r0, [r7, #24]
 8005b10:	f000 fbda 	bl	80062c8 <xQueueGenericSendFromISR>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d003      	beq.n	8005b22 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005b1a:	f06f 0302 	mvn.w	r3, #2
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	e028      	b.n	8005b74 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d025      	beq.n	8005b74 <osMessageQueuePut+0xb0>
 8005b28:	4b15      	ldr	r3, [pc, #84]	; (8005b80 <osMessageQueuePut+0xbc>)
 8005b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	e01c      	b.n	8005b74 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d002      	beq.n	8005b46 <osMessageQueuePut+0x82>
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d103      	bne.n	8005b4e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005b46:	f06f 0303 	mvn.w	r3, #3
 8005b4a:	61fb      	str	r3, [r7, #28]
 8005b4c:	e012      	b.n	8005b74 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005b4e:	2300      	movs	r3, #0
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	68b9      	ldr	r1, [r7, #8]
 8005b54:	69b8      	ldr	r0, [r7, #24]
 8005b56:	f000 fab9 	bl	80060cc <xQueueGenericSend>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d009      	beq.n	8005b74 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005b66:	f06f 0301 	mvn.w	r3, #1
 8005b6a:	61fb      	str	r3, [r7, #28]
 8005b6c:	e002      	b.n	8005b74 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005b6e:	f06f 0302 	mvn.w	r3, #2
 8005b72:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005b74:	69fb      	ldr	r3, [r7, #28]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3720      	adds	r7, #32
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	e000ed04 	.word	0xe000ed04

08005b84 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b9a:	f3ef 8305 	mrs	r3, IPSR
 8005b9e:	617b      	str	r3, [r7, #20]
  return(result);
 8005ba0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d028      	beq.n	8005bf8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d005      	beq.n	8005bb8 <osMessageQueueGet+0x34>
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <osMessageQueueGet+0x34>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005bb8:	f06f 0303 	mvn.w	r3, #3
 8005bbc:	61fb      	str	r3, [r7, #28]
 8005bbe:	e037      	b.n	8005c30 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005bc4:	f107 0310 	add.w	r3, r7, #16
 8005bc8:	461a      	mov	r2, r3
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	69b8      	ldr	r0, [r7, #24]
 8005bce:	f000 fcf7 	bl	80065c0 <xQueueReceiveFromISR>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d003      	beq.n	8005be0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005bd8:	f06f 0302 	mvn.w	r3, #2
 8005bdc:	61fb      	str	r3, [r7, #28]
 8005bde:	e027      	b.n	8005c30 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d024      	beq.n	8005c30 <osMessageQueueGet+0xac>
 8005be6:	4b15      	ldr	r3, [pc, #84]	; (8005c3c <osMessageQueueGet+0xb8>)
 8005be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	e01b      	b.n	8005c30 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <osMessageQueueGet+0x80>
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d103      	bne.n	8005c0c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005c04:	f06f 0303 	mvn.w	r3, #3
 8005c08:	61fb      	str	r3, [r7, #28]
 8005c0a:	e011      	b.n	8005c30 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	68b9      	ldr	r1, [r7, #8]
 8005c10:	69b8      	ldr	r0, [r7, #24]
 8005c12:	f000 fbf5 	bl	8006400 <xQueueReceive>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d009      	beq.n	8005c30 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005c22:	f06f 0301 	mvn.w	r3, #1
 8005c26:	61fb      	str	r3, [r7, #28]
 8005c28:	e002      	b.n	8005c30 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005c2a:	f06f 0302 	mvn.w	r3, #2
 8005c2e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005c30:	69fb      	ldr	r3, [r7, #28]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3720      	adds	r7, #32
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	e000ed04 	.word	0xe000ed04

08005c40 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d102      	bne.n	8005c58 <osMessageQueueGetCount+0x18>
    count = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	e00e      	b.n	8005c76 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c58:	f3ef 8305 	mrs	r3, IPSR
 8005c5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d004      	beq.n	8005c6e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005c64:	6938      	ldr	r0, [r7, #16]
 8005c66:	f000 fd49 	bl	80066fc <uxQueueMessagesWaitingFromISR>
 8005c6a:	6178      	str	r0, [r7, #20]
 8005c6c:	e003      	b.n	8005c76 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005c6e:	6938      	ldr	r0, [r7, #16]
 8005c70:	f000 fd26 	bl	80066c0 <uxQueueMessagesWaiting>
 8005c74:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8005c76:	697b      	ldr	r3, [r7, #20]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4a07      	ldr	r2, [pc, #28]	; (8005cac <vApplicationGetIdleTaskMemory+0x2c>)
 8005c90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	4a06      	ldr	r2, [pc, #24]	; (8005cb0 <vApplicationGetIdleTaskMemory+0x30>)
 8005c96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2280      	movs	r2, #128	; 0x80
 8005c9c:	601a      	str	r2, [r3, #0]
}
 8005c9e:	bf00      	nop
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	20000034 	.word	0x20000034
 8005cb0:	20000090 	.word	0x20000090

08005cb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4a07      	ldr	r2, [pc, #28]	; (8005ce0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005cc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	4a06      	ldr	r2, [pc, #24]	; (8005ce4 <vApplicationGetTimerTaskMemory+0x30>)
 8005cca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cd2:	601a      	str	r2, [r3, #0]
}
 8005cd4:	bf00      	nop
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	20000290 	.word	0x20000290
 8005ce4:	200002ec 	.word	0x200002ec

08005ce8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f103 0208 	add.w	r2, r3, #8
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8005d00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f103 0208 	add.w	r2, r3, #8
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f103 0208 	add.w	r2, r3, #8
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	601a      	str	r2, [r3, #0]
}
 8005d7e:	bf00      	nop
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b085      	sub	sp, #20
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da0:	d103      	bne.n	8005daa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	e00c      	b.n	8005dc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	3308      	adds	r3, #8
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	e002      	b.n	8005db8 <vListInsert+0x2e>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d2f6      	bcs.n	8005db2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	601a      	str	r2, [r3, #0]
}
 8005df0:	bf00      	nop
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6892      	ldr	r2, [r2, #8]
 8005e12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6852      	ldr	r2, [r2, #4]
 8005e1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d103      	bne.n	8005e30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	1e5a      	subs	r2, r3, #1
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10a      	bne.n	8005e7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e76:	bf00      	nop
 8005e78:	e7fe      	b.n	8005e78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e7a:	f002 f943 	bl	8008104 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e86:	68f9      	ldr	r1, [r7, #12]
 8005e88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e8a:	fb01 f303 	mul.w	r3, r1, r3
 8005e8e:	441a      	add	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	68f9      	ldr	r1, [r7, #12]
 8005eae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005eb0:	fb01 f303 	mul.w	r3, r1, r3
 8005eb4:	441a      	add	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	22ff      	movs	r2, #255	; 0xff
 8005ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	22ff      	movs	r2, #255	; 0xff
 8005ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d114      	bne.n	8005efa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d01a      	beq.n	8005f0e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	3310      	adds	r3, #16
 8005edc:	4618      	mov	r0, r3
 8005ede:	f001 f9f9 	bl	80072d4 <xTaskRemoveFromEventList>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d012      	beq.n	8005f0e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ee8:	4b0c      	ldr	r3, [pc, #48]	; (8005f1c <xQueueGenericReset+0xcc>)
 8005eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	e009      	b.n	8005f0e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3310      	adds	r3, #16
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7ff fef2 	bl	8005ce8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	3324      	adds	r3, #36	; 0x24
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7ff feed 	bl	8005ce8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f0e:	f002 f929 	bl	8008164 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f12:	2301      	movs	r3, #1
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	e000ed04 	.word	0xe000ed04

08005f20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08e      	sub	sp, #56	; 0x38
 8005f24:	af02      	add	r7, sp, #8
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10a      	bne.n	8005f4a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f46:	bf00      	nop
 8005f48:	e7fe      	b.n	8005f48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10a      	bne.n	8005f66 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f62:	bf00      	nop
 8005f64:	e7fe      	b.n	8005f64 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <xQueueGenericCreateStatic+0x52>
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <xQueueGenericCreateStatic+0x56>
 8005f72:	2301      	movs	r3, #1
 8005f74:	e000      	b.n	8005f78 <xQueueGenericCreateStatic+0x58>
 8005f76:	2300      	movs	r3, #0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10a      	bne.n	8005f92 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	623b      	str	r3, [r7, #32]
}
 8005f8e:	bf00      	nop
 8005f90:	e7fe      	b.n	8005f90 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d102      	bne.n	8005f9e <xQueueGenericCreateStatic+0x7e>
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <xQueueGenericCreateStatic+0x82>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e000      	b.n	8005fa4 <xQueueGenericCreateStatic+0x84>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10a      	bne.n	8005fbe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	61fb      	str	r3, [r7, #28]
}
 8005fba:	bf00      	nop
 8005fbc:	e7fe      	b.n	8005fbc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005fbe:	2350      	movs	r3, #80	; 0x50
 8005fc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2b50      	cmp	r3, #80	; 0x50
 8005fc6:	d00a      	beq.n	8005fde <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	61bb      	str	r3, [r7, #24]
}
 8005fda:	bf00      	nop
 8005fdc:	e7fe      	b.n	8005fdc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005fde:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00d      	beq.n	8006006 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ff2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	68b9      	ldr	r1, [r7, #8]
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 f83f 	bl	8006084 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006008:	4618      	mov	r0, r3
 800600a:	3730      	adds	r7, #48	; 0x30
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006010:	b580      	push	{r7, lr}
 8006012:	b08a      	sub	sp, #40	; 0x28
 8006014:	af02      	add	r7, sp, #8
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	4613      	mov	r3, r2
 800601c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10a      	bne.n	800603a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	613b      	str	r3, [r7, #16]
}
 8006036:	bf00      	nop
 8006038:	e7fe      	b.n	8006038 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	fb02 f303 	mul.w	r3, r2, r3
 8006042:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	3350      	adds	r3, #80	; 0x50
 8006048:	4618      	mov	r0, r3
 800604a:	f002 f97d 	bl	8008348 <pvPortMalloc>
 800604e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d011      	beq.n	800607a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	3350      	adds	r3, #80	; 0x50
 800605e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006068:	79fa      	ldrb	r2, [r7, #7]
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	4613      	mov	r3, r2
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	68b9      	ldr	r1, [r7, #8]
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 f805 	bl	8006084 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800607a:	69bb      	ldr	r3, [r7, #24]
	}
 800607c:	4618      	mov	r0, r3
 800607e:	3720      	adds	r7, #32
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
 8006090:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d103      	bne.n	80060a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	e002      	b.n	80060a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060b2:	2101      	movs	r1, #1
 80060b4:	69b8      	ldr	r0, [r7, #24]
 80060b6:	f7ff fecb 	bl	8005e50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	78fa      	ldrb	r2, [r7, #3]
 80060be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060c2:	bf00      	nop
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
	...

080060cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08e      	sub	sp, #56	; 0x38
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
 80060d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80060da:	2300      	movs	r3, #0
 80060dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10a      	bne.n	80060fe <xQueueGenericSend+0x32>
	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060fa:	bf00      	nop
 80060fc:	e7fe      	b.n	80060fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d103      	bne.n	800610c <xQueueGenericSend+0x40>
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006108:	2b00      	cmp	r3, #0
 800610a:	d101      	bne.n	8006110 <xQueueGenericSend+0x44>
 800610c:	2301      	movs	r3, #1
 800610e:	e000      	b.n	8006112 <xQueueGenericSend+0x46>
 8006110:	2300      	movs	r3, #0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10a      	bne.n	800612c <xQueueGenericSend+0x60>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006128:	bf00      	nop
 800612a:	e7fe      	b.n	800612a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	2b02      	cmp	r3, #2
 8006130:	d103      	bne.n	800613a <xQueueGenericSend+0x6e>
 8006132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006136:	2b01      	cmp	r3, #1
 8006138:	d101      	bne.n	800613e <xQueueGenericSend+0x72>
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <xQueueGenericSend+0x74>
 800613e:	2300      	movs	r3, #0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10a      	bne.n	800615a <xQueueGenericSend+0x8e>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	623b      	str	r3, [r7, #32]
}
 8006156:	bf00      	nop
 8006158:	e7fe      	b.n	8006158 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800615a:	f001 fa79 	bl	8007650 <xTaskGetSchedulerState>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d102      	bne.n	800616a <xQueueGenericSend+0x9e>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <xQueueGenericSend+0xa2>
 800616a:	2301      	movs	r3, #1
 800616c:	e000      	b.n	8006170 <xQueueGenericSend+0xa4>
 800616e:	2300      	movs	r3, #0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10a      	bne.n	800618a <xQueueGenericSend+0xbe>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	61fb      	str	r3, [r7, #28]
}
 8006186:	bf00      	nop
 8006188:	e7fe      	b.n	8006188 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800618a:	f001 ffbb 	bl	8008104 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006196:	429a      	cmp	r2, r3
 8006198:	d302      	bcc.n	80061a0 <xQueueGenericSend+0xd4>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b02      	cmp	r3, #2
 800619e:	d129      	bne.n	80061f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	68b9      	ldr	r1, [r7, #8]
 80061a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061a6:	f000 fac7 	bl	8006738 <prvCopyDataToQueue>
 80061aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d010      	beq.n	80061d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	3324      	adds	r3, #36	; 0x24
 80061b8:	4618      	mov	r0, r3
 80061ba:	f001 f88b 	bl	80072d4 <xTaskRemoveFromEventList>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d013      	beq.n	80061ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061c4:	4b3f      	ldr	r3, [pc, #252]	; (80062c4 <xQueueGenericSend+0x1f8>)
 80061c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	e00a      	b.n	80061ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d007      	beq.n	80061ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80061dc:	4b39      	ldr	r3, [pc, #228]	; (80062c4 <xQueueGenericSend+0x1f8>)
 80061de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80061ec:	f001 ffba 	bl	8008164 <vPortExitCritical>
				return pdPASS;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e063      	b.n	80062bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d103      	bne.n	8006202 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061fa:	f001 ffb3 	bl	8008164 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	e05c      	b.n	80062bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006204:	2b00      	cmp	r3, #0
 8006206:	d106      	bne.n	8006216 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006208:	f107 0314 	add.w	r3, r7, #20
 800620c:	4618      	mov	r0, r3
 800620e:	f001 f8c5 	bl	800739c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006212:	2301      	movs	r3, #1
 8006214:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006216:	f001 ffa5 	bl	8008164 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800621a:	f000 fe37 	bl	8006e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800621e:	f001 ff71 	bl	8008104 <vPortEnterCritical>
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006228:	b25b      	sxtb	r3, r3
 800622a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622e:	d103      	bne.n	8006238 <xQueueGenericSend+0x16c>
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800623e:	b25b      	sxtb	r3, r3
 8006240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006244:	d103      	bne.n	800624e <xQueueGenericSend+0x182>
 8006246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800624e:	f001 ff89 	bl	8008164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006252:	1d3a      	adds	r2, r7, #4
 8006254:	f107 0314 	add.w	r3, r7, #20
 8006258:	4611      	mov	r1, r2
 800625a:	4618      	mov	r0, r3
 800625c:	f001 f8b4 	bl	80073c8 <xTaskCheckForTimeOut>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d124      	bne.n	80062b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006266:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006268:	f000 fb5e 	bl	8006928 <prvIsQueueFull>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d018      	beq.n	80062a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	3310      	adds	r3, #16
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	4611      	mov	r1, r2
 800627a:	4618      	mov	r0, r3
 800627c:	f000 ffda 	bl	8007234 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006282:	f000 fae9 	bl	8006858 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006286:	f000 fe0f 	bl	8006ea8 <xTaskResumeAll>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	f47f af7c 	bne.w	800618a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006292:	4b0c      	ldr	r3, [pc, #48]	; (80062c4 <xQueueGenericSend+0x1f8>)
 8006294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	e772      	b.n	800618a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80062a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062a6:	f000 fad7 	bl	8006858 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062aa:	f000 fdfd 	bl	8006ea8 <xTaskResumeAll>
 80062ae:	e76c      	b.n	800618a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062b2:	f000 fad1 	bl	8006858 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062b6:	f000 fdf7 	bl	8006ea8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3738      	adds	r7, #56	; 0x38
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	e000ed04 	.word	0xe000ed04

080062c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b090      	sub	sp, #64	; 0x40
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80062da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10a      	bne.n	80062f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062f2:	bf00      	nop
 80062f4:	e7fe      	b.n	80062f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d103      	bne.n	8006304 <xQueueGenericSendFromISR+0x3c>
 80062fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <xQueueGenericSendFromISR+0x40>
 8006304:	2301      	movs	r3, #1
 8006306:	e000      	b.n	800630a <xQueueGenericSendFromISR+0x42>
 8006308:	2300      	movs	r3, #0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10a      	bne.n	8006324 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006320:	bf00      	nop
 8006322:	e7fe      	b.n	8006322 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2b02      	cmp	r3, #2
 8006328:	d103      	bne.n	8006332 <xQueueGenericSendFromISR+0x6a>
 800632a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632e:	2b01      	cmp	r3, #1
 8006330:	d101      	bne.n	8006336 <xQueueGenericSendFromISR+0x6e>
 8006332:	2301      	movs	r3, #1
 8006334:	e000      	b.n	8006338 <xQueueGenericSendFromISR+0x70>
 8006336:	2300      	movs	r3, #0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10a      	bne.n	8006352 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800633c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	623b      	str	r3, [r7, #32]
}
 800634e:	bf00      	nop
 8006350:	e7fe      	b.n	8006350 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006352:	f001 ffb9 	bl	80082c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006356:	f3ef 8211 	mrs	r2, BASEPRI
 800635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	61fa      	str	r2, [r7, #28]
 800636c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800636e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006370:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637a:	429a      	cmp	r2, r3
 800637c:	d302      	bcc.n	8006384 <xQueueGenericSendFromISR+0xbc>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b02      	cmp	r3, #2
 8006382:	d12f      	bne.n	80063e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800638a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800638e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006392:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	68b9      	ldr	r1, [r7, #8]
 8006398:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800639a:	f000 f9cd 	bl	8006738 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800639e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80063a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a6:	d112      	bne.n	80063ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d016      	beq.n	80063de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b2:	3324      	adds	r3, #36	; 0x24
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 ff8d 	bl	80072d4 <xTaskRemoveFromEventList>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00e      	beq.n	80063de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00b      	beq.n	80063de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	601a      	str	r2, [r3, #0]
 80063cc:	e007      	b.n	80063de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063d2:	3301      	adds	r3, #1
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	b25a      	sxtb	r2, r3
 80063d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80063de:	2301      	movs	r3, #1
 80063e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80063e2:	e001      	b.n	80063e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063e4:	2300      	movs	r3, #0
 80063e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3740      	adds	r7, #64	; 0x40
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08c      	sub	sp, #48	; 0x30
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800640c:	2300      	movs	r3, #0
 800640e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10a      	bne.n	8006430 <xQueueReceive+0x30>
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	623b      	str	r3, [r7, #32]
}
 800642c:	bf00      	nop
 800642e:	e7fe      	b.n	800642e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d103      	bne.n	800643e <xQueueReceive+0x3e>
 8006436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <xQueueReceive+0x42>
 800643e:	2301      	movs	r3, #1
 8006440:	e000      	b.n	8006444 <xQueueReceive+0x44>
 8006442:	2300      	movs	r3, #0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10a      	bne.n	800645e <xQueueReceive+0x5e>
	__asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	61fb      	str	r3, [r7, #28]
}
 800645a:	bf00      	nop
 800645c:	e7fe      	b.n	800645c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800645e:	f001 f8f7 	bl	8007650 <xTaskGetSchedulerState>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d102      	bne.n	800646e <xQueueReceive+0x6e>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <xQueueReceive+0x72>
 800646e:	2301      	movs	r3, #1
 8006470:	e000      	b.n	8006474 <xQueueReceive+0x74>
 8006472:	2300      	movs	r3, #0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10a      	bne.n	800648e <xQueueReceive+0x8e>
	__asm volatile
 8006478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	61bb      	str	r3, [r7, #24]
}
 800648a:	bf00      	nop
 800648c:	e7fe      	b.n	800648c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800648e:	f001 fe39 	bl	8008104 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006496:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	2b00      	cmp	r3, #0
 800649c:	d01f      	beq.n	80064de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800649e:	68b9      	ldr	r1, [r7, #8]
 80064a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064a2:	f000 f9b3 	bl	800680c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	1e5a      	subs	r2, r3, #1
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00f      	beq.n	80064d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	3310      	adds	r3, #16
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 ff0a 	bl	80072d4 <xTaskRemoveFromEventList>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d007      	beq.n	80064d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064c6:	4b3d      	ldr	r3, [pc, #244]	; (80065bc <xQueueReceive+0x1bc>)
 80064c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064d6:	f001 fe45 	bl	8008164 <vPortExitCritical>
				return pdPASS;
 80064da:	2301      	movs	r3, #1
 80064dc:	e069      	b.n	80065b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d103      	bne.n	80064ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064e4:	f001 fe3e 	bl	8008164 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064e8:	2300      	movs	r3, #0
 80064ea:	e062      	b.n	80065b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064f2:	f107 0310 	add.w	r3, r7, #16
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 ff50 	bl	800739c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064fc:	2301      	movs	r3, #1
 80064fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006500:	f001 fe30 	bl	8008164 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006504:	f000 fcc2 	bl	8006e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006508:	f001 fdfc 	bl	8008104 <vPortEnterCritical>
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006512:	b25b      	sxtb	r3, r3
 8006514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006518:	d103      	bne.n	8006522 <xQueueReceive+0x122>
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006528:	b25b      	sxtb	r3, r3
 800652a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652e:	d103      	bne.n	8006538 <xQueueReceive+0x138>
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006538:	f001 fe14 	bl	8008164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800653c:	1d3a      	adds	r2, r7, #4
 800653e:	f107 0310 	add.w	r3, r7, #16
 8006542:	4611      	mov	r1, r2
 8006544:	4618      	mov	r0, r3
 8006546:	f000 ff3f 	bl	80073c8 <xTaskCheckForTimeOut>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d123      	bne.n	8006598 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006552:	f000 f9d3 	bl	80068fc <prvIsQueueEmpty>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d017      	beq.n	800658c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800655c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655e:	3324      	adds	r3, #36	; 0x24
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	4611      	mov	r1, r2
 8006564:	4618      	mov	r0, r3
 8006566:	f000 fe65 	bl	8007234 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800656a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800656c:	f000 f974 	bl	8006858 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006570:	f000 fc9a 	bl	8006ea8 <xTaskResumeAll>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d189      	bne.n	800648e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800657a:	4b10      	ldr	r3, [pc, #64]	; (80065bc <xQueueReceive+0x1bc>)
 800657c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	e780      	b.n	800648e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800658c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800658e:	f000 f963 	bl	8006858 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006592:	f000 fc89 	bl	8006ea8 <xTaskResumeAll>
 8006596:	e77a      	b.n	800648e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800659a:	f000 f95d 	bl	8006858 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800659e:	f000 fc83 	bl	8006ea8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065a4:	f000 f9aa 	bl	80068fc <prvIsQueueEmpty>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f43f af6f 	beq.w	800648e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3730      	adds	r7, #48	; 0x30
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	e000ed04 	.word	0xe000ed04

080065c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b08e      	sub	sp, #56	; 0x38
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80065d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10a      	bne.n	80065ec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	623b      	str	r3, [r7, #32]
}
 80065e8:	bf00      	nop
 80065ea:	e7fe      	b.n	80065ea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d103      	bne.n	80065fa <xQueueReceiveFromISR+0x3a>
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <xQueueReceiveFromISR+0x3e>
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <xQueueReceiveFromISR+0x40>
 80065fe:	2300      	movs	r3, #0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10a      	bne.n	800661a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	61fb      	str	r3, [r7, #28]
}
 8006616:	bf00      	nop
 8006618:	e7fe      	b.n	8006618 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800661a:	f001 fe55 	bl	80082c8 <vPortValidateInterruptPriority>
	__asm volatile
 800661e:	f3ef 8211 	mrs	r2, BASEPRI
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	61ba      	str	r2, [r7, #24]
 8006634:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006636:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006638:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	2b00      	cmp	r3, #0
 8006644:	d02f      	beq.n	80066a6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800664c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006654:	f000 f8da 	bl	800680c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665a:	1e5a      	subs	r2, r3, #1
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006660:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006668:	d112      	bne.n	8006690 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d016      	beq.n	80066a0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	3310      	adds	r3, #16
 8006676:	4618      	mov	r0, r3
 8006678:	f000 fe2c 	bl	80072d4 <xTaskRemoveFromEventList>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00e      	beq.n	80066a0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00b      	beq.n	80066a0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	e007      	b.n	80066a0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006694:	3301      	adds	r3, #1
 8006696:	b2db      	uxtb	r3, r3
 8006698:	b25a      	sxtb	r2, r3
 800669a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80066a0:	2301      	movs	r3, #1
 80066a2:	637b      	str	r3, [r7, #52]	; 0x34
 80066a4:	e001      	b.n	80066aa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80066a6:	2300      	movs	r3, #0
 80066a8:	637b      	str	r3, [r7, #52]	; 0x34
 80066aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	f383 8811 	msr	BASEPRI, r3
}
 80066b4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3738      	adds	r7, #56	; 0x38
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10a      	bne.n	80066e4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	60bb      	str	r3, [r7, #8]
}
 80066e0:	bf00      	nop
 80066e2:	e7fe      	b.n	80066e2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80066e4:	f001 fd0e 	bl	8008104 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ec:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80066ee:	f001 fd39 	bl	8008164 <vPortExitCritical>

	return uxReturn;
 80066f2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10a      	bne.n	8006724 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	60fb      	str	r3, [r7, #12]
}
 8006720:	bf00      	nop
 8006722:	e7fe      	b.n	8006722 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006728:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800672a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800672c:	4618      	mov	r0, r3
 800672e:	371c      	adds	r7, #28
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006744:	2300      	movs	r3, #0
 8006746:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10d      	bne.n	8006772 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d14d      	bne.n	80067fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	4618      	mov	r0, r3
 8006764:	f000 ff92 	bl	800768c <xTaskPriorityDisinherit>
 8006768:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	609a      	str	r2, [r3, #8]
 8006770:	e043      	b.n	80067fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d119      	bne.n	80067ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6858      	ldr	r0, [r3, #4]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006780:	461a      	mov	r2, r3
 8006782:	68b9      	ldr	r1, [r7, #8]
 8006784:	f001 ffee 	bl	8008764 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006790:	441a      	add	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d32b      	bcc.n	80067fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	605a      	str	r2, [r3, #4]
 80067aa:	e026      	b.n	80067fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	68d8      	ldr	r0, [r3, #12]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b4:	461a      	mov	r2, r3
 80067b6:	68b9      	ldr	r1, [r7, #8]
 80067b8:	f001 ffd4 	bl	8008764 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	68da      	ldr	r2, [r3, #12]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c4:	425b      	negs	r3, r3
 80067c6:	441a      	add	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	68da      	ldr	r2, [r3, #12]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d207      	bcs.n	80067e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e0:	425b      	negs	r3, r3
 80067e2:	441a      	add	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d105      	bne.n	80067fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d002      	beq.n	80067fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	3b01      	subs	r3, #1
 80067f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006802:	697b      	ldr	r3, [r7, #20]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3718      	adds	r7, #24
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	2b00      	cmp	r3, #0
 800681c:	d018      	beq.n	8006850 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68da      	ldr	r2, [r3, #12]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	441a      	add	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68da      	ldr	r2, [r3, #12]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	429a      	cmp	r2, r3
 8006836:	d303      	bcc.n	8006840 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68d9      	ldr	r1, [r3, #12]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006848:	461a      	mov	r2, r3
 800684a:	6838      	ldr	r0, [r7, #0]
 800684c:	f001 ff8a 	bl	8008764 <memcpy>
	}
}
 8006850:	bf00      	nop
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006860:	f001 fc50 	bl	8008104 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800686a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800686c:	e011      	b.n	8006892 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006872:	2b00      	cmp	r3, #0
 8006874:	d012      	beq.n	800689c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	3324      	adds	r3, #36	; 0x24
 800687a:	4618      	mov	r0, r3
 800687c:	f000 fd2a 	bl	80072d4 <xTaskRemoveFromEventList>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006886:	f000 fe01 	bl	800748c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800688a:	7bfb      	ldrb	r3, [r7, #15]
 800688c:	3b01      	subs	r3, #1
 800688e:	b2db      	uxtb	r3, r3
 8006890:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006896:	2b00      	cmp	r3, #0
 8006898:	dce9      	bgt.n	800686e <prvUnlockQueue+0x16>
 800689a:	e000      	b.n	800689e <prvUnlockQueue+0x46>
					break;
 800689c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	22ff      	movs	r2, #255	; 0xff
 80068a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80068a6:	f001 fc5d 	bl	8008164 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068aa:	f001 fc2b 	bl	8008104 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068b6:	e011      	b.n	80068dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d012      	beq.n	80068e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3310      	adds	r3, #16
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 fd05 	bl	80072d4 <xTaskRemoveFromEventList>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80068d0:	f000 fddc 	bl	800748c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068d4:	7bbb      	ldrb	r3, [r7, #14]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	dce9      	bgt.n	80068b8 <prvUnlockQueue+0x60>
 80068e4:	e000      	b.n	80068e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	22ff      	movs	r2, #255	; 0xff
 80068ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80068f0:	f001 fc38 	bl	8008164 <vPortExitCritical>
}
 80068f4:	bf00      	nop
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006904:	f001 fbfe 	bl	8008104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690c:	2b00      	cmp	r3, #0
 800690e:	d102      	bne.n	8006916 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006910:	2301      	movs	r3, #1
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	e001      	b.n	800691a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006916:	2300      	movs	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800691a:	f001 fc23 	bl	8008164 <vPortExitCritical>

	return xReturn;
 800691e:	68fb      	ldr	r3, [r7, #12]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006930:	f001 fbe8 	bl	8008104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693c:	429a      	cmp	r2, r3
 800693e:	d102      	bne.n	8006946 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006940:	2301      	movs	r3, #1
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	e001      	b.n	800694a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006946:	2300      	movs	r3, #0
 8006948:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800694a:	f001 fc0b 	bl	8008164 <vPortExitCritical>

	return xReturn;
 800694e:	68fb      	ldr	r3, [r7, #12]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006962:	2300      	movs	r3, #0
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	e014      	b.n	8006992 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006968:	4a0f      	ldr	r2, [pc, #60]	; (80069a8 <vQueueAddToRegistry+0x50>)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10b      	bne.n	800698c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006974:	490c      	ldr	r1, [pc, #48]	; (80069a8 <vQueueAddToRegistry+0x50>)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800697e:	4a0a      	ldr	r2, [pc, #40]	; (80069a8 <vQueueAddToRegistry+0x50>)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	00db      	lsls	r3, r3, #3
 8006984:	4413      	add	r3, r2
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800698a:	e006      	b.n	800699a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	3301      	adds	r3, #1
 8006990:	60fb      	str	r3, [r7, #12]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b07      	cmp	r3, #7
 8006996:	d9e7      	bls.n	8006968 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006998:	bf00      	nop
 800699a:	bf00      	nop
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	20001b24 	.word	0x20001b24

080069ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80069bc:	f001 fba2 	bl	8008104 <vPortEnterCritical>
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069c6:	b25b      	sxtb	r3, r3
 80069c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069cc:	d103      	bne.n	80069d6 <vQueueWaitForMessageRestricted+0x2a>
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069dc:	b25b      	sxtb	r3, r3
 80069de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e2:	d103      	bne.n	80069ec <vQueueWaitForMessageRestricted+0x40>
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069ec:	f001 fbba 	bl	8008164 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d106      	bne.n	8006a06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	3324      	adds	r3, #36	; 0x24
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	68b9      	ldr	r1, [r7, #8]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 fc3b 	bl	800727c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a06:	6978      	ldr	r0, [r7, #20]
 8006a08:	f7ff ff26 	bl	8006858 <prvUnlockQueue>
	}
 8006a0c:	bf00      	nop
 8006a0e:	3718      	adds	r7, #24
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08e      	sub	sp, #56	; 0x38
 8006a18:	af04      	add	r7, sp, #16
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
 8006a20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10a      	bne.n	8006a3e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	623b      	str	r3, [r7, #32]
}
 8006a3a:	bf00      	nop
 8006a3c:	e7fe      	b.n	8006a3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10a      	bne.n	8006a5a <xTaskCreateStatic+0x46>
	__asm volatile
 8006a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a48:	f383 8811 	msr	BASEPRI, r3
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	f3bf 8f4f 	dsb	sy
 8006a54:	61fb      	str	r3, [r7, #28]
}
 8006a56:	bf00      	nop
 8006a58:	e7fe      	b.n	8006a58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a5a:	235c      	movs	r3, #92	; 0x5c
 8006a5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	2b5c      	cmp	r3, #92	; 0x5c
 8006a62:	d00a      	beq.n	8006a7a <xTaskCreateStatic+0x66>
	__asm volatile
 8006a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	61bb      	str	r3, [r7, #24]
}
 8006a76:	bf00      	nop
 8006a78:	e7fe      	b.n	8006a78 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d01e      	beq.n	8006ac0 <xTaskCreateStatic+0xac>
 8006a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d01b      	beq.n	8006ac0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	2202      	movs	r2, #2
 8006a96:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	9303      	str	r3, [sp, #12]
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa0:	9302      	str	r3, [sp, #8]
 8006aa2:	f107 0314 	add.w	r3, r7, #20
 8006aa6:	9301      	str	r3, [sp, #4]
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	68b9      	ldr	r1, [r7, #8]
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 f850 	bl	8006b58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ab8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006aba:	f000 f8dd 	bl	8006c78 <prvAddNewTaskToReadyList>
 8006abe:	e001      	b.n	8006ac4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ac4:	697b      	ldr	r3, [r7, #20]
	}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3728      	adds	r7, #40	; 0x28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b08c      	sub	sp, #48	; 0x30
 8006ad2:	af04      	add	r7, sp, #16
 8006ad4:	60f8      	str	r0, [r7, #12]
 8006ad6:	60b9      	str	r1, [r7, #8]
 8006ad8:	603b      	str	r3, [r7, #0]
 8006ada:	4613      	mov	r3, r2
 8006adc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ade:	88fb      	ldrh	r3, [r7, #6]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f001 fc30 	bl	8008348 <pvPortMalloc>
 8006ae8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00e      	beq.n	8006b0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006af0:	205c      	movs	r0, #92	; 0x5c
 8006af2:	f001 fc29 	bl	8008348 <pvPortMalloc>
 8006af6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d003      	beq.n	8006b06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	631a      	str	r2, [r3, #48]	; 0x30
 8006b04:	e005      	b.n	8006b12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b06:	6978      	ldr	r0, [r7, #20]
 8006b08:	f001 fcea 	bl	80084e0 <vPortFree>
 8006b0c:	e001      	b.n	8006b12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d017      	beq.n	8006b48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b20:	88fa      	ldrh	r2, [r7, #6]
 8006b22:	2300      	movs	r3, #0
 8006b24:	9303      	str	r3, [sp, #12]
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	9302      	str	r3, [sp, #8]
 8006b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2c:	9301      	str	r3, [sp, #4]
 8006b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	68b9      	ldr	r1, [r7, #8]
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f000 f80e 	bl	8006b58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b3c:	69f8      	ldr	r0, [r7, #28]
 8006b3e:	f000 f89b 	bl	8006c78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b42:	2301      	movs	r3, #1
 8006b44:	61bb      	str	r3, [r7, #24]
 8006b46:	e002      	b.n	8006b4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b48:	f04f 33ff 	mov.w	r3, #4294967295
 8006b4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b4e:	69bb      	ldr	r3, [r7, #24]
	}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3720      	adds	r7, #32
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	461a      	mov	r2, r3
 8006b70:	21a5      	movs	r1, #165	; 0xa5
 8006b72:	f001 fe05 	bl	8008780 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b80:	3b01      	subs	r3, #1
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	f023 0307 	bic.w	r3, r3, #7
 8006b8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	f003 0307 	and.w	r3, r3, #7
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00a      	beq.n	8006bb0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	617b      	str	r3, [r7, #20]
}
 8006bac:	bf00      	nop
 8006bae:	e7fe      	b.n	8006bae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d01f      	beq.n	8006bf6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	61fb      	str	r3, [r7, #28]
 8006bba:	e012      	b.n	8006be2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	7819      	ldrb	r1, [r3, #0]
 8006bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	4413      	add	r3, r2
 8006bca:	3334      	adds	r3, #52	; 0x34
 8006bcc:	460a      	mov	r2, r1
 8006bce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d006      	beq.n	8006bea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	3301      	adds	r3, #1
 8006be0:	61fb      	str	r3, [r7, #28]
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	2b0f      	cmp	r3, #15
 8006be6:	d9e9      	bls.n	8006bbc <prvInitialiseNewTask+0x64>
 8006be8:	e000      	b.n	8006bec <prvInitialiseNewTask+0x94>
			{
				break;
 8006bea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bf4:	e003      	b.n	8006bfe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c00:	2b37      	cmp	r3, #55	; 0x37
 8006c02:	d901      	bls.n	8006c08 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c04:	2337      	movs	r3, #55	; 0x37
 8006c06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c16:	2200      	movs	r2, #0
 8006c18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff f882 	bl	8005d28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c26:	3318      	adds	r3, #24
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff f87d 	bl	8005d28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c46:	2200      	movs	r2, #0
 8006c48:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	68f9      	ldr	r1, [r7, #12]
 8006c56:	69b8      	ldr	r0, [r7, #24]
 8006c58:	f001 f928 	bl	8007eac <pxPortInitialiseStack>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d002      	beq.n	8006c6e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c6e:	bf00      	nop
 8006c70:	3720      	adds	r7, #32
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
	...

08006c78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c80:	f001 fa40 	bl	8008104 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c84:	4b2d      	ldr	r3, [pc, #180]	; (8006d3c <prvAddNewTaskToReadyList+0xc4>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	4a2c      	ldr	r2, [pc, #176]	; (8006d3c <prvAddNewTaskToReadyList+0xc4>)
 8006c8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c8e:	4b2c      	ldr	r3, [pc, #176]	; (8006d40 <prvAddNewTaskToReadyList+0xc8>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d109      	bne.n	8006caa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c96:	4a2a      	ldr	r2, [pc, #168]	; (8006d40 <prvAddNewTaskToReadyList+0xc8>)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c9c:	4b27      	ldr	r3, [pc, #156]	; (8006d3c <prvAddNewTaskToReadyList+0xc4>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d110      	bne.n	8006cc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ca4:	f000 fc16 	bl	80074d4 <prvInitialiseTaskLists>
 8006ca8:	e00d      	b.n	8006cc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006caa:	4b26      	ldr	r3, [pc, #152]	; (8006d44 <prvAddNewTaskToReadyList+0xcc>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d109      	bne.n	8006cc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cb2:	4b23      	ldr	r3, [pc, #140]	; (8006d40 <prvAddNewTaskToReadyList+0xc8>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d802      	bhi.n	8006cc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cc0:	4a1f      	ldr	r2, [pc, #124]	; (8006d40 <prvAddNewTaskToReadyList+0xc8>)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cc6:	4b20      	ldr	r3, [pc, #128]	; (8006d48 <prvAddNewTaskToReadyList+0xd0>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	4a1e      	ldr	r2, [pc, #120]	; (8006d48 <prvAddNewTaskToReadyList+0xd0>)
 8006cce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006cd0:	4b1d      	ldr	r3, [pc, #116]	; (8006d48 <prvAddNewTaskToReadyList+0xd0>)
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cdc:	4b1b      	ldr	r3, [pc, #108]	; (8006d4c <prvAddNewTaskToReadyList+0xd4>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d903      	bls.n	8006cec <prvAddNewTaskToReadyList+0x74>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce8:	4a18      	ldr	r2, [pc, #96]	; (8006d4c <prvAddNewTaskToReadyList+0xd4>)
 8006cea:	6013      	str	r3, [r2, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4a15      	ldr	r2, [pc, #84]	; (8006d50 <prvAddNewTaskToReadyList+0xd8>)
 8006cfa:	441a      	add	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	3304      	adds	r3, #4
 8006d00:	4619      	mov	r1, r3
 8006d02:	4610      	mov	r0, r2
 8006d04:	f7ff f81d 	bl	8005d42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d08:	f001 fa2c 	bl	8008164 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d0c:	4b0d      	ldr	r3, [pc, #52]	; (8006d44 <prvAddNewTaskToReadyList+0xcc>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00e      	beq.n	8006d32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d14:	4b0a      	ldr	r3, [pc, #40]	; (8006d40 <prvAddNewTaskToReadyList+0xc8>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d207      	bcs.n	8006d32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d22:	4b0c      	ldr	r3, [pc, #48]	; (8006d54 <prvAddNewTaskToReadyList+0xdc>)
 8006d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d28:	601a      	str	r2, [r3, #0]
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d32:	bf00      	nop
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20000bc0 	.word	0x20000bc0
 8006d40:	200006ec 	.word	0x200006ec
 8006d44:	20000bcc 	.word	0x20000bcc
 8006d48:	20000bdc 	.word	0x20000bdc
 8006d4c:	20000bc8 	.word	0x20000bc8
 8006d50:	200006f0 	.word	0x200006f0
 8006d54:	e000ed04 	.word	0xe000ed04

08006d58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d60:	2300      	movs	r3, #0
 8006d62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d017      	beq.n	8006d9a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d6a:	4b13      	ldr	r3, [pc, #76]	; (8006db8 <vTaskDelay+0x60>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00a      	beq.n	8006d88 <vTaskDelay+0x30>
	__asm volatile
 8006d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	60bb      	str	r3, [r7, #8]
}
 8006d84:	bf00      	nop
 8006d86:	e7fe      	b.n	8006d86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d88:	f000 f880 	bl	8006e8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fcea 	bl	8007768 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d94:	f000 f888 	bl	8006ea8 <xTaskResumeAll>
 8006d98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d107      	bne.n	8006db0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006da0:	4b06      	ldr	r3, [pc, #24]	; (8006dbc <vTaskDelay+0x64>)
 8006da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006da6:	601a      	str	r2, [r3, #0]
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006db0:	bf00      	nop
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	20000be8 	.word	0x20000be8
 8006dbc:	e000ed04 	.word	0xe000ed04

08006dc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08a      	sub	sp, #40	; 0x28
 8006dc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006dce:	463a      	mov	r2, r7
 8006dd0:	1d39      	adds	r1, r7, #4
 8006dd2:	f107 0308 	add.w	r3, r7, #8
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fe ff52 	bl	8005c80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ddc:	6839      	ldr	r1, [r7, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	9202      	str	r2, [sp, #8]
 8006de4:	9301      	str	r3, [sp, #4]
 8006de6:	2300      	movs	r3, #0
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	2300      	movs	r3, #0
 8006dec:	460a      	mov	r2, r1
 8006dee:	4921      	ldr	r1, [pc, #132]	; (8006e74 <vTaskStartScheduler+0xb4>)
 8006df0:	4821      	ldr	r0, [pc, #132]	; (8006e78 <vTaskStartScheduler+0xb8>)
 8006df2:	f7ff fe0f 	bl	8006a14 <xTaskCreateStatic>
 8006df6:	4603      	mov	r3, r0
 8006df8:	4a20      	ldr	r2, [pc, #128]	; (8006e7c <vTaskStartScheduler+0xbc>)
 8006dfa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006dfc:	4b1f      	ldr	r3, [pc, #124]	; (8006e7c <vTaskStartScheduler+0xbc>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e04:	2301      	movs	r3, #1
 8006e06:	617b      	str	r3, [r7, #20]
 8006e08:	e001      	b.n	8006e0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d102      	bne.n	8006e1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e14:	f000 fcfc 	bl	8007810 <xTimerCreateTimerTask>
 8006e18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d116      	bne.n	8006e4e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	613b      	str	r3, [r7, #16]
}
 8006e32:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e34:	4b12      	ldr	r3, [pc, #72]	; (8006e80 <vTaskStartScheduler+0xc0>)
 8006e36:	f04f 32ff 	mov.w	r2, #4294967295
 8006e3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e3c:	4b11      	ldr	r3, [pc, #68]	; (8006e84 <vTaskStartScheduler+0xc4>)
 8006e3e:	2201      	movs	r2, #1
 8006e40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e42:	4b11      	ldr	r3, [pc, #68]	; (8006e88 <vTaskStartScheduler+0xc8>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e48:	f001 f8ba 	bl	8007fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e4c:	e00e      	b.n	8006e6c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e54:	d10a      	bne.n	8006e6c <vTaskStartScheduler+0xac>
	__asm volatile
 8006e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	60fb      	str	r3, [r7, #12]
}
 8006e68:	bf00      	nop
 8006e6a:	e7fe      	b.n	8006e6a <vTaskStartScheduler+0xaa>
}
 8006e6c:	bf00      	nop
 8006e6e:	3718      	adds	r7, #24
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	0800881c 	.word	0x0800881c
 8006e78:	080074a5 	.word	0x080074a5
 8006e7c:	20000be4 	.word	0x20000be4
 8006e80:	20000be0 	.word	0x20000be0
 8006e84:	20000bcc 	.word	0x20000bcc
 8006e88:	20000bc4 	.word	0x20000bc4

08006e8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e90:	4b04      	ldr	r3, [pc, #16]	; (8006ea4 <vTaskSuspendAll+0x18>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3301      	adds	r3, #1
 8006e96:	4a03      	ldr	r2, [pc, #12]	; (8006ea4 <vTaskSuspendAll+0x18>)
 8006e98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e9a:	bf00      	nop
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	20000be8 	.word	0x20000be8

08006ea8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006eb6:	4b42      	ldr	r3, [pc, #264]	; (8006fc0 <xTaskResumeAll+0x118>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10a      	bne.n	8006ed4 <xTaskResumeAll+0x2c>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	603b      	str	r3, [r7, #0]
}
 8006ed0:	bf00      	nop
 8006ed2:	e7fe      	b.n	8006ed2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ed4:	f001 f916 	bl	8008104 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ed8:	4b39      	ldr	r3, [pc, #228]	; (8006fc0 <xTaskResumeAll+0x118>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3b01      	subs	r3, #1
 8006ede:	4a38      	ldr	r2, [pc, #224]	; (8006fc0 <xTaskResumeAll+0x118>)
 8006ee0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ee2:	4b37      	ldr	r3, [pc, #220]	; (8006fc0 <xTaskResumeAll+0x118>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d162      	bne.n	8006fb0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006eea:	4b36      	ldr	r3, [pc, #216]	; (8006fc4 <xTaskResumeAll+0x11c>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d05e      	beq.n	8006fb0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ef2:	e02f      	b.n	8006f54 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ef4:	4b34      	ldr	r3, [pc, #208]	; (8006fc8 <xTaskResumeAll+0x120>)
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	3318      	adds	r3, #24
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7fe ff7b 	bl	8005dfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	3304      	adds	r3, #4
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7fe ff76 	bl	8005dfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f14:	4b2d      	ldr	r3, [pc, #180]	; (8006fcc <xTaskResumeAll+0x124>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d903      	bls.n	8006f24 <xTaskResumeAll+0x7c>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	4a2a      	ldr	r2, [pc, #168]	; (8006fcc <xTaskResumeAll+0x124>)
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f28:	4613      	mov	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4a27      	ldr	r2, [pc, #156]	; (8006fd0 <xTaskResumeAll+0x128>)
 8006f32:	441a      	add	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	3304      	adds	r3, #4
 8006f38:	4619      	mov	r1, r3
 8006f3a:	4610      	mov	r0, r2
 8006f3c:	f7fe ff01 	bl	8005d42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f44:	4b23      	ldr	r3, [pc, #140]	; (8006fd4 <xTaskResumeAll+0x12c>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d302      	bcc.n	8006f54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f4e:	4b22      	ldr	r3, [pc, #136]	; (8006fd8 <xTaskResumeAll+0x130>)
 8006f50:	2201      	movs	r2, #1
 8006f52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f54:	4b1c      	ldr	r3, [pc, #112]	; (8006fc8 <xTaskResumeAll+0x120>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1cb      	bne.n	8006ef4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f62:	f000 fb55 	bl	8007610 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f66:	4b1d      	ldr	r3, [pc, #116]	; (8006fdc <xTaskResumeAll+0x134>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d010      	beq.n	8006f94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f72:	f000 f847 	bl	8007004 <xTaskIncrementTick>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f7c:	4b16      	ldr	r3, [pc, #88]	; (8006fd8 <xTaskResumeAll+0x130>)
 8006f7e:	2201      	movs	r2, #1
 8006f80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	3b01      	subs	r3, #1
 8006f86:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1f1      	bne.n	8006f72 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006f8e:	4b13      	ldr	r3, [pc, #76]	; (8006fdc <xTaskResumeAll+0x134>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f94:	4b10      	ldr	r3, [pc, #64]	; (8006fd8 <xTaskResumeAll+0x130>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d009      	beq.n	8006fb0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fa0:	4b0f      	ldr	r3, [pc, #60]	; (8006fe0 <xTaskResumeAll+0x138>)
 8006fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fb0:	f001 f8d8 	bl	8008164 <vPortExitCritical>

	return xAlreadyYielded;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20000be8 	.word	0x20000be8
 8006fc4:	20000bc0 	.word	0x20000bc0
 8006fc8:	20000b80 	.word	0x20000b80
 8006fcc:	20000bc8 	.word	0x20000bc8
 8006fd0:	200006f0 	.word	0x200006f0
 8006fd4:	200006ec 	.word	0x200006ec
 8006fd8:	20000bd4 	.word	0x20000bd4
 8006fdc:	20000bd0 	.word	0x20000bd0
 8006fe0:	e000ed04 	.word	0xe000ed04

08006fe4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006fea:	4b05      	ldr	r3, [pc, #20]	; (8007000 <xTaskGetTickCount+0x1c>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ff0:	687b      	ldr	r3, [r7, #4]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	20000bc4 	.word	0x20000bc4

08007004 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800700a:	2300      	movs	r3, #0
 800700c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800700e:	4b4f      	ldr	r3, [pc, #316]	; (800714c <xTaskIncrementTick+0x148>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	f040 808f 	bne.w	8007136 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007018:	4b4d      	ldr	r3, [pc, #308]	; (8007150 <xTaskIncrementTick+0x14c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3301      	adds	r3, #1
 800701e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007020:	4a4b      	ldr	r2, [pc, #300]	; (8007150 <xTaskIncrementTick+0x14c>)
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d120      	bne.n	800706e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800702c:	4b49      	ldr	r3, [pc, #292]	; (8007154 <xTaskIncrementTick+0x150>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00a      	beq.n	800704c <xTaskIncrementTick+0x48>
	__asm volatile
 8007036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	603b      	str	r3, [r7, #0]
}
 8007048:	bf00      	nop
 800704a:	e7fe      	b.n	800704a <xTaskIncrementTick+0x46>
 800704c:	4b41      	ldr	r3, [pc, #260]	; (8007154 <xTaskIncrementTick+0x150>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	4b41      	ldr	r3, [pc, #260]	; (8007158 <xTaskIncrementTick+0x154>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a3f      	ldr	r2, [pc, #252]	; (8007154 <xTaskIncrementTick+0x150>)
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	4a3f      	ldr	r2, [pc, #252]	; (8007158 <xTaskIncrementTick+0x154>)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6013      	str	r3, [r2, #0]
 8007060:	4b3e      	ldr	r3, [pc, #248]	; (800715c <xTaskIncrementTick+0x158>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3301      	adds	r3, #1
 8007066:	4a3d      	ldr	r2, [pc, #244]	; (800715c <xTaskIncrementTick+0x158>)
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	f000 fad1 	bl	8007610 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800706e:	4b3c      	ldr	r3, [pc, #240]	; (8007160 <xTaskIncrementTick+0x15c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	429a      	cmp	r2, r3
 8007076:	d349      	bcc.n	800710c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007078:	4b36      	ldr	r3, [pc, #216]	; (8007154 <xTaskIncrementTick+0x150>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d104      	bne.n	800708c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007082:	4b37      	ldr	r3, [pc, #220]	; (8007160 <xTaskIncrementTick+0x15c>)
 8007084:	f04f 32ff 	mov.w	r2, #4294967295
 8007088:	601a      	str	r2, [r3, #0]
					break;
 800708a:	e03f      	b.n	800710c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800708c:	4b31      	ldr	r3, [pc, #196]	; (8007154 <xTaskIncrementTick+0x150>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d203      	bcs.n	80070ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070a4:	4a2e      	ldr	r2, [pc, #184]	; (8007160 <xTaskIncrementTick+0x15c>)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070aa:	e02f      	b.n	800710c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	3304      	adds	r3, #4
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fe fea3 	bl	8005dfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d004      	beq.n	80070c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	3318      	adds	r3, #24
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe fe9a 	bl	8005dfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070cc:	4b25      	ldr	r3, [pc, #148]	; (8007164 <xTaskIncrementTick+0x160>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d903      	bls.n	80070dc <xTaskIncrementTick+0xd8>
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d8:	4a22      	ldr	r2, [pc, #136]	; (8007164 <xTaskIncrementTick+0x160>)
 80070da:	6013      	str	r3, [r2, #0]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e0:	4613      	mov	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4a1f      	ldr	r2, [pc, #124]	; (8007168 <xTaskIncrementTick+0x164>)
 80070ea:	441a      	add	r2, r3
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	3304      	adds	r3, #4
 80070f0:	4619      	mov	r1, r3
 80070f2:	4610      	mov	r0, r2
 80070f4:	f7fe fe25 	bl	8005d42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fc:	4b1b      	ldr	r3, [pc, #108]	; (800716c <xTaskIncrementTick+0x168>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007102:	429a      	cmp	r2, r3
 8007104:	d3b8      	bcc.n	8007078 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007106:	2301      	movs	r3, #1
 8007108:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800710a:	e7b5      	b.n	8007078 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800710c:	4b17      	ldr	r3, [pc, #92]	; (800716c <xTaskIncrementTick+0x168>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007112:	4915      	ldr	r1, [pc, #84]	; (8007168 <xTaskIncrementTick+0x164>)
 8007114:	4613      	mov	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	440b      	add	r3, r1
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d901      	bls.n	8007128 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007124:	2301      	movs	r3, #1
 8007126:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007128:	4b11      	ldr	r3, [pc, #68]	; (8007170 <xTaskIncrementTick+0x16c>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d007      	beq.n	8007140 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007130:	2301      	movs	r3, #1
 8007132:	617b      	str	r3, [r7, #20]
 8007134:	e004      	b.n	8007140 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007136:	4b0f      	ldr	r3, [pc, #60]	; (8007174 <xTaskIncrementTick+0x170>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	3301      	adds	r3, #1
 800713c:	4a0d      	ldr	r2, [pc, #52]	; (8007174 <xTaskIncrementTick+0x170>)
 800713e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007140:	697b      	ldr	r3, [r7, #20]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20000be8 	.word	0x20000be8
 8007150:	20000bc4 	.word	0x20000bc4
 8007154:	20000b78 	.word	0x20000b78
 8007158:	20000b7c 	.word	0x20000b7c
 800715c:	20000bd8 	.word	0x20000bd8
 8007160:	20000be0 	.word	0x20000be0
 8007164:	20000bc8 	.word	0x20000bc8
 8007168:	200006f0 	.word	0x200006f0
 800716c:	200006ec 	.word	0x200006ec
 8007170:	20000bd4 	.word	0x20000bd4
 8007174:	20000bd0 	.word	0x20000bd0

08007178 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800717e:	4b28      	ldr	r3, [pc, #160]	; (8007220 <vTaskSwitchContext+0xa8>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007186:	4b27      	ldr	r3, [pc, #156]	; (8007224 <vTaskSwitchContext+0xac>)
 8007188:	2201      	movs	r2, #1
 800718a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800718c:	e041      	b.n	8007212 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800718e:	4b25      	ldr	r3, [pc, #148]	; (8007224 <vTaskSwitchContext+0xac>)
 8007190:	2200      	movs	r2, #0
 8007192:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007194:	4b24      	ldr	r3, [pc, #144]	; (8007228 <vTaskSwitchContext+0xb0>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	e010      	b.n	80071be <vTaskSwitchContext+0x46>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10a      	bne.n	80071b8 <vTaskSwitchContext+0x40>
	__asm volatile
 80071a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a6:	f383 8811 	msr	BASEPRI, r3
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	607b      	str	r3, [r7, #4]
}
 80071b4:	bf00      	nop
 80071b6:	e7fe      	b.n	80071b6 <vTaskSwitchContext+0x3e>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3b01      	subs	r3, #1
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	491b      	ldr	r1, [pc, #108]	; (800722c <vTaskSwitchContext+0xb4>)
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	4613      	mov	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4413      	add	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	440b      	add	r3, r1
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0e4      	beq.n	800719c <vTaskSwitchContext+0x24>
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	4613      	mov	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4a13      	ldr	r2, [pc, #76]	; (800722c <vTaskSwitchContext+0xb4>)
 80071de:	4413      	add	r3, r2
 80071e0:	60bb      	str	r3, [r7, #8]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	605a      	str	r2, [r3, #4]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	3308      	adds	r3, #8
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d104      	bne.n	8007202 <vTaskSwitchContext+0x8a>
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	605a      	str	r2, [r3, #4]
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	4a09      	ldr	r2, [pc, #36]	; (8007230 <vTaskSwitchContext+0xb8>)
 800720a:	6013      	str	r3, [r2, #0]
 800720c:	4a06      	ldr	r2, [pc, #24]	; (8007228 <vTaskSwitchContext+0xb0>)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6013      	str	r3, [r2, #0]
}
 8007212:	bf00      	nop
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	20000be8 	.word	0x20000be8
 8007224:	20000bd4 	.word	0x20000bd4
 8007228:	20000bc8 	.word	0x20000bc8
 800722c:	200006f0 	.word	0x200006f0
 8007230:	200006ec 	.word	0x200006ec

08007234 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10a      	bne.n	800725a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	60fb      	str	r3, [r7, #12]
}
 8007256:	bf00      	nop
 8007258:	e7fe      	b.n	8007258 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800725a:	4b07      	ldr	r3, [pc, #28]	; (8007278 <vTaskPlaceOnEventList+0x44>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3318      	adds	r3, #24
 8007260:	4619      	mov	r1, r3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7fe fd91 	bl	8005d8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007268:	2101      	movs	r1, #1
 800726a:	6838      	ldr	r0, [r7, #0]
 800726c:	f000 fa7c 	bl	8007768 <prvAddCurrentTaskToDelayedList>
}
 8007270:	bf00      	nop
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	200006ec 	.word	0x200006ec

0800727c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10a      	bne.n	80072a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	617b      	str	r3, [r7, #20]
}
 80072a0:	bf00      	nop
 80072a2:	e7fe      	b.n	80072a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072a4:	4b0a      	ldr	r3, [pc, #40]	; (80072d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	3318      	adds	r3, #24
 80072aa:	4619      	mov	r1, r3
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f7fe fd48 	bl	8005d42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d002      	beq.n	80072be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80072b8:	f04f 33ff 	mov.w	r3, #4294967295
 80072bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072be:	6879      	ldr	r1, [r7, #4]
 80072c0:	68b8      	ldr	r0, [r7, #8]
 80072c2:	f000 fa51 	bl	8007768 <prvAddCurrentTaskToDelayedList>
	}
 80072c6:	bf00      	nop
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	200006ec 	.word	0x200006ec

080072d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10a      	bne.n	8007300 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80072ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ee:	f383 8811 	msr	BASEPRI, r3
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	60fb      	str	r3, [r7, #12]
}
 80072fc:	bf00      	nop
 80072fe:	e7fe      	b.n	80072fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	3318      	adds	r3, #24
 8007304:	4618      	mov	r0, r3
 8007306:	f7fe fd79 	bl	8005dfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800730a:	4b1e      	ldr	r3, [pc, #120]	; (8007384 <xTaskRemoveFromEventList+0xb0>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d11d      	bne.n	800734e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	3304      	adds	r3, #4
 8007316:	4618      	mov	r0, r3
 8007318:	f7fe fd70 	bl	8005dfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007320:	4b19      	ldr	r3, [pc, #100]	; (8007388 <xTaskRemoveFromEventList+0xb4>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	429a      	cmp	r2, r3
 8007326:	d903      	bls.n	8007330 <xTaskRemoveFromEventList+0x5c>
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732c:	4a16      	ldr	r2, [pc, #88]	; (8007388 <xTaskRemoveFromEventList+0xb4>)
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007334:	4613      	mov	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4a13      	ldr	r2, [pc, #76]	; (800738c <xTaskRemoveFromEventList+0xb8>)
 800733e:	441a      	add	r2, r3
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	3304      	adds	r3, #4
 8007344:	4619      	mov	r1, r3
 8007346:	4610      	mov	r0, r2
 8007348:	f7fe fcfb 	bl	8005d42 <vListInsertEnd>
 800734c:	e005      	b.n	800735a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	3318      	adds	r3, #24
 8007352:	4619      	mov	r1, r3
 8007354:	480e      	ldr	r0, [pc, #56]	; (8007390 <xTaskRemoveFromEventList+0xbc>)
 8007356:	f7fe fcf4 	bl	8005d42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735e:	4b0d      	ldr	r3, [pc, #52]	; (8007394 <xTaskRemoveFromEventList+0xc0>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007364:	429a      	cmp	r2, r3
 8007366:	d905      	bls.n	8007374 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007368:	2301      	movs	r3, #1
 800736a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800736c:	4b0a      	ldr	r3, [pc, #40]	; (8007398 <xTaskRemoveFromEventList+0xc4>)
 800736e:	2201      	movs	r2, #1
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	e001      	b.n	8007378 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007374:	2300      	movs	r3, #0
 8007376:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007378:	697b      	ldr	r3, [r7, #20]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	20000be8 	.word	0x20000be8
 8007388:	20000bc8 	.word	0x20000bc8
 800738c:	200006f0 	.word	0x200006f0
 8007390:	20000b80 	.word	0x20000b80
 8007394:	200006ec 	.word	0x200006ec
 8007398:	20000bd4 	.word	0x20000bd4

0800739c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073a4:	4b06      	ldr	r3, [pc, #24]	; (80073c0 <vTaskInternalSetTimeOutState+0x24>)
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073ac:	4b05      	ldr	r3, [pc, #20]	; (80073c4 <vTaskInternalSetTimeOutState+0x28>)
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	605a      	str	r2, [r3, #4]
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	20000bd8 	.word	0x20000bd8
 80073c4:	20000bc4 	.word	0x20000bc4

080073c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10a      	bne.n	80073ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80073d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073dc:	f383 8811 	msr	BASEPRI, r3
 80073e0:	f3bf 8f6f 	isb	sy
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	613b      	str	r3, [r7, #16]
}
 80073ea:	bf00      	nop
 80073ec:	e7fe      	b.n	80073ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10a      	bne.n	800740a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80073f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	60fb      	str	r3, [r7, #12]
}
 8007406:	bf00      	nop
 8007408:	e7fe      	b.n	8007408 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800740a:	f000 fe7b 	bl	8008104 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800740e:	4b1d      	ldr	r3, [pc, #116]	; (8007484 <xTaskCheckForTimeOut+0xbc>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	69ba      	ldr	r2, [r7, #24]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007426:	d102      	bne.n	800742e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007428:	2300      	movs	r3, #0
 800742a:	61fb      	str	r3, [r7, #28]
 800742c:	e023      	b.n	8007476 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	4b15      	ldr	r3, [pc, #84]	; (8007488 <xTaskCheckForTimeOut+0xc0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	429a      	cmp	r2, r3
 8007438:	d007      	beq.n	800744a <xTaskCheckForTimeOut+0x82>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	69ba      	ldr	r2, [r7, #24]
 8007440:	429a      	cmp	r2, r3
 8007442:	d302      	bcc.n	800744a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007444:	2301      	movs	r3, #1
 8007446:	61fb      	str	r3, [r7, #28]
 8007448:	e015      	b.n	8007476 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	429a      	cmp	r2, r3
 8007452:	d20b      	bcs.n	800746c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	1ad2      	subs	r2, r2, r3
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7ff ff9b 	bl	800739c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007466:	2300      	movs	r3, #0
 8007468:	61fb      	str	r3, [r7, #28]
 800746a:	e004      	b.n	8007476 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	2200      	movs	r2, #0
 8007470:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007472:	2301      	movs	r3, #1
 8007474:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007476:	f000 fe75 	bl	8008164 <vPortExitCritical>

	return xReturn;
 800747a:	69fb      	ldr	r3, [r7, #28]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3720      	adds	r7, #32
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	20000bc4 	.word	0x20000bc4
 8007488:	20000bd8 	.word	0x20000bd8

0800748c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800748c:	b480      	push	{r7}
 800748e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007490:	4b03      	ldr	r3, [pc, #12]	; (80074a0 <vTaskMissedYield+0x14>)
 8007492:	2201      	movs	r2, #1
 8007494:	601a      	str	r2, [r3, #0]
}
 8007496:	bf00      	nop
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	20000bd4 	.word	0x20000bd4

080074a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074ac:	f000 f852 	bl	8007554 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074b0:	4b06      	ldr	r3, [pc, #24]	; (80074cc <prvIdleTask+0x28>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d9f9      	bls.n	80074ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80074b8:	4b05      	ldr	r3, [pc, #20]	; (80074d0 <prvIdleTask+0x2c>)
 80074ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074be:	601a      	str	r2, [r3, #0]
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074c8:	e7f0      	b.n	80074ac <prvIdleTask+0x8>
 80074ca:	bf00      	nop
 80074cc:	200006f0 	.word	0x200006f0
 80074d0:	e000ed04 	.word	0xe000ed04

080074d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074da:	2300      	movs	r3, #0
 80074dc:	607b      	str	r3, [r7, #4]
 80074de:	e00c      	b.n	80074fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	4613      	mov	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4a12      	ldr	r2, [pc, #72]	; (8007534 <prvInitialiseTaskLists+0x60>)
 80074ec:	4413      	add	r3, r2
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe fbfa 	bl	8005ce8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3301      	adds	r3, #1
 80074f8:	607b      	str	r3, [r7, #4]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b37      	cmp	r3, #55	; 0x37
 80074fe:	d9ef      	bls.n	80074e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007500:	480d      	ldr	r0, [pc, #52]	; (8007538 <prvInitialiseTaskLists+0x64>)
 8007502:	f7fe fbf1 	bl	8005ce8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007506:	480d      	ldr	r0, [pc, #52]	; (800753c <prvInitialiseTaskLists+0x68>)
 8007508:	f7fe fbee 	bl	8005ce8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800750c:	480c      	ldr	r0, [pc, #48]	; (8007540 <prvInitialiseTaskLists+0x6c>)
 800750e:	f7fe fbeb 	bl	8005ce8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007512:	480c      	ldr	r0, [pc, #48]	; (8007544 <prvInitialiseTaskLists+0x70>)
 8007514:	f7fe fbe8 	bl	8005ce8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007518:	480b      	ldr	r0, [pc, #44]	; (8007548 <prvInitialiseTaskLists+0x74>)
 800751a:	f7fe fbe5 	bl	8005ce8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800751e:	4b0b      	ldr	r3, [pc, #44]	; (800754c <prvInitialiseTaskLists+0x78>)
 8007520:	4a05      	ldr	r2, [pc, #20]	; (8007538 <prvInitialiseTaskLists+0x64>)
 8007522:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007524:	4b0a      	ldr	r3, [pc, #40]	; (8007550 <prvInitialiseTaskLists+0x7c>)
 8007526:	4a05      	ldr	r2, [pc, #20]	; (800753c <prvInitialiseTaskLists+0x68>)
 8007528:	601a      	str	r2, [r3, #0]
}
 800752a:	bf00      	nop
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	200006f0 	.word	0x200006f0
 8007538:	20000b50 	.word	0x20000b50
 800753c:	20000b64 	.word	0x20000b64
 8007540:	20000b80 	.word	0x20000b80
 8007544:	20000b94 	.word	0x20000b94
 8007548:	20000bac 	.word	0x20000bac
 800754c:	20000b78 	.word	0x20000b78
 8007550:	20000b7c 	.word	0x20000b7c

08007554 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800755a:	e019      	b.n	8007590 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800755c:	f000 fdd2 	bl	8008104 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007560:	4b10      	ldr	r3, [pc, #64]	; (80075a4 <prvCheckTasksWaitingTermination+0x50>)
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3304      	adds	r3, #4
 800756c:	4618      	mov	r0, r3
 800756e:	f7fe fc45 	bl	8005dfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007572:	4b0d      	ldr	r3, [pc, #52]	; (80075a8 <prvCheckTasksWaitingTermination+0x54>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3b01      	subs	r3, #1
 8007578:	4a0b      	ldr	r2, [pc, #44]	; (80075a8 <prvCheckTasksWaitingTermination+0x54>)
 800757a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800757c:	4b0b      	ldr	r3, [pc, #44]	; (80075ac <prvCheckTasksWaitingTermination+0x58>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3b01      	subs	r3, #1
 8007582:	4a0a      	ldr	r2, [pc, #40]	; (80075ac <prvCheckTasksWaitingTermination+0x58>)
 8007584:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007586:	f000 fded 	bl	8008164 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f810 	bl	80075b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007590:	4b06      	ldr	r3, [pc, #24]	; (80075ac <prvCheckTasksWaitingTermination+0x58>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1e1      	bne.n	800755c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007598:	bf00      	nop
 800759a:	bf00      	nop
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	20000b94 	.word	0x20000b94
 80075a8:	20000bc0 	.word	0x20000bc0
 80075ac:	20000ba8 	.word	0x20000ba8

080075b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d108      	bne.n	80075d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 ff8a 	bl	80084e0 <vPortFree>
				vPortFree( pxTCB );
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 ff87 	bl	80084e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075d2:	e018      	b.n	8007606 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d103      	bne.n	80075e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 ff7e 	bl	80084e0 <vPortFree>
	}
 80075e4:	e00f      	b.n	8007606 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d00a      	beq.n	8007606 <prvDeleteTCB+0x56>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	60fb      	str	r3, [r7, #12]
}
 8007602:	bf00      	nop
 8007604:	e7fe      	b.n	8007604 <prvDeleteTCB+0x54>
	}
 8007606:	bf00      	nop
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
	...

08007610 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007616:	4b0c      	ldr	r3, [pc, #48]	; (8007648 <prvResetNextTaskUnblockTime+0x38>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d104      	bne.n	800762a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007620:	4b0a      	ldr	r3, [pc, #40]	; (800764c <prvResetNextTaskUnblockTime+0x3c>)
 8007622:	f04f 32ff 	mov.w	r2, #4294967295
 8007626:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007628:	e008      	b.n	800763c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800762a:	4b07      	ldr	r3, [pc, #28]	; (8007648 <prvResetNextTaskUnblockTime+0x38>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	4a04      	ldr	r2, [pc, #16]	; (800764c <prvResetNextTaskUnblockTime+0x3c>)
 800763a:	6013      	str	r3, [r2, #0]
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	20000b78 	.word	0x20000b78
 800764c:	20000be0 	.word	0x20000be0

08007650 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007656:	4b0b      	ldr	r3, [pc, #44]	; (8007684 <xTaskGetSchedulerState+0x34>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d102      	bne.n	8007664 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800765e:	2301      	movs	r3, #1
 8007660:	607b      	str	r3, [r7, #4]
 8007662:	e008      	b.n	8007676 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007664:	4b08      	ldr	r3, [pc, #32]	; (8007688 <xTaskGetSchedulerState+0x38>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d102      	bne.n	8007672 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800766c:	2302      	movs	r3, #2
 800766e:	607b      	str	r3, [r7, #4]
 8007670:	e001      	b.n	8007676 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007672:	2300      	movs	r3, #0
 8007674:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007676:	687b      	ldr	r3, [r7, #4]
	}
 8007678:	4618      	mov	r0, r3
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	20000bcc 	.word	0x20000bcc
 8007688:	20000be8 	.word	0x20000be8

0800768c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007698:	2300      	movs	r3, #0
 800769a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d056      	beq.n	8007750 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076a2:	4b2e      	ldr	r3, [pc, #184]	; (800775c <xTaskPriorityDisinherit+0xd0>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d00a      	beq.n	80076c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80076ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	60fb      	str	r3, [r7, #12]
}
 80076be:	bf00      	nop
 80076c0:	e7fe      	b.n	80076c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10a      	bne.n	80076e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80076ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	60bb      	str	r3, [r7, #8]
}
 80076dc:	bf00      	nop
 80076de:	e7fe      	b.n	80076de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076e4:	1e5a      	subs	r2, r3, #1
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d02c      	beq.n	8007750 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d128      	bne.n	8007750 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	3304      	adds	r3, #4
 8007702:	4618      	mov	r0, r3
 8007704:	f7fe fb7a 	bl	8005dfc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007714:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007720:	4b0f      	ldr	r3, [pc, #60]	; (8007760 <xTaskPriorityDisinherit+0xd4>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	429a      	cmp	r2, r3
 8007726:	d903      	bls.n	8007730 <xTaskPriorityDisinherit+0xa4>
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772c:	4a0c      	ldr	r2, [pc, #48]	; (8007760 <xTaskPriorityDisinherit+0xd4>)
 800772e:	6013      	str	r3, [r2, #0]
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007734:	4613      	mov	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4413      	add	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4a09      	ldr	r2, [pc, #36]	; (8007764 <xTaskPriorityDisinherit+0xd8>)
 800773e:	441a      	add	r2, r3
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	3304      	adds	r3, #4
 8007744:	4619      	mov	r1, r3
 8007746:	4610      	mov	r0, r2
 8007748:	f7fe fafb 	bl	8005d42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800774c:	2301      	movs	r3, #1
 800774e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007750:	697b      	ldr	r3, [r7, #20]
	}
 8007752:	4618      	mov	r0, r3
 8007754:	3718      	adds	r7, #24
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	200006ec 	.word	0x200006ec
 8007760:	20000bc8 	.word	0x20000bc8
 8007764:	200006f0 	.word	0x200006f0

08007768 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007772:	4b21      	ldr	r3, [pc, #132]	; (80077f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007778:	4b20      	ldr	r3, [pc, #128]	; (80077fc <prvAddCurrentTaskToDelayedList+0x94>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3304      	adds	r3, #4
 800777e:	4618      	mov	r0, r3
 8007780:	f7fe fb3c 	bl	8005dfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778a:	d10a      	bne.n	80077a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d007      	beq.n	80077a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007792:	4b1a      	ldr	r3, [pc, #104]	; (80077fc <prvAddCurrentTaskToDelayedList+0x94>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	3304      	adds	r3, #4
 8007798:	4619      	mov	r1, r3
 800779a:	4819      	ldr	r0, [pc, #100]	; (8007800 <prvAddCurrentTaskToDelayedList+0x98>)
 800779c:	f7fe fad1 	bl	8005d42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077a0:	e026      	b.n	80077f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4413      	add	r3, r2
 80077a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077aa:	4b14      	ldr	r3, [pc, #80]	; (80077fc <prvAddCurrentTaskToDelayedList+0x94>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d209      	bcs.n	80077ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077ba:	4b12      	ldr	r3, [pc, #72]	; (8007804 <prvAddCurrentTaskToDelayedList+0x9c>)
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	4b0f      	ldr	r3, [pc, #60]	; (80077fc <prvAddCurrentTaskToDelayedList+0x94>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3304      	adds	r3, #4
 80077c4:	4619      	mov	r1, r3
 80077c6:	4610      	mov	r0, r2
 80077c8:	f7fe fadf 	bl	8005d8a <vListInsert>
}
 80077cc:	e010      	b.n	80077f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077ce:	4b0e      	ldr	r3, [pc, #56]	; (8007808 <prvAddCurrentTaskToDelayedList+0xa0>)
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <prvAddCurrentTaskToDelayedList+0x94>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3304      	adds	r3, #4
 80077d8:	4619      	mov	r1, r3
 80077da:	4610      	mov	r0, r2
 80077dc:	f7fe fad5 	bl	8005d8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077e0:	4b0a      	ldr	r3, [pc, #40]	; (800780c <prvAddCurrentTaskToDelayedList+0xa4>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d202      	bcs.n	80077f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80077ea:	4a08      	ldr	r2, [pc, #32]	; (800780c <prvAddCurrentTaskToDelayedList+0xa4>)
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	6013      	str	r3, [r2, #0]
}
 80077f0:	bf00      	nop
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	20000bc4 	.word	0x20000bc4
 80077fc:	200006ec 	.word	0x200006ec
 8007800:	20000bac 	.word	0x20000bac
 8007804:	20000b7c 	.word	0x20000b7c
 8007808:	20000b78 	.word	0x20000b78
 800780c:	20000be0 	.word	0x20000be0

08007810 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b08a      	sub	sp, #40	; 0x28
 8007814:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007816:	2300      	movs	r3, #0
 8007818:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800781a:	f000 fb07 	bl	8007e2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800781e:	4b1c      	ldr	r3, [pc, #112]	; (8007890 <xTimerCreateTimerTask+0x80>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d021      	beq.n	800786a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007826:	2300      	movs	r3, #0
 8007828:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800782a:	2300      	movs	r3, #0
 800782c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800782e:	1d3a      	adds	r2, r7, #4
 8007830:	f107 0108 	add.w	r1, r7, #8
 8007834:	f107 030c 	add.w	r3, r7, #12
 8007838:	4618      	mov	r0, r3
 800783a:	f7fe fa3b 	bl	8005cb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	9202      	str	r2, [sp, #8]
 8007846:	9301      	str	r3, [sp, #4]
 8007848:	2302      	movs	r3, #2
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	2300      	movs	r3, #0
 800784e:	460a      	mov	r2, r1
 8007850:	4910      	ldr	r1, [pc, #64]	; (8007894 <xTimerCreateTimerTask+0x84>)
 8007852:	4811      	ldr	r0, [pc, #68]	; (8007898 <xTimerCreateTimerTask+0x88>)
 8007854:	f7ff f8de 	bl	8006a14 <xTaskCreateStatic>
 8007858:	4603      	mov	r3, r0
 800785a:	4a10      	ldr	r2, [pc, #64]	; (800789c <xTimerCreateTimerTask+0x8c>)
 800785c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800785e:	4b0f      	ldr	r3, [pc, #60]	; (800789c <xTimerCreateTimerTask+0x8c>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007866:	2301      	movs	r3, #1
 8007868:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10a      	bne.n	8007886 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	613b      	str	r3, [r7, #16]
}
 8007882:	bf00      	nop
 8007884:	e7fe      	b.n	8007884 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007886:	697b      	ldr	r3, [r7, #20]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3718      	adds	r7, #24
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	20000c1c 	.word	0x20000c1c
 8007894:	08008824 	.word	0x08008824
 8007898:	080079d5 	.word	0x080079d5
 800789c:	20000c20 	.word	0x20000c20

080078a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b08a      	sub	sp, #40	; 0x28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
 80078ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80078ae:	2300      	movs	r3, #0
 80078b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10a      	bne.n	80078ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80078b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	623b      	str	r3, [r7, #32]
}
 80078ca:	bf00      	nop
 80078cc:	e7fe      	b.n	80078cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80078ce:	4b1a      	ldr	r3, [pc, #104]	; (8007938 <xTimerGenericCommand+0x98>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d02a      	beq.n	800792c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b05      	cmp	r3, #5
 80078e6:	dc18      	bgt.n	800791a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80078e8:	f7ff feb2 	bl	8007650 <xTaskGetSchedulerState>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d109      	bne.n	8007906 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80078f2:	4b11      	ldr	r3, [pc, #68]	; (8007938 <xTimerGenericCommand+0x98>)
 80078f4:	6818      	ldr	r0, [r3, #0]
 80078f6:	f107 0110 	add.w	r1, r7, #16
 80078fa:	2300      	movs	r3, #0
 80078fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078fe:	f7fe fbe5 	bl	80060cc <xQueueGenericSend>
 8007902:	6278      	str	r0, [r7, #36]	; 0x24
 8007904:	e012      	b.n	800792c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007906:	4b0c      	ldr	r3, [pc, #48]	; (8007938 <xTimerGenericCommand+0x98>)
 8007908:	6818      	ldr	r0, [r3, #0]
 800790a:	f107 0110 	add.w	r1, r7, #16
 800790e:	2300      	movs	r3, #0
 8007910:	2200      	movs	r2, #0
 8007912:	f7fe fbdb 	bl	80060cc <xQueueGenericSend>
 8007916:	6278      	str	r0, [r7, #36]	; 0x24
 8007918:	e008      	b.n	800792c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800791a:	4b07      	ldr	r3, [pc, #28]	; (8007938 <xTimerGenericCommand+0x98>)
 800791c:	6818      	ldr	r0, [r3, #0]
 800791e:	f107 0110 	add.w	r1, r7, #16
 8007922:	2300      	movs	r3, #0
 8007924:	683a      	ldr	r2, [r7, #0]
 8007926:	f7fe fccf 	bl	80062c8 <xQueueGenericSendFromISR>
 800792a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800792e:	4618      	mov	r0, r3
 8007930:	3728      	adds	r7, #40	; 0x28
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	20000c1c 	.word	0x20000c1c

0800793c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b088      	sub	sp, #32
 8007940:	af02      	add	r7, sp, #8
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007946:	4b22      	ldr	r3, [pc, #136]	; (80079d0 <prvProcessExpiredTimer+0x94>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	3304      	adds	r3, #4
 8007954:	4618      	mov	r0, r3
 8007956:	f7fe fa51 	bl	8005dfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007960:	f003 0304 	and.w	r3, r3, #4
 8007964:	2b00      	cmp	r3, #0
 8007966:	d022      	beq.n	80079ae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	699a      	ldr	r2, [r3, #24]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	18d1      	adds	r1, r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	6978      	ldr	r0, [r7, #20]
 8007976:	f000 f8d1 	bl	8007b1c <prvInsertTimerInActiveList>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d01f      	beq.n	80079c0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007980:	2300      	movs	r3, #0
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	2300      	movs	r3, #0
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	2100      	movs	r1, #0
 800798a:	6978      	ldr	r0, [r7, #20]
 800798c:	f7ff ff88 	bl	80078a0 <xTimerGenericCommand>
 8007990:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d113      	bne.n	80079c0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799c:	f383 8811 	msr	BASEPRI, r3
 80079a0:	f3bf 8f6f 	isb	sy
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	60fb      	str	r3, [r7, #12]
}
 80079aa:	bf00      	nop
 80079ac:	e7fe      	b.n	80079ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079b4:	f023 0301 	bic.w	r3, r3, #1
 80079b8:	b2da      	uxtb	r2, r3
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	6a1b      	ldr	r3, [r3, #32]
 80079c4:	6978      	ldr	r0, [r7, #20]
 80079c6:	4798      	blx	r3
}
 80079c8:	bf00      	nop
 80079ca:	3718      	adds	r7, #24
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	20000c14 	.word	0x20000c14

080079d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079dc:	f107 0308 	add.w	r3, r7, #8
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 f857 	bl	8007a94 <prvGetNextExpireTime>
 80079e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	4619      	mov	r1, r3
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f000 f803 	bl	80079f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80079f2:	f000 f8d5 	bl	8007ba0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079f6:	e7f1      	b.n	80079dc <prvTimerTask+0x8>

080079f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a02:	f7ff fa43 	bl	8006e8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a06:	f107 0308 	add.w	r3, r7, #8
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 f866 	bl	8007adc <prvSampleTimeNow>
 8007a10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d130      	bne.n	8007a7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10a      	bne.n	8007a34 <prvProcessTimerOrBlockTask+0x3c>
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d806      	bhi.n	8007a34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a26:	f7ff fa3f 	bl	8006ea8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a2a:	68f9      	ldr	r1, [r7, #12]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7ff ff85 	bl	800793c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a32:	e024      	b.n	8007a7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d008      	beq.n	8007a4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a3a:	4b13      	ldr	r3, [pc, #76]	; (8007a88 <prvProcessTimerOrBlockTask+0x90>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d101      	bne.n	8007a48 <prvProcessTimerOrBlockTask+0x50>
 8007a44:	2301      	movs	r3, #1
 8007a46:	e000      	b.n	8007a4a <prvProcessTimerOrBlockTask+0x52>
 8007a48:	2300      	movs	r3, #0
 8007a4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a4c:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <prvProcessTimerOrBlockTask+0x94>)
 8007a4e:	6818      	ldr	r0, [r3, #0]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	4619      	mov	r1, r3
 8007a5a:	f7fe ffa7 	bl	80069ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a5e:	f7ff fa23 	bl	8006ea8 <xTaskResumeAll>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10a      	bne.n	8007a7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a68:	4b09      	ldr	r3, [pc, #36]	; (8007a90 <prvProcessTimerOrBlockTask+0x98>)
 8007a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a6e:	601a      	str	r2, [r3, #0]
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	f3bf 8f6f 	isb	sy
}
 8007a78:	e001      	b.n	8007a7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a7a:	f7ff fa15 	bl	8006ea8 <xTaskResumeAll>
}
 8007a7e:	bf00      	nop
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	20000c18 	.word	0x20000c18
 8007a8c:	20000c1c 	.word	0x20000c1c
 8007a90:	e000ed04 	.word	0xe000ed04

08007a94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a9c:	4b0e      	ldr	r3, [pc, #56]	; (8007ad8 <prvGetNextExpireTime+0x44>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <prvGetNextExpireTime+0x16>
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	e000      	b.n	8007aac <prvGetNextExpireTime+0x18>
 8007aaa:	2200      	movs	r2, #0
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d105      	bne.n	8007ac4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ab8:	4b07      	ldr	r3, [pc, #28]	; (8007ad8 <prvGetNextExpireTime+0x44>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	60fb      	str	r3, [r7, #12]
 8007ac2:	e001      	b.n	8007ac8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3714      	adds	r7, #20
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	20000c14 	.word	0x20000c14

08007adc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ae4:	f7ff fa7e 	bl	8006fe4 <xTaskGetTickCount>
 8007ae8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007aea:	4b0b      	ldr	r3, [pc, #44]	; (8007b18 <prvSampleTimeNow+0x3c>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d205      	bcs.n	8007b00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007af4:	f000 f936 	bl	8007d64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	601a      	str	r2, [r3, #0]
 8007afe:	e002      	b.n	8007b06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b06:	4a04      	ldr	r2, [pc, #16]	; (8007b18 <prvSampleTimeNow+0x3c>)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20000c24 	.word	0x20000c24

08007b1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
 8007b28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d812      	bhi.n	8007b68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	1ad2      	subs	r2, r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d302      	bcc.n	8007b56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b50:	2301      	movs	r3, #1
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	e01b      	b.n	8007b8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b56:	4b10      	ldr	r3, [pc, #64]	; (8007b98 <prvInsertTimerInActiveList+0x7c>)
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	3304      	adds	r3, #4
 8007b5e:	4619      	mov	r1, r3
 8007b60:	4610      	mov	r0, r2
 8007b62:	f7fe f912 	bl	8005d8a <vListInsert>
 8007b66:	e012      	b.n	8007b8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d206      	bcs.n	8007b7e <prvInsertTimerInActiveList+0x62>
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d302      	bcc.n	8007b7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	617b      	str	r3, [r7, #20]
 8007b7c:	e007      	b.n	8007b8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b7e:	4b07      	ldr	r3, [pc, #28]	; (8007b9c <prvInsertTimerInActiveList+0x80>)
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	3304      	adds	r3, #4
 8007b86:	4619      	mov	r1, r3
 8007b88:	4610      	mov	r0, r2
 8007b8a:	f7fe f8fe 	bl	8005d8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b8e:	697b      	ldr	r3, [r7, #20]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3718      	adds	r7, #24
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	20000c18 	.word	0x20000c18
 8007b9c:	20000c14 	.word	0x20000c14

08007ba0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b08e      	sub	sp, #56	; 0x38
 8007ba4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ba6:	e0ca      	b.n	8007d3e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	da18      	bge.n	8007be0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007bae:	1d3b      	adds	r3, r7, #4
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10a      	bne.n	8007bd0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	61fb      	str	r3, [r7, #28]
}
 8007bcc:	bf00      	nop
 8007bce:	e7fe      	b.n	8007bce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bd6:	6850      	ldr	r0, [r2, #4]
 8007bd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bda:	6892      	ldr	r2, [r2, #8]
 8007bdc:	4611      	mov	r1, r2
 8007bde:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f2c0 80aa 	blt.w	8007d3c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d004      	beq.n	8007bfe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fe f8ff 	bl	8005dfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bfe:	463b      	mov	r3, r7
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7ff ff6b 	bl	8007adc <prvSampleTimeNow>
 8007c06:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b09      	cmp	r3, #9
 8007c0c:	f200 8097 	bhi.w	8007d3e <prvProcessReceivedCommands+0x19e>
 8007c10:	a201      	add	r2, pc, #4	; (adr r2, 8007c18 <prvProcessReceivedCommands+0x78>)
 8007c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c16:	bf00      	nop
 8007c18:	08007c41 	.word	0x08007c41
 8007c1c:	08007c41 	.word	0x08007c41
 8007c20:	08007c41 	.word	0x08007c41
 8007c24:	08007cb5 	.word	0x08007cb5
 8007c28:	08007cc9 	.word	0x08007cc9
 8007c2c:	08007d13 	.word	0x08007d13
 8007c30:	08007c41 	.word	0x08007c41
 8007c34:	08007c41 	.word	0x08007c41
 8007c38:	08007cb5 	.word	0x08007cb5
 8007c3c:	08007cc9 	.word	0x08007cc9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c46:	f043 0301 	orr.w	r3, r3, #1
 8007c4a:	b2da      	uxtb	r2, r3
 8007c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	18d1      	adds	r1, r2, r3
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c60:	f7ff ff5c 	bl	8007b1c <prvInsertTimerInActiveList>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d069      	beq.n	8007d3e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c78:	f003 0304 	and.w	r3, r3, #4
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d05e      	beq.n	8007d3e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	441a      	add	r2, r3
 8007c88:	2300      	movs	r3, #0
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	2100      	movs	r1, #0
 8007c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c92:	f7ff fe05 	bl	80078a0 <xTimerGenericCommand>
 8007c96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d14f      	bne.n	8007d3e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	61bb      	str	r3, [r7, #24]
}
 8007cb0:	bf00      	nop
 8007cb2:	e7fe      	b.n	8007cb2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cba:	f023 0301 	bic.w	r3, r3, #1
 8007cbe:	b2da      	uxtb	r2, r3
 8007cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007cc6:	e03a      	b.n	8007d3e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cce:	f043 0301 	orr.w	r3, r3, #1
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cde:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10a      	bne.n	8007cfe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	617b      	str	r3, [r7, #20]
}
 8007cfa:	bf00      	nop
 8007cfc:	e7fe      	b.n	8007cfc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d00:	699a      	ldr	r2, [r3, #24]
 8007d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d04:	18d1      	adds	r1, r2, r3
 8007d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d0c:	f7ff ff06 	bl	8007b1c <prvInsertTimerInActiveList>
					break;
 8007d10:	e015      	b.n	8007d3e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d18:	f003 0302 	and.w	r3, r3, #2
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d103      	bne.n	8007d28 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d22:	f000 fbdd 	bl	80084e0 <vPortFree>
 8007d26:	e00a      	b.n	8007d3e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d2e:	f023 0301 	bic.w	r3, r3, #1
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d3a:	e000      	b.n	8007d3e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d3e:	4b08      	ldr	r3, [pc, #32]	; (8007d60 <prvProcessReceivedCommands+0x1c0>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	1d39      	adds	r1, r7, #4
 8007d44:	2200      	movs	r2, #0
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fe fb5a 	bl	8006400 <xQueueReceive>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f47f af2a 	bne.w	8007ba8 <prvProcessReceivedCommands+0x8>
	}
}
 8007d54:	bf00      	nop
 8007d56:	bf00      	nop
 8007d58:	3730      	adds	r7, #48	; 0x30
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	20000c1c 	.word	0x20000c1c

08007d64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b088      	sub	sp, #32
 8007d68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d6a:	e048      	b.n	8007dfe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d6c:	4b2d      	ldr	r3, [pc, #180]	; (8007e24 <prvSwitchTimerLists+0xc0>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d76:	4b2b      	ldr	r3, [pc, #172]	; (8007e24 <prvSwitchTimerLists+0xc0>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	3304      	adds	r3, #4
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fe f839 	bl	8005dfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6a1b      	ldr	r3, [r3, #32]
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d98:	f003 0304 	and.w	r3, r3, #4
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d02e      	beq.n	8007dfe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	4413      	add	r3, r2
 8007da8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d90e      	bls.n	8007dd0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dbe:	4b19      	ldr	r3, [pc, #100]	; (8007e24 <prvSwitchTimerLists+0xc0>)
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	4610      	mov	r0, r2
 8007dca:	f7fd ffde 	bl	8005d8a <vListInsert>
 8007dce:	e016      	b.n	8007dfe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	2100      	movs	r1, #0
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f7ff fd60 	bl	80078a0 <xTimerGenericCommand>
 8007de0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10a      	bne.n	8007dfe <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dec:	f383 8811 	msr	BASEPRI, r3
 8007df0:	f3bf 8f6f 	isb	sy
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	603b      	str	r3, [r7, #0]
}
 8007dfa:	bf00      	nop
 8007dfc:	e7fe      	b.n	8007dfc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dfe:	4b09      	ldr	r3, [pc, #36]	; (8007e24 <prvSwitchTimerLists+0xc0>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1b1      	bne.n	8007d6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e08:	4b06      	ldr	r3, [pc, #24]	; (8007e24 <prvSwitchTimerLists+0xc0>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e0e:	4b06      	ldr	r3, [pc, #24]	; (8007e28 <prvSwitchTimerLists+0xc4>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a04      	ldr	r2, [pc, #16]	; (8007e24 <prvSwitchTimerLists+0xc0>)
 8007e14:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e16:	4a04      	ldr	r2, [pc, #16]	; (8007e28 <prvSwitchTimerLists+0xc4>)
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	6013      	str	r3, [r2, #0]
}
 8007e1c:	bf00      	nop
 8007e1e:	3718      	adds	r7, #24
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	20000c14 	.word	0x20000c14
 8007e28:	20000c18 	.word	0x20000c18

08007e2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e32:	f000 f967 	bl	8008104 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e36:	4b15      	ldr	r3, [pc, #84]	; (8007e8c <prvCheckForValidListAndQueue+0x60>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d120      	bne.n	8007e80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e3e:	4814      	ldr	r0, [pc, #80]	; (8007e90 <prvCheckForValidListAndQueue+0x64>)
 8007e40:	f7fd ff52 	bl	8005ce8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e44:	4813      	ldr	r0, [pc, #76]	; (8007e94 <prvCheckForValidListAndQueue+0x68>)
 8007e46:	f7fd ff4f 	bl	8005ce8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e4a:	4b13      	ldr	r3, [pc, #76]	; (8007e98 <prvCheckForValidListAndQueue+0x6c>)
 8007e4c:	4a10      	ldr	r2, [pc, #64]	; (8007e90 <prvCheckForValidListAndQueue+0x64>)
 8007e4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e50:	4b12      	ldr	r3, [pc, #72]	; (8007e9c <prvCheckForValidListAndQueue+0x70>)
 8007e52:	4a10      	ldr	r2, [pc, #64]	; (8007e94 <prvCheckForValidListAndQueue+0x68>)
 8007e54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e56:	2300      	movs	r3, #0
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	4b11      	ldr	r3, [pc, #68]	; (8007ea0 <prvCheckForValidListAndQueue+0x74>)
 8007e5c:	4a11      	ldr	r2, [pc, #68]	; (8007ea4 <prvCheckForValidListAndQueue+0x78>)
 8007e5e:	2110      	movs	r1, #16
 8007e60:	200a      	movs	r0, #10
 8007e62:	f7fe f85d 	bl	8005f20 <xQueueGenericCreateStatic>
 8007e66:	4603      	mov	r3, r0
 8007e68:	4a08      	ldr	r2, [pc, #32]	; (8007e8c <prvCheckForValidListAndQueue+0x60>)
 8007e6a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e6c:	4b07      	ldr	r3, [pc, #28]	; (8007e8c <prvCheckForValidListAndQueue+0x60>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d005      	beq.n	8007e80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e74:	4b05      	ldr	r3, [pc, #20]	; (8007e8c <prvCheckForValidListAndQueue+0x60>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	490b      	ldr	r1, [pc, #44]	; (8007ea8 <prvCheckForValidListAndQueue+0x7c>)
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fe fd6c 	bl	8006958 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e80:	f000 f970 	bl	8008164 <vPortExitCritical>
}
 8007e84:	bf00      	nop
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	20000c1c 	.word	0x20000c1c
 8007e90:	20000bec 	.word	0x20000bec
 8007e94:	20000c00 	.word	0x20000c00
 8007e98:	20000c14 	.word	0x20000c14
 8007e9c:	20000c18 	.word	0x20000c18
 8007ea0:	20000cc8 	.word	0x20000cc8
 8007ea4:	20000c28 	.word	0x20000c28
 8007ea8:	0800882c 	.word	0x0800882c

08007eac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3b04      	subs	r3, #4
 8007ebc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	3b04      	subs	r3, #4
 8007eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	f023 0201 	bic.w	r2, r3, #1
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	3b04      	subs	r3, #4
 8007eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007edc:	4a0c      	ldr	r2, [pc, #48]	; (8007f10 <pxPortInitialiseStack+0x64>)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	3b14      	subs	r3, #20
 8007ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	3b04      	subs	r3, #4
 8007ef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f06f 0202 	mvn.w	r2, #2
 8007efa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3b20      	subs	r3, #32
 8007f00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f02:	68fb      	ldr	r3, [r7, #12]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3714      	adds	r7, #20
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr
 8007f10:	08007f15 	.word	0x08007f15

08007f14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f1e:	4b12      	ldr	r3, [pc, #72]	; (8007f68 <prvTaskExitError+0x54>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f26:	d00a      	beq.n	8007f3e <prvTaskExitError+0x2a>
	__asm volatile
 8007f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2c:	f383 8811 	msr	BASEPRI, r3
 8007f30:	f3bf 8f6f 	isb	sy
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	60fb      	str	r3, [r7, #12]
}
 8007f3a:	bf00      	nop
 8007f3c:	e7fe      	b.n	8007f3c <prvTaskExitError+0x28>
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	60bb      	str	r3, [r7, #8]
}
 8007f50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f52:	bf00      	nop
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d0fc      	beq.n	8007f54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f5a:	bf00      	nop
 8007f5c:	bf00      	nop
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	2000000c 	.word	0x2000000c
 8007f6c:	00000000 	.word	0x00000000

08007f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f70:	4b07      	ldr	r3, [pc, #28]	; (8007f90 <pxCurrentTCBConst2>)
 8007f72:	6819      	ldr	r1, [r3, #0]
 8007f74:	6808      	ldr	r0, [r1, #0]
 8007f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7a:	f380 8809 	msr	PSP, r0
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f04f 0000 	mov.w	r0, #0
 8007f86:	f380 8811 	msr	BASEPRI, r0
 8007f8a:	4770      	bx	lr
 8007f8c:	f3af 8000 	nop.w

08007f90 <pxCurrentTCBConst2>:
 8007f90:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop

08007f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f98:	4808      	ldr	r0, [pc, #32]	; (8007fbc <prvPortStartFirstTask+0x24>)
 8007f9a:	6800      	ldr	r0, [r0, #0]
 8007f9c:	6800      	ldr	r0, [r0, #0]
 8007f9e:	f380 8808 	msr	MSP, r0
 8007fa2:	f04f 0000 	mov.w	r0, #0
 8007fa6:	f380 8814 	msr	CONTROL, r0
 8007faa:	b662      	cpsie	i
 8007fac:	b661      	cpsie	f
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	df00      	svc	0
 8007fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007fba:	bf00      	nop
 8007fbc:	e000ed08 	.word	0xe000ed08

08007fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007fc6:	4b46      	ldr	r3, [pc, #280]	; (80080e0 <xPortStartScheduler+0x120>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a46      	ldr	r2, [pc, #280]	; (80080e4 <xPortStartScheduler+0x124>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d10a      	bne.n	8007fe6 <xPortStartScheduler+0x26>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	613b      	str	r3, [r7, #16]
}
 8007fe2:	bf00      	nop
 8007fe4:	e7fe      	b.n	8007fe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fe6:	4b3e      	ldr	r3, [pc, #248]	; (80080e0 <xPortStartScheduler+0x120>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a3f      	ldr	r2, [pc, #252]	; (80080e8 <xPortStartScheduler+0x128>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d10a      	bne.n	8008006 <xPortStartScheduler+0x46>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	60fb      	str	r3, [r7, #12]
}
 8008002:	bf00      	nop
 8008004:	e7fe      	b.n	8008004 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008006:	4b39      	ldr	r3, [pc, #228]	; (80080ec <xPortStartScheduler+0x12c>)
 8008008:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	b2db      	uxtb	r3, r3
 8008010:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	22ff      	movs	r2, #255	; 0xff
 8008016:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	b2db      	uxtb	r3, r3
 800801e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008020:	78fb      	ldrb	r3, [r7, #3]
 8008022:	b2db      	uxtb	r3, r3
 8008024:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008028:	b2da      	uxtb	r2, r3
 800802a:	4b31      	ldr	r3, [pc, #196]	; (80080f0 <xPortStartScheduler+0x130>)
 800802c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800802e:	4b31      	ldr	r3, [pc, #196]	; (80080f4 <xPortStartScheduler+0x134>)
 8008030:	2207      	movs	r2, #7
 8008032:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008034:	e009      	b.n	800804a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008036:	4b2f      	ldr	r3, [pc, #188]	; (80080f4 <xPortStartScheduler+0x134>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3b01      	subs	r3, #1
 800803c:	4a2d      	ldr	r2, [pc, #180]	; (80080f4 <xPortStartScheduler+0x134>)
 800803e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008040:	78fb      	ldrb	r3, [r7, #3]
 8008042:	b2db      	uxtb	r3, r3
 8008044:	005b      	lsls	r3, r3, #1
 8008046:	b2db      	uxtb	r3, r3
 8008048:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800804a:	78fb      	ldrb	r3, [r7, #3]
 800804c:	b2db      	uxtb	r3, r3
 800804e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008052:	2b80      	cmp	r3, #128	; 0x80
 8008054:	d0ef      	beq.n	8008036 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008056:	4b27      	ldr	r3, [pc, #156]	; (80080f4 <xPortStartScheduler+0x134>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f1c3 0307 	rsb	r3, r3, #7
 800805e:	2b04      	cmp	r3, #4
 8008060:	d00a      	beq.n	8008078 <xPortStartScheduler+0xb8>
	__asm volatile
 8008062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008066:	f383 8811 	msr	BASEPRI, r3
 800806a:	f3bf 8f6f 	isb	sy
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	60bb      	str	r3, [r7, #8]
}
 8008074:	bf00      	nop
 8008076:	e7fe      	b.n	8008076 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008078:	4b1e      	ldr	r3, [pc, #120]	; (80080f4 <xPortStartScheduler+0x134>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	021b      	lsls	r3, r3, #8
 800807e:	4a1d      	ldr	r2, [pc, #116]	; (80080f4 <xPortStartScheduler+0x134>)
 8008080:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008082:	4b1c      	ldr	r3, [pc, #112]	; (80080f4 <xPortStartScheduler+0x134>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800808a:	4a1a      	ldr	r2, [pc, #104]	; (80080f4 <xPortStartScheduler+0x134>)
 800808c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	b2da      	uxtb	r2, r3
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008096:	4b18      	ldr	r3, [pc, #96]	; (80080f8 <xPortStartScheduler+0x138>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a17      	ldr	r2, [pc, #92]	; (80080f8 <xPortStartScheduler+0x138>)
 800809c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80080a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80080a2:	4b15      	ldr	r3, [pc, #84]	; (80080f8 <xPortStartScheduler+0x138>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a14      	ldr	r2, [pc, #80]	; (80080f8 <xPortStartScheduler+0x138>)
 80080a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80080ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80080ae:	f000 f8dd 	bl	800826c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80080b2:	4b12      	ldr	r3, [pc, #72]	; (80080fc <xPortStartScheduler+0x13c>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80080b8:	f000 f8fc 	bl	80082b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80080bc:	4b10      	ldr	r3, [pc, #64]	; (8008100 <xPortStartScheduler+0x140>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a0f      	ldr	r2, [pc, #60]	; (8008100 <xPortStartScheduler+0x140>)
 80080c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80080c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80080c8:	f7ff ff66 	bl	8007f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080cc:	f7ff f854 	bl	8007178 <vTaskSwitchContext>
	prvTaskExitError();
 80080d0:	f7ff ff20 	bl	8007f14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	e000ed00 	.word	0xe000ed00
 80080e4:	410fc271 	.word	0x410fc271
 80080e8:	410fc270 	.word	0x410fc270
 80080ec:	e000e400 	.word	0xe000e400
 80080f0:	20000d18 	.word	0x20000d18
 80080f4:	20000d1c 	.word	0x20000d1c
 80080f8:	e000ed20 	.word	0xe000ed20
 80080fc:	2000000c 	.word	0x2000000c
 8008100:	e000ef34 	.word	0xe000ef34

08008104 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
	__asm volatile
 800810a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	607b      	str	r3, [r7, #4]
}
 800811c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800811e:	4b0f      	ldr	r3, [pc, #60]	; (800815c <vPortEnterCritical+0x58>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3301      	adds	r3, #1
 8008124:	4a0d      	ldr	r2, [pc, #52]	; (800815c <vPortEnterCritical+0x58>)
 8008126:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008128:	4b0c      	ldr	r3, [pc, #48]	; (800815c <vPortEnterCritical+0x58>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d10f      	bne.n	8008150 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008130:	4b0b      	ldr	r3, [pc, #44]	; (8008160 <vPortEnterCritical+0x5c>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00a      	beq.n	8008150 <vPortEnterCritical+0x4c>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	603b      	str	r3, [r7, #0]
}
 800814c:	bf00      	nop
 800814e:	e7fe      	b.n	800814e <vPortEnterCritical+0x4a>
	}
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	2000000c 	.word	0x2000000c
 8008160:	e000ed04 	.word	0xe000ed04

08008164 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800816a:	4b12      	ldr	r3, [pc, #72]	; (80081b4 <vPortExitCritical+0x50>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10a      	bne.n	8008188 <vPortExitCritical+0x24>
	__asm volatile
 8008172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	607b      	str	r3, [r7, #4]
}
 8008184:	bf00      	nop
 8008186:	e7fe      	b.n	8008186 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008188:	4b0a      	ldr	r3, [pc, #40]	; (80081b4 <vPortExitCritical+0x50>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3b01      	subs	r3, #1
 800818e:	4a09      	ldr	r2, [pc, #36]	; (80081b4 <vPortExitCritical+0x50>)
 8008190:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008192:	4b08      	ldr	r3, [pc, #32]	; (80081b4 <vPortExitCritical+0x50>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d105      	bne.n	80081a6 <vPortExitCritical+0x42>
 800819a:	2300      	movs	r3, #0
 800819c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	f383 8811 	msr	BASEPRI, r3
}
 80081a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80081a6:	bf00      	nop
 80081a8:	370c      	adds	r7, #12
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	2000000c 	.word	0x2000000c
	...

080081c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80081c0:	f3ef 8009 	mrs	r0, PSP
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	4b15      	ldr	r3, [pc, #84]	; (8008220 <pxCurrentTCBConst>)
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	f01e 0f10 	tst.w	lr, #16
 80081d0:	bf08      	it	eq
 80081d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081da:	6010      	str	r0, [r2, #0]
 80081dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80081e4:	f380 8811 	msr	BASEPRI, r0
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f7fe ffc2 	bl	8007178 <vTaskSwitchContext>
 80081f4:	f04f 0000 	mov.w	r0, #0
 80081f8:	f380 8811 	msr	BASEPRI, r0
 80081fc:	bc09      	pop	{r0, r3}
 80081fe:	6819      	ldr	r1, [r3, #0]
 8008200:	6808      	ldr	r0, [r1, #0]
 8008202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008206:	f01e 0f10 	tst.w	lr, #16
 800820a:	bf08      	it	eq
 800820c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008210:	f380 8809 	msr	PSP, r0
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	f3af 8000 	nop.w

08008220 <pxCurrentTCBConst>:
 8008220:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008224:	bf00      	nop
 8008226:	bf00      	nop

08008228 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
	__asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	607b      	str	r3, [r7, #4]
}
 8008240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008242:	f7fe fedf 	bl	8007004 <xTaskIncrementTick>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d003      	beq.n	8008254 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800824c:	4b06      	ldr	r3, [pc, #24]	; (8008268 <xPortSysTickHandler+0x40>)
 800824e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	2300      	movs	r3, #0
 8008256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	f383 8811 	msr	BASEPRI, r3
}
 800825e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008260:	bf00      	nop
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	e000ed04 	.word	0xe000ed04

0800826c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800826c:	b480      	push	{r7}
 800826e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008270:	4b0b      	ldr	r3, [pc, #44]	; (80082a0 <vPortSetupTimerInterrupt+0x34>)
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008276:	4b0b      	ldr	r3, [pc, #44]	; (80082a4 <vPortSetupTimerInterrupt+0x38>)
 8008278:	2200      	movs	r2, #0
 800827a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800827c:	4b0a      	ldr	r3, [pc, #40]	; (80082a8 <vPortSetupTimerInterrupt+0x3c>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a0a      	ldr	r2, [pc, #40]	; (80082ac <vPortSetupTimerInterrupt+0x40>)
 8008282:	fba2 2303 	umull	r2, r3, r2, r3
 8008286:	099b      	lsrs	r3, r3, #6
 8008288:	4a09      	ldr	r2, [pc, #36]	; (80082b0 <vPortSetupTimerInterrupt+0x44>)
 800828a:	3b01      	subs	r3, #1
 800828c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800828e:	4b04      	ldr	r3, [pc, #16]	; (80082a0 <vPortSetupTimerInterrupt+0x34>)
 8008290:	2207      	movs	r2, #7
 8008292:	601a      	str	r2, [r3, #0]
}
 8008294:	bf00      	nop
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	e000e010 	.word	0xe000e010
 80082a4:	e000e018 	.word	0xe000e018
 80082a8:	20000000 	.word	0x20000000
 80082ac:	10624dd3 	.word	0x10624dd3
 80082b0:	e000e014 	.word	0xe000e014

080082b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80082b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80082c4 <vPortEnableVFP+0x10>
 80082b8:	6801      	ldr	r1, [r0, #0]
 80082ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80082be:	6001      	str	r1, [r0, #0]
 80082c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80082c2:	bf00      	nop
 80082c4:	e000ed88 	.word	0xe000ed88

080082c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80082ce:	f3ef 8305 	mrs	r3, IPSR
 80082d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2b0f      	cmp	r3, #15
 80082d8:	d914      	bls.n	8008304 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80082da:	4a17      	ldr	r2, [pc, #92]	; (8008338 <vPortValidateInterruptPriority+0x70>)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4413      	add	r3, r2
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082e4:	4b15      	ldr	r3, [pc, #84]	; (800833c <vPortValidateInterruptPriority+0x74>)
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	7afa      	ldrb	r2, [r7, #11]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d20a      	bcs.n	8008304 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	607b      	str	r3, [r7, #4]
}
 8008300:	bf00      	nop
 8008302:	e7fe      	b.n	8008302 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008304:	4b0e      	ldr	r3, [pc, #56]	; (8008340 <vPortValidateInterruptPriority+0x78>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800830c:	4b0d      	ldr	r3, [pc, #52]	; (8008344 <vPortValidateInterruptPriority+0x7c>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	429a      	cmp	r2, r3
 8008312:	d90a      	bls.n	800832a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008318:	f383 8811 	msr	BASEPRI, r3
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	603b      	str	r3, [r7, #0]
}
 8008326:	bf00      	nop
 8008328:	e7fe      	b.n	8008328 <vPortValidateInterruptPriority+0x60>
	}
 800832a:	bf00      	nop
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	e000e3f0 	.word	0xe000e3f0
 800833c:	20000d18 	.word	0x20000d18
 8008340:	e000ed0c 	.word	0xe000ed0c
 8008344:	20000d1c 	.word	0x20000d1c

08008348 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b08a      	sub	sp, #40	; 0x28
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008350:	2300      	movs	r3, #0
 8008352:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008354:	f7fe fd9a 	bl	8006e8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008358:	4b5b      	ldr	r3, [pc, #364]	; (80084c8 <pvPortMalloc+0x180>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d101      	bne.n	8008364 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008360:	f000 f920 	bl	80085a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008364:	4b59      	ldr	r3, [pc, #356]	; (80084cc <pvPortMalloc+0x184>)
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4013      	ands	r3, r2
 800836c:	2b00      	cmp	r3, #0
 800836e:	f040 8093 	bne.w	8008498 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d01d      	beq.n	80083b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008378:	2208      	movs	r2, #8
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4413      	add	r3, r2
 800837e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f003 0307 	and.w	r3, r3, #7
 8008386:	2b00      	cmp	r3, #0
 8008388:	d014      	beq.n	80083b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f023 0307 	bic.w	r3, r3, #7
 8008390:	3308      	adds	r3, #8
 8008392:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00a      	beq.n	80083b4 <pvPortMalloc+0x6c>
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	617b      	str	r3, [r7, #20]
}
 80083b0:	bf00      	nop
 80083b2:	e7fe      	b.n	80083b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d06e      	beq.n	8008498 <pvPortMalloc+0x150>
 80083ba:	4b45      	ldr	r3, [pc, #276]	; (80084d0 <pvPortMalloc+0x188>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d869      	bhi.n	8008498 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80083c4:	4b43      	ldr	r3, [pc, #268]	; (80084d4 <pvPortMalloc+0x18c>)
 80083c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80083c8:	4b42      	ldr	r3, [pc, #264]	; (80084d4 <pvPortMalloc+0x18c>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083ce:	e004      	b.n	80083da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d903      	bls.n	80083ec <pvPortMalloc+0xa4>
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1f1      	bne.n	80083d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083ec:	4b36      	ldr	r3, [pc, #216]	; (80084c8 <pvPortMalloc+0x180>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d050      	beq.n	8008498 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2208      	movs	r2, #8
 80083fc:	4413      	add	r3, r2
 80083fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	1ad2      	subs	r2, r2, r3
 8008410:	2308      	movs	r3, #8
 8008412:	005b      	lsls	r3, r3, #1
 8008414:	429a      	cmp	r2, r3
 8008416:	d91f      	bls.n	8008458 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4413      	add	r3, r2
 800841e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	f003 0307 	and.w	r3, r3, #7
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <pvPortMalloc+0xf8>
	__asm volatile
 800842a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	613b      	str	r3, [r7, #16]
}
 800843c:	bf00      	nop
 800843e:	e7fe      	b.n	800843e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008442:	685a      	ldr	r2, [r3, #4]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	1ad2      	subs	r2, r2, r3
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008452:	69b8      	ldr	r0, [r7, #24]
 8008454:	f000 f908 	bl	8008668 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008458:	4b1d      	ldr	r3, [pc, #116]	; (80084d0 <pvPortMalloc+0x188>)
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	4a1b      	ldr	r2, [pc, #108]	; (80084d0 <pvPortMalloc+0x188>)
 8008464:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008466:	4b1a      	ldr	r3, [pc, #104]	; (80084d0 <pvPortMalloc+0x188>)
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	4b1b      	ldr	r3, [pc, #108]	; (80084d8 <pvPortMalloc+0x190>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	429a      	cmp	r2, r3
 8008470:	d203      	bcs.n	800847a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008472:	4b17      	ldr	r3, [pc, #92]	; (80084d0 <pvPortMalloc+0x188>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a18      	ldr	r2, [pc, #96]	; (80084d8 <pvPortMalloc+0x190>)
 8008478:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	4b13      	ldr	r3, [pc, #76]	; (80084cc <pvPortMalloc+0x184>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	431a      	orrs	r2, r3
 8008484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008486:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848a:	2200      	movs	r2, #0
 800848c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800848e:	4b13      	ldr	r3, [pc, #76]	; (80084dc <pvPortMalloc+0x194>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3301      	adds	r3, #1
 8008494:	4a11      	ldr	r2, [pc, #68]	; (80084dc <pvPortMalloc+0x194>)
 8008496:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008498:	f7fe fd06 	bl	8006ea8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	f003 0307 	and.w	r3, r3, #7
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00a      	beq.n	80084bc <pvPortMalloc+0x174>
	__asm volatile
 80084a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084aa:	f383 8811 	msr	BASEPRI, r3
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	60fb      	str	r3, [r7, #12]
}
 80084b8:	bf00      	nop
 80084ba:	e7fe      	b.n	80084ba <pvPortMalloc+0x172>
	return pvReturn;
 80084bc:	69fb      	ldr	r3, [r7, #28]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3728      	adds	r7, #40	; 0x28
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	200018e0 	.word	0x200018e0
 80084cc:	200018f4 	.word	0x200018f4
 80084d0:	200018e4 	.word	0x200018e4
 80084d4:	200018d8 	.word	0x200018d8
 80084d8:	200018e8 	.word	0x200018e8
 80084dc:	200018ec 	.word	0x200018ec

080084e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d04d      	beq.n	800858e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084f2:	2308      	movs	r3, #8
 80084f4:	425b      	negs	r3, r3
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	4413      	add	r3, r2
 80084fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	4b24      	ldr	r3, [pc, #144]	; (8008598 <vPortFree+0xb8>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4013      	ands	r3, r2
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10a      	bne.n	8008524 <vPortFree+0x44>
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	60fb      	str	r3, [r7, #12]
}
 8008520:	bf00      	nop
 8008522:	e7fe      	b.n	8008522 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00a      	beq.n	8008542 <vPortFree+0x62>
	__asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	60bb      	str	r3, [r7, #8]
}
 800853e:	bf00      	nop
 8008540:	e7fe      	b.n	8008540 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	4b14      	ldr	r3, [pc, #80]	; (8008598 <vPortFree+0xb8>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4013      	ands	r3, r2
 800854c:	2b00      	cmp	r3, #0
 800854e:	d01e      	beq.n	800858e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d11a      	bne.n	800858e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	4b0e      	ldr	r3, [pc, #56]	; (8008598 <vPortFree+0xb8>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	43db      	mvns	r3, r3
 8008562:	401a      	ands	r2, r3
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008568:	f7fe fc90 	bl	8006e8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	685a      	ldr	r2, [r3, #4]
 8008570:	4b0a      	ldr	r3, [pc, #40]	; (800859c <vPortFree+0xbc>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4413      	add	r3, r2
 8008576:	4a09      	ldr	r2, [pc, #36]	; (800859c <vPortFree+0xbc>)
 8008578:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800857a:	6938      	ldr	r0, [r7, #16]
 800857c:	f000 f874 	bl	8008668 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008580:	4b07      	ldr	r3, [pc, #28]	; (80085a0 <vPortFree+0xc0>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	3301      	adds	r3, #1
 8008586:	4a06      	ldr	r2, [pc, #24]	; (80085a0 <vPortFree+0xc0>)
 8008588:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800858a:	f7fe fc8d 	bl	8006ea8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800858e:	bf00      	nop
 8008590:	3718      	adds	r7, #24
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	200018f4 	.word	0x200018f4
 800859c:	200018e4 	.word	0x200018e4
 80085a0:	200018f0 	.word	0x200018f0

080085a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80085ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80085b0:	4b27      	ldr	r3, [pc, #156]	; (8008650 <prvHeapInit+0xac>)
 80085b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f003 0307 	and.w	r3, r3, #7
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00c      	beq.n	80085d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	3307      	adds	r3, #7
 80085c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f023 0307 	bic.w	r3, r3, #7
 80085ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	4a1f      	ldr	r2, [pc, #124]	; (8008650 <prvHeapInit+0xac>)
 80085d4:	4413      	add	r3, r2
 80085d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80085dc:	4a1d      	ldr	r2, [pc, #116]	; (8008654 <prvHeapInit+0xb0>)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80085e2:	4b1c      	ldr	r3, [pc, #112]	; (8008654 <prvHeapInit+0xb0>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	4413      	add	r3, r2
 80085ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80085f0:	2208      	movs	r2, #8
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	1a9b      	subs	r3, r3, r2
 80085f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f023 0307 	bic.w	r3, r3, #7
 80085fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	4a15      	ldr	r2, [pc, #84]	; (8008658 <prvHeapInit+0xb4>)
 8008604:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008606:	4b14      	ldr	r3, [pc, #80]	; (8008658 <prvHeapInit+0xb4>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2200      	movs	r2, #0
 800860c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800860e:	4b12      	ldr	r3, [pc, #72]	; (8008658 <prvHeapInit+0xb4>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2200      	movs	r2, #0
 8008614:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	1ad2      	subs	r2, r2, r3
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008624:	4b0c      	ldr	r3, [pc, #48]	; (8008658 <prvHeapInit+0xb4>)
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	4a0a      	ldr	r2, [pc, #40]	; (800865c <prvHeapInit+0xb8>)
 8008632:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	4a09      	ldr	r2, [pc, #36]	; (8008660 <prvHeapInit+0xbc>)
 800863a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800863c:	4b09      	ldr	r3, [pc, #36]	; (8008664 <prvHeapInit+0xc0>)
 800863e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008642:	601a      	str	r2, [r3, #0]
}
 8008644:	bf00      	nop
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	20000d20 	.word	0x20000d20
 8008654:	200018d8 	.word	0x200018d8
 8008658:	200018e0 	.word	0x200018e0
 800865c:	200018e8 	.word	0x200018e8
 8008660:	200018e4 	.word	0x200018e4
 8008664:	200018f4 	.word	0x200018f4

08008668 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008670:	4b28      	ldr	r3, [pc, #160]	; (8008714 <prvInsertBlockIntoFreeList+0xac>)
 8008672:	60fb      	str	r3, [r7, #12]
 8008674:	e002      	b.n	800867c <prvInsertBlockIntoFreeList+0x14>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	60fb      	str	r3, [r7, #12]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	429a      	cmp	r2, r3
 8008684:	d8f7      	bhi.n	8008676 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	4413      	add	r3, r2
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	429a      	cmp	r2, r3
 8008696:	d108      	bne.n	80086aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	685a      	ldr	r2, [r3, #4]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	441a      	add	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	441a      	add	r2, r3
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d118      	bne.n	80086f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	4b15      	ldr	r3, [pc, #84]	; (8008718 <prvInsertBlockIntoFreeList+0xb0>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d00d      	beq.n	80086e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	685a      	ldr	r2, [r3, #4]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	441a      	add	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	e008      	b.n	80086f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80086e6:	4b0c      	ldr	r3, [pc, #48]	; (8008718 <prvInsertBlockIntoFreeList+0xb0>)
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	e003      	b.n	80086f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d002      	beq.n	8008706 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008706:	bf00      	nop
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	200018d8 	.word	0x200018d8
 8008718:	200018e0 	.word	0x200018e0

0800871c <__libc_init_array>:
 800871c:	b570      	push	{r4, r5, r6, lr}
 800871e:	4d0d      	ldr	r5, [pc, #52]	; (8008754 <__libc_init_array+0x38>)
 8008720:	4c0d      	ldr	r4, [pc, #52]	; (8008758 <__libc_init_array+0x3c>)
 8008722:	1b64      	subs	r4, r4, r5
 8008724:	10a4      	asrs	r4, r4, #2
 8008726:	2600      	movs	r6, #0
 8008728:	42a6      	cmp	r6, r4
 800872a:	d109      	bne.n	8008740 <__libc_init_array+0x24>
 800872c:	4d0b      	ldr	r5, [pc, #44]	; (800875c <__libc_init_array+0x40>)
 800872e:	4c0c      	ldr	r4, [pc, #48]	; (8008760 <__libc_init_array+0x44>)
 8008730:	f000 f842 	bl	80087b8 <_init>
 8008734:	1b64      	subs	r4, r4, r5
 8008736:	10a4      	asrs	r4, r4, #2
 8008738:	2600      	movs	r6, #0
 800873a:	42a6      	cmp	r6, r4
 800873c:	d105      	bne.n	800874a <__libc_init_array+0x2e>
 800873e:	bd70      	pop	{r4, r5, r6, pc}
 8008740:	f855 3b04 	ldr.w	r3, [r5], #4
 8008744:	4798      	blx	r3
 8008746:	3601      	adds	r6, #1
 8008748:	e7ee      	b.n	8008728 <__libc_init_array+0xc>
 800874a:	f855 3b04 	ldr.w	r3, [r5], #4
 800874e:	4798      	blx	r3
 8008750:	3601      	adds	r6, #1
 8008752:	e7f2      	b.n	800873a <__libc_init_array+0x1e>
 8008754:	08008948 	.word	0x08008948
 8008758:	08008948 	.word	0x08008948
 800875c:	08008948 	.word	0x08008948
 8008760:	0800894c 	.word	0x0800894c

08008764 <memcpy>:
 8008764:	440a      	add	r2, r1
 8008766:	4291      	cmp	r1, r2
 8008768:	f100 33ff 	add.w	r3, r0, #4294967295
 800876c:	d100      	bne.n	8008770 <memcpy+0xc>
 800876e:	4770      	bx	lr
 8008770:	b510      	push	{r4, lr}
 8008772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008776:	f803 4f01 	strb.w	r4, [r3, #1]!
 800877a:	4291      	cmp	r1, r2
 800877c:	d1f9      	bne.n	8008772 <memcpy+0xe>
 800877e:	bd10      	pop	{r4, pc}

08008780 <memset>:
 8008780:	4402      	add	r2, r0
 8008782:	4603      	mov	r3, r0
 8008784:	4293      	cmp	r3, r2
 8008786:	d100      	bne.n	800878a <memset+0xa>
 8008788:	4770      	bx	lr
 800878a:	f803 1b01 	strb.w	r1, [r3], #1
 800878e:	e7f9      	b.n	8008784 <memset+0x4>

08008790 <strncat>:
 8008790:	b530      	push	{r4, r5, lr}
 8008792:	4604      	mov	r4, r0
 8008794:	7825      	ldrb	r5, [r4, #0]
 8008796:	4623      	mov	r3, r4
 8008798:	3401      	adds	r4, #1
 800879a:	2d00      	cmp	r5, #0
 800879c:	d1fa      	bne.n	8008794 <strncat+0x4>
 800879e:	3a01      	subs	r2, #1
 80087a0:	d304      	bcc.n	80087ac <strncat+0x1c>
 80087a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087a6:	f803 4b01 	strb.w	r4, [r3], #1
 80087aa:	b904      	cbnz	r4, 80087ae <strncat+0x1e>
 80087ac:	bd30      	pop	{r4, r5, pc}
 80087ae:	2a00      	cmp	r2, #0
 80087b0:	d1f5      	bne.n	800879e <strncat+0xe>
 80087b2:	701a      	strb	r2, [r3, #0]
 80087b4:	e7f3      	b.n	800879e <strncat+0xe>
	...

080087b8 <_init>:
 80087b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ba:	bf00      	nop
 80087bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087be:	bc08      	pop	{r3}
 80087c0:	469e      	mov	lr, r3
 80087c2:	4770      	bx	lr

080087c4 <_fini>:
 80087c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c6:	bf00      	nop
 80087c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ca:	bc08      	pop	{r3}
 80087cc:	469e      	mov	lr, r3
 80087ce:	4770      	bx	lr
