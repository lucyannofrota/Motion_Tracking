
miniprojetoSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f650  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  0800f810  0800f810  0001f810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe7c  0800fe7c  00020314  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe7c  0800fe7c  0001fe7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe84  0800fe84  00020314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe84  0800fe84  0001fe84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe88  0800fe88  0001fe88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000314  20000000  0800fe8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf8  20000314  080101a0  00020314  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f0c  080101a0  00021f0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY
 12 .debug_info   000292dc  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004aca  00000000  00000000  00049620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e10  00000000  00000000  0004e0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c48  00000000  00000000  0004ff00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008573  00000000  00000000  00051b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020e61  00000000  00000000  0005a0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011837c  00000000  00000000  0007af1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00193298  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009474  00000000  00000000  001932ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000314 	.word	0x20000314
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800f7f8 	.word	0x0800f7f8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000318 	.word	0x20000318
 80001fc:	0800f7f8 	.word	0x0800f7f8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800101c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001020:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8001024:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001026:	f001 fcec 	bl	8002a02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102a:	f000 f8d5 	bl	80011d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102e:	f000 fa57 	bl	80014e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001032:	f000 fa2b 	bl	800148c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001036:	f000 f98b 	bl	8001350 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 800103a:	f000 f9d5 	bl	80013e8 <MX_UART4_Init>
  MX_I2C1_Init();
 800103e:	f000 f947 	bl	80012d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA (&hlpuart1, SR_BUFFER, BUFFER_LEN);
 8001042:	2201      	movs	r2, #1
 8001044:	494d      	ldr	r1, [pc, #308]	; (800117c <main+0x160>)
 8001046:	484e      	ldr	r0, [pc, #312]	; (8001180 <main+0x164>)
 8001048:	f005 f9ec 	bl	8006424 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart4, BT_BUFFER, BUFFER_LEN);
 800104c:	2201      	movs	r2, #1
 800104e:	494d      	ldr	r1, [pc, #308]	; (8001184 <main+0x168>)
 8001050:	484d      	ldr	r0, [pc, #308]	; (8001188 <main+0x16c>)
 8001052:	f005 f9a1 	bl	8006398 <HAL_UART_Receive_IT>


  if (TM_MPU6050_Init(&MPU6050, TM_MPU6050_Device_0, TM_MPU6050_Accelerometer_8G, TM_MPU6050_Gyroscope_250s) == TM_MPU6050_Result_Ok) {
 8001056:	2300      	movs	r3, #0
 8001058:	2202      	movs	r2, #2
 800105a:	2100      	movs	r1, #0
 800105c:	484b      	ldr	r0, [pc, #300]	; (800118c <main+0x170>)
 800105e:	f001 fb0d 	bl	800267c <TM_MPU6050_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d104      	bne.n	8001072 <main+0x56>
  		HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	4848      	ldr	r0, [pc, #288]	; (8001190 <main+0x174>)
 800106e:	f002 faa3 	bl	80035b8 <HAL_GPIO_WritePin>
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001072:	f006 ffbb 	bl	8007fec <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of SR_Queue */
  SR_QueueHandle = osMessageQueueNew (64, 1, &SR_Queue_attributes);
 8001076:	4a47      	ldr	r2, [pc, #284]	; (8001194 <main+0x178>)
 8001078:	2101      	movs	r1, #1
 800107a:	2040      	movs	r0, #64	; 0x40
 800107c:	f007 f8ad 	bl	80081da <osMessageQueueNew>
 8001080:	4603      	mov	r3, r0
 8001082:	4a45      	ldr	r2, [pc, #276]	; (8001198 <main+0x17c>)
 8001084:	6013      	str	r3, [r2, #0]

  /* creation of BT_Queue */
  BT_QueueHandle = osMessageQueueNew (64, 1, &BT_Queue_attributes);
 8001086:	4a45      	ldr	r2, [pc, #276]	; (800119c <main+0x180>)
 8001088:	2101      	movs	r1, #1
 800108a:	2040      	movs	r0, #64	; 0x40
 800108c:	f007 f8a5 	bl	80081da <osMessageQueueNew>
 8001090:	4603      	mov	r3, r0
 8001092:	4a43      	ldr	r2, [pc, #268]	; (80011a0 <main+0x184>)
 8001094:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TransmitTask_Se */
  TransmitTask_SeHandle = osThreadNew(StartTransmitTask_Serial, NULL, &TransmitTask_Se_attributes);
 8001096:	4a43      	ldr	r2, [pc, #268]	; (80011a4 <main+0x188>)
 8001098:	2100      	movs	r1, #0
 800109a:	4843      	ldr	r0, [pc, #268]	; (80011a8 <main+0x18c>)
 800109c:	f006 fff0 	bl	8008080 <osThreadNew>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4a42      	ldr	r2, [pc, #264]	; (80011ac <main+0x190>)
 80010a4:	6013      	str	r3, [r2, #0]

  /* creation of TransmitTask_BT */
  TransmitTask_BTHandle = osThreadNew(StartTransmitTask_BT, NULL, &TransmitTask_BT_attributes);
 80010a6:	4a42      	ldr	r2, [pc, #264]	; (80011b0 <main+0x194>)
 80010a8:	2100      	movs	r1, #0
 80010aa:	4842      	ldr	r0, [pc, #264]	; (80011b4 <main+0x198>)
 80010ac:	f006 ffe8 	bl	8008080 <osThreadNew>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a41      	ldr	r2, [pc, #260]	; (80011b8 <main+0x19c>)
 80010b4:	6013      	str	r3, [r2, #0]

  /* creation of PingTask */
  PingTaskHandle = osThreadNew(StartPingTask, NULL, &PingTask_attributes);
 80010b6:	4a41      	ldr	r2, [pc, #260]	; (80011bc <main+0x1a0>)
 80010b8:	2100      	movs	r1, #0
 80010ba:	4841      	ldr	r0, [pc, #260]	; (80011c0 <main+0x1a4>)
 80010bc:	f006 ffe0 	bl	8008080 <osThreadNew>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4a40      	ldr	r2, [pc, #256]	; (80011c4 <main+0x1a8>)
 80010c4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010c6:	f006 ffb5 	bl	8008034 <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(read == 1){
 80010ca:	4b3f      	ldr	r3, [pc, #252]	; (80011c8 <main+0x1ac>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d1fb      	bne.n	80010ca <main+0xae>
		  read = 0;
 80010d2:	4b3d      	ldr	r3, [pc, #244]	; (80011c8 <main+0x1ac>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
		  TM_MPU6050_ReadInterrupts(&MPU6050, &MPU6050_Interrupts);
 80010d8:	493c      	ldr	r1, [pc, #240]	; (80011cc <main+0x1b0>)
 80010da:	482c      	ldr	r0, [pc, #176]	; (800118c <main+0x170>)
 80010dc:	f001 fbdc 	bl	8002898 <TM_MPU6050_ReadInterrupts>

		  if(MPU6050_Interrupts.F.MotionDetection == 1){
 80010e0:	4b3a      	ldr	r3, [pc, #232]	; (80011cc <main+0x1b0>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d005      	beq.n	80010fa <main+0xde>
			  HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin, GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010f4:	4836      	ldr	r0, [pc, #216]	; (80011d0 <main+0x1b4>)
 80010f6:	f002 fa5f 	bl	80035b8 <HAL_GPIO_WritePin>
		  }
		  if(MPU6050_Interrupts.F.DataReady == 1){
 80010fa:	4b34      	ldr	r3, [pc, #208]	; (80011cc <main+0x1b0>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0e0      	beq.n	80010ca <main+0xae>
			  TM_MPU6050_ReadAll(&MPU6050);
 8001108:	4820      	ldr	r0, [pc, #128]	; (800118c <main+0x170>)
 800110a:	f001 fbe9 	bl	80028e0 <TM_MPU6050_ReadAll>
			  char msg[500];
			  sprintf(msg,"\rAccX: %hu, AccY: %hu, AccZ: %hu\n GyrX: %hu, GyrY: %hu, GyrZ:%hu\n Temp: %f\n ",MPU6050.Accelerometer_X,MPU6050.Accelerometer_Y,MPU6050.Accelerometer_Z,MPU6050.Gyroscope_X,MPU6050.Gyroscope_Y,MPU6050.Gyroscope_Z, MPU6050.Temperature);
 800110e:	4b1f      	ldr	r3, [pc, #124]	; (800118c <main+0x170>)
 8001110:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001114:	4698      	mov	r8, r3
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <main+0x170>)
 8001118:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800111c:	4699      	mov	r9, r3
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <main+0x170>)
 8001120:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001124:	461c      	mov	r4, r3
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <main+0x170>)
 8001128:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800112c:	461d      	mov	r5, r3
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <main+0x170>)
 8001130:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001134:	461e      	mov	r6, r3
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <main+0x170>)
 8001138:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <main+0x170>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fa18 	bl	8000578 <__aeabi_f2d>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	f107 000c 	add.w	r0, r7, #12
 8001150:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	9303      	str	r3, [sp, #12]
 8001158:	9602      	str	r6, [sp, #8]
 800115a:	9501      	str	r5, [sp, #4]
 800115c:	9400      	str	r4, [sp, #0]
 800115e:	464b      	mov	r3, r9
 8001160:	4642      	mov	r2, r8
 8001162:	491c      	ldr	r1, [pc, #112]	; (80011d4 <main+0x1b8>)
 8001164:	f00a fd9a 	bl	800bc9c <siprintf>
			  HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg, sizeof(msg), 100);
 8001168:	f107 010c 	add.w	r1, r7, #12
 800116c:	2364      	movs	r3, #100	; 0x64
 800116e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001172:	4803      	ldr	r0, [pc, #12]	; (8001180 <main+0x164>)
 8001174:	f005 f878 	bl	8006268 <HAL_UART_Transmit>
	  if(read == 1){
 8001178:	e7a7      	b.n	80010ca <main+0xae>
 800117a:	bf00      	nop
 800117c:	20000330 	.word	0x20000330
 8001180:	20001c9c 	.word	0x20001c9c
 8001184:	20001d2c 	.word	0x20001d2c
 8001188:	20001d98 	.word	0x20001d98
 800118c:	20001c7c 	.word	0x20001c7c
 8001190:	48000800 	.word	0x48000800
 8001194:	0800f928 	.word	0x0800f928
 8001198:	20001d94 	.word	0x20001d94
 800119c:	0800f940 	.word	0x0800f940
 80011a0:	20001d90 	.word	0x20001d90
 80011a4:	0800f8bc 	.word	0x0800f8bc
 80011a8:	08001659 	.word	0x08001659
 80011ac:	20001c28 	.word	0x20001c28
 80011b0:	0800f8e0 	.word	0x0800f8e0
 80011b4:	080016f5 	.word	0x080016f5
 80011b8:	20001c24 	.word	0x20001c24
 80011bc:	0800f904 	.word	0x0800f904
 80011c0:	08001791 	.word	0x08001791
 80011c4:	20001c2c 	.word	0x20001c2c
 80011c8:	20000331 	.word	0x20000331
 80011cc:	20001c98 	.word	0x20001c98
 80011d0:	48000400 	.word	0x48000400
 80011d4:	0800f854 	.word	0x0800f854

080011d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b0bc      	sub	sp, #240	; 0xf0
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011e2:	2244      	movs	r2, #68	; 0x44
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f009 fed0 	bl	800af8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2294      	movs	r2, #148	; 0x94
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f009 fec2 	bl	800af8c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001208:	f44f 7000 	mov.w	r0, #512	; 0x200
 800120c:	f003 f834 	bl	8004278 <HAL_PWREx_ControlVoltageScaling>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0x42>
  {
    Error_Handler();
 8001216:	f000 fad7 	bl	80017c8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800121a:	2310      	movs	r3, #16
 800121c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001220:	2301      	movs	r3, #1
 8001222:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800122c:	2360      	movs	r3, #96	; 0x60
 800122e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001232:	2302      	movs	r3, #2
 8001234:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001238:	2301      	movs	r3, #1
 800123a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800123e:	2301      	movs	r3, #1
 8001240:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001244:	2320      	movs	r3, #32
 8001246:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800124a:	2302      	movs	r3, #2
 800124c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001250:	2302      	movs	r3, #2
 8001252:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001256:	2302      	movs	r3, #2
 8001258:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001260:	4618      	mov	r0, r3
 8001262:	f003 f8bd 	bl	80043e0 <HAL_RCC_OscConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800126c:	f000 faac 	bl	80017c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001270:	230f      	movs	r3, #15
 8001272:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001276:	2303      	movs	r3, #3
 8001278:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800128e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001292:	2103      	movs	r1, #3
 8001294:	4618      	mov	r0, r3
 8001296:	f003 fcc9 	bl	8004c2c <HAL_RCC_ClockConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80012a0:	f000 fa92 	bl	80017c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_LPUART1
 80012a4:	2368      	movs	r3, #104	; 0x68
 80012a6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	4618      	mov	r0, r3
 80012b8:	f003 ff9c 	bl	80051f4 <HAL_RCCEx_PeriphCLKConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80012c2:	f000 fa81 	bl	80017c8 <Error_Handler>
  }
}
 80012c6:	bf00      	nop
 80012c8:	37f0      	adds	r7, #240	; 0xf0
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <MX_I2C1_Init+0x74>)
 80012d6:	4a1c      	ldr	r2, [pc, #112]	; (8001348 <MX_I2C1_Init+0x78>)
 80012d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80012da:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_I2C1_Init+0x74>)
 80012dc:	4a1b      	ldr	r2, [pc, #108]	; (800134c <MX_I2C1_Init+0x7c>)
 80012de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012e0:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_I2C1_Init+0x74>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <MX_I2C1_Init+0x74>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ec:	4b15      	ldr	r3, [pc, #84]	; (8001344 <MX_I2C1_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <MX_I2C1_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MX_I2C1_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_I2C1_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <MX_I2C1_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800130a:	480e      	ldr	r0, [pc, #56]	; (8001344 <MX_I2C1_Init+0x74>)
 800130c:	f002 f98f 	bl	800362e <HAL_I2C_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001316:	f000 fa57 	bl	80017c8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800131a:	2100      	movs	r1, #0
 800131c:	4809      	ldr	r0, [pc, #36]	; (8001344 <MX_I2C1_Init+0x74>)
 800131e:	f002 fef3 	bl	8004108 <HAL_I2CEx_ConfigAnalogFilter>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001328:	f000 fa4e 	bl	80017c8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800132c:	2100      	movs	r1, #0
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_I2C1_Init+0x74>)
 8001330:	f002 ff35 	bl	800419e <HAL_I2CEx_ConfigDigitalFilter>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800133a:	f000 fa45 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20001c30 	.word	0x20001c30
 8001348:	40005400 	.word	0x40005400
 800134c:	10707dbc 	.word	0x10707dbc

08001350 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001354:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <MX_LPUART1_UART_Init+0x90>)
 8001356:	4a23      	ldr	r2, [pc, #140]	; (80013e4 <MX_LPUART1_UART_Init+0x94>)
 8001358:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800135a:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <MX_LPUART1_UART_Init+0x90>)
 800135c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001360:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001362:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <MX_LPUART1_UART_Init+0x90>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001368:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <MX_LPUART1_UART_Init+0x90>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <MX_LPUART1_UART_Init+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <MX_LPUART1_UART_Init+0x90>)
 8001376:	220c      	movs	r2, #12
 8001378:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <MX_LPUART1_UART_Init+0x90>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <MX_LPUART1_UART_Init+0x90>)
 8001382:	2200      	movs	r2, #0
 8001384:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <MX_LPUART1_UART_Init+0x90>)
 8001388:	2200      	movs	r2, #0
 800138a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <MX_LPUART1_UART_Init+0x90>)
 800138e:	2200      	movs	r2, #0
 8001390:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <MX_LPUART1_UART_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001398:	4811      	ldr	r0, [pc, #68]	; (80013e0 <MX_LPUART1_UART_Init+0x90>)
 800139a:	f004 ff15 	bl	80061c8 <HAL_UART_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80013a4:	f000 fa10 	bl	80017c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a8:	2100      	movs	r1, #0
 80013aa:	480d      	ldr	r0, [pc, #52]	; (80013e0 <MX_LPUART1_UART_Init+0x90>)
 80013ac:	f006 fd10 	bl	8007dd0 <HAL_UARTEx_SetTxFifoThreshold>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013b6:	f000 fa07 	bl	80017c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ba:	2100      	movs	r1, #0
 80013bc:	4808      	ldr	r0, [pc, #32]	; (80013e0 <MX_LPUART1_UART_Init+0x90>)
 80013be:	f006 fd45 	bl	8007e4c <HAL_UARTEx_SetRxFifoThreshold>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013c8:	f000 f9fe 	bl	80017c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <MX_LPUART1_UART_Init+0x90>)
 80013ce:	f006 fcc6 	bl	8007d5e <HAL_UARTEx_DisableFifoMode>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013d8:	f000 f9f6 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20001c9c 	.word	0x20001c9c
 80013e4:	40008000 	.word	0x40008000

080013e8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80013ec:	4b25      	ldr	r3, [pc, #148]	; (8001484 <MX_UART4_Init+0x9c>)
 80013ee:	4a26      	ldr	r2, [pc, #152]	; (8001488 <MX_UART4_Init+0xa0>)
 80013f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 80013f2:	4b24      	ldr	r3, [pc, #144]	; (8001484 <MX_UART4_Init+0x9c>)
 80013f4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80013f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80013fa:	4b22      	ldr	r3, [pc, #136]	; (8001484 <MX_UART4_Init+0x9c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001400:	4b20      	ldr	r3, [pc, #128]	; (8001484 <MX_UART4_Init+0x9c>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001406:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <MX_UART4_Init+0x9c>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <MX_UART4_Init+0x9c>)
 800140e:	220c      	movs	r2, #12
 8001410:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <MX_UART4_Init+0x9c>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001418:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_UART4_Init+0x9c>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800141e:	4b19      	ldr	r3, [pc, #100]	; (8001484 <MX_UART4_Init+0x9c>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001424:	4b17      	ldr	r3, [pc, #92]	; (8001484 <MX_UART4_Init+0x9c>)
 8001426:	2200      	movs	r2, #0
 8001428:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <MX_UART4_Init+0x9c>)
 800142c:	2200      	movs	r2, #0
 800142e:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.FifoMode = UART_FIFOMODE_DISABLE;
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_UART4_Init+0x9c>)
 8001432:	2200      	movs	r2, #0
 8001434:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001436:	2300      	movs	r3, #0
 8001438:	2200      	movs	r2, #0
 800143a:	2100      	movs	r1, #0
 800143c:	4811      	ldr	r0, [pc, #68]	; (8001484 <MX_UART4_Init+0x9c>)
 800143e:	f006 fc07 	bl	8007c50 <HAL_RS485Ex_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_UART4_Init+0x64>
  {
    Error_Handler();
 8001448:	f000 f9be 	bl	80017c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800144c:	2100      	movs	r1, #0
 800144e:	480d      	ldr	r0, [pc, #52]	; (8001484 <MX_UART4_Init+0x9c>)
 8001450:	f006 fcbe 	bl	8007dd0 <HAL_UARTEx_SetTxFifoThreshold>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_UART4_Init+0x76>
  {
    Error_Handler();
 800145a:	f000 f9b5 	bl	80017c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800145e:	2100      	movs	r1, #0
 8001460:	4808      	ldr	r0, [pc, #32]	; (8001484 <MX_UART4_Init+0x9c>)
 8001462:	f006 fcf3 	bl	8007e4c <HAL_UARTEx_SetRxFifoThreshold>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_UART4_Init+0x88>
  {
    Error_Handler();
 800146c:	f000 f9ac 	bl	80017c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_UART4_Init+0x9c>)
 8001472:	f006 fc74 	bl	8007d5e <HAL_UARTEx_DisableFifoMode>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_UART4_Init+0x98>
  {
    Error_Handler();
 800147c:	f000 f9a4 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20001d98 	.word	0x20001d98
 8001488:	40004c00 	.word	0x40004c00

0800148c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <MX_DMA_Init+0x50>)
 8001494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001496:	4a11      	ldr	r2, [pc, #68]	; (80014dc <MX_DMA_Init+0x50>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6493      	str	r3, [r2, #72]	; 0x48
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <MX_DMA_Init+0x50>)
 80014a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MX_DMA_Init+0x50>)
 80014ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ae:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <MX_DMA_Init+0x50>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6493      	str	r3, [r2, #72]	; 0x48
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_DMA_Init+0x50>)
 80014b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2105      	movs	r1, #5
 80014c6:	200f      	movs	r0, #15
 80014c8:	f001 fb8c 	bl	8002be4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80014cc:	200f      	movs	r0, #15
 80014ce:	f001 fba5 	bl	8002c1c <HAL_NVIC_EnableIRQ>

}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40021000 	.word	0x40021000

080014e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	4b39      	ldr	r3, [pc, #228]	; (80015dc <MX_GPIO_Init+0xfc>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	4a38      	ldr	r2, [pc, #224]	; (80015dc <MX_GPIO_Init+0xfc>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001502:	4b36      	ldr	r3, [pc, #216]	; (80015dc <MX_GPIO_Init+0xfc>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800150e:	4b33      	ldr	r3, [pc, #204]	; (80015dc <MX_GPIO_Init+0xfc>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a32      	ldr	r2, [pc, #200]	; (80015dc <MX_GPIO_Init+0xfc>)
 8001514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b30      	ldr	r3, [pc, #192]	; (80015dc <MX_GPIO_Init+0xfc>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8001526:	f002 ff4b 	bl	80043c0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152a:	4b2c      	ldr	r3, [pc, #176]	; (80015dc <MX_GPIO_Init+0xfc>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	4a2b      	ldr	r2, [pc, #172]	; (80015dc <MX_GPIO_Init+0xfc>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001536:	4b29      	ldr	r3, [pc, #164]	; (80015dc <MX_GPIO_Init+0xfc>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	4b26      	ldr	r3, [pc, #152]	; (80015dc <MX_GPIO_Init+0xfc>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	4a25      	ldr	r2, [pc, #148]	; (80015dc <MX_GPIO_Init+0xfc>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154e:	4b23      	ldr	r3, [pc, #140]	; (80015dc <MX_GPIO_Init+0xfc>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001560:	481f      	ldr	r0, [pc, #124]	; (80015e0 <MX_GPIO_Init+0x100>)
 8001562:	f002 f829 	bl	80035b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	481e      	ldr	r0, [pc, #120]	; (80015e4 <MX_GPIO_Init+0x104>)
 800156c:	f002 f824 	bl	80035b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : redLED_Pin */
  GPIO_InitStruct.Pin = redLED_Pin;
 8001570:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001576:	2301      	movs	r3, #1
 8001578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(redLED_GPIO_Port, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	4815      	ldr	r0, [pc, #84]	; (80015e0 <MX_GPIO_Init+0x100>)
 800158a:	f001 fe83 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800158e:	2340      	movs	r3, #64	; 0x40
 8001590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <MX_GPIO_Init+0x108>)
 8001594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	4810      	ldr	r0, [pc, #64]	; (80015e4 <MX_GPIO_Init+0x104>)
 80015a2:	f001 fe77 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : greenLED_Pin */
  GPIO_InitStruct.Pin = greenLED_Pin;
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015aa:	2301      	movs	r3, #1
 80015ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(greenLED_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	4809      	ldr	r0, [pc, #36]	; (80015e4 <MX_GPIO_Init+0x104>)
 80015be:	f001 fe69 	bl	8003294 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2105      	movs	r1, #5
 80015c6:	2017      	movs	r0, #23
 80015c8:	f001 fb0c 	bl	8002be4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015cc:	2017      	movs	r0, #23
 80015ce:	f001 fb25 	bl	8002c1c <HAL_NVIC_EnableIRQ>

}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	; 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000
 80015e0:	48000400 	.word	0x48000400
 80015e4:	48000800 	.word	0x48000800
 80015e8:	10110000 	.word	0x10110000

080015ec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1){
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a12      	ldr	r2, [pc, #72]	; (8001640 <HAL_UART_RxCpltCallback+0x54>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d10b      	bne.n	8001614 <HAL_UART_RxCpltCallback+0x28>
		osMessageQueuePut(SR_QueueHandle, SR_BUFFER, 0, 0);
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_UART_RxCpltCallback+0x58>)
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	2300      	movs	r3, #0
 8001602:	2200      	movs	r2, #0
 8001604:	4910      	ldr	r1, [pc, #64]	; (8001648 <HAL_UART_RxCpltCallback+0x5c>)
 8001606:	f006 fe5b 	bl	80082c0 <osMessageQueuePut>
		HAL_UART_Receive_DMA(&hlpuart1, SR_BUFFER, BUFFER_LEN);
 800160a:	2201      	movs	r2, #1
 800160c:	490e      	ldr	r1, [pc, #56]	; (8001648 <HAL_UART_RxCpltCallback+0x5c>)
 800160e:	480c      	ldr	r0, [pc, #48]	; (8001640 <HAL_UART_RxCpltCallback+0x54>)
 8001610:	f004 ff08 	bl	8006424 <HAL_UART_Receive_DMA>
	}
	if(huart->Instance == huart4.Instance){
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_UART_RxCpltCallback+0x60>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	429a      	cmp	r2, r3
 800161e:	d10b      	bne.n	8001638 <HAL_UART_RxCpltCallback+0x4c>
		osMessageQueuePut(BT_QueueHandle, BT_BUFFER, 0, 0);
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_UART_RxCpltCallback+0x64>)
 8001622:	6818      	ldr	r0, [r3, #0]
 8001624:	2300      	movs	r3, #0
 8001626:	2200      	movs	r2, #0
 8001628:	490a      	ldr	r1, [pc, #40]	; (8001654 <HAL_UART_RxCpltCallback+0x68>)
 800162a:	f006 fe49 	bl	80082c0 <osMessageQueuePut>
		HAL_UART_Receive_IT(&huart4, BT_BUFFER, BUFFER_LEN);
 800162e:	2201      	movs	r2, #1
 8001630:	4908      	ldr	r1, [pc, #32]	; (8001654 <HAL_UART_RxCpltCallback+0x68>)
 8001632:	4806      	ldr	r0, [pc, #24]	; (800164c <HAL_UART_RxCpltCallback+0x60>)
 8001634:	f004 feb0 	bl	8006398 <HAL_UART_Receive_IT>
	}
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20001c9c 	.word	0x20001c9c
 8001644:	20001d94 	.word	0x20001d94
 8001648:	20000330 	.word	0x20000330
 800164c:	20001d98 	.word	0x20001d98
 8001650:	20001d90 	.word	0x20001d90
 8001654:	20001d2c 	.word	0x20001d2c

08001658 <StartTransmitTask_Serial>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTransmitTask_Serial */
void StartTransmitTask_Serial(void *argument)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b096      	sub	sp, #88	; 0x58
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	char msg_sr[64];
	uint16_t count_sr = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	char c[1];

  /* Infinite loop */
	for(;;)
	{
		memset(msg_sr,0,64);
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	2240      	movs	r2, #64	; 0x40
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f009 fc8c 	bl	800af8c <memset>
		count_sr = osMessageQueueGetCount(SR_QueueHandle);
 8001674:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <StartTransmitTask_Serial+0x90>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f006 fedf 	bl	800843c <osMessageQueueGetCount>
 800167e:	4603      	mov	r3, r0
 8001680:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		if(count_sr > 0){
 8001684:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001688:	2b00      	cmp	r3, #0
 800168a:	d028      	beq.n	80016de <StartTransmitTask_Serial+0x86>
			for (int i = 0; i < count_sr; i++) {
 800168c:	2300      	movs	r3, #0
 800168e:	657b      	str	r3, [r7, #84]	; 0x54
 8001690:	e012      	b.n	80016b8 <StartTransmitTask_Serial+0x60>
				osMessageQueueGet(SR_QueueHandle, c, 0, 100);
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <StartTransmitTask_Serial+0x90>)
 8001694:	6818      	ldr	r0, [r3, #0]
 8001696:	f107 010c 	add.w	r1, r7, #12
 800169a:	2364      	movs	r3, #100	; 0x64
 800169c:	2200      	movs	r2, #0
 800169e:	f006 fe6f 	bl	8008380 <osMessageQueueGet>
				strncat(msg_sr, c, 1);
 80016a2:	f107 010c 	add.w	r1, r7, #12
 80016a6:	f107 0310 	add.w	r3, r7, #16
 80016aa:	2201      	movs	r2, #1
 80016ac:	4618      	mov	r0, r3
 80016ae:	f00a fb15 	bl	800bcdc <strncat>
			for (int i = 0; i < count_sr; i++) {
 80016b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b4:	3301      	adds	r3, #1
 80016b6:	657b      	str	r3, [r7, #84]	; 0x54
 80016b8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80016bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80016be:	429a      	cmp	r2, r3
 80016c0:	dbe7      	blt.n	8001692 <StartTransmitTask_Serial+0x3a>
			}
			HAL_UART_Transmit(&huart4, (uint8_t *)msg_sr, sizeof(msg_sr), 100);
 80016c2:	f107 0110 	add.w	r1, r7, #16
 80016c6:	2364      	movs	r3, #100	; 0x64
 80016c8:	2240      	movs	r2, #64	; 0x40
 80016ca:	4808      	ldr	r0, [pc, #32]	; (80016ec <StartTransmitTask_Serial+0x94>)
 80016cc:	f004 fdcc 	bl	8006268 <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg_sr, sizeof(msg_sr), 100);
 80016d0:	f107 0110 	add.w	r1, r7, #16
 80016d4:	2364      	movs	r3, #100	; 0x64
 80016d6:	2240      	movs	r2, #64	; 0x40
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <StartTransmitTask_Serial+0x98>)
 80016da:	f004 fdc5 	bl	8006268 <HAL_UART_Transmit>
		}
		osDelay(100);
 80016de:	2064      	movs	r0, #100	; 0x64
 80016e0:	f006 fd60 	bl	80081a4 <osDelay>
		memset(msg_sr,0,64);
 80016e4:	e7bf      	b.n	8001666 <StartTransmitTask_Serial+0xe>
 80016e6:	bf00      	nop
 80016e8:	20001d94 	.word	0x20001d94
 80016ec:	20001d98 	.word	0x20001d98
 80016f0:	20001c9c 	.word	0x20001c9c

080016f4 <StartTransmitTask_BT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTransmitTask_BT */
void StartTransmitTask_BT(void *argument)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b096      	sub	sp, #88	; 0x58
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTransmitTask_BT */

	char msg_bt[64];
	uint16_t count_bt = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	char b[1];
  /* Infinite loop */
	for(;;)
	{
		memset(msg_bt,0,64);
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	2240      	movs	r2, #64	; 0x40
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f009 fc3e 	bl	800af8c <memset>
		count_bt = osMessageQueueGetCount(BT_QueueHandle);
 8001710:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <StartTransmitTask_BT+0x90>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f006 fe91 	bl	800843c <osMessageQueueGetCount>
 800171a:	4603      	mov	r3, r0
 800171c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		if(count_bt > 0){
 8001720:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001724:	2b00      	cmp	r3, #0
 8001726:	d028      	beq.n	800177a <StartTransmitTask_BT+0x86>
			for (int j = 0; j < count_bt; j++) {
 8001728:	2300      	movs	r3, #0
 800172a:	657b      	str	r3, [r7, #84]	; 0x54
 800172c:	e012      	b.n	8001754 <StartTransmitTask_BT+0x60>
				osMessageQueueGet(BT_QueueHandle, b, 0, 100);
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <StartTransmitTask_BT+0x90>)
 8001730:	6818      	ldr	r0, [r3, #0]
 8001732:	f107 010c 	add.w	r1, r7, #12
 8001736:	2364      	movs	r3, #100	; 0x64
 8001738:	2200      	movs	r2, #0
 800173a:	f006 fe21 	bl	8008380 <osMessageQueueGet>
				strncat(msg_bt,b,1);
 800173e:	f107 010c 	add.w	r1, r7, #12
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	2201      	movs	r2, #1
 8001748:	4618      	mov	r0, r3
 800174a:	f00a fac7 	bl	800bcdc <strncat>
			for (int j = 0; j < count_bt; j++) {
 800174e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001750:	3301      	adds	r3, #1
 8001752:	657b      	str	r3, [r7, #84]	; 0x54
 8001754:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001758:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800175a:	429a      	cmp	r2, r3
 800175c:	dbe7      	blt.n	800172e <StartTransmitTask_BT+0x3a>
			}
			HAL_UART_Transmit(&huart4, (uint8_t *)msg_bt, sizeof(msg_bt), 100);
 800175e:	f107 0110 	add.w	r1, r7, #16
 8001762:	2364      	movs	r3, #100	; 0x64
 8001764:	2240      	movs	r2, #64	; 0x40
 8001766:	4808      	ldr	r0, [pc, #32]	; (8001788 <StartTransmitTask_BT+0x94>)
 8001768:	f004 fd7e 	bl	8006268 <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg_bt, sizeof(msg_bt), 100);
 800176c:	f107 0110 	add.w	r1, r7, #16
 8001770:	2364      	movs	r3, #100	; 0x64
 8001772:	2240      	movs	r2, #64	; 0x40
 8001774:	4805      	ldr	r0, [pc, #20]	; (800178c <StartTransmitTask_BT+0x98>)
 8001776:	f004 fd77 	bl	8006268 <HAL_UART_Transmit>
		}
		osDelay(100);
 800177a:	2064      	movs	r0, #100	; 0x64
 800177c:	f006 fd12 	bl	80081a4 <osDelay>
		memset(msg_bt,0,64);
 8001780:	e7bf      	b.n	8001702 <StartTransmitTask_BT+0xe>
 8001782:	bf00      	nop
 8001784:	20001d90 	.word	0x20001d90
 8001788:	20001d98 	.word	0x20001d98
 800178c:	20001c9c 	.word	0x20001c9c

08001790 <StartPingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPingTask */
void StartPingTask(void *argument)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
		  default:
			  i = 0;
			  //j = 0;
	  }
	  HAL_UART_Transmit(&huart4, (uint8_t *)msg, 7, 100);*/
	  sendPose();
 8001798:	f000 f8a2 	bl	80018e0 <sendPose>
	  osDelay(150);
 800179c:	2096      	movs	r0, #150	; 0x96
 800179e:	f006 fd01 	bl	80081a4 <osDelay>
	  sendPose();
 80017a2:	e7f9      	b.n	8001798 <StartPingTask+0x8>

080017a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d101      	bne.n	80017ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017b6:	f001 f93d 	bl	8002a34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40001000 	.word	0x40001000

080017c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017cc:	b672      	cpsid	i
}
 80017ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <Error_Handler+0x8>
	...

080017d4 <reset>:
uint8_t   msgStr[64];

extern UART_HandleTypeDef hlpuart1;
extern UART_HandleTypeDef huart4;

void reset(){
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
	//msgStr[0] = 0x06;
	msgStr[0] = 0x7B;
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <reset+0x1c>)
 80017da:	227b      	movs	r2, #123	; 0x7b
 80017dc:	701a      	strb	r2, [r3, #0]
	pointer = &msgStr[1];
 80017de:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <reset+0x20>)
 80017e0:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <reset+0x24>)
 80017e2:	601a      	str	r2, [r3, #0]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20001e28 	.word	0x20001e28
 80017f4:	20001e68 	.word	0x20001e68
 80017f8:	20001e29 	.word	0x20001e29

080017fc <addChar>:

void addChar(char data){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
	if(available()){
 8001806:	f000 f859 	bl	80018bc <available>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d008      	beq.n	8001822 <addChar+0x26>
		memcpy(pointer, &data, sizeof(data));
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <addChar+0x30>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	79fa      	ldrb	r2, [r7, #7]
 8001816:	701a      	strb	r2, [r3, #0]
		pointer += sizeof(data);
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <addChar+0x30>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	3301      	adds	r3, #1
 800181e:	4a03      	ldr	r2, [pc, #12]	; (800182c <addChar+0x30>)
 8001820:	6013      	str	r3, [r2, #0]
	}
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20001e68 	.word	0x20001e68

08001830 <addInt>:

void addInt(int16_t data){
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	80fb      	strh	r3, [r7, #6]
	if(available()){
 800183a:	f000 f83f 	bl	80018bc <available>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d008      	beq.n	8001856 <addInt+0x26>
		memcpy(pointer, &data, sizeof(data));
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <addInt+0x30>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	88fa      	ldrh	r2, [r7, #6]
 800184a:	801a      	strh	r2, [r3, #0]
		pointer += sizeof(data);
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <addInt+0x30>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	3302      	adds	r3, #2
 8001852:	4a03      	ldr	r2, [pc, #12]	; (8001860 <addInt+0x30>)
 8001854:	6013      	str	r3, [r2, #0]
	}
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20001e68 	.word	0x20001e68

08001864 <length>:
		memcpy(pointer, data, len+1);
		pointer += len+1;
	}
}

uint8_t length(){
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
	return pointer - &msgStr[0];
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <length+0x18>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a04      	ldr	r2, [pc, #16]	; (8001880 <length+0x1c>)
 800186e:	1a9b      	subs	r3, r3, r2
 8001870:	b2db      	uxtb	r3, r3
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	20001e68 	.word	0x20001e68
 8001880:	20001e28 	.word	0x20001e28

08001884 <writeBytes>:

void writeBytes(){
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&hlpuart1, msgStr, length(), 100);
 8001888:	f7ff ffec 	bl	8001864 <length>
 800188c:	4603      	mov	r3, r0
 800188e:	b29a      	uxth	r2, r3
 8001890:	2364      	movs	r3, #100	; 0x64
 8001892:	4907      	ldr	r1, [pc, #28]	; (80018b0 <writeBytes+0x2c>)
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <writeBytes+0x30>)
 8001896:	f004 fce7 	bl	8006268 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, msgStr, length(), 100);
 800189a:	f7ff ffe3 	bl	8001864 <length>
 800189e:	4603      	mov	r3, r0
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	2364      	movs	r3, #100	; 0x64
 80018a4:	4902      	ldr	r1, [pc, #8]	; (80018b0 <writeBytes+0x2c>)
 80018a6:	4804      	ldr	r0, [pc, #16]	; (80018b8 <writeBytes+0x34>)
 80018a8:	f004 fcde 	bl	8006268 <HAL_UART_Transmit>
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20001e28 	.word	0x20001e28
 80018b4:	20001c9c 	.word	0x20001c9c
 80018b8:	20001d98 	.word	0x20001d98

080018bc <available>:

uint8_t available(){
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
	return &msgStr[64 - 1] - pointer + 1;
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <available+0x1c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a05      	ldr	r2, [pc, #20]	; (80018dc <available+0x20>)
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	3301      	adds	r3, #1
 80018cc:	b2db      	uxtb	r3, r3
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	20001e68 	.word	0x20001e68
 80018dc:	20001e67 	.word	0x20001e67

080018e0 <sendPose>:

void sendPose(){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	reset();
 80018e4:	f7ff ff76 	bl	80017d4 <reset>
	addChar('P');
 80018e8:	2050      	movs	r0, #80	; 0x50
 80018ea:	f7ff ff87 	bl	80017fc <addChar>
	addInt(0x4E);
	addInt(0x4F);
	addInt(0x50);
	addInt(0x51);
	addInt(0x52);*/
	addInt(32767);
 80018ee:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80018f2:	f7ff ff9d 	bl	8001830 <addInt>
	addInt(126);
 80018f6:	207e      	movs	r0, #126	; 0x7e
 80018f8:	f7ff ff9a 	bl	8001830 <addInt>
	addInt(0b011);
 80018fc:	2003      	movs	r0, #3
 80018fe:	f7ff ff97 	bl	8001830 <addInt>
	addInt(0b011 << 8);
 8001902:	f44f 7040 	mov.w	r0, #768	; 0x300
 8001906:	f7ff ff93 	bl	8001830 <addInt>
	addInt(253);
 800190a:	20fd      	movs	r0, #253	; 0xfd
 800190c:	f7ff ff90 	bl	8001830 <addInt>
	addInt(-32768);
 8001910:	4806      	ldr	r0, [pc, #24]	; (800192c <sendPose+0x4c>)
 8001912:	f7ff ff8d 	bl	8001830 <addInt>
	addChar('}');
 8001916:	207d      	movs	r0, #125	; 0x7d
 8001918:	f7ff ff70 	bl	80017fc <addChar>
	addChar('\n');
 800191c:	200a      	movs	r0, #10
 800191e:	f7ff ff6d 	bl	80017fc <addChar>
	writeBytes();
 8001922:	f7ff ffaf 	bl	8001884 <writeBytes>
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	ffff8000 	.word	0xffff8000

08001930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <HAL_MspInit+0x4c>)
 8001938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193a:	4a10      	ldr	r2, [pc, #64]	; (800197c <HAL_MspInit+0x4c>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6613      	str	r3, [r2, #96]	; 0x60
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <HAL_MspInit+0x4c>)
 8001944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_MspInit+0x4c>)
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <HAL_MspInit+0x4c>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001958:	6593      	str	r3, [r2, #88]	; 0x58
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_MspInit+0x4c>)
 800195c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	210f      	movs	r1, #15
 800196a:	f06f 0001 	mvn.w	r0, #1
 800196e:	f001 f939 	bl	8002be4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000

08001980 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a17      	ldr	r2, [pc, #92]	; (80019fc <HAL_I2C_MspInit+0x7c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d128      	bne.n	80019f4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_I2C_MspInit+0x80>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a6:	4a16      	ldr	r2, [pc, #88]	; (8001a00 <HAL_I2C_MspInit+0x80>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ae:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <HAL_I2C_MspInit+0x80>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019c0:	2312      	movs	r3, #18
 80019c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019c4:	2301      	movs	r3, #1
 80019c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019cc:	2304      	movs	r3, #4
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4619      	mov	r1, r3
 80019d6:	480b      	ldr	r0, [pc, #44]	; (8001a04 <HAL_I2C_MspInit+0x84>)
 80019d8:	f001 fc5c 	bl	8003294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <HAL_I2C_MspInit+0x80>)
 80019de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e0:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <HAL_I2C_MspInit+0x80>)
 80019e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019e6:	6593      	str	r3, [r2, #88]	; 0x58
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_I2C_MspInit+0x80>)
 80019ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019f4:	bf00      	nop
 80019f6:	3728      	adds	r7, #40	; 0x28
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40005400 	.word	0x40005400
 8001a00:	40021000 	.word	0x40021000
 8001a04:	48000400 	.word	0x48000400

08001a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08c      	sub	sp, #48	; 0x30
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 031c 	add.w	r3, r7, #28
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a57      	ldr	r2, [pc, #348]	; (8001b84 <HAL_UART_MspInit+0x17c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d154      	bne.n	8001ad4 <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a2a:	4b57      	ldr	r3, [pc, #348]	; (8001b88 <HAL_UART_MspInit+0x180>)
 8001a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2e:	4a56      	ldr	r2, [pc, #344]	; (8001b88 <HAL_UART_MspInit+0x180>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001a36:	4b54      	ldr	r3, [pc, #336]	; (8001b88 <HAL_UART_MspInit+0x180>)
 8001a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a42:	4b51      	ldr	r3, [pc, #324]	; (8001b88 <HAL_UART_MspInit+0x180>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	4a50      	ldr	r2, [pc, #320]	; (8001b88 <HAL_UART_MspInit+0x180>)
 8001a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4e:	4b4e      	ldr	r3, [pc, #312]	; (8001b88 <HAL_UART_MspInit+0x180>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8001a5a:	f002 fcb1 	bl	80043c0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001a5e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a70:	2308      	movs	r3, #8
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4844      	ldr	r0, [pc, #272]	; (8001b8c <HAL_UART_MspInit+0x184>)
 8001a7c:	f001 fc0a 	bl	8003294 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel5;
 8001a80:	4b43      	ldr	r3, [pc, #268]	; (8001b90 <HAL_UART_MspInit+0x188>)
 8001a82:	4a44      	ldr	r2, [pc, #272]	; (8001b94 <HAL_UART_MspInit+0x18c>)
 8001a84:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001a86:	4b42      	ldr	r3, [pc, #264]	; (8001b90 <HAL_UART_MspInit+0x188>)
 8001a88:	2222      	movs	r2, #34	; 0x22
 8001a8a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a8c:	4b40      	ldr	r3, [pc, #256]	; (8001b90 <HAL_UART_MspInit+0x188>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a92:	4b3f      	ldr	r3, [pc, #252]	; (8001b90 <HAL_UART_MspInit+0x188>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a98:	4b3d      	ldr	r3, [pc, #244]	; (8001b90 <HAL_UART_MspInit+0x188>)
 8001a9a:	2280      	movs	r2, #128	; 0x80
 8001a9c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a9e:	4b3c      	ldr	r3, [pc, #240]	; (8001b90 <HAL_UART_MspInit+0x188>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aa4:	4b3a      	ldr	r3, [pc, #232]	; (8001b90 <HAL_UART_MspInit+0x188>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001aaa:	4b39      	ldr	r3, [pc, #228]	; (8001b90 <HAL_UART_MspInit+0x188>)
 8001aac:	2220      	movs	r2, #32
 8001aae:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ab0:	4b37      	ldr	r3, [pc, #220]	; (8001b90 <HAL_UART_MspInit+0x188>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001ab6:	4836      	ldr	r0, [pc, #216]	; (8001b90 <HAL_UART_MspInit+0x188>)
 8001ab8:	f001 f8be 	bl	8002c38 <HAL_DMA_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8001ac2:	f7ff fe81 	bl	80017c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a31      	ldr	r2, [pc, #196]	; (8001b90 <HAL_UART_MspInit+0x188>)
 8001aca:	67da      	str	r2, [r3, #124]	; 0x7c
 8001acc:	4a30      	ldr	r2, [pc, #192]	; (8001b90 <HAL_UART_MspInit+0x188>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001ad2:	e053      	b.n	8001b7c <HAL_UART_MspInit+0x174>
  else if(huart->Instance==UART4)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a2f      	ldr	r2, [pc, #188]	; (8001b98 <HAL_UART_MspInit+0x190>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d14e      	bne.n	8001b7c <HAL_UART_MspInit+0x174>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ade:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <HAL_UART_MspInit+0x180>)
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae2:	4a29      	ldr	r2, [pc, #164]	; (8001b88 <HAL_UART_MspInit+0x180>)
 8001ae4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ae8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aea:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <HAL_UART_MspInit+0x180>)
 8001aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <HAL_UART_MspInit+0x180>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	4a23      	ldr	r2, [pc, #140]	; (8001b88 <HAL_UART_MspInit+0x180>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b02:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <HAL_UART_MspInit+0x180>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0e:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <HAL_UART_MspInit+0x180>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	4a1d      	ldr	r2, [pc, #116]	; (8001b88 <HAL_UART_MspInit+0x180>)
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <HAL_UART_MspInit+0x180>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b34:	2303      	movs	r3, #3
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b38:	2308      	movs	r3, #8
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	4619      	mov	r1, r3
 8001b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b46:	f001 fba5 	bl	8003294 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b5c:	2308      	movs	r3, #8
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b60:	f107 031c 	add.w	r3, r7, #28
 8001b64:	4619      	mov	r1, r3
 8001b66:	480d      	ldr	r0, [pc, #52]	; (8001b9c <HAL_UART_MspInit+0x194>)
 8001b68:	f001 fb94 	bl	8003294 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2105      	movs	r1, #5
 8001b70:	2034      	movs	r0, #52	; 0x34
 8001b72:	f001 f837 	bl	8002be4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001b76:	2034      	movs	r0, #52	; 0x34
 8001b78:	f001 f850 	bl	8002c1c <HAL_NVIC_EnableIRQ>
}
 8001b7c:	bf00      	nop
 8001b7e:	3730      	adds	r7, #48	; 0x30
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40008000 	.word	0x40008000
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	48001800 	.word	0x48001800
 8001b90:	20001d30 	.word	0x20001d30
 8001b94:	40020058 	.word	0x40020058
 8001b98:	40004c00 	.word	0x40004c00
 8001b9c:	48000800 	.word	0x48000800

08001ba0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08c      	sub	sp, #48	; 0x30
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	2036      	movs	r0, #54	; 0x36
 8001bb6:	f001 f815 	bl	8002be4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bba:	2036      	movs	r0, #54	; 0x36
 8001bbc:	f001 f82e 	bl	8002c1c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001bc0:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_InitTick+0x9c>)
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc4:	4a1d      	ldr	r2, [pc, #116]	; (8001c3c <HAL_InitTick+0x9c>)
 8001bc6:	f043 0310 	orr.w	r3, r3, #16
 8001bca:	6593      	str	r3, [r2, #88]	; 0x58
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_InitTick+0x9c>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bd8:	f107 0210 	add.w	r2, r7, #16
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4611      	mov	r1, r2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 fa12 	bl	800500c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001be8:	f003 f9e4 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 8001bec:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf0:	4a13      	ldr	r2, [pc, #76]	; (8001c40 <HAL_InitTick+0xa0>)
 8001bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf6:	0c9b      	lsrs	r3, r3, #18
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <HAL_InitTick+0xa4>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <HAL_InitTick+0xa8>)
 8001c00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <HAL_InitTick+0xa4>)
 8001c04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c08:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c0a:	4a0e      	ldr	r2, [pc, #56]	; (8001c44 <HAL_InitTick+0xa4>)
 8001c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <HAL_InitTick+0xa4>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_InitTick+0xa4>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001c1c:	4809      	ldr	r0, [pc, #36]	; (8001c44 <HAL_InitTick+0xa4>)
 8001c1e:	f004 f801 	bl	8005c24 <HAL_TIM_Base_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d104      	bne.n	8001c32 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001c28:	4806      	ldr	r0, [pc, #24]	; (8001c44 <HAL_InitTick+0xa4>)
 8001c2a:	f004 f85d 	bl	8005ce8 <HAL_TIM_Base_Start_IT>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	e000      	b.n	8001c34 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3730      	adds	r7, #48	; 0x30
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	431bde83 	.word	0x431bde83
 8001c44:	20001e6c 	.word	0x20001e6c
 8001c48:	40001000 	.word	0x40001000

08001c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <NMI_Handler+0x4>

08001c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c56:	e7fe      	b.n	8001c56 <HardFault_Handler+0x4>

08001c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <MemManage_Handler+0x4>

08001c5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <BusFault_Handler+0x4>

08001c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <UsageFault_Handler+0x4>

08001c6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001c7c:	4802      	ldr	r0, [pc, #8]	; (8001c88 <DMA1_Channel5_IRQHandler+0x10>)
 8001c7e:	f001 f9b9 	bl	8002ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20001d30 	.word	0x20001d30

08001c8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001c90:	2040      	movs	r0, #64	; 0x40
 8001c92:	f001 fca9 	bl	80035e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001ca0:	4802      	ldr	r0, [pc, #8]	; (8001cac <UART4_IRQHandler+0x10>)
 8001ca2:	f004 fc05 	bl	80064b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20001d98 	.word	0x20001d98

08001cb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001cb4:	4802      	ldr	r0, [pc, #8]	; (8001cc0 <TIM6_DAC_IRQHandler+0x10>)
 8001cb6:	f004 f887 	bl	8005dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20001e6c 	.word	0x20001e6c

08001cc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
	return 1;
 8001cc8:	2301      	movs	r3, #1
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <_kill>:

int _kill(int pid, int sig)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cde:	f009 f91d 	bl	800af1c <__errno>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2216      	movs	r2, #22
 8001ce6:	601a      	str	r2, [r3, #0]
	return -1;
 8001ce8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_exit>:

void _exit (int status)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ffe7 	bl	8001cd4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d06:	e7fe      	b.n	8001d06 <_exit+0x12>

08001d08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	e00a      	b.n	8001d30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d1a:	f3af 8000 	nop.w
 8001d1e:	4601      	mov	r1, r0
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	1c5a      	adds	r2, r3, #1
 8001d24:	60ba      	str	r2, [r7, #8]
 8001d26:	b2ca      	uxtb	r2, r1
 8001d28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	dbf0      	blt.n	8001d1a <_read+0x12>
	}

return len;
 8001d38:	687b      	ldr	r3, [r7, #4]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	e009      	b.n	8001d68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	60ba      	str	r2, [r7, #8]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	3301      	adds	r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	dbf1      	blt.n	8001d54 <_write+0x12>
	}
	return len;
 8001d70:	687b      	ldr	r3, [r7, #4]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <_close>:

int _close(int file)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
	return -1;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001da2:	605a      	str	r2, [r3, #4]
	return 0;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <_isatty>:

int _isatty(int file)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
	return 1;
 8001dba:	2301      	movs	r3, #1
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
	return 0;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dec:	4a14      	ldr	r2, [pc, #80]	; (8001e40 <_sbrk+0x5c>)
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <_sbrk+0x60>)
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df8:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <_sbrk+0x64>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d102      	bne.n	8001e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <_sbrk+0x64>)
 8001e02:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <_sbrk+0x68>)
 8001e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <_sbrk+0x64>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d207      	bcs.n	8001e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e14:	f009 f882 	bl	800af1c <__errno>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e22:	e009      	b.n	8001e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <_sbrk+0x64>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e2a:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <_sbrk+0x64>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <_sbrk+0x64>)
 8001e34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e36:	68fb      	ldr	r3, [r7, #12]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	200a0000 	.word	0x200a0000
 8001e44:	00000400 	.word	0x00000400
 8001e48:	20000334 	.word	0x20000334
 8001e4c:	20001f10 	.word	0x20001f10

08001e50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e54:	4b15      	ldr	r3, [pc, #84]	; (8001eac <SystemInit+0x5c>)
 8001e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5a:	4a14      	ldr	r2, [pc, #80]	; (8001eac <SystemInit+0x5c>)
 8001e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <SystemInit+0x60>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a11      	ldr	r2, [pc, #68]	; (8001eb0 <SystemInit+0x60>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <SystemInit+0x60>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <SystemInit+0x60>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <SystemInit+0x60>)
 8001e7c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001e80:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001e84:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001e86:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <SystemInit+0x60>)
 8001e88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e8c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e8e:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <SystemInit+0x60>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <SystemInit+0x60>)
 8001e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e98:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <SystemInit+0x60>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000ed00 	.word	0xe000ed00
 8001eb0:	40021000 	.word	0x40021000

08001eb4 <TM_GPIO_InitAlternate>:
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af02      	add	r7, sp, #8
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	4608      	mov	r0, r1
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	807b      	strh	r3, [r7, #2]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	707b      	strb	r3, [r7, #1]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 8001ece:	887b      	ldrh	r3, [r7, #2]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d03f      	beq.n	8001f54 <TM_GPIO_InitAlternate+0xa0>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f851 	bl	8001f7c <_Z23TM_GPIO_INT_EnableClockP12GPIO_TypeDef>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2b0f      	cmp	r3, #15
 8001ee2:	d82b      	bhi.n	8001f3c <TM_GPIO_InitAlternate+0x88>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8001ee4:	887a      	ldrh	r2, [r7, #2]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	fa42 f303 	asr.w	r3, r2, r3
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d01e      	beq.n	8001f32 <TM_GPIO_InitAlternate+0x7e>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	08da      	lsrs	r2, r3, #3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3208      	adds	r2, #8
 8001efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	f002 0207 	and.w	r2, r2, #7
 8001f06:	0092      	lsls	r2, r2, #2
 8001f08:	210f      	movs	r1, #15
 8001f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0e:	43d2      	mvns	r2, r2
 8001f10:	4013      	ands	r3, r2
 8001f12:	7f39      	ldrb	r1, [r7, #28]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	f002 0207 	and.w	r2, r2, #7
 8001f1a:	0092      	lsls	r2, r2, #2
 8001f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f20:	4611      	mov	r1, r2
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	08d2      	lsrs	r2, r2, #3
 8001f26:	4319      	orrs	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3208      	adds	r2, #8
 8001f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001f30:	e000      	b.n	8001f34 <TM_GPIO_InitAlternate+0x80>
			continue;
 8001f32:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	3301      	adds	r3, #1
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	e7d0      	b.n	8001ede <TM_GPIO_InitAlternate+0x2a>
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8001f3c:	787a      	ldrb	r2, [r7, #1]
 8001f3e:	8879      	ldrh	r1, [r7, #2]
 8001f40:	7e3b      	ldrb	r3, [r7, #24]
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	783b      	ldrb	r3, [r7, #0]
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f82d 	bl	8001fac <_Z16TM_GPIO_INT_InitP12GPIO_TypeDeft14TM_GPIO_Mode_t15TM_GPIO_OType_t14TM_GPIO_PuPd_t15TM_GPIO_Speed_t>
 8001f52:	e000      	b.n	8001f56 <TM_GPIO_InitAlternate+0xa2>
		return;
 8001f54:	bf00      	nop
}
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f103 4338 	add.w	r3, r3, #3087007744	; 0xb8000000
 8001f6a:	0a9b      	lsrs	r3, r3, #10
 8001f6c:	b29b      	uxth	r3, r3
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <_Z23TM_GPIO_INT_EnableClockP12GPIO_TypeDef>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
#if defined(STM32F0xx)
	RCC->AHBENR |= (1 << (TM_GPIO_GetPortSource(GPIOx) + 17));
#else
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ffe9 	bl	8001f5c <TM_GPIO_GetPortSource>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2301      	movs	r3, #1
 8001f90:	fa03 f202 	lsl.w	r2, r3, r2
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <_Z23TM_GPIO_INT_EnableClockP12GPIO_TypeDef+0x2c>)
 8001f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f98:	4611      	mov	r1, r2
 8001f9a:	4a03      	ldr	r2, [pc, #12]	; (8001fa8 <_Z23TM_GPIO_INT_EnableClockP12GPIO_TypeDef+0x2c>)
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	6493      	str	r3, [r2, #72]	; 0x48
#endif
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40021000 	.word	0x40021000

08001fac <_Z16TM_GPIO_INT_InitP12GPIO_TypeDeft14TM_GPIO_Mode_t15TM_GPIO_OType_t14TM_GPIO_PuPd_t15TM_GPIO_Speed_t>:
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	4608      	mov	r0, r1
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4603      	mov	r3, r0
 8001fbc:	807b      	strh	r3, [r7, #2]
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	707b      	strb	r3, [r7, #1]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff ffc8 	bl	8001f5c <TM_GPIO_GetPortSource>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	73bb      	strb	r3, [r7, #14]
		GPIO_Speed = TM_GPIO_Speed_High;
	}
#endif
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	2b0f      	cmp	r3, #15
 8001fd8:	d868      	bhi.n	80020ac <_Z16TM_GPIO_INT_InitP12GPIO_TypeDeft14TM_GPIO_Mode_t15TM_GPIO_OType_t14TM_GPIO_PuPd_t15TM_GPIO_Speed_t+0x100>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	fa42 f303 	asr.w	r3, r2, r3
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d05b      	beq.n	80020a2 <_Z16TM_GPIO_INT_InitP12GPIO_TypeDeft14TM_GPIO_Mode_t15TM_GPIO_OType_t14TM_GPIO_PuPd_t15TM_GPIO_Speed_t+0xf6>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8001fea:	7bbb      	ldrb	r3, [r7, #14]
 8001fec:	4a31      	ldr	r2, [pc, #196]	; (80020b4 <_Z16TM_GPIO_INT_InitP12GPIO_TypeDeft14TM_GPIO_Mode_t15TM_GPIO_OType_t14TM_GPIO_PuPd_t15TM_GPIO_Speed_t+0x108>)
 8001fee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ff2:	b21a      	sxth	r2, r3
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffc:	b21b      	sxth	r3, r3
 8001ffe:	4313      	orrs	r3, r2
 8002000:	b21a      	sxth	r2, r3
 8002002:	7bbb      	ldrb	r3, [r7, #14]
 8002004:	b291      	uxth	r1, r2
 8002006:	4a2b      	ldr	r2, [pc, #172]	; (80020b4 <_Z16TM_GPIO_INT_InitP12GPIO_TypeDeft14TM_GPIO_Mode_t15TM_GPIO_OType_t14TM_GPIO_PuPd_t15TM_GPIO_Speed_t+0x108>)
 8002008:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	7bfa      	ldrb	r2, [r7, #15]
 8002012:	0052      	lsls	r2, r2, #1
 8002014:	2103      	movs	r1, #3
 8002016:	fa01 f202 	lsl.w	r2, r1, r2
 800201a:	43d2      	mvns	r2, r2
 800201c:	4013      	ands	r3, r2
 800201e:	7e39      	ldrb	r1, [r7, #24]
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	0052      	lsls	r2, r2, #1
 8002024:	fa01 f202 	lsl.w	r2, r1, r2
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	7bfb      	ldrb	r3, [r7, #15]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	2103      	movs	r1, #3
 8002038:	fa01 f303 	lsl.w	r3, r1, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	4013      	ands	r3, r2
 8002040:	7879      	ldrb	r1, [r7, #1]
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	0052      	lsls	r2, r2, #1
 8002046:	fa01 f202 	lsl.w	r2, r1, r2
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8002050:	787b      	ldrb	r3, [r7, #1]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d002      	beq.n	800205c <_Z16TM_GPIO_INT_InitP12GPIO_TypeDeft14TM_GPIO_Mode_t15TM_GPIO_OType_t14TM_GPIO_PuPd_t15TM_GPIO_Speed_t+0xb0>
 8002056:	787b      	ldrb	r3, [r7, #1]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d123      	bne.n	80020a4 <_Z16TM_GPIO_INT_InitP12GPIO_TypeDeft14TM_GPIO_Mode_t15TM_GPIO_OType_t14TM_GPIO_PuPd_t15TM_GPIO_Speed_t+0xf8>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	7bfa      	ldrb	r2, [r7, #15]
 8002062:	2101      	movs	r1, #1
 8002064:	fa01 f202 	lsl.w	r2, r1, r2
 8002068:	b292      	uxth	r2, r2
 800206a:	43d2      	mvns	r2, r2
 800206c:	4013      	ands	r3, r2
 800206e:	7839      	ldrb	r1, [r7, #0]
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	fa01 f202 	lsl.w	r2, r1, r2
 8002076:	b292      	uxth	r2, r2
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	7bfb      	ldrb	r3, [r7, #15]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2103      	movs	r1, #3
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	4013      	ands	r3, r2
 8002090:	7f39      	ldrb	r1, [r7, #28]
 8002092:	7bfa      	ldrb	r2, [r7, #15]
 8002094:	0052      	lsls	r2, r2, #1
 8002096:	fa01 f202 	lsl.w	r2, r1, r2
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	e000      	b.n	80020a4 <_Z16TM_GPIO_INT_InitP12GPIO_TypeDeft14TM_GPIO_Mode_t15TM_GPIO_OType_t14TM_GPIO_PuPd_t15TM_GPIO_Speed_t+0xf8>
			continue;
 80020a2:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	3301      	adds	r3, #1
 80020a8:	73fb      	strb	r3, [r7, #15]
 80020aa:	e793      	b.n	8001fd4 <_Z16TM_GPIO_INT_InitP12GPIO_TypeDeft14TM_GPIO_Mode_t15TM_GPIO_OType_t14TM_GPIO_PuPd_t15TM_GPIO_Speed_t+0x28>
		}
	}
}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000338 	.word	0x20000338

080020b8 <TM_I2C_GetHandle>:
#endif
#ifdef I2C4
static void TM_I2C4_INT_InitPins(TM_I2C_PinsPack_t pinspack);
#endif

I2C_HandleTypeDef* TM_I2C_GetHandle(I2C_TypeDef* I2Cx) {
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
#ifdef I2C1
	if (I2Cx == I2C1) {
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a0f      	ldr	r2, [pc, #60]	; (8002100 <TM_I2C_GetHandle+0x48>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d101      	bne.n	80020cc <TM_I2C_GetHandle+0x14>
		return &I2C1Handle;
 80020c8:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <TM_I2C_GetHandle+0x4c>)
 80020ca:	e012      	b.n	80020f2 <TM_I2C_GetHandle+0x3a>
	}
#endif
#ifdef I2C2
	if (I2Cx == I2C2) {
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a0e      	ldr	r2, [pc, #56]	; (8002108 <TM_I2C_GetHandle+0x50>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d101      	bne.n	80020d8 <TM_I2C_GetHandle+0x20>
		return &I2C2Handle;
 80020d4:	4b0d      	ldr	r3, [pc, #52]	; (800210c <TM_I2C_GetHandle+0x54>)
 80020d6:	e00c      	b.n	80020f2 <TM_I2C_GetHandle+0x3a>
	}
#endif
#ifdef I2C3
	if (I2Cx == I2C3) {
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a0d      	ldr	r2, [pc, #52]	; (8002110 <TM_I2C_GetHandle+0x58>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <TM_I2C_GetHandle+0x2c>
		return &I2C3Handle;
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <TM_I2C_GetHandle+0x5c>)
 80020e2:	e006      	b.n	80020f2 <TM_I2C_GetHandle+0x3a>
	}
#endif
#ifdef I2C4
	if (I2Cx == I2C4) {
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a0c      	ldr	r2, [pc, #48]	; (8002118 <TM_I2C_GetHandle+0x60>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d101      	bne.n	80020f0 <TM_I2C_GetHandle+0x38>
		return &I2C4Handle;
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <TM_I2C_GetHandle+0x64>)
 80020ee:	e000      	b.n	80020f2 <TM_I2C_GetHandle+0x3a>
	}
#endif
	
	/* Return invalid */
	return 0;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40005400 	.word	0x40005400
 8002104:	20000004 	.word	0x20000004
 8002108:	40005800 	.word	0x40005800
 800210c:	20000050 	.word	0x20000050
 8002110:	40005c00 	.word	0x40005c00
 8002114:	2000009c 	.word	0x2000009c
 8002118:	40008400 	.word	0x40008400
 800211c:	200000e8 	.word	0x200000e8

08002120 <_ZL19TM_I2C_FillSettingsP19__I2C_HandleTypeDefm>:

static void TM_I2C_FillSettings(I2C_HandleTypeDef* Handle, uint32_t clockSpeed) {
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]

	uint32_t I2C_Timing;
	
	/* Future */
	if (clockSpeed >= 3400000) {
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	4a18      	ldr	r2, [pc, #96]	; (8002190 <_ZL19TM_I2C_FillSettingsP19__I2C_HandleTypeDefm+0x70>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d302      	bcc.n	8002138 <_ZL19TM_I2C_FillSettingsP19__I2C_HandleTypeDefm+0x18>
		/* 100kHz @ 50MHz APB clock */
		I2C_Timing = 0x40912732;
 8002132:	4b18      	ldr	r3, [pc, #96]	; (8002194 <_ZL19TM_I2C_FillSettingsP19__I2C_HandleTypeDefm+0x74>)
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	e00f      	b.n	8002158 <_ZL19TM_I2C_FillSettingsP19__I2C_HandleTypeDefm+0x38>
	} else if (clockSpeed >= 1000000) {
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	4a17      	ldr	r2, [pc, #92]	; (8002198 <_ZL19TM_I2C_FillSettingsP19__I2C_HandleTypeDefm+0x78>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d902      	bls.n	8002146 <_ZL19TM_I2C_FillSettingsP19__I2C_HandleTypeDefm+0x26>
		/* 100kHz @ 50MHz APB clock */
		I2C_Timing = 0x40912732;
 8002140:	4b14      	ldr	r3, [pc, #80]	; (8002194 <_ZL19TM_I2C_FillSettingsP19__I2C_HandleTypeDefm+0x74>)
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	e008      	b.n	8002158 <_ZL19TM_I2C_FillSettingsP19__I2C_HandleTypeDefm+0x38>
	} else if (clockSpeed >= 400000) {
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	4a14      	ldr	r2, [pc, #80]	; (800219c <_ZL19TM_I2C_FillSettingsP19__I2C_HandleTypeDefm+0x7c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d902      	bls.n	8002154 <_ZL19TM_I2C_FillSettingsP19__I2C_HandleTypeDefm+0x34>
		/* 100kHz @ 50MHz APB clock */
		I2C_Timing = 0x40912732;
 800214e:	4b11      	ldr	r3, [pc, #68]	; (8002194 <_ZL19TM_I2C_FillSettingsP19__I2C_HandleTypeDefm+0x74>)
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	e001      	b.n	8002158 <_ZL19TM_I2C_FillSettingsP19__I2C_HandleTypeDefm+0x38>
	} else {	
		/* 100kHz @ 50MHz APB clock */
		I2C_Timing = 0x40912732;
 8002154:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <_ZL19TM_I2C_FillSettingsP19__I2C_HandleTypeDefm+0x74>)
 8002156:	60fb      	str	r3, [r7, #12]
	/* 100kHz @ 48MHz APB clock */
	uint32_t I2C_Timing = 0x10805E89;
#endif

	/* Fill settings */
	Handle->Init.OwnAddress2 = 0x00;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	615a      	str	r2, [r3, #20]
	Handle->Init.OwnAddress1 = 0x00;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
	Handle->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	60da      	str	r2, [r3, #12]
	Handle->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
	Handle->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	61da      	str	r2, [r3, #28]
	Handle->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE; 
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	621a      	str	r2, [r3, #32]
	Handle->Init.Timing = I2C_Timing;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	605a      	str	r2, [r3, #4]
}
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	0033e140 	.word	0x0033e140
 8002194:	40912732 	.word	0x40912732
 8002198:	000f423f 	.word	0x000f423f
 800219c:	00061a7f 	.word	0x00061a7f

080021a0 <TM_I2C_Init>:

TM_I2C_Result_t TM_I2C_Init(I2C_TypeDef* I2Cx, TM_I2C_PinsPack_t pinspack, uint32_t clockSpeed) {	
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	460b      	mov	r3, r1
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f7ff ff82 	bl	80020b8 <TM_I2C_GetHandle>
 80021b4:	6278      	str	r0, [r7, #36]	; 0x24
	
	/* Fill instance value */
	Handle->Instance = I2Cx;
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	601a      	str	r2, [r3, #0]
	
#ifdef I2C1
	if (I2Cx == I2C1) {
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4a2f      	ldr	r2, [pc, #188]	; (800227c <TM_I2C_Init+0xdc>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d10f      	bne.n	80021e4 <TM_I2C_Init+0x44>
		/* Enable clock */
		__HAL_RCC_I2C1_CLK_ENABLE();
 80021c4:	4b2e      	ldr	r3, [pc, #184]	; (8002280 <TM_I2C_Init+0xe0>)
 80021c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c8:	4a2d      	ldr	r2, [pc, #180]	; (8002280 <TM_I2C_Init+0xe0>)
 80021ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021ce:	6593      	str	r3, [r2, #88]	; 0x58
 80021d0:	4b2b      	ldr	r3, [pc, #172]	; (8002280 <TM_I2C_Init+0xe0>)
 80021d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d8:	623b      	str	r3, [r7, #32]
 80021da:	6a3b      	ldr	r3, [r7, #32]
		
		/* Enable pins */
		TM_I2C1_INT_InitPins(pinspack);
 80021dc:	7afb      	ldrb	r3, [r7, #11]
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f940 	bl	8002464 <_ZL20TM_I2C1_INT_InitPins17TM_I2C_PinsPack_t>
	}
#endif
#ifdef I2C2	
	if (I2Cx == I2C2) {
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4a27      	ldr	r2, [pc, #156]	; (8002284 <TM_I2C_Init+0xe4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d10f      	bne.n	800220c <TM_I2C_Init+0x6c>
		/* Enable clock */
		__HAL_RCC_I2C2_CLK_ENABLE();
 80021ec:	4b24      	ldr	r3, [pc, #144]	; (8002280 <TM_I2C_Init+0xe0>)
 80021ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f0:	4a23      	ldr	r2, [pc, #140]	; (8002280 <TM_I2C_Init+0xe0>)
 80021f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021f6:	6593      	str	r3, [r2, #88]	; 0x58
 80021f8:	4b21      	ldr	r3, [pc, #132]	; (8002280 <TM_I2C_Init+0xe0>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002200:	61fb      	str	r3, [r7, #28]
 8002202:	69fb      	ldr	r3, [r7, #28]
		
		/* Enable pins */
		TM_I2C2_INT_InitPins(pinspack);
 8002204:	7afb      	ldrb	r3, [r7, #11]
 8002206:	4618      	mov	r0, r3
 8002208:	f000 f96a 	bl	80024e0 <_ZL20TM_I2C2_INT_InitPins17TM_I2C_PinsPack_t>
	} 
#endif
#ifdef I2C3
	if (I2Cx == I2C3) {
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4a1e      	ldr	r2, [pc, #120]	; (8002288 <TM_I2C_Init+0xe8>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d10f      	bne.n	8002234 <TM_I2C_Init+0x94>
		/* Enable clock */
		__HAL_RCC_I2C3_CLK_ENABLE();
 8002214:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <TM_I2C_Init+0xe0>)
 8002216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002218:	4a19      	ldr	r2, [pc, #100]	; (8002280 <TM_I2C_Init+0xe0>)
 800221a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800221e:	6593      	str	r3, [r2, #88]	; 0x58
 8002220:	4b17      	ldr	r3, [pc, #92]	; (8002280 <TM_I2C_Init+0xe0>)
 8002222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002224:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002228:	61bb      	str	r3, [r7, #24]
 800222a:	69bb      	ldr	r3, [r7, #24]
		
		/* Enable pins */
		TM_I2C3_INT_InitPins(pinspack);
 800222c:	7afb      	ldrb	r3, [r7, #11]
 800222e:	4618      	mov	r0, r3
 8002230:	f000 f996 	bl	8002560 <_ZL20TM_I2C3_INT_InitPins17TM_I2C_PinsPack_t>
	}
#endif
#ifdef I2C4
	if (I2Cx == I2C4) {
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4a15      	ldr	r2, [pc, #84]	; (800228c <TM_I2C_Init+0xec>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d10f      	bne.n	800225c <TM_I2C_Init+0xbc>
		/* Enable clock */
		__HAL_RCC_I2C4_CLK_ENABLE();
 800223c:	4b10      	ldr	r3, [pc, #64]	; (8002280 <TM_I2C_Init+0xe0>)
 800223e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002240:	4a0f      	ldr	r2, [pc, #60]	; (8002280 <TM_I2C_Init+0xe0>)
 8002242:	f043 0302 	orr.w	r3, r3, #2
 8002246:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002248:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <TM_I2C_Init+0xe0>)
 800224a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	697b      	ldr	r3, [r7, #20]
		
		/* Enable pins */
		TM_I2C4_INT_InitPins(pinspack);
 8002254:	7afb      	ldrb	r3, [r7, #11]
 8002256:	4618      	mov	r0, r3
 8002258:	f000 f9c0 	bl	80025dc <_ZL20TM_I2C4_INT_InitPins17TM_I2C_PinsPack_t>
	}
#endif
	
	/* Fill settings */
	TM_I2C_FillSettings(Handle, clockSpeed);
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002260:	f7ff ff5e 	bl	8002120 <_ZL19TM_I2C_FillSettingsP19__I2C_HandleTypeDefm>
	
	/* Initialize I2C */
	HAL_I2C_Init(Handle);
 8002264:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002266:	f001 f9e2 	bl	800362e <HAL_I2C_Init>
		
	/* Enable analog filter */
#if defined(I2C_ANALOGFILTER_ENABLE)
	HAL_I2CEx_ConfigAnalogFilter(Handle, I2C_ANALOGFILTER_ENABLE);
 800226a:	2100      	movs	r1, #0
 800226c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800226e:	f001 ff4b 	bl	8004108 <HAL_I2CEx_ConfigAnalogFilter>
#endif
	
	/* Return OK */
	return TM_I2C_Result_Ok;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3728      	adds	r7, #40	; 0x28
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40005400 	.word	0x40005400
 8002280:	40021000 	.word	0x40021000
 8002284:	40005800 	.word	0x40005800
 8002288:	40005c00 	.word	0x40005c00
 800228c:	40008400 	.word	0x40008400

08002290 <TM_I2C_Read>:

TM_I2C_Result_t TM_I2C_Read(I2C_TypeDef* I2Cx, uint8_t device_address, uint8_t register_address, uint8_t* data) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af02      	add	r7, sp, #8
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	607b      	str	r3, [r7, #4]
 800229a:	460b      	mov	r3, r1
 800229c:	72fb      	strb	r3, [r7, #11]
 800229e:	4613      	mov	r3, r2
 80022a0:	72bb      	strb	r3, [r7, #10]
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f7ff ff08 	bl	80020b8 <TM_I2C_GetHandle>
 80022a8:	6178      	str	r0, [r7, #20]
	
	/* Send address */
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 80022aa:	7afb      	ldrb	r3, [r7, #11]
 80022ac:	b299      	uxth	r1, r3
 80022ae:	f107 020a 	add.w	r2, r7, #10
 80022b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2301      	movs	r3, #1
 80022ba:	6978      	ldr	r0, [r7, #20]
 80022bc:	f001 fa46 	bl	800374c <HAL_I2C_Master_Transmit>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bf14      	ite	ne
 80022c6:	2301      	movne	r3, #1
 80022c8:	2300      	moveq	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <TM_I2C_Read+0x4e>
		/* Check error */
		if (HAL_I2C_GetError(Handle) != HAL_I2C_ERROR_AF) {
 80022d0:	6978      	ldr	r0, [r7, #20]
 80022d2:	f001 fd2c 	bl	8003d2e <HAL_I2C_GetError>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b04      	cmp	r3, #4
			
		}
		
		/* Return error */
		return TM_I2C_Result_Error;
 80022da:	2301      	movs	r3, #1
 80022dc:	e019      	b.n	8002312 <TM_I2C_Read+0x82>
	}
	
	/* Receive multiple byte */
	if (HAL_I2C_Master_Receive(Handle, device_address, data, 1, 1000) != HAL_OK) {
 80022de:	7afb      	ldrb	r3, [r7, #11]
 80022e0:	b299      	uxth	r1, r3
 80022e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	2301      	movs	r3, #1
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6978      	ldr	r0, [r7, #20]
 80022ee:	f001 fb21 	bl	8003934 <HAL_I2C_Master_Receive>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	bf14      	ite	ne
 80022f8:	2301      	movne	r3, #1
 80022fa:	2300      	moveq	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d006      	beq.n	8002310 <TM_I2C_Read+0x80>
		/* Check error */
		if (HAL_I2C_GetError(Handle) != HAL_I2C_ERROR_AF) {
 8002302:	6978      	ldr	r0, [r7, #20]
 8002304:	f001 fd13 	bl	8003d2e <HAL_I2C_GetError>
 8002308:	4603      	mov	r3, r0
 800230a:	2b04      	cmp	r3, #4
			
		}
		
		/* Return error */
		return TM_I2C_Result_Error;
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <TM_I2C_Read+0x82>
	}
	
	/* Return OK */
	return TM_I2C_Result_Ok;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <TM_I2C_ReadMulti>:

TM_I2C_Result_t TM_I2C_ReadMulti(I2C_TypeDef* I2Cx, uint8_t device_address, uint8_t register_address, uint8_t* data, uint16_t count) {
 800231a:	b580      	push	{r7, lr}
 800231c:	b088      	sub	sp, #32
 800231e:	af02      	add	r7, sp, #8
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	72fb      	strb	r3, [r7, #11]
 8002328:	4613      	mov	r3, r2
 800232a:	72bb      	strb	r3, [r7, #10]
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f7ff fec3 	bl	80020b8 <TM_I2C_GetHandle>
 8002332:	6178      	str	r0, [r7, #20]
	
	/* Send register address */
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8002334:	7afb      	ldrb	r3, [r7, #11]
 8002336:	b299      	uxth	r1, r3
 8002338:	f107 020a 	add.w	r2, r7, #10
 800233c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	2301      	movs	r3, #1
 8002344:	6978      	ldr	r0, [r7, #20]
 8002346:	f001 fa01 	bl	800374c <HAL_I2C_Master_Transmit>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	bf14      	ite	ne
 8002350:	2301      	movne	r3, #1
 8002352:	2300      	moveq	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d006      	beq.n	8002368 <TM_I2C_ReadMulti+0x4e>
		/* Check error */
		if (HAL_I2C_GetError(Handle) != HAL_I2C_ERROR_AF) {
 800235a:	6978      	ldr	r0, [r7, #20]
 800235c:	f001 fce7 	bl	8003d2e <HAL_I2C_GetError>
 8002360:	4603      	mov	r3, r0
 8002362:	2b04      	cmp	r3, #4
			
		}
		
		/* Return error */
		return TM_I2C_Result_Error;
 8002364:	2301      	movs	r3, #1
 8002366:	e019      	b.n	800239c <TM_I2C_ReadMulti+0x82>
	}
	
	/* Receive multiple byte */
	if (HAL_I2C_Master_Receive(Handle, device_address, data, count, 1000) != HAL_OK) {
 8002368:	7afb      	ldrb	r3, [r7, #11]
 800236a:	b299      	uxth	r1, r3
 800236c:	8c3b      	ldrh	r3, [r7, #32]
 800236e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002372:	9200      	str	r2, [sp, #0]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6978      	ldr	r0, [r7, #20]
 8002378:	f001 fadc 	bl	8003934 <HAL_I2C_Master_Receive>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	bf14      	ite	ne
 8002382:	2301      	movne	r3, #1
 8002384:	2300      	moveq	r3, #0
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d006      	beq.n	800239a <TM_I2C_ReadMulti+0x80>
		/* Check error */
		if (HAL_I2C_GetError(Handle) != HAL_I2C_ERROR_AF) {
 800238c:	6978      	ldr	r0, [r7, #20]
 800238e:	f001 fcce 	bl	8003d2e <HAL_I2C_GetError>
 8002392:	4603      	mov	r3, r0
 8002394:	2b04      	cmp	r3, #4
			
		}
		
		/* Return error */
		return TM_I2C_Result_Error;
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <TM_I2C_ReadMulti+0x82>
	}
	
	/* Return OK */
	return TM_I2C_Result_Ok;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <TM_I2C_Write>:
	
	/* Return OK */
	return TM_I2C_Result_Ok;
}

TM_I2C_Result_t TM_I2C_Write(I2C_TypeDef* I2Cx, uint8_t device_address, uint8_t register_address, uint8_t data) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	4608      	mov	r0, r1
 80023ae:	4611      	mov	r1, r2
 80023b0:	461a      	mov	r2, r3
 80023b2:	4603      	mov	r3, r0
 80023b4:	70fb      	strb	r3, [r7, #3]
 80023b6:	460b      	mov	r3, r1
 80023b8:	70bb      	strb	r3, [r7, #2]
 80023ba:	4613      	mov	r3, r2
 80023bc:	707b      	strb	r3, [r7, #1]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff fe7a 	bl	80020b8 <TM_I2C_GetHandle>
 80023c4:	60f8      	str	r0, [r7, #12]
		
	/* Format array to send */
	d[0] = register_address;
 80023c6:	78bb      	ldrb	r3, [r7, #2]
 80023c8:	723b      	strb	r3, [r7, #8]
	d[1] = data;
 80023ca:	787b      	ldrb	r3, [r7, #1]
 80023cc:	727b      	strb	r3, [r7, #9]
	
	/* Try to transmit via I2C */
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t)device_address, (uint8_t *)d, 2, 1000) != HAL_OK) {
 80023ce:	78fb      	ldrb	r3, [r7, #3]
 80023d0:	b299      	uxth	r1, r3
 80023d2:	f107 0208 	add.w	r2, r7, #8
 80023d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2302      	movs	r3, #2
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f001 f9b4 	bl	800374c <HAL_I2C_Master_Transmit>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	bf14      	ite	ne
 80023ea:	2301      	movne	r3, #1
 80023ec:	2300      	moveq	r3, #0
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d006      	beq.n	8002402 <TM_I2C_Write+0x5e>
		/* Check error */
		if (HAL_I2C_GetError(Handle) != HAL_I2C_ERROR_AF) {
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f001 fc9a 	bl	8003d2e <HAL_I2C_GetError>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b04      	cmp	r3, #4
			
		}
		
		/* Return error */
		return TM_I2C_Result_Error;
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <TM_I2C_Write+0x60>
	} 
	
	/* Return OK */
	return TM_I2C_Result_Ok;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <TM_I2C_IsDeviceConnected>:
	
	/* Return OK */
	return TM_I2C_Result_Ok;
}

TM_I2C_Result_t TM_I2C_IsDeviceConnected(I2C_TypeDef* I2Cx, uint8_t device_address) {
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	70fb      	strb	r3, [r7, #3]
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff fe4d 	bl	80020b8 <TM_I2C_GetHandle>
 800241e:	60f8      	str	r0, [r7, #12]
	
	/* Check if device is ready for communication */
	if (HAL_I2C_IsDeviceReady(Handle, device_address, 2, 5) != HAL_OK) {
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	b299      	uxth	r1, r3
 8002424:	2305      	movs	r3, #5
 8002426:	2202      	movs	r2, #2
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f001 fb79 	bl	8003b20 <HAL_I2C_IsDeviceReady>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	bf14      	ite	ne
 8002434:	2301      	movne	r3, #1
 8002436:	2300      	moveq	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <TM_I2C_IsDeviceConnected+0x36>
		/* Return error */
		return TM_I2C_Result_Error;
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <TM_I2C_IsDeviceConnected+0x38>
	}
	
	/* Return OK */
	return TM_I2C_Result_Ok;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <TM_I2C_InitCustomPinsCallback>:
	
	/* Return OK */
	return TM_I2C_Result_Ok;
}

__weak void TM_I2C_InitCustomPinsCallback(I2C_TypeDef* I2Cx, uint16_t AlternateFunction) {
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <_ZL20TM_I2C1_INT_InitPins17TM_I2C_PinsPack_t>:

/* Private functions */
#ifdef I2C1
static void TM_I2C1_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af02      	add	r7, sp, #8
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d109      	bne.n	8002488 <_ZL20TM_I2C1_INT_InitPins17TM_I2C_PinsPack_t+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C1);
 8002474:	2304      	movs	r3, #4
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	2301      	movs	r3, #1
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	2301      	movs	r3, #1
 800247e:	2201      	movs	r2, #1
 8002480:	21c0      	movs	r1, #192	; 0xc0
 8002482:	4815      	ldr	r0, [pc, #84]	; (80024d8 <_ZL20TM_I2C1_INT_InitPins17TM_I2C_PinsPack_t+0x74>)
 8002484:	f7ff fd16 	bl	8001eb4 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_2) {
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d10a      	bne.n	80024a4 <_ZL20TM_I2C1_INT_InitPins17TM_I2C_PinsPack_t+0x40>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C1);
 800248e:	2304      	movs	r3, #4
 8002490:	9301      	str	r3, [sp, #4]
 8002492:	2301      	movs	r3, #1
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	2301      	movs	r3, #1
 8002498:	2201      	movs	r2, #1
 800249a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800249e:	480e      	ldr	r0, [pc, #56]	; (80024d8 <_ZL20TM_I2C1_INT_InitPins17TM_I2C_PinsPack_t+0x74>)
 80024a0:	f7ff fd08 	bl	8001eb4 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_3) {
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d10a      	bne.n	80024c0 <_ZL20TM_I2C1_INT_InitPins17TM_I2C_PinsPack_t+0x5c>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C1);
 80024aa:	2304      	movs	r3, #4
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	2301      	movs	r3, #1
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	2301      	movs	r3, #1
 80024b4:	2201      	movs	r2, #1
 80024b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80024ba:	4807      	ldr	r0, [pc, #28]	; (80024d8 <_ZL20TM_I2C1_INT_InitPins17TM_I2C_PinsPack_t+0x74>)
 80024bc:	f7ff fcfa 	bl	8001eb4 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d103      	bne.n	80024ce <_ZL20TM_I2C1_INT_InitPins17TM_I2C_PinsPack_t+0x6a>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C1, GPIO_AF4_I2C1);
 80024c6:	2104      	movs	r1, #4
 80024c8:	4804      	ldr	r0, [pc, #16]	; (80024dc <_ZL20TM_I2C1_INT_InitPins17TM_I2C_PinsPack_t+0x78>)
 80024ca:	f7ff ffbf 	bl	800244c <TM_I2C_InitCustomPinsCallback>
	}
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	48000400 	.word	0x48000400
 80024dc:	40005400 	.word	0x40005400

080024e0 <_ZL20TM_I2C2_INT_InitPins17TM_I2C_PinsPack_t>:
#endif
#ifdef I2C2
static void TM_I2C2_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af02      	add	r7, sp, #8
 80024e6:	4603      	mov	r3, r0
 80024e8:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10a      	bne.n	8002506 <_ZL20TM_I2C2_INT_InitPins17TM_I2C_PinsPack_t+0x26>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10 | GPIO_PIN_11, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C2);
 80024f0:	2304      	movs	r3, #4
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	2301      	movs	r3, #1
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	2301      	movs	r3, #1
 80024fa:	2201      	movs	r2, #1
 80024fc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002500:	4813      	ldr	r0, [pc, #76]	; (8002550 <_ZL20TM_I2C2_INT_InitPins17TM_I2C_PinsPack_t+0x70>)
 8002502:	f7ff fcd7 	bl	8001eb4 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF)
	if (pinspack == TM_I2C_PinsPack_2) {
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d109      	bne.n	8002520 <_ZL20TM_I2C2_INT_InitPins17TM_I2C_PinsPack_t+0x40>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C2);
 800250c:	2304      	movs	r3, #4
 800250e:	9301      	str	r3, [sp, #4]
 8002510:	2301      	movs	r3, #1
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	2301      	movs	r3, #1
 8002516:	2201      	movs	r2, #1
 8002518:	2103      	movs	r1, #3
 800251a:	480e      	ldr	r0, [pc, #56]	; (8002554 <_ZL20TM_I2C2_INT_InitPins17TM_I2C_PinsPack_t+0x74>)
 800251c:	f7ff fcca 	bl	8001eb4 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_3) {
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d109      	bne.n	800253a <_ZL20TM_I2C2_INT_InitPins17TM_I2C_PinsPack_t+0x5a>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C2);
 8002526:	2304      	movs	r3, #4
 8002528:	9301      	str	r3, [sp, #4]
 800252a:	2301      	movs	r3, #1
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	2301      	movs	r3, #1
 8002530:	2201      	movs	r2, #1
 8002532:	2130      	movs	r1, #48	; 0x30
 8002534:	4808      	ldr	r0, [pc, #32]	; (8002558 <_ZL20TM_I2C2_INT_InitPins17TM_I2C_PinsPack_t+0x78>)
 8002536:	f7ff fcbd 	bl	8001eb4 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	2b04      	cmp	r3, #4
 800253e:	d103      	bne.n	8002548 <_ZL20TM_I2C2_INT_InitPins17TM_I2C_PinsPack_t+0x68>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C2, GPIO_AF4_I2C2);
 8002540:	2104      	movs	r1, #4
 8002542:	4806      	ldr	r0, [pc, #24]	; (800255c <_ZL20TM_I2C2_INT_InitPins17TM_I2C_PinsPack_t+0x7c>)
 8002544:	f7ff ff82 	bl	800244c <TM_I2C_InitCustomPinsCallback>
	}
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	48000400 	.word	0x48000400
 8002554:	48001400 	.word	0x48001400
 8002558:	48001c00 	.word	0x48001c00
 800255c:	40005800 	.word	0x40005800

08002560 <_ZL20TM_I2C3_INT_InitPins17TM_I2C_PinsPack_t>:
#endif
#ifdef I2C3
static void TM_I2C3_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af02      	add	r7, sp, #8
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOA) && defined(GPIOC)
	if (pinspack == TM_I2C_PinsPack_1) {
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d116      	bne.n	800259e <_ZL20TM_I2C3_INT_InitPins17TM_I2C_PinsPack_t+0x3e>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C3);
 8002570:	2304      	movs	r3, #4
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	2301      	movs	r3, #1
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	2301      	movs	r3, #1
 800257a:	2201      	movs	r2, #1
 800257c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002584:	f7ff fc96 	bl	8001eb4 <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C3);
 8002588:	2304      	movs	r3, #4
 800258a:	9301      	str	r3, [sp, #4]
 800258c:	2301      	movs	r3, #1
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	2301      	movs	r3, #1
 8002592:	2201      	movs	r2, #1
 8002594:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002598:	480d      	ldr	r0, [pc, #52]	; (80025d0 <_ZL20TM_I2C3_INT_InitPins17TM_I2C_PinsPack_t+0x70>)
 800259a:	f7ff fc8b 	bl	8001eb4 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_2) {
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d10a      	bne.n	80025ba <_ZL20TM_I2C3_INT_InitPins17TM_I2C_PinsPack_t+0x5a>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_7 | GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C3);
 80025a4:	2304      	movs	r3, #4
 80025a6:	9301      	str	r3, [sp, #4]
 80025a8:	2301      	movs	r3, #1
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	2301      	movs	r3, #1
 80025ae:	2201      	movs	r2, #1
 80025b0:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80025b4:	4807      	ldr	r0, [pc, #28]	; (80025d4 <_ZL20TM_I2C3_INT_InitPins17TM_I2C_PinsPack_t+0x74>)
 80025b6:	f7ff fc7d 	bl	8001eb4 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d103      	bne.n	80025c8 <_ZL20TM_I2C3_INT_InitPins17TM_I2C_PinsPack_t+0x68>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C3, GPIO_AF4_I2C3);
 80025c0:	2104      	movs	r1, #4
 80025c2:	4805      	ldr	r0, [pc, #20]	; (80025d8 <_ZL20TM_I2C3_INT_InitPins17TM_I2C_PinsPack_t+0x78>)
 80025c4:	f7ff ff42 	bl	800244c <TM_I2C_InitCustomPinsCallback>
	}
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	48000800 	.word	0x48000800
 80025d4:	48001c00 	.word	0x48001c00
 80025d8:	40005c00 	.word	0x40005c00

080025dc <_ZL20TM_I2C4_INT_InitPins17TM_I2C_PinsPack_t>:
#endif
#ifdef I2C4
static void TM_I2C4_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOD)
	if (pinspack == TM_I2C_PinsPack_1) {
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10a      	bne.n	8002602 <_ZL20TM_I2C4_INT_InitPins17TM_I2C_PinsPack_t+0x26>
		TM_GPIO_InitAlternate(GPIOD, GPIO_PIN_12 | GPIO_PIN_13, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C4);
 80025ec:	2304      	movs	r3, #4
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	2301      	movs	r3, #1
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	2301      	movs	r3, #1
 80025f6:	2201      	movs	r2, #1
 80025f8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80025fc:	481b      	ldr	r0, [pc, #108]	; (800266c <_ZL20TM_I2C4_INT_InitPins17TM_I2C_PinsPack_t+0x90>)
 80025fe:	f7ff fc59 	bl	8001eb4 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF)
	if (pinspack == TM_I2C_PinsPack_2) {
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d109      	bne.n	800261c <_ZL20TM_I2C4_INT_InitPins17TM_I2C_PinsPack_t+0x40>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_1 | GPIO_PIN_0, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C4);
 8002608:	2304      	movs	r3, #4
 800260a:	9301      	str	r3, [sp, #4]
 800260c:	2301      	movs	r3, #1
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2301      	movs	r3, #1
 8002612:	2201      	movs	r2, #1
 8002614:	2103      	movs	r1, #3
 8002616:	4816      	ldr	r0, [pc, #88]	; (8002670 <_ZL20TM_I2C4_INT_InitPins17TM_I2C_PinsPack_t+0x94>)
 8002618:	f7ff fc4c 	bl	8001eb4 <TM_GPIO_InitAlternate>
	}
	if (pinspack == TM_I2C_PinsPack_3) {
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d10a      	bne.n	8002638 <_ZL20TM_I2C4_INT_InitPins17TM_I2C_PinsPack_t+0x5c>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C4);
 8002622:	2304      	movs	r3, #4
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	2301      	movs	r3, #1
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	2301      	movs	r3, #1
 800262c:	2201      	movs	r2, #1
 800262e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002632:	480f      	ldr	r0, [pc, #60]	; (8002670 <_ZL20TM_I2C4_INT_InitPins17TM_I2C_PinsPack_t+0x94>)
 8002634:	f7ff fc3e 	bl	8001eb4 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_4) {
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	2b03      	cmp	r3, #3
 800263c:	d10a      	bne.n	8002654 <_ZL20TM_I2C4_INT_InitPins17TM_I2C_PinsPack_t+0x78>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C4);
 800263e:	2304      	movs	r3, #4
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	2301      	movs	r3, #1
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	2301      	movs	r3, #1
 8002648:	2201      	movs	r2, #1
 800264a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800264e:	4809      	ldr	r0, [pc, #36]	; (8002674 <_ZL20TM_I2C4_INT_InitPins17TM_I2C_PinsPack_t+0x98>)
 8002650:	f7ff fc30 	bl	8001eb4 <TM_GPIO_InitAlternate>
	}
#endif
	/* Init pins */
	if (pinspack == TM_I2C_PinsPack_Custom) {
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	2b04      	cmp	r3, #4
 8002658:	d103      	bne.n	8002662 <_ZL20TM_I2C4_INT_InitPins17TM_I2C_PinsPack_t+0x86>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C3, GPIO_AF4_I2C4);
 800265a:	2104      	movs	r1, #4
 800265c:	4806      	ldr	r0, [pc, #24]	; (8002678 <_ZL20TM_I2C4_INT_InitPins17TM_I2C_PinsPack_t+0x9c>)
 800265e:	f7ff fef5 	bl	800244c <TM_I2C_InitCustomPinsCallback>
	}
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	48000c00 	.word	0x48000c00
 8002670:	48001400 	.word	0x48001400
 8002674:	48001c00 	.word	0x48001c00
 8002678:	40005c00 	.word	0x40005c00

0800267c <TM_MPU6050_Init>:
#define MPU6050_ACCE_SENS_4			((float) 8192)
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)


TM_MPU6050_Result_t TM_MPU6050_Init(TM_MPU6050_t* DataStruct, TM_MPU6050_Device_t DeviceNumber, TM_MPU6050_Accelerometer_t AccelerometerSensitivity, TM_MPU6050_Gyroscope_t GyroscopeSensitivity) {
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	4608      	mov	r0, r1
 8002686:	4611      	mov	r1, r2
 8002688:	461a      	mov	r2, r3
 800268a:	4603      	mov	r3, r0
 800268c:	70fb      	strb	r3, [r7, #3]
 800268e:	460b      	mov	r3, r1
 8002690:	70bb      	strb	r3, [r7, #2]
 8002692:	4613      	mov	r3, r2
 8002694:	707b      	strb	r3, [r7, #1]
	uint8_t temp;
	
	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8002696:	78fb      	ldrb	r3, [r7, #3]
 8002698:	f063 032f 	orn	r3, r3, #47	; 0x2f
 800269c:	b2da      	uxtb	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	701a      	strb	r2, [r3, #0]
	
	/* Initialize I2C */
	TM_I2C_Init(MPU6050_I2C, MPU6050_I2C_PINSPACK, MPU6050_I2C_CLOCK);
 80026a2:	4a1e      	ldr	r2, [pc, #120]	; (800271c <TM_MPU6050_Init+0xa0>)
 80026a4:	2101      	movs	r1, #1
 80026a6:	481e      	ldr	r0, [pc, #120]	; (8002720 <TM_MPU6050_Init+0xa4>)
 80026a8:	f7ff fd7a 	bl	80021a0 <TM_I2C_Init>
	
	/* Check if device is connected */
	if (TM_I2C_IsDeviceConnected(MPU6050_I2C, DataStruct->Address) != TM_I2C_Result_Ok) {
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	4619      	mov	r1, r3
 80026b2:	481b      	ldr	r0, [pc, #108]	; (8002720 <TM_MPU6050_Init+0xa4>)
 80026b4:	f7ff feaa 	bl	800240c <TM_I2C_IsDeviceConnected>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bf14      	ite	ne
 80026be:	2301      	movne	r3, #1
 80026c0:	2300      	moveq	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <TM_MPU6050_Init+0x50>
		/* Return error */
		return TM_MPU6050_Result_DeviceNotConnected;
 80026c8:	2302      	movs	r3, #2
 80026ca:	e022      	b.n	8002712 <TM_MPU6050_Init+0x96>
	}
	
	/* Check who am I */
	TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_WHO_AM_I, &temp);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	7819      	ldrb	r1, [r3, #0]
 80026d0:	f107 030f 	add.w	r3, r7, #15
 80026d4:	2275      	movs	r2, #117	; 0x75
 80026d6:	4812      	ldr	r0, [pc, #72]	; (8002720 <TM_MPU6050_Init+0xa4>)
 80026d8:	f7ff fdda 	bl	8002290 <TM_I2C_Read>
	if (temp != MPU6050_I_AM) {
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	2b68      	cmp	r3, #104	; 0x68
 80026e0:	d001      	beq.n	80026e6 <TM_MPU6050_Init+0x6a>
		/* Return error */
		return TM_MPU6050_Result_DeviceInvalid;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e015      	b.n	8002712 <TM_MPU6050_Init+0x96>
	}
	
	/* Wakeup MPU6050 */
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_PWR_MGMT_1, 0x00);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	7819      	ldrb	r1, [r3, #0]
 80026ea:	2300      	movs	r3, #0
 80026ec:	226b      	movs	r2, #107	; 0x6b
 80026ee:	480c      	ldr	r0, [pc, #48]	; (8002720 <TM_MPU6050_Init+0xa4>)
 80026f0:	f7ff fe58 	bl	80023a4 <TM_I2C_Write>
	
	/* Set sample rate to 1kHz */
	TM_MPU6050_SetDataRate(DataStruct, TM_MPU6050_DataRate_1KHz);
 80026f4:	2107      	movs	r1, #7
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f8b0 	bl	800285c <TM_MPU6050_SetDataRate>
	
	/* Config accelerometer */
	TM_MPU6050_SetAccelerometer(DataStruct, AccelerometerSensitivity);
 80026fc:	78bb      	ldrb	r3, [r7, #2]
 80026fe:	4619      	mov	r1, r3
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f85f 	bl	80027c4 <TM_MPU6050_SetAccelerometer>
	
	/* Config accelerometer */
	TM_MPU6050_SetGyroscope(DataStruct, GyroscopeSensitivity);
 8002706:	787b      	ldrb	r3, [r7, #1]
 8002708:	4619      	mov	r1, r3
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f80a 	bl	8002724 <TM_MPU6050_SetGyroscope>
	
	/* Return OK */
	return TM_MPU6050_Result_Ok;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	00061a80 	.word	0x00061a80
 8002720:	40005400 	.word	0x40005400

08002724 <TM_MPU6050_SetGyroscope>:

TM_MPU6050_Result_t TM_MPU6050_SetGyroscope(TM_MPU6050_t* DataStruct, TM_MPU6050_Gyroscope_t GyroscopeSensitivity) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	70fb      	strb	r3, [r7, #3]
	uint8_t temp;
	
	/* Config gyroscope */
	TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_GYRO_CONFIG, &temp);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	7819      	ldrb	r1, [r3, #0]
 8002734:	f107 030f 	add.w	r3, r7, #15
 8002738:	221b      	movs	r2, #27
 800273a:	481d      	ldr	r0, [pc, #116]	; (80027b0 <TM_MPU6050_SetGyroscope+0x8c>)
 800273c:	f7ff fda8 	bl	8002290 <TM_I2C_Read>
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	b25b      	sxtb	r3, r3
 8002744:	f023 0318 	bic.w	r3, r3, #24
 8002748:	b25a      	sxtb	r2, r3
 800274a:	78fb      	ldrb	r3, [r7, #3]
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	b25b      	sxtb	r3, r3
 8002750:	4313      	orrs	r3, r2
 8002752:	b25b      	sxtb	r3, r3
 8002754:	b2db      	uxtb	r3, r3
 8002756:	73fb      	strb	r3, [r7, #15]
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_GYRO_CONFIG, temp);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	7819      	ldrb	r1, [r3, #0]
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	221b      	movs	r2, #27
 8002760:	4813      	ldr	r0, [pc, #76]	; (80027b0 <TM_MPU6050_SetGyroscope+0x8c>)
 8002762:	f7ff fe1f 	bl	80023a4 <TM_I2C_Write>
	
	switch (GyroscopeSensitivity) {
 8002766:	78fb      	ldrb	r3, [r7, #3]
 8002768:	2b03      	cmp	r3, #3
 800276a:	d81a      	bhi.n	80027a2 <TM_MPU6050_SetGyroscope+0x7e>
 800276c:	a201      	add	r2, pc, #4	; (adr r2, 8002774 <TM_MPU6050_SetGyroscope+0x50>)
 800276e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002772:	bf00      	nop
 8002774:	08002785 	.word	0x08002785
 8002778:	0800278d 	.word	0x0800278d
 800277c:	08002795 	.word	0x08002795
 8002780:	0800279d 	.word	0x0800279d
		case TM_MPU6050_Gyroscope_250s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250; 
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a0b      	ldr	r2, [pc, #44]	; (80027b4 <TM_MPU6050_SetGyroscope+0x90>)
 8002788:	605a      	str	r2, [r3, #4]
			break;
 800278a:	e00b      	b.n	80027a4 <TM_MPU6050_SetGyroscope+0x80>
		case TM_MPU6050_Gyroscope_500s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500; 
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <TM_MPU6050_SetGyroscope+0x94>)
 8002790:	605a      	str	r2, [r3, #4]
			break;
 8002792:	e007      	b.n	80027a4 <TM_MPU6050_SetGyroscope+0x80>
		case TM_MPU6050_Gyroscope_1000s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000; 
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a09      	ldr	r2, [pc, #36]	; (80027bc <TM_MPU6050_SetGyroscope+0x98>)
 8002798:	605a      	str	r2, [r3, #4]
			break;
 800279a:	e003      	b.n	80027a4 <TM_MPU6050_SetGyroscope+0x80>
		case TM_MPU6050_Gyroscope_2000s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000; 
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a08      	ldr	r2, [pc, #32]	; (80027c0 <TM_MPU6050_SetGyroscope+0x9c>)
 80027a0:	605a      	str	r2, [r3, #4]
		default:
			break;
 80027a2:	bf00      	nop
	}
	
	/* Return OK */
	return TM_MPU6050_Result_Ok;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40005400 	.word	0x40005400
 80027b4:	3bfa232d 	.word	0x3bfa232d
 80027b8:	3c7a232d 	.word	0x3c7a232d
 80027bc:	3cf9c190 	.word	0x3cf9c190
 80027c0:	3d79c190 	.word	0x3d79c190

080027c4 <TM_MPU6050_SetAccelerometer>:

TM_MPU6050_Result_t TM_MPU6050_SetAccelerometer(TM_MPU6050_t* DataStruct, TM_MPU6050_Accelerometer_t AccelerometerSensitivity) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	70fb      	strb	r3, [r7, #3]
	uint8_t temp;
	
	/* Config accelerometer */
	TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_CONFIG, &temp);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	7819      	ldrb	r1, [r3, #0]
 80027d4:	f107 030f 	add.w	r3, r7, #15
 80027d8:	221c      	movs	r2, #28
 80027da:	481f      	ldr	r0, [pc, #124]	; (8002858 <TM_MPU6050_SetAccelerometer+0x94>)
 80027dc:	f7ff fd58 	bl	8002290 <TM_I2C_Read>
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	b25b      	sxtb	r3, r3
 80027e4:	f023 0318 	bic.w	r3, r3, #24
 80027e8:	b25a      	sxtb	r2, r3
 80027ea:	78fb      	ldrb	r3, [r7, #3]
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	b25b      	sxtb	r3, r3
 80027f0:	4313      	orrs	r3, r2
 80027f2:	b25b      	sxtb	r3, r3
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	73fb      	strb	r3, [r7, #15]
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_CONFIG, temp);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	7819      	ldrb	r1, [r3, #0]
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	221c      	movs	r2, #28
 8002800:	4815      	ldr	r0, [pc, #84]	; (8002858 <TM_MPU6050_SetAccelerometer+0x94>)
 8002802:	f7ff fdcf 	bl	80023a4 <TM_I2C_Write>
	
	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	2b03      	cmp	r3, #3
 800280a:	d81e      	bhi.n	800284a <TM_MPU6050_SetAccelerometer+0x86>
 800280c:	a201      	add	r2, pc, #4	; (adr r2, 8002814 <TM_MPU6050_SetAccelerometer+0x50>)
 800280e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002812:	bf00      	nop
 8002814:	08002825 	.word	0x08002825
 8002818:	0800282f 	.word	0x0800282f
 800281c:	08002839 	.word	0x08002839
 8002820:	08002843 	.word	0x08002843
		case TM_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2; 
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800282a:	609a      	str	r2, [r3, #8]
			break;
 800282c:	e00e      	b.n	800284c <TM_MPU6050_SetAccelerometer+0x88>
		case TM_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4; 
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8002834:	609a      	str	r2, [r3, #8]
			break;
 8002836:	e009      	b.n	800284c <TM_MPU6050_SetAccelerometer+0x88>
		case TM_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8; 
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800283e:	609a      	str	r2, [r3, #8]
			break;
 8002840:	e004      	b.n	800284c <TM_MPU6050_SetAccelerometer+0x88>
		case TM_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16; 
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8002848:	609a      	str	r2, [r3, #8]
		default:
			break;
 800284a:	bf00      	nop
	}
	
	/* Return OK */
	return TM_MPU6050_Result_Ok;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40005400 	.word	0x40005400

0800285c <TM_MPU6050_SetDataRate>:

TM_MPU6050_Result_t TM_MPU6050_SetDataRate(TM_MPU6050_t* DataStruct, uint8_t rate) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	70fb      	strb	r3, [r7, #3]
	/* Set data sample rate */
	if (TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_SMPLRT_DIV, rate) != TM_I2C_Result_Ok) {
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	7819      	ldrb	r1, [r3, #0]
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	2219      	movs	r2, #25
 8002870:	4808      	ldr	r0, [pc, #32]	; (8002894 <TM_MPU6050_SetDataRate+0x38>)
 8002872:	f7ff fd97 	bl	80023a4 <TM_I2C_Write>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf14      	ite	ne
 800287c:	2301      	movne	r3, #1
 800287e:	2300      	moveq	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <TM_MPU6050_SetDataRate+0x2e>
		/* Return error */
		return TM_MPU6050_Result_Error;
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <TM_MPU6050_SetDataRate+0x30>
	}
	
	/* Return OK */
	return TM_MPU6050_Result_Ok;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40005400 	.word	0x40005400

08002898 <TM_MPU6050_ReadInterrupts>:
	
	/* Return OK */
	return TM_MPU6050_Result_Ok;
}

TM_MPU6050_Result_t TM_MPU6050_ReadInterrupts(TM_MPU6050_t* DataStruct, TM_MPU6050_Interrupt_t* InterruptsStruct) {
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
	uint8_t read;
	
	/* Reset structure */
	InterruptsStruct->Status = 0;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]
	
	/* Read interrupts status register */
	if (TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_INT_STATUS, &read) != TM_I2C_Result_Ok) {
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	7819      	ldrb	r1, [r3, #0]
 80028ac:	f107 030f 	add.w	r3, r7, #15
 80028b0:	223a      	movs	r2, #58	; 0x3a
 80028b2:	480a      	ldr	r0, [pc, #40]	; (80028dc <TM_MPU6050_ReadInterrupts+0x44>)
 80028b4:	f7ff fcec 	bl	8002290 <TM_I2C_Read>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	bf14      	ite	ne
 80028be:	2301      	movne	r3, #1
 80028c0:	2300      	moveq	r3, #0
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <TM_MPU6050_ReadInterrupts+0x34>
		/* Return error */
		return TM_MPU6050_Result_Error;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e003      	b.n	80028d4 <TM_MPU6050_ReadInterrupts+0x3c>
	}
	
	/* Fill value */
	InterruptsStruct->Status = read;
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	701a      	strb	r2, [r3, #0]
	
	/* Return OK */
	return TM_MPU6050_Result_Ok;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40005400 	.word	0x40005400

080028e0 <TM_MPU6050_ReadAll>:
	
	/* Return OK */
	return TM_MPU6050_Result_Ok;
}

TM_MPU6050_Result_t TM_MPU6050_ReadAll(TM_MPU6050_t* DataStruct) {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	int16_t temp;
	
	/* Read full raw data, 14bytes */
	TM_I2C_ReadMulti(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_XOUT_H, data, 14);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	7819      	ldrb	r1, [r3, #0]
 80028ec:	f107 0308 	add.w	r3, r7, #8
 80028f0:	220e      	movs	r2, #14
 80028f2:	9200      	str	r2, [sp, #0]
 80028f4:	223b      	movs	r2, #59	; 0x3b
 80028f6:	482b      	ldr	r0, [pc, #172]	; (80029a4 <TM_MPU6050_ReadAll+0xc4>)
 80028f8:	f7ff fd0f 	bl	800231a <TM_I2C_ReadMulti>
	
	/* Format accelerometer data */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);	
 80028fc:	7a3b      	ldrb	r3, [r7, #8]
 80028fe:	021b      	lsls	r3, r3, #8
 8002900:	b21a      	sxth	r2, r3
 8002902:	7a7b      	ldrb	r3, [r7, #9]
 8002904:	b21b      	sxth	r3, r3
 8002906:	4313      	orrs	r3, r2
 8002908:	b21a      	sxth	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 800290e:	7abb      	ldrb	r3, [r7, #10]
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	b21a      	sxth	r2, r3
 8002914:	7afb      	ldrb	r3, [r7, #11]
 8002916:	b21b      	sxth	r3, r3
 8002918:	4313      	orrs	r3, r2
 800291a:	b21a      	sxth	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8002920:	7b3b      	ldrb	r3, [r7, #12]
 8002922:	021b      	lsls	r3, r3, #8
 8002924:	b21a      	sxth	r2, r3
 8002926:	7b7b      	ldrb	r3, [r7, #13]
 8002928:	b21b      	sxth	r3, r3
 800292a:	4313      	orrs	r3, r2
 800292c:	b21a      	sxth	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	821a      	strh	r2, [r3, #16]

	/* Format temperature */
	temp = (data[6] << 8 | data[7]);
 8002932:	7bbb      	ldrb	r3, [r7, #14]
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	b21a      	sxth	r2, r3
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	b21b      	sxth	r3, r3
 800293c:	4313      	orrs	r3, r2
 800293e:	82fb      	strh	r3, [r7, #22]
	DataStruct->Temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 8002940:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002944:	ee07 3a90 	vmov	s15, r3
 8002948:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800294c:	eddf 6a16 	vldr	s13, [pc, #88]	; 80029a8 <TM_MPU6050_ReadAll+0xc8>
 8002950:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002954:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80029ac <TM_MPU6050_ReadAll+0xcc>
 8002958:	ee77 7a87 	vadd.f32	s15, s15, s14
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	edc3 7a06 	vstr	s15, [r3, #24]
	
	/* Format gyroscope data */
	DataStruct->Gyroscope_X = (int16_t)(data[8] << 8 | data[9]);
 8002962:	7c3b      	ldrb	r3, [r7, #16]
 8002964:	021b      	lsls	r3, r3, #8
 8002966:	b21a      	sxth	r2, r3
 8002968:	7c7b      	ldrb	r3, [r7, #17]
 800296a:	b21b      	sxth	r3, r3
 800296c:	4313      	orrs	r3, r2
 800296e:	b21a      	sxth	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[10] << 8 | data[11]);
 8002974:	7cbb      	ldrb	r3, [r7, #18]
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	b21a      	sxth	r2, r3
 800297a:	7cfb      	ldrb	r3, [r7, #19]
 800297c:	b21b      	sxth	r3, r3
 800297e:	4313      	orrs	r3, r2
 8002980:	b21a      	sxth	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
 8002986:	7d3b      	ldrb	r3, [r7, #20]
 8002988:	021b      	lsls	r3, r3, #8
 800298a:	b21a      	sxth	r2, r3
 800298c:	7d7b      	ldrb	r3, [r7, #21]
 800298e:	b21b      	sxth	r3, r3
 8002990:	4313      	orrs	r3, r2
 8002992:	b21a      	sxth	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return TM_MPU6050_Result_Ok;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40005400 	.word	0x40005400
 80029a8:	43aa0000 	.word	0x43aa0000
 80029ac:	42121eb8 	.word	0x42121eb8

080029b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80029b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029b4:	f7ff fa4c 	bl	8001e50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80029b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80029ba:	e003      	b.n	80029c4 <LoopCopyDataInit>

080029bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80029be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80029c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80029c2:	3104      	adds	r1, #4

080029c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80029c4:	480a      	ldr	r0, [pc, #40]	; (80029f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80029c6:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80029c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80029ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80029cc:	d3f6      	bcc.n	80029bc <CopyDataInit>
	ldr	r2, =_sbss
 80029ce:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80029d0:	e002      	b.n	80029d8 <LoopFillZerobss>

080029d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80029d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80029d4:	f842 3b04 	str.w	r3, [r2], #4

080029d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <LoopForever+0x16>)
	cmp	r2, r3
 80029da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80029dc:	d3f9      	bcc.n	80029d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029de:	f008 faa3 	bl	800af28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029e2:	f7fe fb1b 	bl	800101c <main>

080029e6 <LoopForever>:

LoopForever:
    b LoopForever
 80029e6:	e7fe      	b.n	80029e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80029e8:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80029ec:	0800fe8c 	.word	0x0800fe8c
	ldr	r0, =_sdata
 80029f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80029f4:	20000314 	.word	0x20000314
	ldr	r2, =_sbss
 80029f8:	20000314 	.word	0x20000314
	ldr	r3, = _ebss
 80029fc:	20001f0c 	.word	0x20001f0c

08002a00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a00:	e7fe      	b.n	8002a00 <ADC1_IRQHandler>

08002a02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a0c:	2003      	movs	r0, #3
 8002a0e:	f000 f8de 	bl	8002bce <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a12:	2000      	movs	r0, #0
 8002a14:	f7ff f8c4 	bl	8001ba0 <HAL_InitTick>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	71fb      	strb	r3, [r7, #7]
 8002a22:	e001      	b.n	8002a28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a24:	f7fe ff84 	bl	8001930 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a28:	79fb      	ldrb	r3, [r7, #7]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_IncTick+0x20>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_IncTick+0x24>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4413      	add	r3, r2
 8002a44:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <HAL_IncTick+0x24>)
 8002a46:	6013      	str	r3, [r2, #0]
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	20000138 	.word	0x20000138
 8002a58:	20001eb8 	.word	0x20001eb8

08002a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <HAL_GetTick+0x14>)
 8002a62:	681b      	ldr	r3, [r3, #0]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	20001eb8 	.word	0x20001eb8

08002a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a90:	4013      	ands	r3, r2
 8002a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aa6:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	60d3      	str	r3, [r2, #12]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	0a1b      	lsrs	r3, r3, #8
 8002ac6:	f003 0307 	and.w	r3, r3, #7
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	db0b      	blt.n	8002b02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	f003 021f 	and.w	r2, r3, #31
 8002af0:	4907      	ldr	r1, [pc, #28]	; (8002b10 <__NVIC_EnableIRQ+0x38>)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	2001      	movs	r0, #1
 8002afa:	fa00 f202 	lsl.w	r2, r0, r2
 8002afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	e000e100 	.word	0xe000e100

08002b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	db0a      	blt.n	8002b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	490c      	ldr	r1, [pc, #48]	; (8002b60 <__NVIC_SetPriority+0x4c>)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	0112      	lsls	r2, r2, #4
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	440b      	add	r3, r1
 8002b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b3c:	e00a      	b.n	8002b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	4908      	ldr	r1, [pc, #32]	; (8002b64 <__NVIC_SetPriority+0x50>)
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	3b04      	subs	r3, #4
 8002b4c:	0112      	lsls	r2, r2, #4
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	440b      	add	r3, r1
 8002b52:	761a      	strb	r2, [r3, #24]
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000e100 	.word	0xe000e100
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b089      	sub	sp, #36	; 0x24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f1c3 0307 	rsb	r3, r3, #7
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	bf28      	it	cs
 8002b86:	2304      	movcs	r3, #4
 8002b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	2b06      	cmp	r3, #6
 8002b90:	d902      	bls.n	8002b98 <NVIC_EncodePriority+0x30>
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3b03      	subs	r3, #3
 8002b96:	e000      	b.n	8002b9a <NVIC_EncodePriority+0x32>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	401a      	ands	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	43d9      	mvns	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc0:	4313      	orrs	r3, r2
         );
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3724      	adds	r7, #36	; 0x24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff ff4c 	bl	8002a74 <__NVIC_SetPriorityGrouping>
}
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf6:	f7ff ff61 	bl	8002abc <__NVIC_GetPriorityGrouping>
 8002bfa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	68b9      	ldr	r1, [r7, #8]
 8002c00:	6978      	ldr	r0, [r7, #20]
 8002c02:	f7ff ffb1 	bl	8002b68 <NVIC_EncodePriority>
 8002c06:	4602      	mov	r2, r0
 8002c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff ff80 	bl	8002b14 <__NVIC_SetPriority>
}
 8002c14:	bf00      	nop
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff ff54 	bl	8002ad8 <__NVIC_EnableIRQ>
}
 8002c30:	bf00      	nop
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e08d      	b.n	8002d66 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4b47      	ldr	r3, [pc, #284]	; (8002d70 <HAL_DMA_Init+0x138>)
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d80f      	bhi.n	8002c76 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	4b45      	ldr	r3, [pc, #276]	; (8002d74 <HAL_DMA_Init+0x13c>)
 8002c5e:	4413      	add	r3, r2
 8002c60:	4a45      	ldr	r2, [pc, #276]	; (8002d78 <HAL_DMA_Init+0x140>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	091b      	lsrs	r3, r3, #4
 8002c68:	009a      	lsls	r2, r3, #2
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a42      	ldr	r2, [pc, #264]	; (8002d7c <HAL_DMA_Init+0x144>)
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40
 8002c74:	e00e      	b.n	8002c94 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	4b40      	ldr	r3, [pc, #256]	; (8002d80 <HAL_DMA_Init+0x148>)
 8002c7e:	4413      	add	r3, r2
 8002c80:	4a3d      	ldr	r2, [pc, #244]	; (8002d78 <HAL_DMA_Init+0x140>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	091b      	lsrs	r3, r3, #4
 8002c88:	009a      	lsls	r2, r3, #2
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a3c      	ldr	r2, [pc, #240]	; (8002d84 <HAL_DMA_Init+0x14c>)
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fa72 	bl	80031d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cf4:	d102      	bne.n	8002cfc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d10:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d010      	beq.n	8002d3c <HAL_DMA_Init+0x104>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d80c      	bhi.n	8002d3c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fa92 	bl	800324c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	e008      	b.n	8002d4e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40020407 	.word	0x40020407
 8002d74:	bffdfff8 	.word	0xbffdfff8
 8002d78:	cccccccd 	.word	0xcccccccd
 8002d7c:	40020000 	.word	0x40020000
 8002d80:	bffdfbf8 	.word	0xbffdfbf8
 8002d84:	40020400 	.word	0x40020400

08002d88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_DMA_Start_IT+0x20>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e066      	b.n	8002e76 <HAL_DMA_Start_IT+0xee>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d155      	bne.n	8002e68 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0201 	bic.w	r2, r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	68b9      	ldr	r1, [r7, #8]
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 f9b6 	bl	8003152 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d008      	beq.n	8002e00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 020e 	orr.w	r2, r2, #14
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	e00f      	b.n	8002e20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0204 	bic.w	r2, r2, #4
 8002e0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 020a 	orr.w	r2, r2, #10
 8002e1e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d007      	beq.n	8002e3e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e3c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d007      	beq.n	8002e56 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e54:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f042 0201 	orr.w	r2, r2, #1
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	e005      	b.n	8002e74 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e70:	2302      	movs	r3, #2
 8002e72:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b085      	sub	sp, #20
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d008      	beq.n	8002ea8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2204      	movs	r2, #4
 8002e9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e040      	b.n	8002f2a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 020e 	bic.w	r2, r2, #14
 8002eb6:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ec6:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0201 	bic.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002edc:	f003 021c 	and.w	r2, r3, #28
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eea:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ef4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00c      	beq.n	8002f18 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f0c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f16:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d005      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2204      	movs	r2, #4
 8002f52:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	73fb      	strb	r3, [r7, #15]
 8002f58:	e047      	b.n	8002fea <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 020e 	bic.w	r2, r2, #14
 8002f68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0201 	bic.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	f003 021c 	and.w	r2, r3, #28
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	2101      	movs	r1, #1
 8002f98:	fa01 f202 	lsl.w	r2, r1, r2
 8002f9c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fa6:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00c      	beq.n	8002fca <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fbe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002fc8:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	4798      	blx	r3
    }
  }
  return status;
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003010:	f003 031c 	and.w	r3, r3, #28
 8003014:	2204      	movs	r2, #4
 8003016:	409a      	lsls	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4013      	ands	r3, r2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d026      	beq.n	800306e <HAL_DMA_IRQHandler+0x7a>
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b00      	cmp	r3, #0
 8003028:	d021      	beq.n	800306e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d107      	bne.n	8003048 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0204 	bic.w	r2, r2, #4
 8003046:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304c:	f003 021c 	and.w	r2, r3, #28
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	2104      	movs	r1, #4
 8003056:	fa01 f202 	lsl.w	r2, r1, r2
 800305a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003060:	2b00      	cmp	r3, #0
 8003062:	d071      	beq.n	8003148 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800306c:	e06c      	b.n	8003148 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	f003 031c 	and.w	r3, r3, #28
 8003076:	2202      	movs	r2, #2
 8003078:	409a      	lsls	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4013      	ands	r3, r2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d02e      	beq.n	80030e0 <HAL_DMA_IRQHandler+0xec>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d029      	beq.n	80030e0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10b      	bne.n	80030b2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 020a 	bic.w	r2, r2, #10
 80030a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	f003 021c 	and.w	r2, r3, #28
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	2102      	movs	r1, #2
 80030c0:	fa01 f202 	lsl.w	r2, r1, r2
 80030c4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d038      	beq.n	8003148 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80030de:	e033      	b.n	8003148 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e4:	f003 031c 	and.w	r3, r3, #28
 80030e8:	2208      	movs	r2, #8
 80030ea:	409a      	lsls	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d02a      	beq.n	800314a <HAL_DMA_IRQHandler+0x156>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d025      	beq.n	800314a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 020e 	bic.w	r2, r2, #14
 800310c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	f003 021c 	and.w	r2, r3, #28
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	2101      	movs	r1, #1
 800311c:	fa01 f202 	lsl.w	r2, r1, r2
 8003120:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313c:	2b00      	cmp	r3, #0
 800313e:	d004      	beq.n	800314a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003148:	bf00      	nop
 800314a:	bf00      	nop
}
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003152:	b480      	push	{r7}
 8003154:	b085      	sub	sp, #20
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003168:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316e:	2b00      	cmp	r3, #0
 8003170:	d004      	beq.n	800317c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800317a:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003180:	f003 021c 	and.w	r2, r3, #28
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	2101      	movs	r1, #1
 800318a:	fa01 f202 	lsl.w	r2, r1, r2
 800318e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b10      	cmp	r3, #16
 800319e:	d108      	bne.n	80031b2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031b0:	e007      	b.n	80031c2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	60da      	str	r2, [r3, #12]
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	4b17      	ldr	r3, [pc, #92]	; (800323c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d80a      	bhi.n	80031fa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e8:	089b      	lsrs	r3, r3, #2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031f0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6493      	str	r3, [r2, #72]	; 0x48
 80031f8:	e007      	b.n	800320a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	089b      	lsrs	r3, r3, #2
 8003200:	009a      	lsls	r2, r3, #2
 8003202:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003204:	4413      	add	r3, r2
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	3b08      	subs	r3, #8
 8003212:	4a0c      	ldr	r2, [pc, #48]	; (8003244 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003214:	fba2 2303 	umull	r2, r3, r2, r3
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a0a      	ldr	r2, [pc, #40]	; (8003248 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003220:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f003 031f 	and.w	r3, r3, #31
 8003228:	2201      	movs	r2, #1
 800322a:	409a      	lsls	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003230:	bf00      	nop
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	40020407 	.word	0x40020407
 8003240:	4002081c 	.word	0x4002081c
 8003244:	cccccccd 	.word	0xcccccccd
 8003248:	40020880 	.word	0x40020880

0800324c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4b0b      	ldr	r3, [pc, #44]	; (800328c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	461a      	mov	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a08      	ldr	r2, [pc, #32]	; (8003290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800326e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	3b01      	subs	r3, #1
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	2201      	movs	r2, #1
 800327a:	409a      	lsls	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	1000823f 	.word	0x1000823f
 8003290:	40020940 	.word	0x40020940

08003294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032a2:	e166      	b.n	8003572 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	2101      	movs	r1, #1
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	fa01 f303 	lsl.w	r3, r1, r3
 80032b0:	4013      	ands	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 8158 	beq.w	800356c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d00b      	beq.n	80032dc <HAL_GPIO_Init+0x48>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d007      	beq.n	80032dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032d0:	2b11      	cmp	r3, #17
 80032d2:	d003      	beq.n	80032dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b12      	cmp	r3, #18
 80032da:	d130      	bne.n	800333e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	2203      	movs	r2, #3
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003312:	2201      	movs	r2, #1
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4013      	ands	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	f003 0201 	and.w	r2, r3, #1
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	2203      	movs	r2, #3
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4013      	ands	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d003      	beq.n	800337e <HAL_GPIO_Init+0xea>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b12      	cmp	r3, #18
 800337c:	d123      	bne.n	80033c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	08da      	lsrs	r2, r3, #3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3208      	adds	r2, #8
 8003386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800338a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	220f      	movs	r2, #15
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4013      	ands	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	08da      	lsrs	r2, r3, #3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3208      	adds	r2, #8
 80033c0:	6939      	ldr	r1, [r7, #16]
 80033c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	2203      	movs	r2, #3
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4013      	ands	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 0203 	and.w	r2, r3, #3
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 80b2 	beq.w	800356c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003408:	4b61      	ldr	r3, [pc, #388]	; (8003590 <HAL_GPIO_Init+0x2fc>)
 800340a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340c:	4a60      	ldr	r2, [pc, #384]	; (8003590 <HAL_GPIO_Init+0x2fc>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6613      	str	r3, [r2, #96]	; 0x60
 8003414:	4b5e      	ldr	r3, [pc, #376]	; (8003590 <HAL_GPIO_Init+0x2fc>)
 8003416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003420:	4a5c      	ldr	r2, [pc, #368]	; (8003594 <HAL_GPIO_Init+0x300>)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	089b      	lsrs	r3, r3, #2
 8003426:	3302      	adds	r3, #2
 8003428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800342c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	220f      	movs	r2, #15
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4013      	ands	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800344a:	d02b      	beq.n	80034a4 <HAL_GPIO_Init+0x210>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a52      	ldr	r2, [pc, #328]	; (8003598 <HAL_GPIO_Init+0x304>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d025      	beq.n	80034a0 <HAL_GPIO_Init+0x20c>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a51      	ldr	r2, [pc, #324]	; (800359c <HAL_GPIO_Init+0x308>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d01f      	beq.n	800349c <HAL_GPIO_Init+0x208>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a50      	ldr	r2, [pc, #320]	; (80035a0 <HAL_GPIO_Init+0x30c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d019      	beq.n	8003498 <HAL_GPIO_Init+0x204>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a4f      	ldr	r2, [pc, #316]	; (80035a4 <HAL_GPIO_Init+0x310>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d013      	beq.n	8003494 <HAL_GPIO_Init+0x200>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a4e      	ldr	r2, [pc, #312]	; (80035a8 <HAL_GPIO_Init+0x314>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d00d      	beq.n	8003490 <HAL_GPIO_Init+0x1fc>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a4d      	ldr	r2, [pc, #308]	; (80035ac <HAL_GPIO_Init+0x318>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d007      	beq.n	800348c <HAL_GPIO_Init+0x1f8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a4c      	ldr	r2, [pc, #304]	; (80035b0 <HAL_GPIO_Init+0x31c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d101      	bne.n	8003488 <HAL_GPIO_Init+0x1f4>
 8003484:	2307      	movs	r3, #7
 8003486:	e00e      	b.n	80034a6 <HAL_GPIO_Init+0x212>
 8003488:	2308      	movs	r3, #8
 800348a:	e00c      	b.n	80034a6 <HAL_GPIO_Init+0x212>
 800348c:	2306      	movs	r3, #6
 800348e:	e00a      	b.n	80034a6 <HAL_GPIO_Init+0x212>
 8003490:	2305      	movs	r3, #5
 8003492:	e008      	b.n	80034a6 <HAL_GPIO_Init+0x212>
 8003494:	2304      	movs	r3, #4
 8003496:	e006      	b.n	80034a6 <HAL_GPIO_Init+0x212>
 8003498:	2303      	movs	r3, #3
 800349a:	e004      	b.n	80034a6 <HAL_GPIO_Init+0x212>
 800349c:	2302      	movs	r3, #2
 800349e:	e002      	b.n	80034a6 <HAL_GPIO_Init+0x212>
 80034a0:	2301      	movs	r3, #1
 80034a2:	e000      	b.n	80034a6 <HAL_GPIO_Init+0x212>
 80034a4:	2300      	movs	r3, #0
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	f002 0203 	and.w	r2, r2, #3
 80034ac:	0092      	lsls	r2, r2, #2
 80034ae:	4093      	lsls	r3, r2
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034b6:	4937      	ldr	r1, [pc, #220]	; (8003594 <HAL_GPIO_Init+0x300>)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	089b      	lsrs	r3, r3, #2
 80034bc:	3302      	adds	r3, #2
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80034c4:	4b3b      	ldr	r3, [pc, #236]	; (80035b4 <HAL_GPIO_Init+0x320>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4013      	ands	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034e8:	4a32      	ldr	r2, [pc, #200]	; (80035b4 <HAL_GPIO_Init+0x320>)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80034ee:	4b31      	ldr	r3, [pc, #196]	; (80035b4 <HAL_GPIO_Init+0x320>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	43db      	mvns	r3, r3
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4013      	ands	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003512:	4a28      	ldr	r2, [pc, #160]	; (80035b4 <HAL_GPIO_Init+0x320>)
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003518:	4b26      	ldr	r3, [pc, #152]	; (80035b4 <HAL_GPIO_Init+0x320>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	43db      	mvns	r3, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4013      	ands	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800353c:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <HAL_GPIO_Init+0x320>)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003542:	4b1c      	ldr	r3, [pc, #112]	; (80035b4 <HAL_GPIO_Init+0x320>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	43db      	mvns	r3, r3
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4013      	ands	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003566:	4a13      	ldr	r2, [pc, #76]	; (80035b4 <HAL_GPIO_Init+0x320>)
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	3301      	adds	r3, #1
 8003570:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	f47f ae91 	bne.w	80032a4 <HAL_GPIO_Init+0x10>
  }
}
 8003582:	bf00      	nop
 8003584:	bf00      	nop
 8003586:	371c      	adds	r7, #28
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	40021000 	.word	0x40021000
 8003594:	40010000 	.word	0x40010000
 8003598:	48000400 	.word	0x48000400
 800359c:	48000800 	.word	0x48000800
 80035a0:	48000c00 	.word	0x48000c00
 80035a4:	48001000 	.word	0x48001000
 80035a8:	48001400 	.word	0x48001400
 80035ac:	48001800 	.word	0x48001800
 80035b0:	48001c00 	.word	0x48001c00
 80035b4:	40010400 	.word	0x40010400

080035b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	807b      	strh	r3, [r7, #2]
 80035c4:	4613      	mov	r3, r2
 80035c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035c8:	787b      	ldrb	r3, [r7, #1]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035ce:	887a      	ldrh	r2, [r7, #2]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035d4:	e002      	b.n	80035dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035d6:	887a      	ldrh	r2, [r7, #2]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035f2:	4b08      	ldr	r3, [pc, #32]	; (8003614 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035f4:	695a      	ldr	r2, [r3, #20]
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d006      	beq.n	800360c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035fe:	4a05      	ldr	r2, [pc, #20]	; (8003614 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003600:	88fb      	ldrh	r3, [r7, #6]
 8003602:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	4618      	mov	r0, r3
 8003608:	f000 f806 	bl	8003618 <HAL_GPIO_EXTI_Callback>
  }
}
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40010400 	.word	0x40010400

08003618 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e081      	b.n	8003744 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d106      	bne.n	800365a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7fe f993 	bl	8001980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2224      	movs	r2, #36	; 0x24
 800365e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0201 	bic.w	r2, r2, #1
 8003670:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800367e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800368e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d107      	bne.n	80036a8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036a4:	609a      	str	r2, [r3, #8]
 80036a6:	e006      	b.n	80036b6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80036b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d104      	bne.n	80036c8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036c6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036da:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036ea:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	ea42 0103 	orr.w	r1, r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	021a      	lsls	r2, r3, #8
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69d9      	ldr	r1, [r3, #28]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1a      	ldr	r2, [r3, #32]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0201 	orr.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af02      	add	r7, sp, #8
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	607a      	str	r2, [r7, #4]
 8003756:	461a      	mov	r2, r3
 8003758:	460b      	mov	r3, r1
 800375a:	817b      	strh	r3, [r7, #10]
 800375c:	4613      	mov	r3, r2
 800375e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b20      	cmp	r3, #32
 800376a:	f040 80da 	bne.w	8003922 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_I2C_Master_Transmit+0x30>
 8003778:	2302      	movs	r3, #2
 800377a:	e0d3      	b.n	8003924 <HAL_I2C_Master_Transmit+0x1d8>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003784:	f7ff f96a 	bl	8002a5c <HAL_GetTick>
 8003788:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	2319      	movs	r3, #25
 8003790:	2201      	movs	r2, #1
 8003792:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 faf9 	bl	8003d8e <I2C_WaitOnFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e0be      	b.n	8003924 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2221      	movs	r2, #33	; 0x21
 80037aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2210      	movs	r2, #16
 80037b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	893a      	ldrh	r2, [r7, #8]
 80037c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2bff      	cmp	r3, #255	; 0xff
 80037d6:	d90e      	bls.n	80037f6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	22ff      	movs	r2, #255	; 0xff
 80037dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	8979      	ldrh	r1, [r7, #10]
 80037e6:	4b51      	ldr	r3, [pc, #324]	; (800392c <HAL_I2C_Master_Transmit+0x1e0>)
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 fc5c 	bl	80040ac <I2C_TransferConfig>
 80037f4:	e06c      	b.n	80038d0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003804:	b2da      	uxtb	r2, r3
 8003806:	8979      	ldrh	r1, [r7, #10]
 8003808:	4b48      	ldr	r3, [pc, #288]	; (800392c <HAL_I2C_Master_Transmit+0x1e0>)
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 fc4b 	bl	80040ac <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003816:	e05b      	b.n	80038d0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	6a39      	ldr	r1, [r7, #32]
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 faf6 	bl	8003e0e <I2C_WaitOnTXISFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e07b      	b.n	8003924 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	781a      	ldrb	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d034      	beq.n	80038d0 <HAL_I2C_Master_Transmit+0x184>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386a:	2b00      	cmp	r3, #0
 800386c:	d130      	bne.n	80038d0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	2200      	movs	r2, #0
 8003876:	2180      	movs	r1, #128	; 0x80
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fa88 	bl	8003d8e <I2C_WaitOnFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e04d      	b.n	8003924 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388c:	b29b      	uxth	r3, r3
 800388e:	2bff      	cmp	r3, #255	; 0xff
 8003890:	d90e      	bls.n	80038b0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	22ff      	movs	r2, #255	; 0xff
 8003896:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389c:	b2da      	uxtb	r2, r3
 800389e:	8979      	ldrh	r1, [r7, #10]
 80038a0:	2300      	movs	r3, #0
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 fbff 	bl	80040ac <I2C_TransferConfig>
 80038ae:	e00f      	b.n	80038d0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	8979      	ldrh	r1, [r7, #10]
 80038c2:	2300      	movs	r3, #0
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 fbee 	bl	80040ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d19e      	bne.n	8003818 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	6a39      	ldr	r1, [r7, #32]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 fad5 	bl	8003e8e <I2C_WaitOnSTOPFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e01a      	b.n	8003924 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2220      	movs	r2, #32
 80038f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6859      	ldr	r1, [r3, #4]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <HAL_I2C_Master_Transmit+0x1e4>)
 8003902:	400b      	ands	r3, r1
 8003904:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	e000      	b.n	8003924 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003922:	2302      	movs	r3, #2
  }
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	80002000 	.word	0x80002000
 8003930:	fe00e800 	.word	0xfe00e800

08003934 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af02      	add	r7, sp, #8
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	607a      	str	r2, [r7, #4]
 800393e:	461a      	mov	r2, r3
 8003940:	460b      	mov	r3, r1
 8003942:	817b      	strh	r3, [r7, #10]
 8003944:	4613      	mov	r3, r2
 8003946:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b20      	cmp	r3, #32
 8003952:	f040 80db 	bne.w	8003b0c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_I2C_Master_Receive+0x30>
 8003960:	2302      	movs	r3, #2
 8003962:	e0d4      	b.n	8003b0e <HAL_I2C_Master_Receive+0x1da>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800396c:	f7ff f876 	bl	8002a5c <HAL_GetTick>
 8003970:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	2319      	movs	r3, #25
 8003978:	2201      	movs	r2, #1
 800397a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 fa05 	bl	8003d8e <I2C_WaitOnFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e0bf      	b.n	8003b0e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2222      	movs	r2, #34	; 0x22
 8003992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2210      	movs	r2, #16
 800399a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	893a      	ldrh	r2, [r7, #8]
 80039ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2bff      	cmp	r3, #255	; 0xff
 80039be:	d90e      	bls.n	80039de <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	22ff      	movs	r2, #255	; 0xff
 80039c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	8979      	ldrh	r1, [r7, #10]
 80039ce:	4b52      	ldr	r3, [pc, #328]	; (8003b18 <HAL_I2C_Master_Receive+0x1e4>)
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 fb68 	bl	80040ac <I2C_TransferConfig>
 80039dc:	e06d      	b.n	8003aba <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	8979      	ldrh	r1, [r7, #10]
 80039f0:	4b49      	ldr	r3, [pc, #292]	; (8003b18 <HAL_I2C_Master_Receive+0x1e4>)
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 fb57 	bl	80040ac <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80039fe:	e05c      	b.n	8003aba <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	6a39      	ldr	r1, [r7, #32]
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 fa7f 	bl	8003f08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e07c      	b.n	8003b0e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d034      	beq.n	8003aba <HAL_I2C_Master_Receive+0x186>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d130      	bne.n	8003aba <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	2180      	movs	r1, #128	; 0x80
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f993 	bl	8003d8e <I2C_WaitOnFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e04d      	b.n	8003b0e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2bff      	cmp	r3, #255	; 0xff
 8003a7a:	d90e      	bls.n	8003a9a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	22ff      	movs	r2, #255	; 0xff
 8003a80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	8979      	ldrh	r1, [r7, #10]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 fb0a 	bl	80040ac <I2C_TransferConfig>
 8003a98:	e00f      	b.n	8003aba <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	8979      	ldrh	r1, [r7, #10]
 8003aac:	2300      	movs	r3, #0
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 faf9 	bl	80040ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d19d      	bne.n	8003a00 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	6a39      	ldr	r1, [r7, #32]
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 f9e0 	bl	8003e8e <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e01a      	b.n	8003b0e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2220      	movs	r2, #32
 8003ade:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6859      	ldr	r1, [r3, #4]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <HAL_I2C_Master_Receive+0x1e8>)
 8003aec:	400b      	ands	r3, r1
 8003aee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	e000      	b.n	8003b0e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003b0c:	2302      	movs	r3, #2
  }
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	80002400 	.word	0x80002400
 8003b1c:	fe00e800 	.word	0xfe00e800

08003b20 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08a      	sub	sp, #40	; 0x28
 8003b24:	af02      	add	r7, sp, #8
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	607a      	str	r2, [r7, #4]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b20      	cmp	r3, #32
 8003b3e:	f040 80f1 	bne.w	8003d24 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b50:	d101      	bne.n	8003b56 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003b52:	2302      	movs	r3, #2
 8003b54:	e0e7      	b.n	8003d26 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_I2C_IsDeviceReady+0x44>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e0e0      	b.n	8003d26 <HAL_I2C_IsDeviceReady+0x206>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2224      	movs	r2, #36	; 0x24
 8003b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d107      	bne.n	8003b92 <HAL_I2C_IsDeviceReady+0x72>
 8003b82:	897b      	ldrh	r3, [r7, #10]
 8003b84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b90:	e004      	b.n	8003b9c <HAL_I2C_IsDeviceReady+0x7c>
 8003b92:	897b      	ldrh	r3, [r7, #10]
 8003b94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b98:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003ba2:	f7fe ff5b 	bl	8002a5c <HAL_GetTick>
 8003ba6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	bf0c      	ite	eq
 8003bb6:	2301      	moveq	r3, #1
 8003bb8:	2300      	movne	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b10      	cmp	r3, #16
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003bd4:	e034      	b.n	8003c40 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bdc:	d01a      	beq.n	8003c14 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bde:	f7fe ff3d 	bl	8002a5c <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d302      	bcc.n	8003bf4 <HAL_I2C_IsDeviceReady+0xd4>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10f      	bne.n	8003c14 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c00:	f043 0220 	orr.w	r2, r3, #32
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e088      	b.n	8003d26 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	bf0c      	ite	eq
 8003c22:	2301      	moveq	r3, #1
 8003c24:	2300      	movne	r3, #0
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	2b10      	cmp	r3, #16
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003c40:	7ffb      	ldrb	r3, [r7, #31]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d102      	bne.n	8003c4c <HAL_I2C_IsDeviceReady+0x12c>
 8003c46:	7fbb      	ldrb	r3, [r7, #30]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0c4      	beq.n	8003bd6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	f003 0310 	and.w	r3, r3, #16
 8003c56:	2b10      	cmp	r3, #16
 8003c58:	d01a      	beq.n	8003c90 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2200      	movs	r2, #0
 8003c62:	2120      	movs	r1, #32
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f892 	bl	8003d8e <I2C_WaitOnFlagUntilTimeout>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e058      	b.n	8003d26 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	e04a      	b.n	8003d26 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2200      	movs	r2, #0
 8003c98:	2120      	movs	r1, #32
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 f877 	bl	8003d8e <I2C_WaitOnFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e03d      	b.n	8003d26 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2210      	movs	r2, #16
 8003cb0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d118      	bne.n	8003cf4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cd0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2120      	movs	r1, #32
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 f856 	bl	8003d8e <I2C_WaitOnFlagUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e01c      	b.n	8003d26 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	f63f af3b 	bhi.w	8003b7a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d10:	f043 0220 	orr.w	r2, r3, #32
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003d24:	2302      	movs	r3, #2
  }
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3720      	adds	r7, #32
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d103      	bne.n	8003d64 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2200      	movs	r2, #0
 8003d62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d007      	beq.n	8003d82 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699a      	ldr	r2, [r3, #24]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f042 0201 	orr.w	r2, r2, #1
 8003d80:	619a      	str	r2, [r3, #24]
  }
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	60f8      	str	r0, [r7, #12]
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	603b      	str	r3, [r7, #0]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d9e:	e022      	b.n	8003de6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da6:	d01e      	beq.n	8003de6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da8:	f7fe fe58 	bl	8002a5c <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d302      	bcc.n	8003dbe <I2C_WaitOnFlagUntilTimeout+0x30>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d113      	bne.n	8003de6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	f043 0220 	orr.w	r2, r3, #32
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e00f      	b.n	8003e06 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699a      	ldr	r2, [r3, #24]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4013      	ands	r3, r2
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	bf0c      	ite	eq
 8003df6:	2301      	moveq	r3, #1
 8003df8:	2300      	movne	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d0cd      	beq.n	8003da0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e1a:	e02c      	b.n	8003e76 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f8dd 	bl	8003fe0 <I2C_IsAcknowledgeFailed>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e02a      	b.n	8003e86 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e36:	d01e      	beq.n	8003e76 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e38:	f7fe fe10 	bl	8002a5c <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d302      	bcc.n	8003e4e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d113      	bne.n	8003e76 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	f043 0220 	orr.w	r2, r3, #32
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e007      	b.n	8003e86 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d1cb      	bne.n	8003e1c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e9a:	e028      	b.n	8003eee <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 f89d 	bl	8003fe0 <I2C_IsAcknowledgeFailed>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e026      	b.n	8003efe <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb0:	f7fe fdd4 	bl	8002a5c <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d302      	bcc.n	8003ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d113      	bne.n	8003eee <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	f043 0220 	orr.w	r2, r3, #32
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e007      	b.n	8003efe <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b20      	cmp	r3, #32
 8003efa:	d1cf      	bne.n	8003e9c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f14:	e055      	b.n	8003fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f860 	bl	8003fe0 <I2C_IsAcknowledgeFailed>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e053      	b.n	8003fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d129      	bne.n	8003f8c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d105      	bne.n	8003f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	e03f      	b.n	8003fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2220      	movs	r2, #32
 8003f58:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6859      	ldr	r1, [r3, #4]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	4b1d      	ldr	r3, [pc, #116]	; (8003fdc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003f66:	400b      	ands	r3, r1
 8003f68:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e022      	b.n	8003fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8c:	f7fe fd66 	bl	8002a5c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d302      	bcc.n	8003fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10f      	bne.n	8003fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa6:	f043 0220 	orr.w	r2, r3, #32
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e007      	b.n	8003fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d1a2      	bne.n	8003f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	fe00e800 	.word	0xfe00e800

08003fe0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f003 0310 	and.w	r3, r3, #16
 8003ff6:	2b10      	cmp	r3, #16
 8003ff8:	d151      	bne.n	800409e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ffa:	e022      	b.n	8004042 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	d01e      	beq.n	8004042 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004004:	f7fe fd2a 	bl	8002a5c <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	429a      	cmp	r2, r3
 8004012:	d302      	bcc.n	800401a <I2C_IsAcknowledgeFailed+0x3a>
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d113      	bne.n	8004042 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	f043 0220 	orr.w	r2, r3, #32
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e02e      	b.n	80040a0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b20      	cmp	r3, #32
 800404e:	d1d5      	bne.n	8003ffc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2210      	movs	r2, #16
 8004056:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2220      	movs	r2, #32
 800405e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f7ff fe70 	bl	8003d46 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6859      	ldr	r1, [r3, #4]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <I2C_IsAcknowledgeFailed+0xc8>)
 8004072:	400b      	ands	r3, r1
 8004074:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	f043 0204 	orr.w	r2, r3, #4
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	fe00e800 	.word	0xfe00e800

080040ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	607b      	str	r3, [r7, #4]
 80040b6:	460b      	mov	r3, r1
 80040b8:	817b      	strh	r3, [r7, #10]
 80040ba:	4613      	mov	r3, r2
 80040bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	0d5b      	lsrs	r3, r3, #21
 80040c8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80040cc:	4b0d      	ldr	r3, [pc, #52]	; (8004104 <I2C_TransferConfig+0x58>)
 80040ce:	430b      	orrs	r3, r1
 80040d0:	43db      	mvns	r3, r3
 80040d2:	ea02 0103 	and.w	r1, r2, r3
 80040d6:	897b      	ldrh	r3, [r7, #10]
 80040d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80040dc:	7a7b      	ldrb	r3, [r7, #9]
 80040de:	041b      	lsls	r3, r3, #16
 80040e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	431a      	orrs	r2, r3
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	431a      	orrs	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	03ff63ff 	.word	0x03ff63ff

08004108 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b20      	cmp	r3, #32
 800411c:	d138      	bne.n	8004190 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004128:	2302      	movs	r3, #2
 800412a:	e032      	b.n	8004192 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2224      	movs	r2, #36	; 0x24
 8004138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0201 	bic.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800415a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6819      	ldr	r1, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800418c:	2300      	movs	r3, #0
 800418e:	e000      	b.n	8004192 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004190:	2302      	movs	r3, #2
  }
}
 8004192:	4618      	mov	r0, r3
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800419e:	b480      	push	{r7}
 80041a0:	b085      	sub	sp, #20
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b20      	cmp	r3, #32
 80041b2:	d139      	bne.n	8004228 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d101      	bne.n	80041c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041be:	2302      	movs	r3, #2
 80041c0:	e033      	b.n	800422a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2224      	movs	r2, #36	; 0x24
 80041ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0201 	bic.w	r2, r2, #1
 80041e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0201 	orr.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	e000      	b.n	800422a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004228:	2302      	movs	r3, #2
  }
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
	...

08004238 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800423c:	4b0d      	ldr	r3, [pc, #52]	; (8004274 <HAL_PWREx_GetVoltageRange+0x3c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004248:	d102      	bne.n	8004250 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800424a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800424e:	e00b      	b.n	8004268 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004250:	4b08      	ldr	r3, [pc, #32]	; (8004274 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800425e:	d102      	bne.n	8004266 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004264:	e000      	b.n	8004268 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004266:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004268:	4618      	mov	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40007000 	.word	0x40007000

08004278 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d141      	bne.n	800430a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004286:	4b4b      	ldr	r3, [pc, #300]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800428e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004292:	d131      	bne.n	80042f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004294:	4b47      	ldr	r3, [pc, #284]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800429a:	4a46      	ldr	r2, [pc, #280]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800429c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042a4:	4b43      	ldr	r3, [pc, #268]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042ac:	4a41      	ldr	r2, [pc, #260]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80042b4:	4b40      	ldr	r3, [pc, #256]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2232      	movs	r2, #50	; 0x32
 80042ba:	fb02 f303 	mul.w	r3, r2, r3
 80042be:	4a3f      	ldr	r2, [pc, #252]	; (80043bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042c0:	fba2 2303 	umull	r2, r3, r2, r3
 80042c4:	0c9b      	lsrs	r3, r3, #18
 80042c6:	3301      	adds	r3, #1
 80042c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042ca:	e002      	b.n	80042d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042d2:	4b38      	ldr	r3, [pc, #224]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042de:	d102      	bne.n	80042e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f2      	bne.n	80042cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042e6:	4b33      	ldr	r3, [pc, #204]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f2:	d158      	bne.n	80043a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e057      	b.n	80043a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042f8:	4b2e      	ldr	r3, [pc, #184]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042fe:	4a2d      	ldr	r2, [pc, #180]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004304:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004308:	e04d      	b.n	80043a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004310:	d141      	bne.n	8004396 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004312:	4b28      	ldr	r3, [pc, #160]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800431a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431e:	d131      	bne.n	8004384 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004320:	4b24      	ldr	r3, [pc, #144]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004326:	4a23      	ldr	r2, [pc, #140]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004330:	4b20      	ldr	r3, [pc, #128]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004338:	4a1e      	ldr	r2, [pc, #120]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800433a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800433e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004340:	4b1d      	ldr	r3, [pc, #116]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2232      	movs	r2, #50	; 0x32
 8004346:	fb02 f303 	mul.w	r3, r2, r3
 800434a:	4a1c      	ldr	r2, [pc, #112]	; (80043bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800434c:	fba2 2303 	umull	r2, r3, r2, r3
 8004350:	0c9b      	lsrs	r3, r3, #18
 8004352:	3301      	adds	r3, #1
 8004354:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004356:	e002      	b.n	800435e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3b01      	subs	r3, #1
 800435c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800435e:	4b15      	ldr	r3, [pc, #84]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800436a:	d102      	bne.n	8004372 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f2      	bne.n	8004358 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004372:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800437a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437e:	d112      	bne.n	80043a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e011      	b.n	80043a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800438a:	4a0a      	ldr	r2, [pc, #40]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800438c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004390:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004394:	e007      	b.n	80043a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004396:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800439e:	4a05      	ldr	r2, [pc, #20]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043a4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	40007000 	.word	0x40007000
 80043b8:	20000000 	.word	0x20000000
 80043bc:	431bde83 	.word	0x431bde83

080043c0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <HAL_PWREx_EnableVddIO2+0x1c>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	4a04      	ldr	r2, [pc, #16]	; (80043dc <HAL_PWREx_EnableVddIO2+0x1c>)
 80043ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043ce:	6053      	str	r3, [r2, #4]
}
 80043d0:	bf00      	nop
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40007000 	.word	0x40007000

080043e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d102      	bne.n	80043f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	f000 bc16 	b.w	8004c20 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043f4:	4ba0      	ldr	r3, [pc, #640]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 030c 	and.w	r3, r3, #12
 80043fc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043fe:	4b9e      	ldr	r3, [pc, #632]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0310 	and.w	r3, r3, #16
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 80e4 	beq.w	80045de <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d007      	beq.n	800442c <HAL_RCC_OscConfig+0x4c>
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	2b0c      	cmp	r3, #12
 8004420:	f040 808b 	bne.w	800453a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	2b01      	cmp	r3, #1
 8004428:	f040 8087 	bne.w	800453a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800442c:	4b92      	ldr	r3, [pc, #584]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <HAL_RCC_OscConfig+0x64>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e3ed      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a1a      	ldr	r2, [r3, #32]
 8004448:	4b8b      	ldr	r3, [pc, #556]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	2b00      	cmp	r3, #0
 8004452:	d004      	beq.n	800445e <HAL_RCC_OscConfig+0x7e>
 8004454:	4b88      	ldr	r3, [pc, #544]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800445c:	e005      	b.n	800446a <HAL_RCC_OscConfig+0x8a>
 800445e:	4b86      	ldr	r3, [pc, #536]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 8004460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004464:	091b      	lsrs	r3, r3, #4
 8004466:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800446a:	4293      	cmp	r3, r2
 800446c:	d223      	bcs.n	80044b6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fdfc 	bl	8005070 <RCC_SetFlashLatencyFromMSIRange>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e3ce      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004482:	4b7d      	ldr	r3, [pc, #500]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a7c      	ldr	r2, [pc, #496]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 8004488:	f043 0308 	orr.w	r3, r3, #8
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	4b7a      	ldr	r3, [pc, #488]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	4977      	ldr	r1, [pc, #476]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 800449c:	4313      	orrs	r3, r2
 800449e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044a0:	4b75      	ldr	r3, [pc, #468]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	021b      	lsls	r3, r3, #8
 80044ae:	4972      	ldr	r1, [pc, #456]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	604b      	str	r3, [r1, #4]
 80044b4:	e025      	b.n	8004502 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044b6:	4b70      	ldr	r3, [pc, #448]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a6f      	ldr	r2, [pc, #444]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 80044bc:	f043 0308 	orr.w	r3, r3, #8
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	4b6d      	ldr	r3, [pc, #436]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	496a      	ldr	r1, [pc, #424]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044d4:	4b68      	ldr	r3, [pc, #416]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	021b      	lsls	r3, r3, #8
 80044e2:	4965      	ldr	r1, [pc, #404]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d109      	bne.n	8004502 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fdbc 	bl	8005070 <RCC_SetFlashLatencyFromMSIRange>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e38e      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004502:	f000 fcbf 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8004506:	4602      	mov	r2, r0
 8004508:	4b5b      	ldr	r3, [pc, #364]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	091b      	lsrs	r3, r3, #4
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	495a      	ldr	r1, [pc, #360]	; (800467c <HAL_RCC_OscConfig+0x29c>)
 8004514:	5ccb      	ldrb	r3, [r1, r3]
 8004516:	f003 031f 	and.w	r3, r3, #31
 800451a:	fa22 f303 	lsr.w	r3, r2, r3
 800451e:	4a58      	ldr	r2, [pc, #352]	; (8004680 <HAL_RCC_OscConfig+0x2a0>)
 8004520:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004522:	4b58      	ldr	r3, [pc, #352]	; (8004684 <HAL_RCC_OscConfig+0x2a4>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f7fd fb3a 	bl	8001ba0 <HAL_InitTick>
 800452c:	4603      	mov	r3, r0
 800452e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d052      	beq.n	80045dc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004536:	7bfb      	ldrb	r3, [r7, #15]
 8004538:	e372      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d032      	beq.n	80045a8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004542:	4b4d      	ldr	r3, [pc, #308]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a4c      	ldr	r2, [pc, #304]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 8004548:	f043 0301 	orr.w	r3, r3, #1
 800454c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800454e:	f7fe fa85 	bl	8002a5c <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004554:	e008      	b.n	8004568 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004556:	f7fe fa81 	bl	8002a5c <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e35b      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004568:	4b43      	ldr	r3, [pc, #268]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0f0      	beq.n	8004556 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004574:	4b40      	ldr	r3, [pc, #256]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a3f      	ldr	r2, [pc, #252]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 800457a:	f043 0308 	orr.w	r3, r3, #8
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	4b3d      	ldr	r3, [pc, #244]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	493a      	ldr	r1, [pc, #232]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004592:	4b39      	ldr	r3, [pc, #228]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	021b      	lsls	r3, r3, #8
 80045a0:	4935      	ldr	r1, [pc, #212]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	604b      	str	r3, [r1, #4]
 80045a6:	e01a      	b.n	80045de <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045a8:	4b33      	ldr	r3, [pc, #204]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a32      	ldr	r2, [pc, #200]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 80045ae:	f023 0301 	bic.w	r3, r3, #1
 80045b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045b4:	f7fe fa52 	bl	8002a5c <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045bc:	f7fe fa4e 	bl	8002a5c <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e328      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045ce:	4b2a      	ldr	r3, [pc, #168]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x1dc>
 80045da:	e000      	b.n	80045de <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d073      	beq.n	80046d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d005      	beq.n	80045fc <HAL_RCC_OscConfig+0x21c>
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	2b0c      	cmp	r3, #12
 80045f4:	d10e      	bne.n	8004614 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d10b      	bne.n	8004614 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045fc:	4b1e      	ldr	r3, [pc, #120]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d063      	beq.n	80046d0 <HAL_RCC_OscConfig+0x2f0>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d15f      	bne.n	80046d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e305      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800461c:	d106      	bne.n	800462c <HAL_RCC_OscConfig+0x24c>
 800461e:	4b16      	ldr	r3, [pc, #88]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a15      	ldr	r2, [pc, #84]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 8004624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	e01d      	b.n	8004668 <HAL_RCC_OscConfig+0x288>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004634:	d10c      	bne.n	8004650 <HAL_RCC_OscConfig+0x270>
 8004636:	4b10      	ldr	r3, [pc, #64]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a0f      	ldr	r2, [pc, #60]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 800463c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	4b0d      	ldr	r3, [pc, #52]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a0c      	ldr	r2, [pc, #48]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 8004648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	e00b      	b.n	8004668 <HAL_RCC_OscConfig+0x288>
 8004650:	4b09      	ldr	r3, [pc, #36]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a08      	ldr	r2, [pc, #32]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 8004656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	4b06      	ldr	r3, [pc, #24]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a05      	ldr	r2, [pc, #20]	; (8004678 <HAL_RCC_OscConfig+0x298>)
 8004662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d01b      	beq.n	80046a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7fe f9f4 	bl	8002a5c <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004676:	e010      	b.n	800469a <HAL_RCC_OscConfig+0x2ba>
 8004678:	40021000 	.word	0x40021000
 800467c:	0800f958 	.word	0x0800f958
 8004680:	20000000 	.word	0x20000000
 8004684:	20000134 	.word	0x20000134
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004688:	f7fe f9e8 	bl	8002a5c <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b64      	cmp	r3, #100	; 0x64
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e2c2      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800469a:	4baf      	ldr	r3, [pc, #700]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0f0      	beq.n	8004688 <HAL_RCC_OscConfig+0x2a8>
 80046a6:	e014      	b.n	80046d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a8:	f7fe f9d8 	bl	8002a5c <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b0:	f7fe f9d4 	bl	8002a5c <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b64      	cmp	r3, #100	; 0x64
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e2ae      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046c2:	4ba5      	ldr	r3, [pc, #660]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f0      	bne.n	80046b0 <HAL_RCC_OscConfig+0x2d0>
 80046ce:	e000      	b.n	80046d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d060      	beq.n	80047a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	d005      	beq.n	80046f0 <HAL_RCC_OscConfig+0x310>
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2b0c      	cmp	r3, #12
 80046e8:	d119      	bne.n	800471e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d116      	bne.n	800471e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046f0:	4b99      	ldr	r3, [pc, #612]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_OscConfig+0x328>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e28b      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004708:	4b93      	ldr	r3, [pc, #588]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	061b      	lsls	r3, r3, #24
 8004716:	4990      	ldr	r1, [pc, #576]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 8004718:	4313      	orrs	r3, r2
 800471a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800471c:	e040      	b.n	80047a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d023      	beq.n	800476e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004726:	4b8c      	ldr	r3, [pc, #560]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a8b      	ldr	r2, [pc, #556]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 800472c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004732:	f7fe f993 	bl	8002a5c <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004738:	e008      	b.n	800474c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800473a:	f7fe f98f 	bl	8002a5c <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e269      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800474c:	4b82      	ldr	r3, [pc, #520]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0f0      	beq.n	800473a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004758:	4b7f      	ldr	r3, [pc, #508]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	061b      	lsls	r3, r3, #24
 8004766:	497c      	ldr	r1, [pc, #496]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 8004768:	4313      	orrs	r3, r2
 800476a:	604b      	str	r3, [r1, #4]
 800476c:	e018      	b.n	80047a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800476e:	4b7a      	ldr	r3, [pc, #488]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a79      	ldr	r2, [pc, #484]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 8004774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477a:	f7fe f96f 	bl	8002a5c <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004780:	e008      	b.n	8004794 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004782:	f7fe f96b 	bl	8002a5c <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e245      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004794:	4b70      	ldr	r3, [pc, #448]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1f0      	bne.n	8004782 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d03c      	beq.n	8004826 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01c      	beq.n	80047ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047b4:	4b68      	ldr	r3, [pc, #416]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 80047b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ba:	4a67      	ldr	r2, [pc, #412]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 80047bc:	f043 0301 	orr.w	r3, r3, #1
 80047c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c4:	f7fe f94a 	bl	8002a5c <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047cc:	f7fe f946 	bl	8002a5c <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e220      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047de:	4b5e      	ldr	r3, [pc, #376]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 80047e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0ef      	beq.n	80047cc <HAL_RCC_OscConfig+0x3ec>
 80047ec:	e01b      	b.n	8004826 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047ee:	4b5a      	ldr	r3, [pc, #360]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 80047f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f4:	4a58      	ldr	r2, [pc, #352]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 80047f6:	f023 0301 	bic.w	r3, r3, #1
 80047fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047fe:	f7fe f92d 	bl	8002a5c <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004804:	e008      	b.n	8004818 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004806:	f7fe f929 	bl	8002a5c <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e203      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004818:	4b4f      	ldr	r3, [pc, #316]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 800481a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1ef      	bne.n	8004806 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 80a6 	beq.w	8004980 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004834:	2300      	movs	r3, #0
 8004836:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004838:	4b47      	ldr	r3, [pc, #284]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 800483a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10d      	bne.n	8004860 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004844:	4b44      	ldr	r3, [pc, #272]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 8004846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004848:	4a43      	ldr	r2, [pc, #268]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 800484a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800484e:	6593      	str	r3, [r2, #88]	; 0x58
 8004850:	4b41      	ldr	r3, [pc, #260]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 8004852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004858:	60bb      	str	r3, [r7, #8]
 800485a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800485c:	2301      	movs	r3, #1
 800485e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004860:	4b3e      	ldr	r3, [pc, #248]	; (800495c <HAL_RCC_OscConfig+0x57c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004868:	2b00      	cmp	r3, #0
 800486a:	d118      	bne.n	800489e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800486c:	4b3b      	ldr	r3, [pc, #236]	; (800495c <HAL_RCC_OscConfig+0x57c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a3a      	ldr	r2, [pc, #232]	; (800495c <HAL_RCC_OscConfig+0x57c>)
 8004872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004876:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004878:	f7fe f8f0 	bl	8002a5c <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004880:	f7fe f8ec 	bl	8002a5c <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e1c6      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004892:	4b32      	ldr	r3, [pc, #200]	; (800495c <HAL_RCC_OscConfig+0x57c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f0      	beq.n	8004880 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d108      	bne.n	80048b8 <HAL_RCC_OscConfig+0x4d8>
 80048a6:	4b2c      	ldr	r3, [pc, #176]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 80048a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ac:	4a2a      	ldr	r2, [pc, #168]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 80048ae:	f043 0301 	orr.w	r3, r3, #1
 80048b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048b6:	e024      	b.n	8004902 <HAL_RCC_OscConfig+0x522>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	2b05      	cmp	r3, #5
 80048be:	d110      	bne.n	80048e2 <HAL_RCC_OscConfig+0x502>
 80048c0:	4b25      	ldr	r3, [pc, #148]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c6:	4a24      	ldr	r2, [pc, #144]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 80048c8:	f043 0304 	orr.w	r3, r3, #4
 80048cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048d0:	4b21      	ldr	r3, [pc, #132]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 80048d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d6:	4a20      	ldr	r2, [pc, #128]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048e0:	e00f      	b.n	8004902 <HAL_RCC_OscConfig+0x522>
 80048e2:	4b1d      	ldr	r3, [pc, #116]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 80048e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e8:	4a1b      	ldr	r2, [pc, #108]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 80048ea:	f023 0301 	bic.w	r3, r3, #1
 80048ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048f2:	4b19      	ldr	r3, [pc, #100]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 80048f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f8:	4a17      	ldr	r2, [pc, #92]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 80048fa:	f023 0304 	bic.w	r3, r3, #4
 80048fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d016      	beq.n	8004938 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490a:	f7fe f8a7 	bl	8002a5c <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004910:	e00a      	b.n	8004928 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004912:	f7fe f8a3 	bl	8002a5c <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004920:	4293      	cmp	r3, r2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e17b      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004928:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <HAL_RCC_OscConfig+0x578>)
 800492a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0ed      	beq.n	8004912 <HAL_RCC_OscConfig+0x532>
 8004936:	e01a      	b.n	800496e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004938:	f7fe f890 	bl	8002a5c <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800493e:	e00f      	b.n	8004960 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004940:	f7fe f88c 	bl	8002a5c <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	f241 3288 	movw	r2, #5000	; 0x1388
 800494e:	4293      	cmp	r3, r2
 8004950:	d906      	bls.n	8004960 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e164      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
 8004956:	bf00      	nop
 8004958:	40021000 	.word	0x40021000
 800495c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004960:	4ba8      	ldr	r3, [pc, #672]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1e8      	bne.n	8004940 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800496e:	7ffb      	ldrb	r3, [r7, #31]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d105      	bne.n	8004980 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004974:	4ba3      	ldr	r3, [pc, #652]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004978:	4aa2      	ldr	r2, [pc, #648]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 800497a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800497e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0320 	and.w	r3, r3, #32
 8004988:	2b00      	cmp	r3, #0
 800498a:	d03c      	beq.n	8004a06 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	2b00      	cmp	r3, #0
 8004992:	d01c      	beq.n	80049ce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004994:	4b9b      	ldr	r3, [pc, #620]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004996:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800499a:	4a9a      	ldr	r2, [pc, #616]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 800499c:	f043 0301 	orr.w	r3, r3, #1
 80049a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a4:	f7fe f85a 	bl	8002a5c <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049ac:	f7fe f856 	bl	8002a5c <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e130      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049be:	4b91      	ldr	r3, [pc, #580]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 80049c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0ef      	beq.n	80049ac <HAL_RCC_OscConfig+0x5cc>
 80049cc:	e01b      	b.n	8004a06 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049ce:	4b8d      	ldr	r3, [pc, #564]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 80049d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049d4:	4a8b      	ldr	r2, [pc, #556]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 80049d6:	f023 0301 	bic.w	r3, r3, #1
 80049da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049de:	f7fe f83d 	bl	8002a5c <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049e6:	f7fe f839 	bl	8002a5c <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e113      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049f8:	4b82      	ldr	r3, [pc, #520]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 80049fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1ef      	bne.n	80049e6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 8107 	beq.w	8004c1e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	f040 80cb 	bne.w	8004bb0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a1a:	4b7a      	ldr	r3, [pc, #488]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f003 0203 	and.w	r2, r3, #3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d12c      	bne.n	8004a88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d123      	bne.n	8004a88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d11b      	bne.n	8004a88 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d113      	bne.n	8004a88 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6a:	085b      	lsrs	r3, r3, #1
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d109      	bne.n	8004a88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	085b      	lsrs	r3, r3, #1
 8004a80:	3b01      	subs	r3, #1
 8004a82:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d06d      	beq.n	8004b64 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	2b0c      	cmp	r3, #12
 8004a8c:	d068      	beq.n	8004b60 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a8e:	4b5d      	ldr	r3, [pc, #372]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d105      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004a9a:	4b5a      	ldr	r3, [pc, #360]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e0ba      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004aaa:	4b56      	ldr	r3, [pc, #344]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a55      	ldr	r2, [pc, #340]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004ab0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ab4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ab6:	f7fd ffd1 	bl	8002a5c <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004abe:	f7fd ffcd 	bl	8002a5c <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e0a7      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ad0:	4b4c      	ldr	r3, [pc, #304]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1f0      	bne.n	8004abe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004adc:	4b49      	ldr	r3, [pc, #292]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	4b49      	ldr	r3, [pc, #292]	; (8004c08 <HAL_RCC_OscConfig+0x828>)
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004aec:	3a01      	subs	r2, #1
 8004aee:	0112      	lsls	r2, r2, #4
 8004af0:	4311      	orrs	r1, r2
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004af6:	0212      	lsls	r2, r2, #8
 8004af8:	4311      	orrs	r1, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004afe:	0852      	lsrs	r2, r2, #1
 8004b00:	3a01      	subs	r2, #1
 8004b02:	0552      	lsls	r2, r2, #21
 8004b04:	4311      	orrs	r1, r2
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b0a:	0852      	lsrs	r2, r2, #1
 8004b0c:	3a01      	subs	r2, #1
 8004b0e:	0652      	lsls	r2, r2, #25
 8004b10:	4311      	orrs	r1, r2
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b16:	06d2      	lsls	r2, r2, #27
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	493a      	ldr	r1, [pc, #232]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b20:	4b38      	ldr	r3, [pc, #224]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a37      	ldr	r2, [pc, #220]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b2c:	4b35      	ldr	r3, [pc, #212]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	4a34      	ldr	r2, [pc, #208]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b38:	f7fd ff90 	bl	8002a5c <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b40:	f7fd ff8c 	bl	8002a5c <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e066      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b52:	4b2c      	ldr	r3, [pc, #176]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0f0      	beq.n	8004b40 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b5e:	e05e      	b.n	8004c1e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e05d      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b64:	4b27      	ldr	r3, [pc, #156]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d156      	bne.n	8004c1e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b70:	4b24      	ldr	r3, [pc, #144]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a23      	ldr	r2, [pc, #140]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004b76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b7c:	4b21      	ldr	r3, [pc, #132]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	4a20      	ldr	r2, [pc, #128]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004b82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b88:	f7fd ff68 	bl	8002a5c <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b90:	f7fd ff64 	bl	8002a5c <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e03e      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ba2:	4b18      	ldr	r3, [pc, #96]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0f0      	beq.n	8004b90 <HAL_RCC_OscConfig+0x7b0>
 8004bae:	e036      	b.n	8004c1e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	2b0c      	cmp	r3, #12
 8004bb4:	d031      	beq.n	8004c1a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb6:	4b13      	ldr	r3, [pc, #76]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a12      	ldr	r2, [pc, #72]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004bbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bc0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004bc2:	4b10      	ldr	r3, [pc, #64]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d105      	bne.n	8004bda <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004bce:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	4a0c      	ldr	r2, [pc, #48]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004bd4:	f023 0303 	bic.w	r3, r3, #3
 8004bd8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004bda:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	4a09      	ldr	r2, [pc, #36]	; (8004c04 <HAL_RCC_OscConfig+0x824>)
 8004be0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004be8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bea:	f7fd ff37 	bl	8002a5c <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bf0:	e00c      	b.n	8004c0c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf2:	f7fd ff33 	bl	8002a5c <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d905      	bls.n	8004c0c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e00d      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
 8004c04:	40021000 	.word	0x40021000
 8004c08:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c0c:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <HAL_RCC_OscConfig+0x848>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1ec      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x812>
 8004c18:	e001      	b.n	8004c1e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3720      	adds	r7, #32
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40021000 	.word	0x40021000

08004c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e10f      	b.n	8004e64 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c44:	4b89      	ldr	r3, [pc, #548]	; (8004e6c <HAL_RCC_ClockConfig+0x240>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 030f 	and.w	r3, r3, #15
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d910      	bls.n	8004c74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c52:	4b86      	ldr	r3, [pc, #536]	; (8004e6c <HAL_RCC_ClockConfig+0x240>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f023 020f 	bic.w	r2, r3, #15
 8004c5a:	4984      	ldr	r1, [pc, #528]	; (8004e6c <HAL_RCC_ClockConfig+0x240>)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c62:	4b82      	ldr	r3, [pc, #520]	; (8004e6c <HAL_RCC_ClockConfig+0x240>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d001      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0f7      	b.n	8004e64 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 8089 	beq.w	8004d94 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b03      	cmp	r3, #3
 8004c88:	d133      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c8a:	4b79      	ldr	r3, [pc, #484]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e0e4      	b.n	8004e64 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004c9a:	f000 fa43 	bl	8005124 <RCC_GetSysClockFreqFromPLLSource>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	4a74      	ldr	r2, [pc, #464]	; (8004e74 <HAL_RCC_ClockConfig+0x248>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d955      	bls.n	8004d52 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004ca6:	4b72      	ldr	r3, [pc, #456]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10a      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004cb2:	4b6f      	ldr	r3, [pc, #444]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cba:	4a6d      	ldr	r2, [pc, #436]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004cc2:	2380      	movs	r3, #128	; 0x80
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	e044      	b.n	8004d52 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d03e      	beq.n	8004d52 <HAL_RCC_ClockConfig+0x126>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d13a      	bne.n	8004d52 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004cdc:	4b64      	ldr	r3, [pc, #400]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ce4:	4a62      	ldr	r2, [pc, #392]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cea:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004cec:	2380      	movs	r3, #128	; 0x80
 8004cee:	617b      	str	r3, [r7, #20]
 8004cf0:	e02f      	b.n	8004d52 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d107      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cfa:	4b5d      	ldr	r3, [pc, #372]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d115      	bne.n	8004d32 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e0ac      	b.n	8004e64 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d107      	bne.n	8004d22 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d12:	4b57      	ldr	r3, [pc, #348]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d109      	bne.n	8004d32 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e0a0      	b.n	8004e64 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d22:	4b53      	ldr	r3, [pc, #332]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e098      	b.n	8004e64 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004d32:	f000 f8a7 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8004d36:	4603      	mov	r3, r0
 8004d38:	4a4e      	ldr	r2, [pc, #312]	; (8004e74 <HAL_RCC_ClockConfig+0x248>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d909      	bls.n	8004d52 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d3e:	4b4c      	ldr	r3, [pc, #304]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d46:	4a4a      	ldr	r2, [pc, #296]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004d4e:	2380      	movs	r3, #128	; 0x80
 8004d50:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d52:	4b47      	ldr	r3, [pc, #284]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f023 0203 	bic.w	r2, r3, #3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	4944      	ldr	r1, [pc, #272]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d64:	f7fd fe7a 	bl	8002a5c <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6a:	e00a      	b.n	8004d82 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d6c:	f7fd fe76 	bl	8002a5c <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e070      	b.n	8004e64 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d82:	4b3b      	ldr	r3, [pc, #236]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 020c 	and.w	r2, r3, #12
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d1eb      	bne.n	8004d6c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d009      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004da0:	4b33      	ldr	r3, [pc, #204]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	4930      	ldr	r1, [pc, #192]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	608b      	str	r3, [r1, #8]
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2b80      	cmp	r3, #128	; 0x80
 8004db8:	d105      	bne.n	8004dc6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004dba:	4b2d      	ldr	r3, [pc, #180]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	4a2c      	ldr	r2, [pc, #176]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004dc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dc4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc6:	4b29      	ldr	r3, [pc, #164]	; (8004e6c <HAL_RCC_ClockConfig+0x240>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d210      	bcs.n	8004df6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd4:	4b25      	ldr	r3, [pc, #148]	; (8004e6c <HAL_RCC_ClockConfig+0x240>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f023 020f 	bic.w	r2, r3, #15
 8004ddc:	4923      	ldr	r1, [pc, #140]	; (8004e6c <HAL_RCC_ClockConfig+0x240>)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de4:	4b21      	ldr	r3, [pc, #132]	; (8004e6c <HAL_RCC_ClockConfig+0x240>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 030f 	and.w	r3, r3, #15
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d001      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e036      	b.n	8004e64 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d008      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e02:	4b1b      	ldr	r3, [pc, #108]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	4918      	ldr	r1, [pc, #96]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0308 	and.w	r3, r3, #8
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d009      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e20:	4b13      	ldr	r3, [pc, #76]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	4910      	ldr	r1, [pc, #64]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e34:	f000 f826 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	4b0d      	ldr	r3, [pc, #52]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	091b      	lsrs	r3, r3, #4
 8004e40:	f003 030f 	and.w	r3, r3, #15
 8004e44:	490c      	ldr	r1, [pc, #48]	; (8004e78 <HAL_RCC_ClockConfig+0x24c>)
 8004e46:	5ccb      	ldrb	r3, [r1, r3]
 8004e48:	f003 031f 	and.w	r3, r3, #31
 8004e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e50:	4a0a      	ldr	r2, [pc, #40]	; (8004e7c <HAL_RCC_ClockConfig+0x250>)
 8004e52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e54:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <HAL_RCC_ClockConfig+0x254>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fc fea1 	bl	8001ba0 <HAL_InitTick>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	73fb      	strb	r3, [r7, #15]

  return status;
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40022000 	.word	0x40022000
 8004e70:	40021000 	.word	0x40021000
 8004e74:	04c4b400 	.word	0x04c4b400
 8004e78:	0800f958 	.word	0x0800f958
 8004e7c:	20000000 	.word	0x20000000
 8004e80:	20000134 	.word	0x20000134

08004e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b089      	sub	sp, #36	; 0x24
 8004e88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61fb      	str	r3, [r7, #28]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e92:	4b3e      	ldr	r3, [pc, #248]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 030c 	and.w	r3, r3, #12
 8004e9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e9c:	4b3b      	ldr	r3, [pc, #236]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f003 0303 	and.w	r3, r3, #3
 8004ea4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d005      	beq.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	2b0c      	cmp	r3, #12
 8004eb0:	d121      	bne.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d11e      	bne.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004eb8:	4b34      	ldr	r3, [pc, #208]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d107      	bne.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ec4:	4b31      	ldr	r3, [pc, #196]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eca:	0a1b      	lsrs	r3, r3, #8
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	61fb      	str	r3, [r7, #28]
 8004ed2:	e005      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ed4:	4b2d      	ldr	r3, [pc, #180]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	091b      	lsrs	r3, r3, #4
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ee0:	4a2b      	ldr	r2, [pc, #172]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10d      	bne.n	8004f0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ef4:	e00a      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d102      	bne.n	8004f02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004efc:	4b25      	ldr	r3, [pc, #148]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8004efe:	61bb      	str	r3, [r7, #24]
 8004f00:	e004      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d101      	bne.n	8004f0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f08:	4b23      	ldr	r3, [pc, #140]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	2b0c      	cmp	r3, #12
 8004f10:	d134      	bne.n	8004f7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f12:	4b1e      	ldr	r3, [pc, #120]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d003      	beq.n	8004f2a <HAL_RCC_GetSysClockFreq+0xa6>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d003      	beq.n	8004f30 <HAL_RCC_GetSysClockFreq+0xac>
 8004f28:	e005      	b.n	8004f36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f2a:	4b1a      	ldr	r3, [pc, #104]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f2c:	617b      	str	r3, [r7, #20]
      break;
 8004f2e:	e005      	b.n	8004f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f30:	4b19      	ldr	r3, [pc, #100]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f32:	617b      	str	r3, [r7, #20]
      break;
 8004f34:	e002      	b.n	8004f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	617b      	str	r3, [r7, #20]
      break;
 8004f3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f3c:	4b13      	ldr	r3, [pc, #76]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	091b      	lsrs	r3, r3, #4
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	3301      	adds	r3, #1
 8004f48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f4a:	4b10      	ldr	r3, [pc, #64]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	0a1b      	lsrs	r3, r3, #8
 8004f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	fb02 f203 	mul.w	r2, r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f62:	4b0a      	ldr	r3, [pc, #40]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	0e5b      	lsrs	r3, r3, #25
 8004f68:	f003 0303 	and.w	r3, r3, #3
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f7c:	69bb      	ldr	r3, [r7, #24]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3724      	adds	r7, #36	; 0x24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	0800f970 	.word	0x0800f970
 8004f94:	00f42400 	.word	0x00f42400
 8004f98:	007a1200 	.word	0x007a1200

08004f9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fa0:	4b03      	ldr	r3, [pc, #12]	; (8004fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	20000000 	.word	0x20000000

08004fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fb8:	f7ff fff0 	bl	8004f9c <HAL_RCC_GetHCLKFreq>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	0a1b      	lsrs	r3, r3, #8
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	4904      	ldr	r1, [pc, #16]	; (8004fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fca:	5ccb      	ldrb	r3, [r1, r3]
 8004fcc:	f003 031f 	and.w	r3, r3, #31
 8004fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	0800f968 	.word	0x0800f968

08004fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004fe4:	f7ff ffda 	bl	8004f9c <HAL_RCC_GetHCLKFreq>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	4b06      	ldr	r3, [pc, #24]	; (8005004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	0adb      	lsrs	r3, r3, #11
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	4904      	ldr	r1, [pc, #16]	; (8005008 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ff6:	5ccb      	ldrb	r3, [r1, r3]
 8004ff8:	f003 031f 	and.w	r3, r3, #31
 8004ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005000:	4618      	mov	r0, r3
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40021000 	.word	0x40021000
 8005008:	0800f968 	.word	0x0800f968

0800500c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	220f      	movs	r2, #15
 800501a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800501c:	4b12      	ldr	r3, [pc, #72]	; (8005068 <HAL_RCC_GetClockConfig+0x5c>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 0203 	and.w	r2, r3, #3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005028:	4b0f      	ldr	r3, [pc, #60]	; (8005068 <HAL_RCC_GetClockConfig+0x5c>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005034:	4b0c      	ldr	r3, [pc, #48]	; (8005068 <HAL_RCC_GetClockConfig+0x5c>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005040:	4b09      	ldr	r3, [pc, #36]	; (8005068 <HAL_RCC_GetClockConfig+0x5c>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	08db      	lsrs	r3, r3, #3
 8005046:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800504e:	4b07      	ldr	r3, [pc, #28]	; (800506c <HAL_RCC_GetClockConfig+0x60>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 020f 	and.w	r2, r3, #15
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	601a      	str	r2, [r3, #0]
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40021000 	.word	0x40021000
 800506c:	40022000 	.word	0x40022000

08005070 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005078:	2300      	movs	r3, #0
 800507a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800507c:	4b27      	ldr	r3, [pc, #156]	; (800511c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800507e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005088:	f7ff f8d6 	bl	8004238 <HAL_PWREx_GetVoltageRange>
 800508c:	6178      	str	r0, [r7, #20]
 800508e:	e014      	b.n	80050ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005090:	4b22      	ldr	r3, [pc, #136]	; (800511c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005094:	4a21      	ldr	r2, [pc, #132]	; (800511c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800509a:	6593      	str	r3, [r2, #88]	; 0x58
 800509c:	4b1f      	ldr	r3, [pc, #124]	; (800511c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800509e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050a8:	f7ff f8c6 	bl	8004238 <HAL_PWREx_GetVoltageRange>
 80050ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050ae:	4b1b      	ldr	r3, [pc, #108]	; (800511c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b2:	4a1a      	ldr	r2, [pc, #104]	; (800511c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c0:	d10b      	bne.n	80050da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b80      	cmp	r3, #128	; 0x80
 80050c6:	d913      	bls.n	80050f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2ba0      	cmp	r3, #160	; 0xa0
 80050cc:	d902      	bls.n	80050d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050ce:	2302      	movs	r3, #2
 80050d0:	613b      	str	r3, [r7, #16]
 80050d2:	e00d      	b.n	80050f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050d4:	2301      	movs	r3, #1
 80050d6:	613b      	str	r3, [r7, #16]
 80050d8:	e00a      	b.n	80050f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b7f      	cmp	r3, #127	; 0x7f
 80050de:	d902      	bls.n	80050e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80050e0:	2302      	movs	r3, #2
 80050e2:	613b      	str	r3, [r7, #16]
 80050e4:	e004      	b.n	80050f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b70      	cmp	r3, #112	; 0x70
 80050ea:	d101      	bne.n	80050f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050ec:	2301      	movs	r3, #1
 80050ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f023 020f 	bic.w	r2, r3, #15
 80050f8:	4909      	ldr	r1, [pc, #36]	; (8005120 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005100:	4b07      	ldr	r3, [pc, #28]	; (8005120 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 030f 	and.w	r3, r3, #15
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	429a      	cmp	r2, r3
 800510c:	d001      	beq.n	8005112 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e000      	b.n	8005114 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40021000 	.word	0x40021000
 8005120:	40022000 	.word	0x40022000

08005124 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800512e:	4b2d      	ldr	r3, [pc, #180]	; (80051e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	2b01      	cmp	r3, #1
 8005138:	d118      	bne.n	800516c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800513a:	4b2a      	ldr	r3, [pc, #168]	; (80051e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d107      	bne.n	8005156 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005146:	4b27      	ldr	r3, [pc, #156]	; (80051e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800514c:	0a1b      	lsrs	r3, r3, #8
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	e005      	b.n	8005162 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005156:	4b23      	ldr	r3, [pc, #140]	; (80051e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	091b      	lsrs	r3, r3, #4
 800515c:	f003 030f 	and.w	r3, r3, #15
 8005160:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005162:	4a21      	ldr	r2, [pc, #132]	; (80051e8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800516a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800516c:	4b1d      	ldr	r3, [pc, #116]	; (80051e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f003 0303 	and.w	r3, r3, #3
 8005174:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2b02      	cmp	r3, #2
 800517a:	d003      	beq.n	8005184 <RCC_GetSysClockFreqFromPLLSource+0x60>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b03      	cmp	r3, #3
 8005180:	d003      	beq.n	800518a <RCC_GetSysClockFreqFromPLLSource+0x66>
 8005182:	e005      	b.n	8005190 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005184:	4b19      	ldr	r3, [pc, #100]	; (80051ec <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005186:	613b      	str	r3, [r7, #16]
    break;
 8005188:	e005      	b.n	8005196 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800518a:	4b19      	ldr	r3, [pc, #100]	; (80051f0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800518c:	613b      	str	r3, [r7, #16]
    break;
 800518e:	e002      	b.n	8005196 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	613b      	str	r3, [r7, #16]
    break;
 8005194:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005196:	4b13      	ldr	r3, [pc, #76]	; (80051e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	091b      	lsrs	r3, r3, #4
 800519c:	f003 030f 	and.w	r3, r3, #15
 80051a0:	3301      	adds	r3, #1
 80051a2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80051a4:	4b0f      	ldr	r3, [pc, #60]	; (80051e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	0a1b      	lsrs	r3, r3, #8
 80051aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	fb02 f203 	mul.w	r2, r2, r3
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ba:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051bc:	4b09      	ldr	r3, [pc, #36]	; (80051e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	0e5b      	lsrs	r3, r3, #25
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	3301      	adds	r3, #1
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80051d6:	683b      	ldr	r3, [r7, #0]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	371c      	adds	r7, #28
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	40021000 	.word	0x40021000
 80051e8:	0800f970 	.word	0x0800f970
 80051ec:	00f42400 	.word	0x00f42400
 80051f0:	007a1200 	.word	0x007a1200

080051f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051fc:	2300      	movs	r3, #0
 80051fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005200:	2300      	movs	r3, #0
 8005202:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800520c:	2b00      	cmp	r3, #0
 800520e:	d040      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005214:	2b80      	cmp	r3, #128	; 0x80
 8005216:	d02a      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005218:	2b80      	cmp	r3, #128	; 0x80
 800521a:	d825      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800521c:	2b60      	cmp	r3, #96	; 0x60
 800521e:	d026      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005220:	2b60      	cmp	r3, #96	; 0x60
 8005222:	d821      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005224:	2b40      	cmp	r3, #64	; 0x40
 8005226:	d006      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	d81d      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800522c:	2b00      	cmp	r3, #0
 800522e:	d009      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005230:	2b20      	cmp	r3, #32
 8005232:	d010      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005234:	e018      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005236:	4b89      	ldr	r3, [pc, #548]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	4a88      	ldr	r2, [pc, #544]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800523c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005240:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005242:	e015      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3304      	adds	r3, #4
 8005248:	2100      	movs	r1, #0
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fb02 	bl	8005854 <RCCEx_PLLSAI1_Config>
 8005250:	4603      	mov	r3, r0
 8005252:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005254:	e00c      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3320      	adds	r3, #32
 800525a:	2100      	movs	r1, #0
 800525c:	4618      	mov	r0, r3
 800525e:	f000 fbed 	bl	8005a3c <RCCEx_PLLSAI2_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005266:	e003      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	74fb      	strb	r3, [r7, #19]
      break;
 800526c:	e000      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800526e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005270:	7cfb      	ldrb	r3, [r7, #19]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10b      	bne.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005276:	4b79      	ldr	r3, [pc, #484]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005278:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800527c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005284:	4975      	ldr	r1, [pc, #468]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005286:	4313      	orrs	r3, r2
 8005288:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800528c:	e001      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528e:	7cfb      	ldrb	r3, [r7, #19]
 8005290:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d047      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a6:	d030      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80052a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ac:	d82a      	bhi.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80052ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052b2:	d02a      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80052b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052b8:	d824      	bhi.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80052ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052be:	d008      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80052c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052c4:	d81e      	bhi.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80052ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ce:	d010      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80052d0:	e018      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052d2:	4b62      	ldr	r3, [pc, #392]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	4a61      	ldr	r2, [pc, #388]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052dc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052de:	e015      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3304      	adds	r3, #4
 80052e4:	2100      	movs	r1, #0
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fab4 	bl	8005854 <RCCEx_PLLSAI1_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052f0:	e00c      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3320      	adds	r3, #32
 80052f6:	2100      	movs	r1, #0
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 fb9f 	bl	8005a3c <RCCEx_PLLSAI2_Config>
 80052fe:	4603      	mov	r3, r0
 8005300:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005302:	e003      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	74fb      	strb	r3, [r7, #19]
      break;
 8005308:	e000      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800530a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800530c:	7cfb      	ldrb	r3, [r7, #19]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10b      	bne.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005312:	4b52      	ldr	r3, [pc, #328]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005314:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005320:	494e      	ldr	r1, [pc, #312]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005328:	e001      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800532a:	7cfb      	ldrb	r3, [r7, #19]
 800532c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 809f 	beq.w	800547a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800533c:	2300      	movs	r3, #0
 800533e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005340:	4b46      	ldr	r3, [pc, #280]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800534c:	2301      	movs	r3, #1
 800534e:	e000      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005350:	2300      	movs	r3, #0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00d      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005356:	4b41      	ldr	r3, [pc, #260]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535a:	4a40      	ldr	r2, [pc, #256]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800535c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005360:	6593      	str	r3, [r2, #88]	; 0x58
 8005362:	4b3e      	ldr	r3, [pc, #248]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536a:	60bb      	str	r3, [r7, #8]
 800536c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800536e:	2301      	movs	r3, #1
 8005370:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005372:	4b3b      	ldr	r3, [pc, #236]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a3a      	ldr	r2, [pc, #232]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800537c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800537e:	f7fd fb6d 	bl	8002a5c <HAL_GetTick>
 8005382:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005384:	e009      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005386:	f7fd fb69 	bl	8002a5c <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d902      	bls.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	74fb      	strb	r3, [r7, #19]
        break;
 8005398:	e005      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800539a:	4b31      	ldr	r3, [pc, #196]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0ef      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80053a6:	7cfb      	ldrb	r3, [r7, #19]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d15b      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053ac:	4b2b      	ldr	r3, [pc, #172]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d01f      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d019      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053ca:	4b24      	ldr	r3, [pc, #144]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053d6:	4b21      	ldr	r3, [pc, #132]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053dc:	4a1f      	ldr	r2, [pc, #124]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053e6:	4b1d      	ldr	r3, [pc, #116]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ec:	4a1b      	ldr	r2, [pc, #108]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053f6:	4a19      	ldr	r2, [pc, #100]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b00      	cmp	r3, #0
 8005406:	d016      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005408:	f7fd fb28 	bl	8002a5c <HAL_GetTick>
 800540c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800540e:	e00b      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005410:	f7fd fb24 	bl	8002a5c <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	f241 3288 	movw	r2, #5000	; 0x1388
 800541e:	4293      	cmp	r3, r2
 8005420:	d902      	bls.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	74fb      	strb	r3, [r7, #19]
            break;
 8005426:	e006      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005428:	4b0c      	ldr	r3, [pc, #48]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800542a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0ec      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005436:	7cfb      	ldrb	r3, [r7, #19]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10c      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800543c:	4b07      	ldr	r3, [pc, #28]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800543e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005442:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544c:	4903      	ldr	r1, [pc, #12]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005454:	e008      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005456:	7cfb      	ldrb	r3, [r7, #19]
 8005458:	74bb      	strb	r3, [r7, #18]
 800545a:	e005      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800545c:	40021000 	.word	0x40021000
 8005460:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005464:	7cfb      	ldrb	r3, [r7, #19]
 8005466:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005468:	7c7b      	ldrb	r3, [r7, #17]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d105      	bne.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800546e:	4ba0      	ldr	r3, [pc, #640]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005472:	4a9f      	ldr	r2, [pc, #636]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005478:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005486:	4b9a      	ldr	r3, [pc, #616]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548c:	f023 0203 	bic.w	r2, r3, #3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005494:	4996      	ldr	r1, [pc, #600]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054a8:	4b91      	ldr	r3, [pc, #580]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ae:	f023 020c 	bic.w	r2, r3, #12
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	498e      	ldr	r1, [pc, #568]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054ca:	4b89      	ldr	r3, [pc, #548]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d8:	4985      	ldr	r1, [pc, #532]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0308 	and.w	r3, r3, #8
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00a      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054ec:	4b80      	ldr	r3, [pc, #512]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054fa:	497d      	ldr	r1, [pc, #500]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0310 	and.w	r3, r3, #16
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800550e:	4b78      	ldr	r3, [pc, #480]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800551c:	4974      	ldr	r1, [pc, #464]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800551e:	4313      	orrs	r3, r2
 8005520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0320 	and.w	r3, r3, #32
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00a      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005530:	4b6f      	ldr	r3, [pc, #444]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005536:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800553e:	496c      	ldr	r1, [pc, #432]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005540:	4313      	orrs	r3, r2
 8005542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00a      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005552:	4b67      	ldr	r3, [pc, #412]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005558:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005560:	4963      	ldr	r1, [pc, #396]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005562:	4313      	orrs	r3, r2
 8005564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00a      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005574:	4b5e      	ldr	r3, [pc, #376]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005582:	495b      	ldr	r1, [pc, #364]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005584:	4313      	orrs	r3, r2
 8005586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005596:	4b56      	ldr	r3, [pc, #344]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a4:	4952      	ldr	r1, [pc, #328]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00a      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055b8:	4b4d      	ldr	r3, [pc, #308]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c6:	494a      	ldr	r1, [pc, #296]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055da:	4b45      	ldr	r3, [pc, #276]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e8:	4941      	ldr	r1, [pc, #260]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00a      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055fc:	4b3c      	ldr	r3, [pc, #240]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005602:	f023 0203 	bic.w	r2, r3, #3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800560a:	4939      	ldr	r1, [pc, #228]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800560c:	4313      	orrs	r3, r2
 800560e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d028      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800561e:	4b34      	ldr	r3, [pc, #208]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005624:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800562c:	4930      	ldr	r1, [pc, #192]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800562e:	4313      	orrs	r3, r2
 8005630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005638:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800563c:	d106      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800563e:	4b2c      	ldr	r3, [pc, #176]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	4a2b      	ldr	r2, [pc, #172]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005648:	60d3      	str	r3, [r2, #12]
 800564a:	e011      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005650:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005654:	d10c      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	3304      	adds	r3, #4
 800565a:	2101      	movs	r1, #1
 800565c:	4618      	mov	r0, r3
 800565e:	f000 f8f9 	bl	8005854 <RCCEx_PLLSAI1_Config>
 8005662:	4603      	mov	r3, r0
 8005664:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005666:	7cfb      	ldrb	r3, [r7, #19]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800566c:	7cfb      	ldrb	r3, [r7, #19]
 800566e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d04d      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005684:	d108      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005686:	4b1a      	ldr	r3, [pc, #104]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005688:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800568c:	4a18      	ldr	r2, [pc, #96]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800568e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005692:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005696:	e012      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005698:	4b15      	ldr	r3, [pc, #84]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800569a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800569e:	4a14      	ldr	r2, [pc, #80]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056a4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80056a8:	4b11      	ldr	r3, [pc, #68]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056b6:	490e      	ldr	r1, [pc, #56]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056c6:	d106      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056c8:	4b09      	ldr	r3, [pc, #36]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	4a08      	ldr	r2, [pc, #32]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056d2:	60d3      	str	r3, [r2, #12]
 80056d4:	e020      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056de:	d109      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056e0:	4b03      	ldr	r3, [pc, #12]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	4a02      	ldr	r2, [pc, #8]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ea:	60d3      	str	r3, [r2, #12]
 80056ec:	e014      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80056ee:	bf00      	nop
 80056f0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056fc:	d10c      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	3304      	adds	r3, #4
 8005702:	2101      	movs	r1, #1
 8005704:	4618      	mov	r0, r3
 8005706:	f000 f8a5 	bl	8005854 <RCCEx_PLLSAI1_Config>
 800570a:	4603      	mov	r3, r0
 800570c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800570e:	7cfb      	ldrb	r3, [r7, #19]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005714:	7cfb      	ldrb	r3, [r7, #19]
 8005716:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d028      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005724:	4b4a      	ldr	r3, [pc, #296]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005732:	4947      	ldr	r1, [pc, #284]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800573e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005742:	d106      	bne.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005744:	4b42      	ldr	r3, [pc, #264]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	4a41      	ldr	r2, [pc, #260]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800574a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800574e:	60d3      	str	r3, [r2, #12]
 8005750:	e011      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005756:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800575a:	d10c      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3304      	adds	r3, #4
 8005760:	2101      	movs	r1, #1
 8005762:	4618      	mov	r0, r3
 8005764:	f000 f876 	bl	8005854 <RCCEx_PLLSAI1_Config>
 8005768:	4603      	mov	r3, r0
 800576a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800576c:	7cfb      	ldrb	r3, [r7, #19]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005772:	7cfb      	ldrb	r3, [r7, #19]
 8005774:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d01e      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005782:	4b33      	ldr	r3, [pc, #204]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005788:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005792:	492f      	ldr	r1, [pc, #188]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005794:	4313      	orrs	r3, r2
 8005796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057a4:	d10c      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	3304      	adds	r3, #4
 80057aa:	2102      	movs	r1, #2
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 f851 	bl	8005854 <RCCEx_PLLSAI1_Config>
 80057b2:	4603      	mov	r3, r0
 80057b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057b6:	7cfb      	ldrb	r3, [r7, #19]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80057bc:	7cfb      	ldrb	r3, [r7, #19]
 80057be:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00b      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057cc:	4b20      	ldr	r3, [pc, #128]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057d2:	f023 0204 	bic.w	r2, r3, #4
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057dc:	491c      	ldr	r1, [pc, #112]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00b      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80057f0:	4b17      	ldr	r3, [pc, #92]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057f6:	f023 0218 	bic.w	r2, r3, #24
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005800:	4913      	ldr	r1, [pc, #76]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d017      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005814:	4b0e      	ldr	r3, [pc, #56]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005816:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800581a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005824:	490a      	ldr	r1, [pc, #40]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005832:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005836:	d105      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005838:	4b05      	ldr	r3, [pc, #20]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	4a04      	ldr	r2, [pc, #16]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800583e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005842:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005844:	7cbb      	ldrb	r3, [r7, #18]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	40021000 	.word	0x40021000

08005854 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005862:	4b72      	ldr	r3, [pc, #456]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00e      	beq.n	800588c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800586e:	4b6f      	ldr	r3, [pc, #444]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f003 0203 	and.w	r2, r3, #3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d103      	bne.n	8005886 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
       ||
 8005882:	2b00      	cmp	r3, #0
 8005884:	d142      	bne.n	800590c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	73fb      	strb	r3, [r7, #15]
 800588a:	e03f      	b.n	800590c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b03      	cmp	r3, #3
 8005892:	d018      	beq.n	80058c6 <RCCEx_PLLSAI1_Config+0x72>
 8005894:	2b03      	cmp	r3, #3
 8005896:	d825      	bhi.n	80058e4 <RCCEx_PLLSAI1_Config+0x90>
 8005898:	2b01      	cmp	r3, #1
 800589a:	d002      	beq.n	80058a2 <RCCEx_PLLSAI1_Config+0x4e>
 800589c:	2b02      	cmp	r3, #2
 800589e:	d009      	beq.n	80058b4 <RCCEx_PLLSAI1_Config+0x60>
 80058a0:	e020      	b.n	80058e4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058a2:	4b62      	ldr	r3, [pc, #392]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d8>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d11d      	bne.n	80058ea <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058b2:	e01a      	b.n	80058ea <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058b4:	4b5d      	ldr	r3, [pc, #372]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d116      	bne.n	80058ee <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058c4:	e013      	b.n	80058ee <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058c6:	4b59      	ldr	r3, [pc, #356]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10f      	bne.n	80058f2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058d2:	4b56      	ldr	r3, [pc, #344]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d8>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d109      	bne.n	80058f2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058e2:	e006      	b.n	80058f2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	73fb      	strb	r3, [r7, #15]
      break;
 80058e8:	e004      	b.n	80058f4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80058ea:	bf00      	nop
 80058ec:	e002      	b.n	80058f4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80058ee:	bf00      	nop
 80058f0:	e000      	b.n	80058f4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80058f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d108      	bne.n	800590c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80058fa:	4b4c      	ldr	r3, [pc, #304]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d8>)
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f023 0203 	bic.w	r2, r3, #3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4949      	ldr	r1, [pc, #292]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005908:	4313      	orrs	r3, r2
 800590a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800590c:	7bfb      	ldrb	r3, [r7, #15]
 800590e:	2b00      	cmp	r3, #0
 8005910:	f040 8086 	bne.w	8005a20 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005914:	4b45      	ldr	r3, [pc, #276]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a44      	ldr	r2, [pc, #272]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d8>)
 800591a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800591e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005920:	f7fd f89c 	bl	8002a5c <HAL_GetTick>
 8005924:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005926:	e009      	b.n	800593c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005928:	f7fd f898 	bl	8002a5c <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d902      	bls.n	800593c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	73fb      	strb	r3, [r7, #15]
        break;
 800593a:	e005      	b.n	8005948 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800593c:	4b3b      	ldr	r3, [pc, #236]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d8>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1ef      	bne.n	8005928 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d168      	bne.n	8005a20 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d113      	bne.n	800597c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005954:	4b35      	ldr	r3, [pc, #212]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	4b35      	ldr	r3, [pc, #212]	; (8005a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 800595a:	4013      	ands	r3, r2
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6892      	ldr	r2, [r2, #8]
 8005960:	0211      	lsls	r1, r2, #8
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	68d2      	ldr	r2, [r2, #12]
 8005966:	06d2      	lsls	r2, r2, #27
 8005968:	4311      	orrs	r1, r2
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6852      	ldr	r2, [r2, #4]
 800596e:	3a01      	subs	r2, #1
 8005970:	0112      	lsls	r2, r2, #4
 8005972:	430a      	orrs	r2, r1
 8005974:	492d      	ldr	r1, [pc, #180]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005976:	4313      	orrs	r3, r2
 8005978:	610b      	str	r3, [r1, #16]
 800597a:	e02d      	b.n	80059d8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d115      	bne.n	80059ae <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005982:	4b2a      	ldr	r3, [pc, #168]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005984:	691a      	ldr	r2, [r3, #16]
 8005986:	4b2b      	ldr	r3, [pc, #172]	; (8005a34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005988:	4013      	ands	r3, r2
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6892      	ldr	r2, [r2, #8]
 800598e:	0211      	lsls	r1, r2, #8
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6912      	ldr	r2, [r2, #16]
 8005994:	0852      	lsrs	r2, r2, #1
 8005996:	3a01      	subs	r2, #1
 8005998:	0552      	lsls	r2, r2, #21
 800599a:	4311      	orrs	r1, r2
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	6852      	ldr	r2, [r2, #4]
 80059a0:	3a01      	subs	r2, #1
 80059a2:	0112      	lsls	r2, r2, #4
 80059a4:	430a      	orrs	r2, r1
 80059a6:	4921      	ldr	r1, [pc, #132]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d8>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	610b      	str	r3, [r1, #16]
 80059ac:	e014      	b.n	80059d8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059ae:	4b1f      	ldr	r3, [pc, #124]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d8>)
 80059b0:	691a      	ldr	r2, [r3, #16]
 80059b2:	4b21      	ldr	r3, [pc, #132]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059b4:	4013      	ands	r3, r2
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6892      	ldr	r2, [r2, #8]
 80059ba:	0211      	lsls	r1, r2, #8
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6952      	ldr	r2, [r2, #20]
 80059c0:	0852      	lsrs	r2, r2, #1
 80059c2:	3a01      	subs	r2, #1
 80059c4:	0652      	lsls	r2, r2, #25
 80059c6:	4311      	orrs	r1, r2
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	6852      	ldr	r2, [r2, #4]
 80059cc:	3a01      	subs	r2, #1
 80059ce:	0112      	lsls	r2, r2, #4
 80059d0:	430a      	orrs	r2, r1
 80059d2:	4916      	ldr	r1, [pc, #88]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d8>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80059d8:	4b14      	ldr	r3, [pc, #80]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d8>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a13      	ldr	r2, [pc, #76]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d8>)
 80059de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e4:	f7fd f83a 	bl	8002a5c <HAL_GetTick>
 80059e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059ea:	e009      	b.n	8005a00 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059ec:	f7fd f836 	bl	8002a5c <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d902      	bls.n	8005a00 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	73fb      	strb	r3, [r7, #15]
          break;
 80059fe:	e005      	b.n	8005a0c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a00:	4b0a      	ldr	r3, [pc, #40]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0ef      	beq.n	80059ec <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d106      	bne.n	8005a20 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a12:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a14:	691a      	ldr	r2, [r3, #16]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	4904      	ldr	r1, [pc, #16]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	07ff800f 	.word	0x07ff800f
 8005a34:	ff9f800f 	.word	0xff9f800f
 8005a38:	f9ff800f 	.word	0xf9ff800f

08005a3c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a4a:	4b72      	ldr	r3, [pc, #456]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00e      	beq.n	8005a74 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005a56:	4b6f      	ldr	r3, [pc, #444]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f003 0203 	and.w	r2, r3, #3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d103      	bne.n	8005a6e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
       ||
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d142      	bne.n	8005af4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	73fb      	strb	r3, [r7, #15]
 8005a72:	e03f      	b.n	8005af4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b03      	cmp	r3, #3
 8005a7a:	d018      	beq.n	8005aae <RCCEx_PLLSAI2_Config+0x72>
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d825      	bhi.n	8005acc <RCCEx_PLLSAI2_Config+0x90>
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d002      	beq.n	8005a8a <RCCEx_PLLSAI2_Config+0x4e>
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d009      	beq.n	8005a9c <RCCEx_PLLSAI2_Config+0x60>
 8005a88:	e020      	b.n	8005acc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a8a:	4b62      	ldr	r3, [pc, #392]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d11d      	bne.n	8005ad2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a9a:	e01a      	b.n	8005ad2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a9c:	4b5d      	ldr	r3, [pc, #372]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d116      	bne.n	8005ad6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aac:	e013      	b.n	8005ad6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005aae:	4b59      	ldr	r3, [pc, #356]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10f      	bne.n	8005ada <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005aba:	4b56      	ldr	r3, [pc, #344]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d109      	bne.n	8005ada <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005aca:	e006      	b.n	8005ada <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	73fb      	strb	r3, [r7, #15]
      break;
 8005ad0:	e004      	b.n	8005adc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005ad2:	bf00      	nop
 8005ad4:	e002      	b.n	8005adc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005ad6:	bf00      	nop
 8005ad8:	e000      	b.n	8005adc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005ada:	bf00      	nop
    }

    if(status == HAL_OK)
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d108      	bne.n	8005af4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005ae2:	4b4c      	ldr	r3, [pc, #304]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f023 0203 	bic.w	r2, r3, #3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4949      	ldr	r1, [pc, #292]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f040 8086 	bne.w	8005c08 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005afc:	4b45      	ldr	r3, [pc, #276]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a44      	ldr	r2, [pc, #272]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b08:	f7fc ffa8 	bl	8002a5c <HAL_GetTick>
 8005b0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b0e:	e009      	b.n	8005b24 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b10:	f7fc ffa4 	bl	8002a5c <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d902      	bls.n	8005b24 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	73fb      	strb	r3, [r7, #15]
        break;
 8005b22:	e005      	b.n	8005b30 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b24:	4b3b      	ldr	r3, [pc, #236]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1ef      	bne.n	8005b10 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d168      	bne.n	8005c08 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d113      	bne.n	8005b64 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b3c:	4b35      	ldr	r3, [pc, #212]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b3e:	695a      	ldr	r2, [r3, #20]
 8005b40:	4b35      	ldr	r3, [pc, #212]	; (8005c18 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005b42:	4013      	ands	r3, r2
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6892      	ldr	r2, [r2, #8]
 8005b48:	0211      	lsls	r1, r2, #8
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	68d2      	ldr	r2, [r2, #12]
 8005b4e:	06d2      	lsls	r2, r2, #27
 8005b50:	4311      	orrs	r1, r2
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	6852      	ldr	r2, [r2, #4]
 8005b56:	3a01      	subs	r2, #1
 8005b58:	0112      	lsls	r2, r2, #4
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	492d      	ldr	r1, [pc, #180]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	614b      	str	r3, [r1, #20]
 8005b62:	e02d      	b.n	8005bc0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d115      	bne.n	8005b96 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b6a:	4b2a      	ldr	r3, [pc, #168]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b6c:	695a      	ldr	r2, [r3, #20]
 8005b6e:	4b2b      	ldr	r3, [pc, #172]	; (8005c1c <RCCEx_PLLSAI2_Config+0x1e0>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6892      	ldr	r2, [r2, #8]
 8005b76:	0211      	lsls	r1, r2, #8
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6912      	ldr	r2, [r2, #16]
 8005b7c:	0852      	lsrs	r2, r2, #1
 8005b7e:	3a01      	subs	r2, #1
 8005b80:	0552      	lsls	r2, r2, #21
 8005b82:	4311      	orrs	r1, r2
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6852      	ldr	r2, [r2, #4]
 8005b88:	3a01      	subs	r2, #1
 8005b8a:	0112      	lsls	r2, r2, #4
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	4921      	ldr	r1, [pc, #132]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	614b      	str	r3, [r1, #20]
 8005b94:	e014      	b.n	8005bc0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b96:	4b1f      	ldr	r3, [pc, #124]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b98:	695a      	ldr	r2, [r3, #20]
 8005b9a:	4b21      	ldr	r3, [pc, #132]	; (8005c20 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6892      	ldr	r2, [r2, #8]
 8005ba2:	0211      	lsls	r1, r2, #8
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6952      	ldr	r2, [r2, #20]
 8005ba8:	0852      	lsrs	r2, r2, #1
 8005baa:	3a01      	subs	r2, #1
 8005bac:	0652      	lsls	r2, r2, #25
 8005bae:	4311      	orrs	r1, r2
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6852      	ldr	r2, [r2, #4]
 8005bb4:	3a01      	subs	r2, #1
 8005bb6:	0112      	lsls	r2, r2, #4
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	4916      	ldr	r1, [pc, #88]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005bc0:	4b14      	ldr	r3, [pc, #80]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a13      	ldr	r2, [pc, #76]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bcc:	f7fc ff46 	bl	8002a5c <HAL_GetTick>
 8005bd0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bd2:	e009      	b.n	8005be8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005bd4:	f7fc ff42 	bl	8002a5c <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d902      	bls.n	8005be8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	73fb      	strb	r3, [r7, #15]
          break;
 8005be6:	e005      	b.n	8005bf4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005be8:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0ef      	beq.n	8005bd4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d106      	bne.n	8005c08 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005bfa:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bfc:	695a      	ldr	r2, [r3, #20]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	4904      	ldr	r1, [pc, #16]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	40021000 	.word	0x40021000
 8005c18:	07ff800f 	.word	0x07ff800f
 8005c1c:	ff9f800f 	.word	0xff9f800f
 8005c20:	f9ff800f 	.word	0xf9ff800f

08005c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e049      	b.n	8005cca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f841 	bl	8005cd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3304      	adds	r3, #4
 8005c60:	4619      	mov	r1, r3
 8005c62:	4610      	mov	r0, r2
 8005c64:	f000 f9f8 	bl	8006058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005cda:	bf00      	nop
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
	...

08005ce8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d001      	beq.n	8005d00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e04f      	b.n	8005da0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0201 	orr.w	r2, r2, #1
 8005d16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a23      	ldr	r2, [pc, #140]	; (8005dac <HAL_TIM_Base_Start_IT+0xc4>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d01d      	beq.n	8005d5e <HAL_TIM_Base_Start_IT+0x76>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2a:	d018      	beq.n	8005d5e <HAL_TIM_Base_Start_IT+0x76>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a1f      	ldr	r2, [pc, #124]	; (8005db0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d013      	beq.n	8005d5e <HAL_TIM_Base_Start_IT+0x76>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a1e      	ldr	r2, [pc, #120]	; (8005db4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d00e      	beq.n	8005d5e <HAL_TIM_Base_Start_IT+0x76>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a1c      	ldr	r2, [pc, #112]	; (8005db8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d009      	beq.n	8005d5e <HAL_TIM_Base_Start_IT+0x76>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a1b      	ldr	r2, [pc, #108]	; (8005dbc <HAL_TIM_Base_Start_IT+0xd4>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d004      	beq.n	8005d5e <HAL_TIM_Base_Start_IT+0x76>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a19      	ldr	r2, [pc, #100]	; (8005dc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d115      	bne.n	8005d8a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	4b17      	ldr	r3, [pc, #92]	; (8005dc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d66:	4013      	ands	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b06      	cmp	r3, #6
 8005d6e:	d015      	beq.n	8005d9c <HAL_TIM_Base_Start_IT+0xb4>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d76:	d011      	beq.n	8005d9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0201 	orr.w	r2, r2, #1
 8005d86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d88:	e008      	b.n	8005d9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f042 0201 	orr.w	r2, r2, #1
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	e000      	b.n	8005d9e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	40012c00 	.word	0x40012c00
 8005db0:	40000400 	.word	0x40000400
 8005db4:	40000800 	.word	0x40000800
 8005db8:	40000c00 	.word	0x40000c00
 8005dbc:	40013400 	.word	0x40013400
 8005dc0:	40014000 	.word	0x40014000
 8005dc4:	00010007 	.word	0x00010007

08005dc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d122      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f003 0302 	and.w	r3, r3, #2
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d11b      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f06f 0202 	mvn.w	r2, #2
 8005df4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f905 	bl	800601a <HAL_TIM_IC_CaptureCallback>
 8005e10:	e005      	b.n	8005e1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f8f7 	bl	8006006 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f908 	bl	800602e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f003 0304 	and.w	r3, r3, #4
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d122      	bne.n	8005e78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d11b      	bne.n	8005e78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f06f 0204 	mvn.w	r2, #4
 8005e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f8db 	bl	800601a <HAL_TIM_IC_CaptureCallback>
 8005e64:	e005      	b.n	8005e72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f8cd 	bl	8006006 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f8de 	bl	800602e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f003 0308 	and.w	r3, r3, #8
 8005e82:	2b08      	cmp	r3, #8
 8005e84:	d122      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f003 0308 	and.w	r3, r3, #8
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d11b      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f06f 0208 	mvn.w	r2, #8
 8005e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2204      	movs	r2, #4
 8005ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f8b1 	bl	800601a <HAL_TIM_IC_CaptureCallback>
 8005eb8:	e005      	b.n	8005ec6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f8a3 	bl	8006006 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f8b4 	bl	800602e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f003 0310 	and.w	r3, r3, #16
 8005ed6:	2b10      	cmp	r3, #16
 8005ed8:	d122      	bne.n	8005f20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f003 0310 	and.w	r3, r3, #16
 8005ee4:	2b10      	cmp	r3, #16
 8005ee6:	d11b      	bne.n	8005f20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f06f 0210 	mvn.w	r2, #16
 8005ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2208      	movs	r2, #8
 8005ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f887 	bl	800601a <HAL_TIM_IC_CaptureCallback>
 8005f0c:	e005      	b.n	8005f1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f879 	bl	8006006 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f88a 	bl	800602e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d10e      	bne.n	8005f4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d107      	bne.n	8005f4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f06f 0201 	mvn.w	r2, #1
 8005f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7fb fc2c 	bl	80017a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f56:	2b80      	cmp	r3, #128	; 0x80
 8005f58:	d10e      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f64:	2b80      	cmp	r3, #128	; 0x80
 8005f66:	d107      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f914 	bl	80061a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f86:	d10e      	bne.n	8005fa6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f92:	2b80      	cmp	r3, #128	; 0x80
 8005f94:	d107      	bne.n	8005fa6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f907 	bl	80061b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb0:	2b40      	cmp	r3, #64	; 0x40
 8005fb2:	d10e      	bne.n	8005fd2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbe:	2b40      	cmp	r3, #64	; 0x40
 8005fc0:	d107      	bne.n	8005fd2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f838 	bl	8006042 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f003 0320 	and.w	r3, r3, #32
 8005fdc:	2b20      	cmp	r3, #32
 8005fde:	d10e      	bne.n	8005ffe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f003 0320 	and.w	r3, r3, #32
 8005fea:	2b20      	cmp	r3, #32
 8005fec:	d107      	bne.n	8005ffe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f06f 0220 	mvn.w	r2, #32
 8005ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f8c7 	bl	800618c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ffe:	bf00      	nop
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006022:	bf00      	nop
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800604a:	bf00      	nop
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
	...

08006058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a40      	ldr	r2, [pc, #256]	; (800616c <TIM_Base_SetConfig+0x114>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d013      	beq.n	8006098 <TIM_Base_SetConfig+0x40>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006076:	d00f      	beq.n	8006098 <TIM_Base_SetConfig+0x40>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a3d      	ldr	r2, [pc, #244]	; (8006170 <TIM_Base_SetConfig+0x118>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d00b      	beq.n	8006098 <TIM_Base_SetConfig+0x40>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a3c      	ldr	r2, [pc, #240]	; (8006174 <TIM_Base_SetConfig+0x11c>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d007      	beq.n	8006098 <TIM_Base_SetConfig+0x40>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a3b      	ldr	r2, [pc, #236]	; (8006178 <TIM_Base_SetConfig+0x120>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d003      	beq.n	8006098 <TIM_Base_SetConfig+0x40>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a3a      	ldr	r2, [pc, #232]	; (800617c <TIM_Base_SetConfig+0x124>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d108      	bne.n	80060aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a2f      	ldr	r2, [pc, #188]	; (800616c <TIM_Base_SetConfig+0x114>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d01f      	beq.n	80060f2 <TIM_Base_SetConfig+0x9a>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b8:	d01b      	beq.n	80060f2 <TIM_Base_SetConfig+0x9a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a2c      	ldr	r2, [pc, #176]	; (8006170 <TIM_Base_SetConfig+0x118>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d017      	beq.n	80060f2 <TIM_Base_SetConfig+0x9a>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a2b      	ldr	r2, [pc, #172]	; (8006174 <TIM_Base_SetConfig+0x11c>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d013      	beq.n	80060f2 <TIM_Base_SetConfig+0x9a>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a2a      	ldr	r2, [pc, #168]	; (8006178 <TIM_Base_SetConfig+0x120>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d00f      	beq.n	80060f2 <TIM_Base_SetConfig+0x9a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a29      	ldr	r2, [pc, #164]	; (800617c <TIM_Base_SetConfig+0x124>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d00b      	beq.n	80060f2 <TIM_Base_SetConfig+0x9a>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a28      	ldr	r2, [pc, #160]	; (8006180 <TIM_Base_SetConfig+0x128>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d007      	beq.n	80060f2 <TIM_Base_SetConfig+0x9a>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a27      	ldr	r2, [pc, #156]	; (8006184 <TIM_Base_SetConfig+0x12c>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d003      	beq.n	80060f2 <TIM_Base_SetConfig+0x9a>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a26      	ldr	r2, [pc, #152]	; (8006188 <TIM_Base_SetConfig+0x130>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d108      	bne.n	8006104 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a10      	ldr	r2, [pc, #64]	; (800616c <TIM_Base_SetConfig+0x114>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d00f      	beq.n	8006150 <TIM_Base_SetConfig+0xf8>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a12      	ldr	r2, [pc, #72]	; (800617c <TIM_Base_SetConfig+0x124>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d00b      	beq.n	8006150 <TIM_Base_SetConfig+0xf8>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a11      	ldr	r2, [pc, #68]	; (8006180 <TIM_Base_SetConfig+0x128>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d007      	beq.n	8006150 <TIM_Base_SetConfig+0xf8>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a10      	ldr	r2, [pc, #64]	; (8006184 <TIM_Base_SetConfig+0x12c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d003      	beq.n	8006150 <TIM_Base_SetConfig+0xf8>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a0f      	ldr	r2, [pc, #60]	; (8006188 <TIM_Base_SetConfig+0x130>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d103      	bne.n	8006158 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	691a      	ldr	r2, [r3, #16]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	615a      	str	r2, [r3, #20]
}
 800615e:	bf00      	nop
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	40012c00 	.word	0x40012c00
 8006170:	40000400 	.word	0x40000400
 8006174:	40000800 	.word	0x40000800
 8006178:	40000c00 	.word	0x40000c00
 800617c:	40013400 	.word	0x40013400
 8006180:	40014000 	.word	0x40014000
 8006184:	40014400 	.word	0x40014400
 8006188:	40014800 	.word	0x40014800

0800618c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e042      	b.n	8006260 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d106      	bne.n	80061f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7fb fc0b 	bl	8001a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2224      	movs	r2, #36	; 0x24
 80061f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0201 	bic.w	r2, r2, #1
 8006208:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 fbae 	bl	800696c <UART_SetConfig>
 8006210:	4603      	mov	r3, r0
 8006212:	2b01      	cmp	r3, #1
 8006214:	d101      	bne.n	800621a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e022      	b.n	8006260 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fe6c 	bl	8006f00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006236:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689a      	ldr	r2, [r3, #8]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006246:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0201 	orr.w	r2, r2, #1
 8006256:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fef3 	bl	8007044 <UART_CheckIdleState>
 800625e:	4603      	mov	r3, r0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b08a      	sub	sp, #40	; 0x28
 800626c:	af02      	add	r7, sp, #8
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	603b      	str	r3, [r7, #0]
 8006274:	4613      	mov	r3, r2
 8006276:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800627e:	2b20      	cmp	r3, #32
 8006280:	f040 8084 	bne.w	800638c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <HAL_UART_Transmit+0x28>
 800628a:	88fb      	ldrh	r3, [r7, #6]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e07c      	b.n	800638e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800629a:	2b01      	cmp	r3, #1
 800629c:	d101      	bne.n	80062a2 <HAL_UART_Transmit+0x3a>
 800629e:	2302      	movs	r3, #2
 80062a0:	e075      	b.n	800638e <HAL_UART_Transmit+0x126>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2221      	movs	r2, #33	; 0x21
 80062b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062ba:	f7fc fbcf 	bl	8002a5c <HAL_GetTick>
 80062be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	88fa      	ldrh	r2, [r7, #6]
 80062c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	88fa      	ldrh	r2, [r7, #6]
 80062cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d8:	d108      	bne.n	80062ec <HAL_UART_Transmit+0x84>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d104      	bne.n	80062ec <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80062e2:	2300      	movs	r3, #0
 80062e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	61bb      	str	r3, [r7, #24]
 80062ea:	e003      	b.n	80062f4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062f0:	2300      	movs	r3, #0
 80062f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80062fc:	e02d      	b.n	800635a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2200      	movs	r2, #0
 8006306:	2180      	movs	r1, #128	; 0x80
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 fee6 	bl	80070da <UART_WaitOnFlagUntilTimeout>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d001      	beq.n	8006318 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e03a      	b.n	800638e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10b      	bne.n	8006336 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	881a      	ldrh	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800632a:	b292      	uxth	r2, r2
 800632c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	3302      	adds	r3, #2
 8006332:	61bb      	str	r3, [r7, #24]
 8006334:	e008      	b.n	8006348 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	781a      	ldrb	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	b292      	uxth	r2, r2
 8006340:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	3301      	adds	r3, #1
 8006346:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800634e:	b29b      	uxth	r3, r3
 8006350:	3b01      	subs	r3, #1
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006360:	b29b      	uxth	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1cb      	bne.n	80062fe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2200      	movs	r2, #0
 800636e:	2140      	movs	r1, #64	; 0x40
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 feb2 	bl	80070da <UART_WaitOnFlagUntilTimeout>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e006      	b.n	800638e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2220      	movs	r2, #32
 8006384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	e000      	b.n	800638e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800638c:	2302      	movs	r3, #2
  }
}
 800638e:	4618      	mov	r0, r3
 8006390:	3720      	adds	r7, #32
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
	...

08006398 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	4613      	mov	r3, r2
 80063a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ac:	2b20      	cmp	r3, #32
 80063ae:	d131      	bne.n	8006414 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <HAL_UART_Receive_IT+0x24>
 80063b6:	88fb      	ldrh	r3, [r7, #6]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e02a      	b.n	8006416 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d101      	bne.n	80063ce <HAL_UART_Receive_IT+0x36>
 80063ca:	2302      	movs	r3, #2
 80063cc:	e023      	b.n	8006416 <HAL_UART_Receive_IT+0x7e>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a0f      	ldr	r2, [pc, #60]	; (8006420 <HAL_UART_Receive_IT+0x88>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d00e      	beq.n	8006404 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d007      	beq.n	8006404 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006402:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006404:	88fb      	ldrh	r3, [r7, #6]
 8006406:	461a      	mov	r2, r3
 8006408:	68b9      	ldr	r1, [r7, #8]
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 fee6 	bl	80071dc <UART_Start_Receive_IT>
 8006410:	4603      	mov	r3, r0
 8006412:	e000      	b.n	8006416 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006414:	2302      	movs	r3, #2
  }
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	40008000 	.word	0x40008000

08006424 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	4613      	mov	r3, r2
 8006430:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006438:	2b20      	cmp	r3, #32
 800643a:	d131      	bne.n	80064a0 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <HAL_UART_Receive_DMA+0x24>
 8006442:	88fb      	ldrh	r3, [r7, #6]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e02a      	b.n	80064a2 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006452:	2b01      	cmp	r3, #1
 8006454:	d101      	bne.n	800645a <HAL_UART_Receive_DMA+0x36>
 8006456:	2302      	movs	r3, #2
 8006458:	e023      	b.n	80064a2 <HAL_UART_Receive_DMA+0x7e>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a0f      	ldr	r2, [pc, #60]	; (80064ac <HAL_UART_Receive_DMA+0x88>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d00e      	beq.n	8006490 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d007      	beq.n	8006490 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800648e:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8006490:	88fb      	ldrh	r3, [r7, #6]
 8006492:	461a      	mov	r2, r3
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 ff5e 	bl	8007358 <UART_Start_Receive_DMA>
 800649c:	4603      	mov	r3, r0
 800649e:	e000      	b.n	80064a2 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80064a0:	2302      	movs	r3, #2
  }
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	40008000 	.word	0x40008000

080064b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064d0:	69fa      	ldr	r2, [r7, #28]
 80064d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80064d6:	4013      	ands	r3, r2
 80064d8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d118      	bne.n	8006512 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	f003 0320 	and.w	r3, r3, #32
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d013      	beq.n	8006512 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	f003 0320 	and.w	r3, r3, #32
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d104      	bne.n	80064fe <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d009      	beq.n	8006512 <HAL_UART_IRQHandler+0x62>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 81fb 	beq.w	80068fe <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	4798      	blx	r3
      }
      return;
 8006510:	e1f5      	b.n	80068fe <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 80ef 	beq.w	80066f8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	4b73      	ldr	r3, [pc, #460]	; (80066ec <HAL_UART_IRQHandler+0x23c>)
 800651e:	4013      	ands	r3, r2
 8006520:	2b00      	cmp	r3, #0
 8006522:	d105      	bne.n	8006530 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	4b72      	ldr	r3, [pc, #456]	; (80066f0 <HAL_UART_IRQHandler+0x240>)
 8006528:	4013      	ands	r3, r2
 800652a:	2b00      	cmp	r3, #0
 800652c:	f000 80e4 	beq.w	80066f8 <HAL_UART_IRQHandler+0x248>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b00      	cmp	r3, #0
 8006538:	d010      	beq.n	800655c <HAL_UART_IRQHandler+0xac>
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00b      	beq.n	800655c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2201      	movs	r2, #1
 800654a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006552:	f043 0201 	orr.w	r2, r3, #1
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b00      	cmp	r3, #0
 8006564:	d010      	beq.n	8006588 <HAL_UART_IRQHandler+0xd8>
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00b      	beq.n	8006588 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2202      	movs	r2, #2
 8006576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800657e:	f043 0204 	orr.w	r2, r3, #4
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	f003 0304 	and.w	r3, r3, #4
 800658e:	2b00      	cmp	r3, #0
 8006590:	d010      	beq.n	80065b4 <HAL_UART_IRQHandler+0x104>
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00b      	beq.n	80065b4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2204      	movs	r2, #4
 80065a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065aa:	f043 0202 	orr.w	r2, r3, #2
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d015      	beq.n	80065ea <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	f003 0320 	and.w	r3, r3, #32
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d104      	bne.n	80065d2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	4b48      	ldr	r3, [pc, #288]	; (80066ec <HAL_UART_IRQHandler+0x23c>)
 80065cc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00b      	beq.n	80065ea <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2208      	movs	r2, #8
 80065d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065e0:	f043 0208 	orr.w	r2, r3, #8
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d011      	beq.n	8006618 <HAL_UART_IRQHandler+0x168>
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00c      	beq.n	8006618 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800660e:	f043 0220 	orr.w	r2, r3, #32
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 816f 	beq.w	8006902 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	f003 0320 	and.w	r3, r3, #32
 800662a:	2b00      	cmp	r3, #0
 800662c:	d011      	beq.n	8006652 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	f003 0320 	and.w	r3, r3, #32
 8006634:	2b00      	cmp	r3, #0
 8006636:	d104      	bne.n	8006642 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d007      	beq.n	8006652 <HAL_UART_IRQHandler+0x1a2>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006658:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006664:	2b40      	cmp	r3, #64	; 0x40
 8006666:	d004      	beq.n	8006672 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800666e:	2b00      	cmp	r3, #0
 8006670:	d031      	beq.n	80066d6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fefc 	bl	8007470 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006682:	2b40      	cmp	r3, #64	; 0x40
 8006684:	d123      	bne.n	80066ce <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006694:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800669a:	2b00      	cmp	r3, #0
 800669c:	d013      	beq.n	80066c6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066a2:	4a14      	ldr	r2, [pc, #80]	; (80066f4 <HAL_UART_IRQHandler+0x244>)
 80066a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fc fc43 	bl	8002f36 <HAL_DMA_Abort_IT>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d017      	beq.n	80066e6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80066c0:	4610      	mov	r0, r2
 80066c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c4:	e00f      	b.n	80066e6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f93a 	bl	8006940 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066cc:	e00b      	b.n	80066e6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f936 	bl	8006940 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d4:	e007      	b.n	80066e6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f932 	bl	8006940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80066e4:	e10d      	b.n	8006902 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e6:	bf00      	nop
    return;
 80066e8:	e10b      	b.n	8006902 <HAL_UART_IRQHandler+0x452>
 80066ea:	bf00      	nop
 80066ec:	10000001 	.word	0x10000001
 80066f0:	04000120 	.word	0x04000120
 80066f4:	08007627 	.word	0x08007627

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	f040 80ab 	bne.w	8006858 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	f003 0310 	and.w	r3, r3, #16
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 80a5 	beq.w	8006858 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	f003 0310 	and.w	r3, r3, #16
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 809f 	beq.w	8006858 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2210      	movs	r2, #16
 8006720:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672c:	2b40      	cmp	r3, #64	; 0x40
 800672e:	d155      	bne.n	80067dc <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800673a:	893b      	ldrh	r3, [r7, #8]
 800673c:	2b00      	cmp	r3, #0
 800673e:	f000 80e2 	beq.w	8006906 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006748:	893a      	ldrh	r2, [r7, #8]
 800674a:	429a      	cmp	r2, r3
 800674c:	f080 80db 	bcs.w	8006906 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	893a      	ldrh	r2, [r7, #8]
 8006754:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0320 	and.w	r3, r3, #32
 8006764:	2b00      	cmp	r3, #0
 8006766:	d12b      	bne.n	80067c0 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006776:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689a      	ldr	r2, [r3, #8]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0201 	bic.w	r2, r2, #1
 8006786:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689a      	ldr	r2, [r3, #8]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006796:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2220      	movs	r2, #32
 800679c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 0210 	bic.w	r2, r2, #16
 80067b4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fc fb5f 	bl	8002e7e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	4619      	mov	r1, r3
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f8bd 	bl	8006954 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80067da:	e094      	b.n	8006906 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 8087 	beq.w	800690a <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 80067fc:	897b      	ldrh	r3, [r7, #10]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f000 8083 	beq.w	800690a <HAL_UART_IRQHandler+0x45a>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006812:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6812      	ldr	r2, [r2, #0]
 800681e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006822:	f023 0301 	bic.w	r3, r3, #1
 8006826:	6093      	str	r3, [r2, #8]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2220      	movs	r2, #32
 800682c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 0210 	bic.w	r2, r2, #16
 800684a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800684c:	897b      	ldrh	r3, [r7, #10]
 800684e:	4619      	mov	r1, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f87f 	bl	8006954 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006856:	e058      	b.n	800690a <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00d      	beq.n	800687e <HAL_UART_IRQHandler+0x3ce>
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d008      	beq.n	800687e <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006874:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f001 fa53 	bl	8007d22 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800687c:	e048      	b.n	8006910 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006884:	2b00      	cmp	r3, #0
 8006886:	d012      	beq.n	80068ae <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800688e:	2b00      	cmp	r3, #0
 8006890:	d104      	bne.n	800689c <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d008      	beq.n	80068ae <HAL_UART_IRQHandler+0x3fe>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d034      	beq.n	800690e <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	4798      	blx	r3
    }
    return;
 80068ac:	e02f      	b.n	800690e <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d008      	beq.n	80068ca <HAL_UART_IRQHandler+0x41a>
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fec5 	bl	8007652 <UART_EndTransmit_IT>
    return;
 80068c8:	e022      	b.n	8006910 <HAL_UART_IRQHandler+0x460>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d008      	beq.n	80068e6 <HAL_UART_IRQHandler+0x436>
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f001 fa33 	bl	8007d4a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068e4:	e014      	b.n	8006910 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00f      	beq.n	8006910 <HAL_UART_IRQHandler+0x460>
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	da0c      	bge.n	8006910 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f001 fa1d 	bl	8007d36 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068fc:	e008      	b.n	8006910 <HAL_UART_IRQHandler+0x460>
      return;
 80068fe:	bf00      	nop
 8006900:	e006      	b.n	8006910 <HAL_UART_IRQHandler+0x460>
    return;
 8006902:	bf00      	nop
 8006904:	e004      	b.n	8006910 <HAL_UART_IRQHandler+0x460>
      return;
 8006906:	bf00      	nop
 8006908:	e002      	b.n	8006910 <HAL_UART_IRQHandler+0x460>
      return;
 800690a:	bf00      	nop
 800690c:	e000      	b.n	8006910 <HAL_UART_IRQHandler+0x460>
    return;
 800690e:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8006910:	3720      	adds	r7, #32
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop

08006918 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800696c:	b5b0      	push	{r4, r5, r7, lr}
 800696e:	b088      	sub	sp, #32
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	431a      	orrs	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	4313      	orrs	r3, r2
 800698e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	4bb1      	ldr	r3, [pc, #708]	; (8006c5c <UART_SetConfig+0x2f0>)
 8006998:	4013      	ands	r3, r2
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6812      	ldr	r2, [r2, #0]
 800699e:	69f9      	ldr	r1, [r7, #28]
 80069a0:	430b      	orrs	r3, r1
 80069a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68da      	ldr	r2, [r3, #12]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4aa6      	ldr	r2, [pc, #664]	; (8006c60 <UART_SetConfig+0x2f4>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d004      	beq.n	80069d4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	69fa      	ldr	r2, [r7, #28]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80069de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	6812      	ldr	r2, [r2, #0]
 80069e6:	69f9      	ldr	r1, [r7, #28]
 80069e8:	430b      	orrs	r3, r1
 80069ea:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f2:	f023 010f 	bic.w	r1, r3, #15
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a97      	ldr	r2, [pc, #604]	; (8006c64 <UART_SetConfig+0x2f8>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d120      	bne.n	8006a4e <UART_SetConfig+0xe2>
 8006a0c:	4b96      	ldr	r3, [pc, #600]	; (8006c68 <UART_SetConfig+0x2fc>)
 8006a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d816      	bhi.n	8006a48 <UART_SetConfig+0xdc>
 8006a1a:	a201      	add	r2, pc, #4	; (adr r2, 8006a20 <UART_SetConfig+0xb4>)
 8006a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a20:	08006a31 	.word	0x08006a31
 8006a24:	08006a3d 	.word	0x08006a3d
 8006a28:	08006a37 	.word	0x08006a37
 8006a2c:	08006a43 	.word	0x08006a43
 8006a30:	2301      	movs	r3, #1
 8006a32:	76fb      	strb	r3, [r7, #27]
 8006a34:	e0e7      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006a36:	2302      	movs	r3, #2
 8006a38:	76fb      	strb	r3, [r7, #27]
 8006a3a:	e0e4      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006a3c:	2304      	movs	r3, #4
 8006a3e:	76fb      	strb	r3, [r7, #27]
 8006a40:	e0e1      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006a42:	2308      	movs	r3, #8
 8006a44:	76fb      	strb	r3, [r7, #27]
 8006a46:	e0de      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006a48:	2310      	movs	r3, #16
 8006a4a:	76fb      	strb	r3, [r7, #27]
 8006a4c:	e0db      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a86      	ldr	r2, [pc, #536]	; (8006c6c <UART_SetConfig+0x300>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d132      	bne.n	8006abe <UART_SetConfig+0x152>
 8006a58:	4b83      	ldr	r3, [pc, #524]	; (8006c68 <UART_SetConfig+0x2fc>)
 8006a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5e:	f003 030c 	and.w	r3, r3, #12
 8006a62:	2b0c      	cmp	r3, #12
 8006a64:	d828      	bhi.n	8006ab8 <UART_SetConfig+0x14c>
 8006a66:	a201      	add	r2, pc, #4	; (adr r2, 8006a6c <UART_SetConfig+0x100>)
 8006a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6c:	08006aa1 	.word	0x08006aa1
 8006a70:	08006ab9 	.word	0x08006ab9
 8006a74:	08006ab9 	.word	0x08006ab9
 8006a78:	08006ab9 	.word	0x08006ab9
 8006a7c:	08006aad 	.word	0x08006aad
 8006a80:	08006ab9 	.word	0x08006ab9
 8006a84:	08006ab9 	.word	0x08006ab9
 8006a88:	08006ab9 	.word	0x08006ab9
 8006a8c:	08006aa7 	.word	0x08006aa7
 8006a90:	08006ab9 	.word	0x08006ab9
 8006a94:	08006ab9 	.word	0x08006ab9
 8006a98:	08006ab9 	.word	0x08006ab9
 8006a9c:	08006ab3 	.word	0x08006ab3
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	76fb      	strb	r3, [r7, #27]
 8006aa4:	e0af      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	76fb      	strb	r3, [r7, #27]
 8006aaa:	e0ac      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006aac:	2304      	movs	r3, #4
 8006aae:	76fb      	strb	r3, [r7, #27]
 8006ab0:	e0a9      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006ab2:	2308      	movs	r3, #8
 8006ab4:	76fb      	strb	r3, [r7, #27]
 8006ab6:	e0a6      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006ab8:	2310      	movs	r3, #16
 8006aba:	76fb      	strb	r3, [r7, #27]
 8006abc:	e0a3      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a6b      	ldr	r2, [pc, #428]	; (8006c70 <UART_SetConfig+0x304>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d120      	bne.n	8006b0a <UART_SetConfig+0x19e>
 8006ac8:	4b67      	ldr	r3, [pc, #412]	; (8006c68 <UART_SetConfig+0x2fc>)
 8006aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ace:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ad2:	2b30      	cmp	r3, #48	; 0x30
 8006ad4:	d013      	beq.n	8006afe <UART_SetConfig+0x192>
 8006ad6:	2b30      	cmp	r3, #48	; 0x30
 8006ad8:	d814      	bhi.n	8006b04 <UART_SetConfig+0x198>
 8006ada:	2b20      	cmp	r3, #32
 8006adc:	d009      	beq.n	8006af2 <UART_SetConfig+0x186>
 8006ade:	2b20      	cmp	r3, #32
 8006ae0:	d810      	bhi.n	8006b04 <UART_SetConfig+0x198>
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d002      	beq.n	8006aec <UART_SetConfig+0x180>
 8006ae6:	2b10      	cmp	r3, #16
 8006ae8:	d006      	beq.n	8006af8 <UART_SetConfig+0x18c>
 8006aea:	e00b      	b.n	8006b04 <UART_SetConfig+0x198>
 8006aec:	2300      	movs	r3, #0
 8006aee:	76fb      	strb	r3, [r7, #27]
 8006af0:	e089      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006af2:	2302      	movs	r3, #2
 8006af4:	76fb      	strb	r3, [r7, #27]
 8006af6:	e086      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006af8:	2304      	movs	r3, #4
 8006afa:	76fb      	strb	r3, [r7, #27]
 8006afc:	e083      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006afe:	2308      	movs	r3, #8
 8006b00:	76fb      	strb	r3, [r7, #27]
 8006b02:	e080      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006b04:	2310      	movs	r3, #16
 8006b06:	76fb      	strb	r3, [r7, #27]
 8006b08:	e07d      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a59      	ldr	r2, [pc, #356]	; (8006c74 <UART_SetConfig+0x308>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d120      	bne.n	8006b56 <UART_SetConfig+0x1ea>
 8006b14:	4b54      	ldr	r3, [pc, #336]	; (8006c68 <UART_SetConfig+0x2fc>)
 8006b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b1e:	2bc0      	cmp	r3, #192	; 0xc0
 8006b20:	d013      	beq.n	8006b4a <UART_SetConfig+0x1de>
 8006b22:	2bc0      	cmp	r3, #192	; 0xc0
 8006b24:	d814      	bhi.n	8006b50 <UART_SetConfig+0x1e4>
 8006b26:	2b80      	cmp	r3, #128	; 0x80
 8006b28:	d009      	beq.n	8006b3e <UART_SetConfig+0x1d2>
 8006b2a:	2b80      	cmp	r3, #128	; 0x80
 8006b2c:	d810      	bhi.n	8006b50 <UART_SetConfig+0x1e4>
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d002      	beq.n	8006b38 <UART_SetConfig+0x1cc>
 8006b32:	2b40      	cmp	r3, #64	; 0x40
 8006b34:	d006      	beq.n	8006b44 <UART_SetConfig+0x1d8>
 8006b36:	e00b      	b.n	8006b50 <UART_SetConfig+0x1e4>
 8006b38:	2300      	movs	r3, #0
 8006b3a:	76fb      	strb	r3, [r7, #27]
 8006b3c:	e063      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006b3e:	2302      	movs	r3, #2
 8006b40:	76fb      	strb	r3, [r7, #27]
 8006b42:	e060      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006b44:	2304      	movs	r3, #4
 8006b46:	76fb      	strb	r3, [r7, #27]
 8006b48:	e05d      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006b4a:	2308      	movs	r3, #8
 8006b4c:	76fb      	strb	r3, [r7, #27]
 8006b4e:	e05a      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006b50:	2310      	movs	r3, #16
 8006b52:	76fb      	strb	r3, [r7, #27]
 8006b54:	e057      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a47      	ldr	r2, [pc, #284]	; (8006c78 <UART_SetConfig+0x30c>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d125      	bne.n	8006bac <UART_SetConfig+0x240>
 8006b60:	4b41      	ldr	r3, [pc, #260]	; (8006c68 <UART_SetConfig+0x2fc>)
 8006b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b6e:	d017      	beq.n	8006ba0 <UART_SetConfig+0x234>
 8006b70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b74:	d817      	bhi.n	8006ba6 <UART_SetConfig+0x23a>
 8006b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b7a:	d00b      	beq.n	8006b94 <UART_SetConfig+0x228>
 8006b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b80:	d811      	bhi.n	8006ba6 <UART_SetConfig+0x23a>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <UART_SetConfig+0x222>
 8006b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b8a:	d006      	beq.n	8006b9a <UART_SetConfig+0x22e>
 8006b8c:	e00b      	b.n	8006ba6 <UART_SetConfig+0x23a>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	76fb      	strb	r3, [r7, #27]
 8006b92:	e038      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006b94:	2302      	movs	r3, #2
 8006b96:	76fb      	strb	r3, [r7, #27]
 8006b98:	e035      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006b9a:	2304      	movs	r3, #4
 8006b9c:	76fb      	strb	r3, [r7, #27]
 8006b9e:	e032      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006ba0:	2308      	movs	r3, #8
 8006ba2:	76fb      	strb	r3, [r7, #27]
 8006ba4:	e02f      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006ba6:	2310      	movs	r3, #16
 8006ba8:	76fb      	strb	r3, [r7, #27]
 8006baa:	e02c      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a2b      	ldr	r2, [pc, #172]	; (8006c60 <UART_SetConfig+0x2f4>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d125      	bne.n	8006c02 <UART_SetConfig+0x296>
 8006bb6:	4b2c      	ldr	r3, [pc, #176]	; (8006c68 <UART_SetConfig+0x2fc>)
 8006bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006bc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bc4:	d017      	beq.n	8006bf6 <UART_SetConfig+0x28a>
 8006bc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bca:	d817      	bhi.n	8006bfc <UART_SetConfig+0x290>
 8006bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd0:	d00b      	beq.n	8006bea <UART_SetConfig+0x27e>
 8006bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd6:	d811      	bhi.n	8006bfc <UART_SetConfig+0x290>
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d003      	beq.n	8006be4 <UART_SetConfig+0x278>
 8006bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006be0:	d006      	beq.n	8006bf0 <UART_SetConfig+0x284>
 8006be2:	e00b      	b.n	8006bfc <UART_SetConfig+0x290>
 8006be4:	2300      	movs	r3, #0
 8006be6:	76fb      	strb	r3, [r7, #27]
 8006be8:	e00d      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006bea:	2302      	movs	r3, #2
 8006bec:	76fb      	strb	r3, [r7, #27]
 8006bee:	e00a      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006bf0:	2304      	movs	r3, #4
 8006bf2:	76fb      	strb	r3, [r7, #27]
 8006bf4:	e007      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006bf6:	2308      	movs	r3, #8
 8006bf8:	76fb      	strb	r3, [r7, #27]
 8006bfa:	e004      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006bfc:	2310      	movs	r3, #16
 8006bfe:	76fb      	strb	r3, [r7, #27]
 8006c00:	e001      	b.n	8006c06 <UART_SetConfig+0x29a>
 8006c02:	2310      	movs	r3, #16
 8006c04:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a15      	ldr	r2, [pc, #84]	; (8006c60 <UART_SetConfig+0x2f4>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	f040 809f 	bne.w	8006d50 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c12:	7efb      	ldrb	r3, [r7, #27]
 8006c14:	2b08      	cmp	r3, #8
 8006c16:	d837      	bhi.n	8006c88 <UART_SetConfig+0x31c>
 8006c18:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <UART_SetConfig+0x2b4>)
 8006c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1e:	bf00      	nop
 8006c20:	08006c45 	.word	0x08006c45
 8006c24:	08006c89 	.word	0x08006c89
 8006c28:	08006c4d 	.word	0x08006c4d
 8006c2c:	08006c89 	.word	0x08006c89
 8006c30:	08006c53 	.word	0x08006c53
 8006c34:	08006c89 	.word	0x08006c89
 8006c38:	08006c89 	.word	0x08006c89
 8006c3c:	08006c89 	.word	0x08006c89
 8006c40:	08006c81 	.word	0x08006c81
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c44:	f7fe f9b6 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 8006c48:	6178      	str	r0, [r7, #20]
        break;
 8006c4a:	e022      	b.n	8006c92 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c4c:	4b0b      	ldr	r3, [pc, #44]	; (8006c7c <UART_SetConfig+0x310>)
 8006c4e:	617b      	str	r3, [r7, #20]
        break;
 8006c50:	e01f      	b.n	8006c92 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c52:	f7fe f917 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8006c56:	6178      	str	r0, [r7, #20]
        break;
 8006c58:	e01b      	b.n	8006c92 <UART_SetConfig+0x326>
 8006c5a:	bf00      	nop
 8006c5c:	cfff69f3 	.word	0xcfff69f3
 8006c60:	40008000 	.word	0x40008000
 8006c64:	40013800 	.word	0x40013800
 8006c68:	40021000 	.word	0x40021000
 8006c6c:	40004400 	.word	0x40004400
 8006c70:	40004800 	.word	0x40004800
 8006c74:	40004c00 	.word	0x40004c00
 8006c78:	40005000 	.word	0x40005000
 8006c7c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c84:	617b      	str	r3, [r7, #20]
        break;
 8006c86:	e004      	b.n	8006c92 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	76bb      	strb	r3, [r7, #26]
        break;
 8006c90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 811b 	beq.w	8006ed0 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9e:	4a96      	ldr	r2, [pc, #600]	; (8006ef8 <UART_SetConfig+0x58c>)
 8006ca0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cac:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685a      	ldr	r2, [r3, #4]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	4413      	add	r3, r2
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d305      	bcc.n	8006cca <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d902      	bls.n	8006cd0 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	76bb      	strb	r3, [r7, #26]
 8006cce:	e0ff      	b.n	8006ed0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f04f 0100 	mov.w	r1, #0
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	4a86      	ldr	r2, [pc, #536]	; (8006ef8 <UART_SetConfig+0x58c>)
 8006cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	f04f 0300 	mov.w	r3, #0
 8006ce8:	f7f9 ffe6 	bl	8000cb8 <__aeabi_uldivmod>
 8006cec:	4602      	mov	r2, r0
 8006cee:	460b      	mov	r3, r1
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	f04f 0200 	mov.w	r2, #0
 8006cf8:	f04f 0300 	mov.w	r3, #0
 8006cfc:	020b      	lsls	r3, r1, #8
 8006cfe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d02:	0202      	lsls	r2, r0, #8
 8006d04:	6879      	ldr	r1, [r7, #4]
 8006d06:	6849      	ldr	r1, [r1, #4]
 8006d08:	0849      	lsrs	r1, r1, #1
 8006d0a:	4608      	mov	r0, r1
 8006d0c:	f04f 0100 	mov.w	r1, #0
 8006d10:	1814      	adds	r4, r2, r0
 8006d12:	eb43 0501 	adc.w	r5, r3, r1
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f04f 0300 	mov.w	r3, #0
 8006d20:	4620      	mov	r0, r4
 8006d22:	4629      	mov	r1, r5
 8006d24:	f7f9 ffc8 	bl	8000cb8 <__aeabi_uldivmod>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d36:	d308      	bcc.n	8006d4a <UART_SetConfig+0x3de>
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d3e:	d204      	bcs.n	8006d4a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	60da      	str	r2, [r3, #12]
 8006d48:	e0c2      	b.n	8006ed0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	76bb      	strb	r3, [r7, #26]
 8006d4e:	e0bf      	b.n	8006ed0 <UART_SetConfig+0x564>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d58:	d165      	bne.n	8006e26 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8006d5a:	7efb      	ldrb	r3, [r7, #27]
 8006d5c:	2b08      	cmp	r3, #8
 8006d5e:	d828      	bhi.n	8006db2 <UART_SetConfig+0x446>
 8006d60:	a201      	add	r2, pc, #4	; (adr r2, 8006d68 <UART_SetConfig+0x3fc>)
 8006d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d66:	bf00      	nop
 8006d68:	08006d8d 	.word	0x08006d8d
 8006d6c:	08006d95 	.word	0x08006d95
 8006d70:	08006d9d 	.word	0x08006d9d
 8006d74:	08006db3 	.word	0x08006db3
 8006d78:	08006da3 	.word	0x08006da3
 8006d7c:	08006db3 	.word	0x08006db3
 8006d80:	08006db3 	.word	0x08006db3
 8006d84:	08006db3 	.word	0x08006db3
 8006d88:	08006dab 	.word	0x08006dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d8c:	f7fe f912 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 8006d90:	6178      	str	r0, [r7, #20]
        break;
 8006d92:	e013      	b.n	8006dbc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d94:	f7fe f924 	bl	8004fe0 <HAL_RCC_GetPCLK2Freq>
 8006d98:	6178      	str	r0, [r7, #20]
        break;
 8006d9a:	e00f      	b.n	8006dbc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d9c:	4b57      	ldr	r3, [pc, #348]	; (8006efc <UART_SetConfig+0x590>)
 8006d9e:	617b      	str	r3, [r7, #20]
        break;
 8006da0:	e00c      	b.n	8006dbc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006da2:	f7fe f86f 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8006da6:	6178      	str	r0, [r7, #20]
        break;
 8006da8:	e008      	b.n	8006dbc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dae:	617b      	str	r3, [r7, #20]
        break;
 8006db0:	e004      	b.n	8006dbc <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	76bb      	strb	r3, [r7, #26]
        break;
 8006dba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 8086 	beq.w	8006ed0 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc8:	4a4b      	ldr	r2, [pc, #300]	; (8006ef8 <UART_SetConfig+0x58c>)
 8006dca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dd6:	005a      	lsls	r2, r3, #1
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	085b      	lsrs	r3, r3, #1
 8006dde:	441a      	add	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	2b0f      	cmp	r3, #15
 8006df0:	d916      	bls.n	8006e20 <UART_SetConfig+0x4b4>
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df8:	d212      	bcs.n	8006e20 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	f023 030f 	bic.w	r3, r3, #15
 8006e02:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	085b      	lsrs	r3, r3, #1
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	f003 0307 	and.w	r3, r3, #7
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	89fb      	ldrh	r3, [r7, #14]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	89fa      	ldrh	r2, [r7, #14]
 8006e1c:	60da      	str	r2, [r3, #12]
 8006e1e:	e057      	b.n	8006ed0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	76bb      	strb	r3, [r7, #26]
 8006e24:	e054      	b.n	8006ed0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e26:	7efb      	ldrb	r3, [r7, #27]
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d828      	bhi.n	8006e7e <UART_SetConfig+0x512>
 8006e2c:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <UART_SetConfig+0x4c8>)
 8006e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e32:	bf00      	nop
 8006e34:	08006e59 	.word	0x08006e59
 8006e38:	08006e61 	.word	0x08006e61
 8006e3c:	08006e69 	.word	0x08006e69
 8006e40:	08006e7f 	.word	0x08006e7f
 8006e44:	08006e6f 	.word	0x08006e6f
 8006e48:	08006e7f 	.word	0x08006e7f
 8006e4c:	08006e7f 	.word	0x08006e7f
 8006e50:	08006e7f 	.word	0x08006e7f
 8006e54:	08006e77 	.word	0x08006e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e58:	f7fe f8ac 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 8006e5c:	6178      	str	r0, [r7, #20]
        break;
 8006e5e:	e013      	b.n	8006e88 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e60:	f7fe f8be 	bl	8004fe0 <HAL_RCC_GetPCLK2Freq>
 8006e64:	6178      	str	r0, [r7, #20]
        break;
 8006e66:	e00f      	b.n	8006e88 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e68:	4b24      	ldr	r3, [pc, #144]	; (8006efc <UART_SetConfig+0x590>)
 8006e6a:	617b      	str	r3, [r7, #20]
        break;
 8006e6c:	e00c      	b.n	8006e88 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e6e:	f7fe f809 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8006e72:	6178      	str	r0, [r7, #20]
        break;
 8006e74:	e008      	b.n	8006e88 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e7a:	617b      	str	r3, [r7, #20]
        break;
 8006e7c:	e004      	b.n	8006e88 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	76bb      	strb	r3, [r7, #26]
        break;
 8006e86:	bf00      	nop
    }

    if (pclk != 0U)
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d020      	beq.n	8006ed0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	4a19      	ldr	r2, [pc, #100]	; (8006ef8 <UART_SetConfig+0x58c>)
 8006e94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	085b      	lsrs	r3, r3, #1
 8006ea6:	441a      	add	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	2b0f      	cmp	r3, #15
 8006eb8:	d908      	bls.n	8006ecc <UART_SetConfig+0x560>
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec0:	d204      	bcs.n	8006ecc <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	60da      	str	r2, [r3, #12]
 8006eca:	e001      	b.n	8006ed0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006eec:	7ebb      	ldrb	r3, [r7, #26]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3720      	adds	r7, #32
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bdb0      	pop	{r4, r5, r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	0800f9a0 	.word	0x0800f9a0
 8006efc:	00f42400 	.word	0x00f42400

08006f00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00a      	beq.n	8006f2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00a      	beq.n	8006f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f50:	f003 0304 	and.w	r3, r3, #4
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00a      	beq.n	8006f6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f72:	f003 0308 	and.w	r3, r3, #8
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00a      	beq.n	8006f90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f94:	f003 0310 	and.w	r3, r3, #16
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00a      	beq.n	8006fb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00a      	beq.n	8006fd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d01a      	beq.n	8007016 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ffe:	d10a      	bne.n	8007016 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	605a      	str	r2, [r3, #4]
  }
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af02      	add	r7, sp, #8
 800704a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007054:	f7fb fd02 	bl	8002a5c <HAL_GetTick>
 8007058:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0308 	and.w	r3, r3, #8
 8007064:	2b08      	cmp	r3, #8
 8007066:	d10e      	bne.n	8007086 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007068:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f82f 	bl	80070da <UART_WaitOnFlagUntilTimeout>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e025      	b.n	80070d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0304 	and.w	r3, r3, #4
 8007090:	2b04      	cmp	r3, #4
 8007092:	d10e      	bne.n	80070b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007094:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f819 	bl	80070da <UART_WaitOnFlagUntilTimeout>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e00f      	b.n	80070d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2220      	movs	r2, #32
 80070b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2220      	movs	r2, #32
 80070be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	60f8      	str	r0, [r7, #12]
 80070e2:	60b9      	str	r1, [r7, #8]
 80070e4:	603b      	str	r3, [r7, #0]
 80070e6:	4613      	mov	r3, r2
 80070e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070ea:	e062      	b.n	80071b2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f2:	d05e      	beq.n	80071b2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070f4:	f7fb fcb2 	bl	8002a5c <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	69ba      	ldr	r2, [r7, #24]
 8007100:	429a      	cmp	r2, r3
 8007102:	d302      	bcc.n	800710a <UART_WaitOnFlagUntilTimeout+0x30>
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d11d      	bne.n	8007146 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007118:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 0201 	bic.w	r2, r2, #1
 8007128:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2220      	movs	r2, #32
 800712e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2220      	movs	r2, #32
 8007136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e045      	b.n	80071d2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0304 	and.w	r3, r3, #4
 8007150:	2b00      	cmp	r3, #0
 8007152:	d02e      	beq.n	80071b2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800715e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007162:	d126      	bne.n	80071b2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800716c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800717c:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	689a      	ldr	r2, [r3, #8]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 0201 	bic.w	r2, r2, #1
 800718c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2220      	movs	r2, #32
 8007192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2220      	movs	r2, #32
 800719a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2220      	movs	r2, #32
 80071a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e00f      	b.n	80071d2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	69da      	ldr	r2, [r3, #28]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	4013      	ands	r3, r2
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	429a      	cmp	r2, r3
 80071c0:	bf0c      	ite	eq
 80071c2:	2301      	moveq	r3, #1
 80071c4:	2300      	movne	r3, #0
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	461a      	mov	r2, r3
 80071ca:	79fb      	ldrb	r3, [r7, #7]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d08d      	beq.n	80070ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
	...

080071dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	4613      	mov	r3, r2
 80071e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	88fa      	ldrh	r2, [r7, #6]
 80071f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	88fa      	ldrh	r2, [r7, #6]
 80071fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800720e:	d10e      	bne.n	800722e <UART_Start_Receive_IT+0x52>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d105      	bne.n	8007224 <UART_Start_Receive_IT+0x48>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800721e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007222:	e02d      	b.n	8007280 <UART_Start_Receive_IT+0xa4>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	22ff      	movs	r2, #255	; 0xff
 8007228:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800722c:	e028      	b.n	8007280 <UART_Start_Receive_IT+0xa4>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10d      	bne.n	8007252 <UART_Start_Receive_IT+0x76>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d104      	bne.n	8007248 <UART_Start_Receive_IT+0x6c>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	22ff      	movs	r2, #255	; 0xff
 8007242:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007246:	e01b      	b.n	8007280 <UART_Start_Receive_IT+0xa4>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	227f      	movs	r2, #127	; 0x7f
 800724c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007250:	e016      	b.n	8007280 <UART_Start_Receive_IT+0xa4>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800725a:	d10d      	bne.n	8007278 <UART_Start_Receive_IT+0x9c>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d104      	bne.n	800726e <UART_Start_Receive_IT+0x92>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	227f      	movs	r2, #127	; 0x7f
 8007268:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800726c:	e008      	b.n	8007280 <UART_Start_Receive_IT+0xa4>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	223f      	movs	r2, #63	; 0x3f
 8007272:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007276:	e003      	b.n	8007280 <UART_Start_Receive_IT+0xa4>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2222      	movs	r2, #34	; 0x22
 800728c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689a      	ldr	r2, [r3, #8]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0201 	orr.w	r2, r2, #1
 800729e:	609a      	str	r2, [r3, #8]

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072a8:	d12a      	bne.n	8007300 <UART_Start_Receive_IT+0x124>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80072b0:	88fa      	ldrh	r2, [r7, #6]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d324      	bcc.n	8007300 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072be:	d107      	bne.n	80072d0 <UART_Start_Receive_IT+0xf4>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d103      	bne.n	80072d0 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4a1f      	ldr	r2, [pc, #124]	; (8007348 <UART_Start_Receive_IT+0x16c>)
 80072cc:	671a      	str	r2, [r3, #112]	; 0x70
 80072ce:	e002      	b.n	80072d6 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	4a1e      	ldr	r2, [pc, #120]	; (800734c <UART_Start_Receive_IT+0x170>)
 80072d4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072ec:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	689a      	ldr	r2, [r3, #8]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80072fc:	609a      	str	r2, [r3, #8]
 80072fe:	e01b      	b.n	8007338 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007308:	d107      	bne.n	800731a <UART_Start_Receive_IT+0x13e>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d103      	bne.n	800731a <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	4a0e      	ldr	r2, [pc, #56]	; (8007350 <UART_Start_Receive_IT+0x174>)
 8007316:	671a      	str	r2, [r3, #112]	; 0x70
 8007318:	e002      	b.n	8007320 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	4a0d      	ldr	r2, [pc, #52]	; (8007354 <UART_Start_Receive_IT+0x178>)
 800731e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007336:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(huart);

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	08007a49 	.word	0x08007a49
 800734c:	08007841 	.word	0x08007841
 8007350:	08007763 	.word	0x08007763
 8007354:	08007687 	.word	0x08007687

08007358 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	4613      	mov	r3, r2
 8007364:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	88fa      	ldrh	r2, [r7, #6]
 8007370:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2222      	movs	r2, #34	; 0x22
 8007380:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007388:	2b00      	cmp	r3, #0
 800738a:	d02c      	beq.n	80073e6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007390:	4a25      	ldr	r2, [pc, #148]	; (8007428 <UART_Start_Receive_DMA+0xd0>)
 8007392:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007398:	4a24      	ldr	r2, [pc, #144]	; (800742c <UART_Start_Receive_DMA+0xd4>)
 800739a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073a0:	4a23      	ldr	r2, [pc, #140]	; (8007430 <UART_Start_Receive_DMA+0xd8>)
 80073a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073a8:	2200      	movs	r2, #0
 80073aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3324      	adds	r3, #36	; 0x24
 80073b6:	4619      	mov	r1, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073bc:	461a      	mov	r2, r3
 80073be:	88fb      	ldrh	r3, [r7, #6]
 80073c0:	f7fb fce2 	bl	8002d88 <HAL_DMA_Start_IT>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00d      	beq.n	80073e6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2210      	movs	r2, #16
 80073ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2220      	movs	r2, #32
 80073de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e01c      	b.n	8007420 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073fc:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	689a      	ldr	r2, [r3, #8]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f042 0201 	orr.w	r2, r2, #1
 800740c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800741c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	080074d5 	.word	0x080074d5
 800742c:	0800756f 	.word	0x0800756f
 8007430:	080075a7 	.word	0x080075a7

08007434 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800744a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689a      	ldr	r2, [r3, #8]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800745a:	609a      	str	r2, [r3, #8]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2220      	movs	r2, #32
 8007460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007486:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	6812      	ldr	r2, [r2, #0]
 8007492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007496:	f023 0301 	bic.w	r3, r3, #1
 800749a:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d107      	bne.n	80074b4 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f022 0210 	bic.w	r2, r2, #16
 80074b2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2220      	movs	r2, #32
 80074b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0320 	and.w	r3, r3, #32
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d12b      	bne.n	8007548 <UART_DMAReceiveCplt+0x74>
  {
    huart->RxXferCount = 0U;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007506:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689a      	ldr	r2, [r3, #8]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f022 0201 	bic.w	r2, r2, #1
 8007516:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689a      	ldr	r2, [r3, #8]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007526:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2220      	movs	r2, #32
 800752c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007534:	2b01      	cmp	r3, #1
 8007536:	d107      	bne.n	8007548 <UART_DMAReceiveCplt+0x74>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f022 0210 	bic.w	r2, r2, #16
 8007546:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800754c:	2b01      	cmp	r3, #1
 800754e:	d107      	bne.n	8007560 <UART_DMAReceiveCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007556:	4619      	mov	r1, r3
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f7ff f9fb 	bl	8006954 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800755e:	e002      	b.n	8007566 <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f7fa f843 	bl	80015ec <HAL_UART_RxCpltCallback>
}
 8007566:	bf00      	nop
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b084      	sub	sp, #16
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007580:	2b01      	cmp	r3, #1
 8007582:	d109      	bne.n	8007598 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800758a:	085b      	lsrs	r3, r3, #1
 800758c:	b29b      	uxth	r3, r3
 800758e:	4619      	mov	r1, r3
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f7ff f9df 	bl	8006954 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007596:	e002      	b.n	800759e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f7ff f9c7 	bl	800692c <HAL_UART_RxHalfCpltCallback>
}
 800759e:	bf00      	nop
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b086      	sub	sp, #24
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ba:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ce:	2b80      	cmp	r3, #128	; 0x80
 80075d0:	d109      	bne.n	80075e6 <UART_DMAError+0x40>
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	2b21      	cmp	r3, #33	; 0x21
 80075d6:	d106      	bne.n	80075e6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2200      	movs	r2, #0
 80075dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80075e0:	6978      	ldr	r0, [r7, #20]
 80075e2:	f7ff ff27 	bl	8007434 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f0:	2b40      	cmp	r3, #64	; 0x40
 80075f2:	d109      	bne.n	8007608 <UART_DMAError+0x62>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2b22      	cmp	r3, #34	; 0x22
 80075f8:	d106      	bne.n	8007608 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007602:	6978      	ldr	r0, [r7, #20]
 8007604:	f7ff ff34 	bl	8007470 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800760e:	f043 0210 	orr.w	r2, r3, #16
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007618:	6978      	ldr	r0, [r7, #20]
 800761a:	f7ff f991 	bl	8006940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800761e:	bf00      	nop
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b084      	sub	sp, #16
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007632:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f7ff f97b 	bl	8006940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800764a:	bf00      	nop
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b082      	sub	sp, #8
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007668:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2220      	movs	r2, #32
 800766e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f7ff f94d 	bl	8006918 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800767e:	bf00      	nop
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007694:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800769c:	2b22      	cmp	r3, #34	; 0x22
 800769e:	d152      	bne.n	8007746 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80076a6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80076a8:	89bb      	ldrh	r3, [r7, #12]
 80076aa:	b2d9      	uxtb	r1, r3
 80076ac:	89fb      	ldrh	r3, [r7, #14]
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b4:	400a      	ands	r2, r1
 80076b6:	b2d2      	uxtb	r2, r2
 80076b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076be:	1c5a      	adds	r2, r3, #1
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	3b01      	subs	r3, #1
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076dc:	b29b      	uxth	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d13b      	bne.n	800775a <UART_RxISR_8BIT+0xd4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80076f0:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	689a      	ldr	r2, [r3, #8]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 0201 	bic.w	r2, r2, #1
 8007700:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2220      	movs	r2, #32
 8007706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007714:	2b01      	cmp	r3, #1
 8007716:	d10f      	bne.n	8007738 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 0210 	bic.w	r2, r2, #16
 8007726:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f7ff f90f 	bl	8006954 <HAL_UARTEx_RxEventCallback>
 8007736:	e002      	b.n	800773e <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7f9 ff57 	bl	80015ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007744:	e009      	b.n	800775a <UART_RxISR_8BIT+0xd4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	8b1b      	ldrh	r3, [r3, #24]
 800774c:	b29a      	uxth	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f042 0208 	orr.w	r2, r2, #8
 8007756:	b292      	uxth	r2, r2
 8007758:	831a      	strh	r2, [r3, #24]
}
 800775a:	bf00      	nop
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b084      	sub	sp, #16
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007770:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007778:	2b22      	cmp	r3, #34	; 0x22
 800777a:	d152      	bne.n	8007822 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007782:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007788:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800778a:	89ba      	ldrh	r2, [r7, #12]
 800778c:	89fb      	ldrh	r3, [r7, #14]
 800778e:	4013      	ands	r3, r2
 8007790:	b29a      	uxth	r2, r3
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800779a:	1c9a      	adds	r2, r3, #2
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	3b01      	subs	r3, #1
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d13b      	bne.n	8007836 <UART_RxISR_16BIT+0xd4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80077cc:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689a      	ldr	r2, [r3, #8]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f022 0201 	bic.w	r2, r2, #1
 80077dc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2220      	movs	r2, #32
 80077e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d10f      	bne.n	8007814 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 0210 	bic.w	r2, r2, #16
 8007802:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7ff f8a1 	bl	8006954 <HAL_UARTEx_RxEventCallback>
 8007812:	e002      	b.n	800781a <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7f9 fee9 	bl	80015ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007820:	e009      	b.n	8007836 <UART_RxISR_16BIT+0xd4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	8b1b      	ldrh	r3, [r3, #24]
 8007828:	b29a      	uxth	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f042 0208 	orr.w	r2, r2, #8
 8007832:	b292      	uxth	r2, r2
 8007834:	831a      	strh	r2, [r3, #24]
}
 8007836:	bf00      	nop
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
	...

08007840 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b088      	sub	sp, #32
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800784e:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	69db      	ldr	r3, [r3, #28]
 8007856:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800786e:	2b22      	cmp	r3, #34	; 0x22
 8007870:	f040 80da 	bne.w	8007a28 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800787a:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800787c:	e0aa      	b.n	80079d4 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007884:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007886:	89bb      	ldrh	r3, [r7, #12]
 8007888:	b2d9      	uxtb	r1, r3
 800788a:	8b7b      	ldrh	r3, [r7, #26]
 800788c:	b2da      	uxtb	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007892:	400a      	ands	r2, r1
 8007894:	b2d2      	uxtb	r2, r2
 8007896:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800789c:	1c5a      	adds	r2, r3, #1
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	3b01      	subs	r3, #1
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	69db      	ldr	r3, [r3, #28]
 80078ba:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	f003 0307 	and.w	r3, r3, #7
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d04d      	beq.n	8007962 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d010      	beq.n	80078f2 <UART_RxISR_8BIT_FIFOEN+0xb2>
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00b      	beq.n	80078f2 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2201      	movs	r2, #1
 80078e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078e8:	f043 0201 	orr.w	r2, r3, #1
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	f003 0302 	and.w	r3, r3, #2
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d010      	beq.n	800791e <UART_RxISR_8BIT_FIFOEN+0xde>
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00b      	beq.n	800791e <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2202      	movs	r2, #2
 800790c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007914:	f043 0204 	orr.w	r2, r3, #4
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	f003 0304 	and.w	r3, r3, #4
 8007924:	2b00      	cmp	r3, #0
 8007926:	d010      	beq.n	800794a <UART_RxISR_8BIT_FIFOEN+0x10a>
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00b      	beq.n	800794a <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2204      	movs	r2, #4
 8007938:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007940:	f043 0202 	orr.w	r2, r3, #2
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007950:	2b00      	cmp	r3, #0
 8007952:	d006      	beq.n	8007962 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7fe fff3 	bl	8006940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007968:	b29b      	uxth	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d132      	bne.n	80079d4 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800797c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	6812      	ldr	r2, [r2, #0]
 8007988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800798c:	f023 0301 	bic.w	r3, r3, #1
 8007990:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2220      	movs	r2, #32
 8007996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d10f      	bne.n	80079c8 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 0210 	bic.w	r2, r2, #16
 80079b6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079be:	4619      	mov	r1, r3
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f7fe ffc7 	bl	8006954 <HAL_UARTEx_RxEventCallback>
 80079c6:	e002      	b.n	80079ce <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7f9 fe0f 	bl	80015ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079d4:	89fb      	ldrh	r3, [r7, #14]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d005      	beq.n	80079e6 <UART_RxISR_8BIT_FIFOEN+0x1a6>
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	f003 0320 	and.w	r3, r3, #32
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f47f af4c 	bne.w	800787e <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079ec:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80079ee:	897b      	ldrh	r3, [r7, #10]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d023      	beq.n	8007a3c <UART_RxISR_8BIT_FIFOEN+0x1fc>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80079fa:	897a      	ldrh	r2, [r7, #10]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d21d      	bcs.n	8007a3c <UART_RxISR_8BIT_FIFOEN+0x1fc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689a      	ldr	r2, [r3, #8]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007a0e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a0c      	ldr	r2, [pc, #48]	; (8007a44 <UART_RxISR_8BIT_FIFOEN+0x204>)
 8007a14:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f042 0220 	orr.w	r2, r2, #32
 8007a24:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a26:	e009      	b.n	8007a3c <UART_RxISR_8BIT_FIFOEN+0x1fc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	8b1b      	ldrh	r3, [r3, #24]
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f042 0208 	orr.w	r2, r2, #8
 8007a38:	b292      	uxth	r2, r2
 8007a3a:	831a      	strh	r2, [r3, #24]
}
 8007a3c:	bf00      	nop
 8007a3e:	3720      	adds	r7, #32
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	08007687 	.word	0x08007687

08007a48 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b08a      	sub	sp, #40	; 0x28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007a56:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a76:	2b22      	cmp	r3, #34	; 0x22
 8007a78:	f040 80da 	bne.w	8007c30 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007a82:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a84:	e0aa      	b.n	8007bdc <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007a8c:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a92:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8007a94:	8aba      	ldrh	r2, [r7, #20]
 8007a96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007a98:	4013      	ands	r3, r2
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aa4:	1c9a      	adds	r2, r3, #2
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	f003 0307 	and.w	r3, r3, #7
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d04d      	beq.n	8007b6a <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d010      	beq.n	8007afa <UART_RxISR_16BIT_FIFOEN+0xb2>
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00b      	beq.n	8007afa <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007af0:	f043 0201 	orr.w	r2, r3, #1
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d010      	beq.n	8007b26 <UART_RxISR_16BIT_FIFOEN+0xde>
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00b      	beq.n	8007b26 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2202      	movs	r2, #2
 8007b14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b1c:	f043 0204 	orr.w	r2, r3, #4
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	f003 0304 	and.w	r3, r3, #4
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d010      	beq.n	8007b52 <UART_RxISR_16BIT_FIFOEN+0x10a>
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00b      	beq.n	8007b52 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2204      	movs	r2, #4
 8007b40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b48:	f043 0202 	orr.w	r2, r3, #2
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d006      	beq.n	8007b6a <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f7fe feef 	bl	8006940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d132      	bne.n	8007bdc <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b84:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6812      	ldr	r2, [r2, #0]
 8007b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b94:	f023 0301 	bic.w	r3, r3, #1
 8007b98:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d10f      	bne.n	8007bd0 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f022 0210 	bic.w	r2, r2, #16
 8007bbe:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7fe fec3 	bl	8006954 <HAL_UARTEx_RxEventCallback>
 8007bce:	e002      	b.n	8007bd6 <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f7f9 fd0b 	bl	80015ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007bdc:	8afb      	ldrh	r3, [r7, #22]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d005      	beq.n	8007bee <UART_RxISR_16BIT_FIFOEN+0x1a6>
 8007be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be4:	f003 0320 	and.w	r3, r3, #32
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f47f af4c 	bne.w	8007a86 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bf4:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007bf6:	89fb      	ldrh	r3, [r7, #14]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d023      	beq.n	8007c44 <UART_RxISR_16BIT_FIFOEN+0x1fc>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c02:	89fa      	ldrh	r2, [r7, #14]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d21d      	bcs.n	8007c44 <UART_RxISR_16BIT_FIFOEN+0x1fc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	689a      	ldr	r2, [r3, #8]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007c16:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a0c      	ldr	r2, [pc, #48]	; (8007c4c <UART_RxISR_16BIT_FIFOEN+0x204>)
 8007c1c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f042 0220 	orr.w	r2, r2, #32
 8007c2c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c2e:	e009      	b.n	8007c44 <UART_RxISR_16BIT_FIFOEN+0x1fc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	8b1b      	ldrh	r3, [r3, #24]
 8007c36:	b29a      	uxth	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f042 0208 	orr.w	r2, r2, #8
 8007c40:	b292      	uxth	r2, r2
 8007c42:	831a      	strh	r2, [r3, #24]
}
 8007c44:	bf00      	nop
 8007c46:	3728      	adds	r7, #40	; 0x28
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	08007763 	.word	0x08007763

08007c50 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
 8007c5c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d101      	bne.n	8007c68 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e058      	b.n	8007d1a <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d106      	bne.n	8007c80 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f7f9 fec4 	bl	8001a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2224      	movs	r2, #36	; 0x24
 8007c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f022 0201 	bic.w	r2, r2, #1
 8007c96:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f7fe fe67 	bl	800696c <UART_SetConfig>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d101      	bne.n	8007ca8 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e038      	b.n	8007d1a <HAL_RS485Ex_Init+0xca>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f7ff f925 	bl	8006f00 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cc4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	055b      	lsls	r3, r3, #21
 8007cde:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	041b      	lsls	r3, r3, #16
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8007cf4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	6812      	ldr	r2, [r2, #0]
 8007cfc:	6979      	ldr	r1, [r7, #20]
 8007cfe:	430b      	orrs	r3, r1
 8007d00:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f042 0201 	orr.w	r2, r2, #1
 8007d10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f7ff f996 	bl	8007044 <UART_CheckIdleState>
 8007d18:	4603      	mov	r3, r0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d2a:	bf00      	nop
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007d3e:	bf00      	nop
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007d52:	bf00      	nop
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b085      	sub	sp, #20
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d101      	bne.n	8007d74 <HAL_UARTEx_DisableFifoMode+0x16>
 8007d70:	2302      	movs	r3, #2
 8007d72:	e027      	b.n	8007dc4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2224      	movs	r2, #36	; 0x24
 8007d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f022 0201 	bic.w	r2, r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007da2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2220      	movs	r2, #32
 8007db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3714      	adds	r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d101      	bne.n	8007de8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007de4:	2302      	movs	r3, #2
 8007de6:	e02d      	b.n	8007e44 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2224      	movs	r2, #36	; 0x24
 8007df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f022 0201 	bic.w	r2, r2, #1
 8007e0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	430a      	orrs	r2, r1
 8007e22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f84f 	bl	8007ec8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2220      	movs	r2, #32
 8007e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d101      	bne.n	8007e64 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e60:	2302      	movs	r3, #2
 8007e62:	e02d      	b.n	8007ec0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2224      	movs	r2, #36	; 0x24
 8007e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f022 0201 	bic.w	r2, r2, #1
 8007e8a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	683a      	ldr	r2, [r7, #0]
 8007e9c:	430a      	orrs	r2, r1
 8007e9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f811 	bl	8007ec8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2220      	movs	r2, #32
 8007eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d108      	bne.n	8007eea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ee8:	e031      	b.n	8007f4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007eea:	2308      	movs	r3, #8
 8007eec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007eee:	2308      	movs	r3, #8
 8007ef0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	0e5b      	lsrs	r3, r3, #25
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	f003 0307 	and.w	r3, r3, #7
 8007f00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	0f5b      	lsrs	r3, r3, #29
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	f003 0307 	and.w	r3, r3, #7
 8007f10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f12:	7bbb      	ldrb	r3, [r7, #14]
 8007f14:	7b3a      	ldrb	r2, [r7, #12]
 8007f16:	4911      	ldr	r1, [pc, #68]	; (8007f5c <UARTEx_SetNbDataToProcess+0x94>)
 8007f18:	5c8a      	ldrb	r2, [r1, r2]
 8007f1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f1e:	7b3a      	ldrb	r2, [r7, #12]
 8007f20:	490f      	ldr	r1, [pc, #60]	; (8007f60 <UARTEx_SetNbDataToProcess+0x98>)
 8007f22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f24:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
 8007f32:	7b7a      	ldrb	r2, [r7, #13]
 8007f34:	4909      	ldr	r1, [pc, #36]	; (8007f5c <UARTEx_SetNbDataToProcess+0x94>)
 8007f36:	5c8a      	ldrb	r2, [r1, r2]
 8007f38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f3c:	7b7a      	ldrb	r2, [r7, #13]
 8007f3e:	4908      	ldr	r1, [pc, #32]	; (8007f60 <UARTEx_SetNbDataToProcess+0x98>)
 8007f40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f42:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007f4e:	bf00      	nop
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	0800f9b8 	.word	0x0800f9b8
 8007f60:	0800f9c0 	.word	0x0800f9c0

08007f64 <__NVIC_SetPriority>:
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	6039      	str	r1, [r7, #0]
 8007f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	db0a      	blt.n	8007f8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	490c      	ldr	r1, [pc, #48]	; (8007fb0 <__NVIC_SetPriority+0x4c>)
 8007f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f82:	0112      	lsls	r2, r2, #4
 8007f84:	b2d2      	uxtb	r2, r2
 8007f86:	440b      	add	r3, r1
 8007f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007f8c:	e00a      	b.n	8007fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	4908      	ldr	r1, [pc, #32]	; (8007fb4 <__NVIC_SetPriority+0x50>)
 8007f94:	79fb      	ldrb	r3, [r7, #7]
 8007f96:	f003 030f 	and.w	r3, r3, #15
 8007f9a:	3b04      	subs	r3, #4
 8007f9c:	0112      	lsls	r2, r2, #4
 8007f9e:	b2d2      	uxtb	r2, r2
 8007fa0:	440b      	add	r3, r1
 8007fa2:	761a      	strb	r2, [r3, #24]
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	e000e100 	.word	0xe000e100
 8007fb4:	e000ed00 	.word	0xe000ed00

08007fb8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007fbc:	4b05      	ldr	r3, [pc, #20]	; (8007fd4 <SysTick_Handler+0x1c>)
 8007fbe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007fc0:	f001 ff44 	bl	8009e4c <xTaskGetSchedulerState>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d001      	beq.n	8007fce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007fca:	f002 fd2d 	bl	800aa28 <xPortSysTickHandler>
  }
}
 8007fce:	bf00      	nop
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	e000e010 	.word	0xe000e010

08007fd8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007fdc:	2100      	movs	r1, #0
 8007fde:	f06f 0004 	mvn.w	r0, #4
 8007fe2:	f7ff ffbf 	bl	8007f64 <__NVIC_SetPriority>
#endif
}
 8007fe6:	bf00      	nop
 8007fe8:	bd80      	pop	{r7, pc}
	...

08007fec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ff2:	f3ef 8305 	mrs	r3, IPSR
 8007ff6:	603b      	str	r3, [r7, #0]
  return(result);
 8007ff8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d003      	beq.n	8008006 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007ffe:	f06f 0305 	mvn.w	r3, #5
 8008002:	607b      	str	r3, [r7, #4]
 8008004:	e00c      	b.n	8008020 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008006:	4b0a      	ldr	r3, [pc, #40]	; (8008030 <osKernelInitialize+0x44>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d105      	bne.n	800801a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800800e:	4b08      	ldr	r3, [pc, #32]	; (8008030 <osKernelInitialize+0x44>)
 8008010:	2201      	movs	r2, #1
 8008012:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008014:	2300      	movs	r3, #0
 8008016:	607b      	str	r3, [r7, #4]
 8008018:	e002      	b.n	8008020 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800801a:	f04f 33ff 	mov.w	r3, #4294967295
 800801e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008020:	687b      	ldr	r3, [r7, #4]
}
 8008022:	4618      	mov	r0, r3
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	20000354 	.word	0x20000354

08008034 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800803a:	f3ef 8305 	mrs	r3, IPSR
 800803e:	603b      	str	r3, [r7, #0]
  return(result);
 8008040:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008046:	f06f 0305 	mvn.w	r3, #5
 800804a:	607b      	str	r3, [r7, #4]
 800804c:	e010      	b.n	8008070 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800804e:	4b0b      	ldr	r3, [pc, #44]	; (800807c <osKernelStart+0x48>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d109      	bne.n	800806a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008056:	f7ff ffbf 	bl	8007fd8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800805a:	4b08      	ldr	r3, [pc, #32]	; (800807c <osKernelStart+0x48>)
 800805c:	2202      	movs	r2, #2
 800805e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008060:	f001 faac 	bl	80095bc <vTaskStartScheduler>
      stat = osOK;
 8008064:	2300      	movs	r3, #0
 8008066:	607b      	str	r3, [r7, #4]
 8008068:	e002      	b.n	8008070 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800806a:	f04f 33ff 	mov.w	r3, #4294967295
 800806e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008070:	687b      	ldr	r3, [r7, #4]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	20000354 	.word	0x20000354

08008080 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008080:	b580      	push	{r7, lr}
 8008082:	b08e      	sub	sp, #56	; 0x38
 8008084:	af04      	add	r7, sp, #16
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800808c:	2300      	movs	r3, #0
 800808e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008090:	f3ef 8305 	mrs	r3, IPSR
 8008094:	617b      	str	r3, [r7, #20]
  return(result);
 8008096:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008098:	2b00      	cmp	r3, #0
 800809a:	d17e      	bne.n	800819a <osThreadNew+0x11a>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d07b      	beq.n	800819a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80080a2:	2380      	movs	r3, #128	; 0x80
 80080a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80080a6:	2318      	movs	r3, #24
 80080a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80080aa:	2300      	movs	r3, #0
 80080ac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80080ae:	f04f 33ff 	mov.w	r3, #4294967295
 80080b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d045      	beq.n	8008146 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d002      	beq.n	80080c8 <osThreadNew+0x48>
        name = attr->name;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d002      	beq.n	80080d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d008      	beq.n	80080ee <osThreadNew+0x6e>
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	2b38      	cmp	r3, #56	; 0x38
 80080e0:	d805      	bhi.n	80080ee <osThreadNew+0x6e>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f003 0301 	and.w	r3, r3, #1
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <osThreadNew+0x72>
        return (NULL);
 80080ee:	2300      	movs	r3, #0
 80080f0:	e054      	b.n	800819c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	089b      	lsrs	r3, r3, #2
 8008100:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00e      	beq.n	8008128 <osThreadNew+0xa8>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	2b5b      	cmp	r3, #91	; 0x5b
 8008110:	d90a      	bls.n	8008128 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008116:	2b00      	cmp	r3, #0
 8008118:	d006      	beq.n	8008128 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d002      	beq.n	8008128 <osThreadNew+0xa8>
        mem = 1;
 8008122:	2301      	movs	r3, #1
 8008124:	61bb      	str	r3, [r7, #24]
 8008126:	e010      	b.n	800814a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10c      	bne.n	800814a <osThreadNew+0xca>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d108      	bne.n	800814a <osThreadNew+0xca>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d104      	bne.n	800814a <osThreadNew+0xca>
          mem = 0;
 8008140:	2300      	movs	r3, #0
 8008142:	61bb      	str	r3, [r7, #24]
 8008144:	e001      	b.n	800814a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008146:	2300      	movs	r3, #0
 8008148:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d110      	bne.n	8008172 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008158:	9202      	str	r2, [sp, #8]
 800815a:	9301      	str	r3, [sp, #4]
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	6a3a      	ldr	r2, [r7, #32]
 8008164:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f001 f852 	bl	8009210 <xTaskCreateStatic>
 800816c:	4603      	mov	r3, r0
 800816e:	613b      	str	r3, [r7, #16]
 8008170:	e013      	b.n	800819a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d110      	bne.n	800819a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008178:	6a3b      	ldr	r3, [r7, #32]
 800817a:	b29a      	uxth	r2, r3
 800817c:	f107 0310 	add.w	r3, r7, #16
 8008180:	9301      	str	r3, [sp, #4]
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f001 f89d 	bl	80092ca <xTaskCreate>
 8008190:	4603      	mov	r3, r0
 8008192:	2b01      	cmp	r3, #1
 8008194:	d001      	beq.n	800819a <osThreadNew+0x11a>
            hTask = NULL;
 8008196:	2300      	movs	r3, #0
 8008198:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800819a:	693b      	ldr	r3, [r7, #16]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3728      	adds	r7, #40	; 0x28
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081ac:	f3ef 8305 	mrs	r3, IPSR
 80081b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80081b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d003      	beq.n	80081c0 <osDelay+0x1c>
    stat = osErrorISR;
 80081b8:	f06f 0305 	mvn.w	r3, #5
 80081bc:	60fb      	str	r3, [r7, #12]
 80081be:	e007      	b.n	80081d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d002      	beq.n	80081d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 f9c2 	bl	8009554 <vTaskDelay>
    }
  }

  return (stat);
 80081d0:	68fb      	ldr	r3, [r7, #12]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80081da:	b580      	push	{r7, lr}
 80081dc:	b08a      	sub	sp, #40	; 0x28
 80081de:	af02      	add	r7, sp, #8
 80081e0:	60f8      	str	r0, [r7, #12]
 80081e2:	60b9      	str	r1, [r7, #8]
 80081e4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80081e6:	2300      	movs	r3, #0
 80081e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081ea:	f3ef 8305 	mrs	r3, IPSR
 80081ee:	613b      	str	r3, [r7, #16]
  return(result);
 80081f0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d15f      	bne.n	80082b6 <osMessageQueueNew+0xdc>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d05c      	beq.n	80082b6 <osMessageQueueNew+0xdc>
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d059      	beq.n	80082b6 <osMessageQueueNew+0xdc>
    mem = -1;
 8008202:	f04f 33ff 	mov.w	r3, #4294967295
 8008206:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d029      	beq.n	8008262 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d012      	beq.n	800823c <osMessageQueueNew+0x62>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	2b4f      	cmp	r3, #79	; 0x4f
 800821c:	d90e      	bls.n	800823c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00a      	beq.n	800823c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	695a      	ldr	r2, [r3, #20]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	68b9      	ldr	r1, [r7, #8]
 800822e:	fb01 f303 	mul.w	r3, r1, r3
 8008232:	429a      	cmp	r2, r3
 8008234:	d302      	bcc.n	800823c <osMessageQueueNew+0x62>
        mem = 1;
 8008236:	2301      	movs	r3, #1
 8008238:	61bb      	str	r3, [r7, #24]
 800823a:	e014      	b.n	8008266 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d110      	bne.n	8008266 <osMessageQueueNew+0x8c>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10c      	bne.n	8008266 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008250:	2b00      	cmp	r3, #0
 8008252:	d108      	bne.n	8008266 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	695b      	ldr	r3, [r3, #20]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d104      	bne.n	8008266 <osMessageQueueNew+0x8c>
          mem = 0;
 800825c:	2300      	movs	r3, #0
 800825e:	61bb      	str	r3, [r7, #24]
 8008260:	e001      	b.n	8008266 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008262:	2300      	movs	r3, #0
 8008264:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d10b      	bne.n	8008284 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	691a      	ldr	r2, [r3, #16]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	2100      	movs	r1, #0
 8008276:	9100      	str	r1, [sp, #0]
 8008278:	68b9      	ldr	r1, [r7, #8]
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f000 fa4e 	bl	800871c <xQueueGenericCreateStatic>
 8008280:	61f8      	str	r0, [r7, #28]
 8008282:	e008      	b.n	8008296 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d105      	bne.n	8008296 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800828a:	2200      	movs	r2, #0
 800828c:	68b9      	ldr	r1, [r7, #8]
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f000 fabc 	bl	800880c <xQueueGenericCreate>
 8008294:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00c      	beq.n	80082b6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d003      	beq.n	80082aa <osMessageQueueNew+0xd0>
        name = attr->name;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	617b      	str	r3, [r7, #20]
 80082a8:	e001      	b.n	80082ae <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80082aa:	2300      	movs	r3, #0
 80082ac:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80082ae:	6979      	ldr	r1, [r7, #20]
 80082b0:	69f8      	ldr	r0, [r7, #28]
 80082b2:	f000 ff4f 	bl	8009154 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80082b6:	69fb      	ldr	r3, [r7, #28]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3720      	adds	r7, #32
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b088      	sub	sp, #32
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	603b      	str	r3, [r7, #0]
 80082cc:	4613      	mov	r3, r2
 80082ce:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80082d4:	2300      	movs	r3, #0
 80082d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082d8:	f3ef 8305 	mrs	r3, IPSR
 80082dc:	617b      	str	r3, [r7, #20]
  return(result);
 80082de:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d028      	beq.n	8008336 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d005      	beq.n	80082f6 <osMessageQueuePut+0x36>
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d002      	beq.n	80082f6 <osMessageQueuePut+0x36>
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d003      	beq.n	80082fe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80082f6:	f06f 0303 	mvn.w	r3, #3
 80082fa:	61fb      	str	r3, [r7, #28]
 80082fc:	e038      	b.n	8008370 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80082fe:	2300      	movs	r3, #0
 8008300:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008302:	f107 0210 	add.w	r2, r7, #16
 8008306:	2300      	movs	r3, #0
 8008308:	68b9      	ldr	r1, [r7, #8]
 800830a:	69b8      	ldr	r0, [r7, #24]
 800830c:	f000 fbda 	bl	8008ac4 <xQueueGenericSendFromISR>
 8008310:	4603      	mov	r3, r0
 8008312:	2b01      	cmp	r3, #1
 8008314:	d003      	beq.n	800831e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008316:	f06f 0302 	mvn.w	r3, #2
 800831a:	61fb      	str	r3, [r7, #28]
 800831c:	e028      	b.n	8008370 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d025      	beq.n	8008370 <osMessageQueuePut+0xb0>
 8008324:	4b15      	ldr	r3, [pc, #84]	; (800837c <osMessageQueuePut+0xbc>)
 8008326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800832a:	601a      	str	r2, [r3, #0]
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	e01c      	b.n	8008370 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <osMessageQueuePut+0x82>
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d103      	bne.n	800834a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008342:	f06f 0303 	mvn.w	r3, #3
 8008346:	61fb      	str	r3, [r7, #28]
 8008348:	e012      	b.n	8008370 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800834a:	2300      	movs	r3, #0
 800834c:	683a      	ldr	r2, [r7, #0]
 800834e:	68b9      	ldr	r1, [r7, #8]
 8008350:	69b8      	ldr	r0, [r7, #24]
 8008352:	f000 fab9 	bl	80088c8 <xQueueGenericSend>
 8008356:	4603      	mov	r3, r0
 8008358:	2b01      	cmp	r3, #1
 800835a:	d009      	beq.n	8008370 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d003      	beq.n	800836a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008362:	f06f 0301 	mvn.w	r3, #1
 8008366:	61fb      	str	r3, [r7, #28]
 8008368:	e002      	b.n	8008370 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800836a:	f06f 0302 	mvn.w	r3, #2
 800836e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008370:	69fb      	ldr	r3, [r7, #28]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3720      	adds	r7, #32
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	e000ed04 	.word	0xe000ed04

08008380 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008380:	b580      	push	{r7, lr}
 8008382:	b088      	sub	sp, #32
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
 800838c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008392:	2300      	movs	r3, #0
 8008394:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008396:	f3ef 8305 	mrs	r3, IPSR
 800839a:	617b      	str	r3, [r7, #20]
  return(result);
 800839c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d028      	beq.n	80083f4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d005      	beq.n	80083b4 <osMessageQueueGet+0x34>
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d002      	beq.n	80083b4 <osMessageQueueGet+0x34>
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d003      	beq.n	80083bc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80083b4:	f06f 0303 	mvn.w	r3, #3
 80083b8:	61fb      	str	r3, [r7, #28]
 80083ba:	e037      	b.n	800842c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80083bc:	2300      	movs	r3, #0
 80083be:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80083c0:	f107 0310 	add.w	r3, r7, #16
 80083c4:	461a      	mov	r2, r3
 80083c6:	68b9      	ldr	r1, [r7, #8]
 80083c8:	69b8      	ldr	r0, [r7, #24]
 80083ca:	f000 fcf7 	bl	8008dbc <xQueueReceiveFromISR>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d003      	beq.n	80083dc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80083d4:	f06f 0302 	mvn.w	r3, #2
 80083d8:	61fb      	str	r3, [r7, #28]
 80083da:	e027      	b.n	800842c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d024      	beq.n	800842c <osMessageQueueGet+0xac>
 80083e2:	4b15      	ldr	r3, [pc, #84]	; (8008438 <osMessageQueueGet+0xb8>)
 80083e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083e8:	601a      	str	r2, [r3, #0]
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	e01b      	b.n	800842c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <osMessageQueueGet+0x80>
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d103      	bne.n	8008408 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008400:	f06f 0303 	mvn.w	r3, #3
 8008404:	61fb      	str	r3, [r7, #28]
 8008406:	e011      	b.n	800842c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008408:	683a      	ldr	r2, [r7, #0]
 800840a:	68b9      	ldr	r1, [r7, #8]
 800840c:	69b8      	ldr	r0, [r7, #24]
 800840e:	f000 fbf5 	bl	8008bfc <xQueueReceive>
 8008412:	4603      	mov	r3, r0
 8008414:	2b01      	cmp	r3, #1
 8008416:	d009      	beq.n	800842c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d003      	beq.n	8008426 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800841e:	f06f 0301 	mvn.w	r3, #1
 8008422:	61fb      	str	r3, [r7, #28]
 8008424:	e002      	b.n	800842c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008426:	f06f 0302 	mvn.w	r3, #2
 800842a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800842c:	69fb      	ldr	r3, [r7, #28]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3720      	adds	r7, #32
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	e000ed04 	.word	0xe000ed04

0800843c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d102      	bne.n	8008454 <osMessageQueueGetCount+0x18>
    count = 0U;
 800844e:	2300      	movs	r3, #0
 8008450:	617b      	str	r3, [r7, #20]
 8008452:	e00e      	b.n	8008472 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008454:	f3ef 8305 	mrs	r3, IPSR
 8008458:	60fb      	str	r3, [r7, #12]
  return(result);
 800845a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800845c:	2b00      	cmp	r3, #0
 800845e:	d004      	beq.n	800846a <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8008460:	6938      	ldr	r0, [r7, #16]
 8008462:	f000 fd49 	bl	8008ef8 <uxQueueMessagesWaitingFromISR>
 8008466:	6178      	str	r0, [r7, #20]
 8008468:	e003      	b.n	8008472 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800846a:	6938      	ldr	r0, [r7, #16]
 800846c:	f000 fd26 	bl	8008ebc <uxQueueMessagesWaiting>
 8008470:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8008472:	697b      	ldr	r3, [r7, #20]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3718      	adds	r7, #24
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	4a07      	ldr	r2, [pc, #28]	; (80084a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800848c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	4a06      	ldr	r2, [pc, #24]	; (80084ac <vApplicationGetIdleTaskMemory+0x30>)
 8008492:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2280      	movs	r2, #128	; 0x80
 8008498:	601a      	str	r2, [r3, #0]
}
 800849a:	bf00      	nop
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	20000358 	.word	0x20000358
 80084ac:	200003b4 	.word	0x200003b4

080084b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4a07      	ldr	r2, [pc, #28]	; (80084dc <vApplicationGetTimerTaskMemory+0x2c>)
 80084c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	4a06      	ldr	r2, [pc, #24]	; (80084e0 <vApplicationGetTimerTaskMemory+0x30>)
 80084c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084ce:	601a      	str	r2, [r3, #0]
}
 80084d0:	bf00      	nop
 80084d2:	3714      	adds	r7, #20
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr
 80084dc:	200005b4 	.word	0x200005b4
 80084e0:	20000610 	.word	0x20000610

080084e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f103 0208 	add.w	r2, r3, #8
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f04f 32ff 	mov.w	r2, #4294967295
 80084fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f103 0208 	add.w	r2, r3, #8
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f103 0208 	add.w	r2, r3, #8
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008518:	bf00      	nop
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008532:	bf00      	nop
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800853e:	b480      	push	{r7}
 8008540:	b085      	sub	sp, #20
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	689a      	ldr	r2, [r3, #8]
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	683a      	ldr	r2, [r7, #0]
 8008562:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	1c5a      	adds	r2, r3, #1
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	601a      	str	r2, [r3, #0]
}
 800857a:	bf00      	nop
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008586:	b480      	push	{r7}
 8008588:	b085      	sub	sp, #20
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859c:	d103      	bne.n	80085a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	60fb      	str	r3, [r7, #12]
 80085a4:	e00c      	b.n	80085c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	3308      	adds	r3, #8
 80085aa:	60fb      	str	r3, [r7, #12]
 80085ac:	e002      	b.n	80085b4 <vListInsert+0x2e>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	60fb      	str	r3, [r7, #12]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d2f6      	bcs.n	80085ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	683a      	ldr	r2, [r7, #0]
 80085ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	1c5a      	adds	r2, r3, #1
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	601a      	str	r2, [r3, #0]
}
 80085ec:	bf00      	nop
 80085ee:	3714      	adds	r7, #20
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	6892      	ldr	r2, [r2, #8]
 800860e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	6852      	ldr	r2, [r2, #4]
 8008618:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	429a      	cmp	r2, r3
 8008622:	d103      	bne.n	800862c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	689a      	ldr	r2, [r3, #8]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	1e5a      	subs	r2, r3, #1
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3714      	adds	r7, #20
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10a      	bne.n	8008676 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008672:	bf00      	nop
 8008674:	e7fe      	b.n	8008674 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008676:	f002 f945 	bl	800a904 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008682:	68f9      	ldr	r1, [r7, #12]
 8008684:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008686:	fb01 f303 	mul.w	r3, r1, r3
 800868a:	441a      	add	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a6:	3b01      	subs	r3, #1
 80086a8:	68f9      	ldr	r1, [r7, #12]
 80086aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086ac:	fb01 f303 	mul.w	r3, r1, r3
 80086b0:	441a      	add	r2, r3
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	22ff      	movs	r2, #255	; 0xff
 80086ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	22ff      	movs	r2, #255	; 0xff
 80086c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d114      	bne.n	80086f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d01a      	beq.n	800870a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	3310      	adds	r3, #16
 80086d8:	4618      	mov	r0, r3
 80086da:	f001 f9f9 	bl	8009ad0 <xTaskRemoveFromEventList>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d012      	beq.n	800870a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80086e4:	4b0c      	ldr	r3, [pc, #48]	; (8008718 <xQueueGenericReset+0xcc>)
 80086e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ea:	601a      	str	r2, [r3, #0]
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	f3bf 8f6f 	isb	sy
 80086f4:	e009      	b.n	800870a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	3310      	adds	r3, #16
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7ff fef2 	bl	80084e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	3324      	adds	r3, #36	; 0x24
 8008704:	4618      	mov	r0, r3
 8008706:	f7ff feed 	bl	80084e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800870a:	f002 f92b 	bl	800a964 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800870e:	2301      	movs	r3, #1
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	e000ed04 	.word	0xe000ed04

0800871c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800871c:	b580      	push	{r7, lr}
 800871e:	b08e      	sub	sp, #56	; 0x38
 8008720:	af02      	add	r7, sp, #8
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
 8008728:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10a      	bne.n	8008746 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008742:	bf00      	nop
 8008744:	e7fe      	b.n	8008744 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10a      	bne.n	8008762 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800875e:	bf00      	nop
 8008760:	e7fe      	b.n	8008760 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d002      	beq.n	800876e <xQueueGenericCreateStatic+0x52>
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <xQueueGenericCreateStatic+0x56>
 800876e:	2301      	movs	r3, #1
 8008770:	e000      	b.n	8008774 <xQueueGenericCreateStatic+0x58>
 8008772:	2300      	movs	r3, #0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d10a      	bne.n	800878e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877c:	f383 8811 	msr	BASEPRI, r3
 8008780:	f3bf 8f6f 	isb	sy
 8008784:	f3bf 8f4f 	dsb	sy
 8008788:	623b      	str	r3, [r7, #32]
}
 800878a:	bf00      	nop
 800878c:	e7fe      	b.n	800878c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d102      	bne.n	800879a <xQueueGenericCreateStatic+0x7e>
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <xQueueGenericCreateStatic+0x82>
 800879a:	2301      	movs	r3, #1
 800879c:	e000      	b.n	80087a0 <xQueueGenericCreateStatic+0x84>
 800879e:	2300      	movs	r3, #0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10a      	bne.n	80087ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80087a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	61fb      	str	r3, [r7, #28]
}
 80087b6:	bf00      	nop
 80087b8:	e7fe      	b.n	80087b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80087ba:	2350      	movs	r3, #80	; 0x50
 80087bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2b50      	cmp	r3, #80	; 0x50
 80087c2:	d00a      	beq.n	80087da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c8:	f383 8811 	msr	BASEPRI, r3
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	61bb      	str	r3, [r7, #24]
}
 80087d6:	bf00      	nop
 80087d8:	e7fe      	b.n	80087d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80087da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80087e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00d      	beq.n	8008802 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80087e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80087f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f4:	9300      	str	r3, [sp, #0]
 80087f6:	4613      	mov	r3, r2
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	68b9      	ldr	r1, [r7, #8]
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f000 f83f 	bl	8008880 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008804:	4618      	mov	r0, r3
 8008806:	3730      	adds	r7, #48	; 0x30
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800880c:	b580      	push	{r7, lr}
 800880e:	b08a      	sub	sp, #40	; 0x28
 8008810:	af02      	add	r7, sp, #8
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	4613      	mov	r3, r2
 8008818:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10a      	bne.n	8008836 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	613b      	str	r3, [r7, #16]
}
 8008832:	bf00      	nop
 8008834:	e7fe      	b.n	8008834 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	68ba      	ldr	r2, [r7, #8]
 800883a:	fb02 f303 	mul.w	r3, r2, r3
 800883e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	3350      	adds	r3, #80	; 0x50
 8008844:	4618      	mov	r0, r3
 8008846:	f002 f97f 	bl	800ab48 <pvPortMalloc>
 800884a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d011      	beq.n	8008876 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	3350      	adds	r3, #80	; 0x50
 800885a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	2200      	movs	r2, #0
 8008860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008864:	79fa      	ldrb	r2, [r7, #7]
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	4613      	mov	r3, r2
 800886c:	697a      	ldr	r2, [r7, #20]
 800886e:	68b9      	ldr	r1, [r7, #8]
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f000 f805 	bl	8008880 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008876:	69bb      	ldr	r3, [r7, #24]
	}
 8008878:	4618      	mov	r0, r3
 800887a:	3720      	adds	r7, #32
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
 800888c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d103      	bne.n	800889c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008894:	69bb      	ldr	r3, [r7, #24]
 8008896:	69ba      	ldr	r2, [r7, #24]
 8008898:	601a      	str	r2, [r3, #0]
 800889a:	e002      	b.n	80088a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80088ae:	2101      	movs	r1, #1
 80088b0:	69b8      	ldr	r0, [r7, #24]
 80088b2:	f7ff fecb 	bl	800864c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	78fa      	ldrb	r2, [r7, #3]
 80088ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80088be:	bf00      	nop
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
	...

080088c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b08e      	sub	sp, #56	; 0x38
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
 80088d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80088d6:	2300      	movs	r3, #0
 80088d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80088de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d10a      	bne.n	80088fa <xQueueGenericSend+0x32>
	__asm volatile
 80088e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e8:	f383 8811 	msr	BASEPRI, r3
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f3bf 8f4f 	dsb	sy
 80088f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80088f6:	bf00      	nop
 80088f8:	e7fe      	b.n	80088f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d103      	bne.n	8008908 <xQueueGenericSend+0x40>
 8008900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008904:	2b00      	cmp	r3, #0
 8008906:	d101      	bne.n	800890c <xQueueGenericSend+0x44>
 8008908:	2301      	movs	r3, #1
 800890a:	e000      	b.n	800890e <xQueueGenericSend+0x46>
 800890c:	2300      	movs	r3, #0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10a      	bne.n	8008928 <xQueueGenericSend+0x60>
	__asm volatile
 8008912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008916:	f383 8811 	msr	BASEPRI, r3
 800891a:	f3bf 8f6f 	isb	sy
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008924:	bf00      	nop
 8008926:	e7fe      	b.n	8008926 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2b02      	cmp	r3, #2
 800892c:	d103      	bne.n	8008936 <xQueueGenericSend+0x6e>
 800892e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008932:	2b01      	cmp	r3, #1
 8008934:	d101      	bne.n	800893a <xQueueGenericSend+0x72>
 8008936:	2301      	movs	r3, #1
 8008938:	e000      	b.n	800893c <xQueueGenericSend+0x74>
 800893a:	2300      	movs	r3, #0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10a      	bne.n	8008956 <xQueueGenericSend+0x8e>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	623b      	str	r3, [r7, #32]
}
 8008952:	bf00      	nop
 8008954:	e7fe      	b.n	8008954 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008956:	f001 fa79 	bl	8009e4c <xTaskGetSchedulerState>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d102      	bne.n	8008966 <xQueueGenericSend+0x9e>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <xQueueGenericSend+0xa2>
 8008966:	2301      	movs	r3, #1
 8008968:	e000      	b.n	800896c <xQueueGenericSend+0xa4>
 800896a:	2300      	movs	r3, #0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10a      	bne.n	8008986 <xQueueGenericSend+0xbe>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	61fb      	str	r3, [r7, #28]
}
 8008982:	bf00      	nop
 8008984:	e7fe      	b.n	8008984 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008986:	f001 ffbd 	bl	800a904 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800898a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800898e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008992:	429a      	cmp	r2, r3
 8008994:	d302      	bcc.n	800899c <xQueueGenericSend+0xd4>
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b02      	cmp	r3, #2
 800899a:	d129      	bne.n	80089f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800899c:	683a      	ldr	r2, [r7, #0]
 800899e:	68b9      	ldr	r1, [r7, #8]
 80089a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089a2:	f000 fac7 	bl	8008f34 <prvCopyDataToQueue>
 80089a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d010      	beq.n	80089d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b2:	3324      	adds	r3, #36	; 0x24
 80089b4:	4618      	mov	r0, r3
 80089b6:	f001 f88b 	bl	8009ad0 <xTaskRemoveFromEventList>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d013      	beq.n	80089e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80089c0:	4b3f      	ldr	r3, [pc, #252]	; (8008ac0 <xQueueGenericSend+0x1f8>)
 80089c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c6:	601a      	str	r2, [r3, #0]
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	e00a      	b.n	80089e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80089d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d007      	beq.n	80089e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80089d8:	4b39      	ldr	r3, [pc, #228]	; (8008ac0 <xQueueGenericSend+0x1f8>)
 80089da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089de:	601a      	str	r2, [r3, #0]
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80089e8:	f001 ffbc 	bl	800a964 <vPortExitCritical>
				return pdPASS;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e063      	b.n	8008ab8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d103      	bne.n	80089fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089f6:	f001 ffb5 	bl	800a964 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80089fa:	2300      	movs	r3, #0
 80089fc:	e05c      	b.n	8008ab8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d106      	bne.n	8008a12 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a04:	f107 0314 	add.w	r3, r7, #20
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f001 f8c5 	bl	8009b98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a12:	f001 ffa7 	bl	800a964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a16:	f000 fe37 	bl	8009688 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a1a:	f001 ff73 	bl	800a904 <vPortEnterCritical>
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a24:	b25b      	sxtb	r3, r3
 8008a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a2a:	d103      	bne.n	8008a34 <xQueueGenericSend+0x16c>
 8008a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a3a:	b25b      	sxtb	r3, r3
 8008a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a40:	d103      	bne.n	8008a4a <xQueueGenericSend+0x182>
 8008a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a4a:	f001 ff8b 	bl	800a964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a4e:	1d3a      	adds	r2, r7, #4
 8008a50:	f107 0314 	add.w	r3, r7, #20
 8008a54:	4611      	mov	r1, r2
 8008a56:	4618      	mov	r0, r3
 8008a58:	f001 f8b4 	bl	8009bc4 <xTaskCheckForTimeOut>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d124      	bne.n	8008aac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a64:	f000 fb5e 	bl	8009124 <prvIsQueueFull>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d018      	beq.n	8008aa0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a70:	3310      	adds	r3, #16
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	4611      	mov	r1, r2
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 ffda 	bl	8009a30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a7e:	f000 fae9 	bl	8009054 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a82:	f000 fe0f 	bl	80096a4 <xTaskResumeAll>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f47f af7c 	bne.w	8008986 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008a8e:	4b0c      	ldr	r3, [pc, #48]	; (8008ac0 <xQueueGenericSend+0x1f8>)
 8008a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a94:	601a      	str	r2, [r3, #0]
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	e772      	b.n	8008986 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008aa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aa2:	f000 fad7 	bl	8009054 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008aa6:	f000 fdfd 	bl	80096a4 <xTaskResumeAll>
 8008aaa:	e76c      	b.n	8008986 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aae:	f000 fad1 	bl	8009054 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ab2:	f000 fdf7 	bl	80096a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008ab6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3738      	adds	r7, #56	; 0x38
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	e000ed04 	.word	0xe000ed04

08008ac4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b090      	sub	sp, #64	; 0x40
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
 8008ad0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10a      	bne.n	8008af2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae0:	f383 8811 	msr	BASEPRI, r3
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008aee:	bf00      	nop
 8008af0:	e7fe      	b.n	8008af0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d103      	bne.n	8008b00 <xQueueGenericSendFromISR+0x3c>
 8008af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d101      	bne.n	8008b04 <xQueueGenericSendFromISR+0x40>
 8008b00:	2301      	movs	r3, #1
 8008b02:	e000      	b.n	8008b06 <xQueueGenericSendFromISR+0x42>
 8008b04:	2300      	movs	r3, #0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d10a      	bne.n	8008b20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0e:	f383 8811 	msr	BASEPRI, r3
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b1c:	bf00      	nop
 8008b1e:	e7fe      	b.n	8008b1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d103      	bne.n	8008b2e <xQueueGenericSendFromISR+0x6a>
 8008b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d101      	bne.n	8008b32 <xQueueGenericSendFromISR+0x6e>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e000      	b.n	8008b34 <xQueueGenericSendFromISR+0x70>
 8008b32:	2300      	movs	r3, #0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10a      	bne.n	8008b4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3c:	f383 8811 	msr	BASEPRI, r3
 8008b40:	f3bf 8f6f 	isb	sy
 8008b44:	f3bf 8f4f 	dsb	sy
 8008b48:	623b      	str	r3, [r7, #32]
}
 8008b4a:	bf00      	nop
 8008b4c:	e7fe      	b.n	8008b4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b4e:	f001 ffbb 	bl	800aac8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b52:	f3ef 8211 	mrs	r2, BASEPRI
 8008b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5a:	f383 8811 	msr	BASEPRI, r3
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	61fa      	str	r2, [r7, #28]
 8008b68:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b6a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b6c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d302      	bcc.n	8008b80 <xQueueGenericSendFromISR+0xbc>
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d12f      	bne.n	8008be0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	68b9      	ldr	r1, [r7, #8]
 8008b94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b96:	f000 f9cd 	bl	8008f34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b9a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba2:	d112      	bne.n	8008bca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d016      	beq.n	8008bda <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bae:	3324      	adds	r3, #36	; 0x24
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f000 ff8d 	bl	8009ad0 <xTaskRemoveFromEventList>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00e      	beq.n	8008bda <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00b      	beq.n	8008bda <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	601a      	str	r2, [r3, #0]
 8008bc8:	e007      	b.n	8008bda <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008bca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008bce:	3301      	adds	r3, #1
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	b25a      	sxtb	r2, r3
 8008bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008bde:	e001      	b.n	8008be4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008be0:	2300      	movs	r3, #0
 8008be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008bee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3740      	adds	r7, #64	; 0x40
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
	...

08008bfc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b08c      	sub	sp, #48	; 0x30
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10a      	bne.n	8008c2c <xQueueReceive+0x30>
	__asm volatile
 8008c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	623b      	str	r3, [r7, #32]
}
 8008c28:	bf00      	nop
 8008c2a:	e7fe      	b.n	8008c2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d103      	bne.n	8008c3a <xQueueReceive+0x3e>
 8008c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <xQueueReceive+0x42>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e000      	b.n	8008c40 <xQueueReceive+0x44>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10a      	bne.n	8008c5a <xQueueReceive+0x5e>
	__asm volatile
 8008c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	61fb      	str	r3, [r7, #28]
}
 8008c56:	bf00      	nop
 8008c58:	e7fe      	b.n	8008c58 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c5a:	f001 f8f7 	bl	8009e4c <xTaskGetSchedulerState>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d102      	bne.n	8008c6a <xQueueReceive+0x6e>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d101      	bne.n	8008c6e <xQueueReceive+0x72>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e000      	b.n	8008c70 <xQueueReceive+0x74>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10a      	bne.n	8008c8a <xQueueReceive+0x8e>
	__asm volatile
 8008c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	61bb      	str	r3, [r7, #24]
}
 8008c86:	bf00      	nop
 8008c88:	e7fe      	b.n	8008c88 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c8a:	f001 fe3b 	bl	800a904 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c92:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d01f      	beq.n	8008cda <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c9a:	68b9      	ldr	r1, [r7, #8]
 8008c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c9e:	f000 f9b3 	bl	8009008 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca4:	1e5a      	subs	r2, r3, #1
 8008ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00f      	beq.n	8008cd2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb4:	3310      	adds	r3, #16
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f000 ff0a 	bl	8009ad0 <xTaskRemoveFromEventList>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d007      	beq.n	8008cd2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008cc2:	4b3d      	ldr	r3, [pc, #244]	; (8008db8 <xQueueReceive+0x1bc>)
 8008cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cc8:	601a      	str	r2, [r3, #0]
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008cd2:	f001 fe47 	bl	800a964 <vPortExitCritical>
				return pdPASS;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e069      	b.n	8008dae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d103      	bne.n	8008ce8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ce0:	f001 fe40 	bl	800a964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	e062      	b.n	8008dae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d106      	bne.n	8008cfc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cee:	f107 0310 	add.w	r3, r7, #16
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f000 ff50 	bl	8009b98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008cfc:	f001 fe32 	bl	800a964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d00:	f000 fcc2 	bl	8009688 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d04:	f001 fdfe 	bl	800a904 <vPortEnterCritical>
 8008d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d0e:	b25b      	sxtb	r3, r3
 8008d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d14:	d103      	bne.n	8008d1e <xQueueReceive+0x122>
 8008d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d24:	b25b      	sxtb	r3, r3
 8008d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d2a:	d103      	bne.n	8008d34 <xQueueReceive+0x138>
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d34:	f001 fe16 	bl	800a964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d38:	1d3a      	adds	r2, r7, #4
 8008d3a:	f107 0310 	add.w	r3, r7, #16
 8008d3e:	4611      	mov	r1, r2
 8008d40:	4618      	mov	r0, r3
 8008d42:	f000 ff3f 	bl	8009bc4 <xTaskCheckForTimeOut>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d123      	bne.n	8008d94 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d4e:	f000 f9d3 	bl	80090f8 <prvIsQueueEmpty>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d017      	beq.n	8008d88 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5a:	3324      	adds	r3, #36	; 0x24
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	4611      	mov	r1, r2
 8008d60:	4618      	mov	r0, r3
 8008d62:	f000 fe65 	bl	8009a30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d68:	f000 f974 	bl	8009054 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d6c:	f000 fc9a 	bl	80096a4 <xTaskResumeAll>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d189      	bne.n	8008c8a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008d76:	4b10      	ldr	r3, [pc, #64]	; (8008db8 <xQueueReceive+0x1bc>)
 8008d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d7c:	601a      	str	r2, [r3, #0]
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	e780      	b.n	8008c8a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008d88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d8a:	f000 f963 	bl	8009054 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d8e:	f000 fc89 	bl	80096a4 <xTaskResumeAll>
 8008d92:	e77a      	b.n	8008c8a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d96:	f000 f95d 	bl	8009054 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d9a:	f000 fc83 	bl	80096a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008da0:	f000 f9aa 	bl	80090f8 <prvIsQueueEmpty>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f43f af6f 	beq.w	8008c8a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008dac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3730      	adds	r7, #48	; 0x30
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	e000ed04 	.word	0xe000ed04

08008dbc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b08e      	sub	sp, #56	; 0x38
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10a      	bne.n	8008de8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	623b      	str	r3, [r7, #32]
}
 8008de4:	bf00      	nop
 8008de6:	e7fe      	b.n	8008de6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d103      	bne.n	8008df6 <xQueueReceiveFromISR+0x3a>
 8008dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d101      	bne.n	8008dfa <xQueueReceiveFromISR+0x3e>
 8008df6:	2301      	movs	r3, #1
 8008df8:	e000      	b.n	8008dfc <xQueueReceiveFromISR+0x40>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d10a      	bne.n	8008e16 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	61fb      	str	r3, [r7, #28]
}
 8008e12:	bf00      	nop
 8008e14:	e7fe      	b.n	8008e14 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e16:	f001 fe57 	bl	800aac8 <vPortValidateInterruptPriority>
	__asm volatile
 8008e1a:	f3ef 8211 	mrs	r2, BASEPRI
 8008e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	61ba      	str	r2, [r7, #24]
 8008e30:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008e32:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d02f      	beq.n	8008ea2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e4c:	68b9      	ldr	r1, [r7, #8]
 8008e4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e50:	f000 f8da 	bl	8009008 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e56:	1e5a      	subs	r2, r3, #1
 8008e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008e5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e64:	d112      	bne.n	8008e8c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d016      	beq.n	8008e9c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e70:	3310      	adds	r3, #16
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 fe2c 	bl	8009ad0 <xTaskRemoveFromEventList>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00e      	beq.n	8008e9c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00b      	beq.n	8008e9c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	601a      	str	r2, [r3, #0]
 8008e8a:	e007      	b.n	8008e9c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e90:	3301      	adds	r3, #1
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	b25a      	sxtb	r2, r3
 8008e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8008ea0:	e001      	b.n	8008ea6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	f383 8811 	msr	BASEPRI, r3
}
 8008eb0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3738      	adds	r7, #56	; 0x38
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d10a      	bne.n	8008ee0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8008eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ece:	f383 8811 	msr	BASEPRI, r3
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	60bb      	str	r3, [r7, #8]
}
 8008edc:	bf00      	nop
 8008ede:	e7fe      	b.n	8008ede <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008ee0:	f001 fd10 	bl	800a904 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008eea:	f001 fd3b 	bl	800a964 <vPortExitCritical>

	return uxReturn;
 8008eee:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b087      	sub	sp, #28
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10a      	bne.n	8008f20 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8008f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0e:	f383 8811 	msr	BASEPRI, r3
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	60fb      	str	r3, [r7, #12]
}
 8008f1c:	bf00      	nop
 8008f1e:	e7fe      	b.n	8008f1e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f24:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8008f26:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008f28:	4618      	mov	r0, r3
 8008f2a:	371c      	adds	r7, #28
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b086      	sub	sp, #24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008f40:	2300      	movs	r3, #0
 8008f42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d10d      	bne.n	8008f6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d14d      	bne.n	8008ff6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 ff92 	bl	8009e88 <xTaskPriorityDisinherit>
 8008f64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	609a      	str	r2, [r3, #8]
 8008f6c:	e043      	b.n	8008ff6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d119      	bne.n	8008fa8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6858      	ldr	r0, [r3, #4]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	68b9      	ldr	r1, [r7, #8]
 8008f80:	f001 fff6 	bl	800af70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	685a      	ldr	r2, [r3, #4]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8c:	441a      	add	r2, r3
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	685a      	ldr	r2, [r3, #4]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d32b      	bcc.n	8008ff6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	605a      	str	r2, [r3, #4]
 8008fa6:	e026      	b.n	8008ff6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	68d8      	ldr	r0, [r3, #12]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	68b9      	ldr	r1, [r7, #8]
 8008fb4:	f001 ffdc 	bl	800af70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	68da      	ldr	r2, [r3, #12]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc0:	425b      	negs	r3, r3
 8008fc2:	441a      	add	r2, r3
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	68da      	ldr	r2, [r3, #12]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d207      	bcs.n	8008fe4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	689a      	ldr	r2, [r3, #8]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fdc:	425b      	negs	r3, r3
 8008fde:	441a      	add	r2, r3
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d105      	bne.n	8008ff6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	1c5a      	adds	r2, r3, #1
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008ffe:	697b      	ldr	r3, [r7, #20]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3718      	adds	r7, #24
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009016:	2b00      	cmp	r3, #0
 8009018:	d018      	beq.n	800904c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	68da      	ldr	r2, [r3, #12]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009022:	441a      	add	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	68da      	ldr	r2, [r3, #12]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	429a      	cmp	r2, r3
 8009032:	d303      	bcc.n	800903c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	68d9      	ldr	r1, [r3, #12]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009044:	461a      	mov	r2, r3
 8009046:	6838      	ldr	r0, [r7, #0]
 8009048:	f001 ff92 	bl	800af70 <memcpy>
	}
}
 800904c:	bf00      	nop
 800904e:	3708      	adds	r7, #8
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800905c:	f001 fc52 	bl	800a904 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009066:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009068:	e011      	b.n	800908e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906e:	2b00      	cmp	r3, #0
 8009070:	d012      	beq.n	8009098 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	3324      	adds	r3, #36	; 0x24
 8009076:	4618      	mov	r0, r3
 8009078:	f000 fd2a 	bl	8009ad0 <xTaskRemoveFromEventList>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009082:	f000 fe01 	bl	8009c88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009086:	7bfb      	ldrb	r3, [r7, #15]
 8009088:	3b01      	subs	r3, #1
 800908a:	b2db      	uxtb	r3, r3
 800908c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800908e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009092:	2b00      	cmp	r3, #0
 8009094:	dce9      	bgt.n	800906a <prvUnlockQueue+0x16>
 8009096:	e000      	b.n	800909a <prvUnlockQueue+0x46>
					break;
 8009098:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	22ff      	movs	r2, #255	; 0xff
 800909e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80090a2:	f001 fc5f 	bl	800a964 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80090a6:	f001 fc2d 	bl	800a904 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090b2:	e011      	b.n	80090d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d012      	beq.n	80090e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	3310      	adds	r3, #16
 80090c0:	4618      	mov	r0, r3
 80090c2:	f000 fd05 	bl	8009ad0 <xTaskRemoveFromEventList>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d001      	beq.n	80090d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80090cc:	f000 fddc 	bl	8009c88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80090d0:	7bbb      	ldrb	r3, [r7, #14]
 80090d2:	3b01      	subs	r3, #1
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	dce9      	bgt.n	80090b4 <prvUnlockQueue+0x60>
 80090e0:	e000      	b.n	80090e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80090e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	22ff      	movs	r2, #255	; 0xff
 80090e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80090ec:	f001 fc3a 	bl	800a964 <vPortExitCritical>
}
 80090f0:	bf00      	nop
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009100:	f001 fc00 	bl	800a904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009108:	2b00      	cmp	r3, #0
 800910a:	d102      	bne.n	8009112 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800910c:	2301      	movs	r3, #1
 800910e:	60fb      	str	r3, [r7, #12]
 8009110:	e001      	b.n	8009116 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009112:	2300      	movs	r3, #0
 8009114:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009116:	f001 fc25 	bl	800a964 <vPortExitCritical>

	return xReturn;
 800911a:	68fb      	ldr	r3, [r7, #12]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800912c:	f001 fbea 	bl	800a904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009138:	429a      	cmp	r2, r3
 800913a:	d102      	bne.n	8009142 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800913c:	2301      	movs	r3, #1
 800913e:	60fb      	str	r3, [r7, #12]
 8009140:	e001      	b.n	8009146 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009142:	2300      	movs	r3, #0
 8009144:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009146:	f001 fc0d 	bl	800a964 <vPortExitCritical>

	return xReturn;
 800914a:	68fb      	ldr	r3, [r7, #12]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800915e:	2300      	movs	r3, #0
 8009160:	60fb      	str	r3, [r7, #12]
 8009162:	e014      	b.n	800918e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009164:	4a0f      	ldr	r2, [pc, #60]	; (80091a4 <vQueueAddToRegistry+0x50>)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10b      	bne.n	8009188 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009170:	490c      	ldr	r1, [pc, #48]	; (80091a4 <vQueueAddToRegistry+0x50>)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	683a      	ldr	r2, [r7, #0]
 8009176:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800917a:	4a0a      	ldr	r2, [pc, #40]	; (80091a4 <vQueueAddToRegistry+0x50>)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	00db      	lsls	r3, r3, #3
 8009180:	4413      	add	r3, r2
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009186:	e006      	b.n	8009196 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	3301      	adds	r3, #1
 800918c:	60fb      	str	r3, [r7, #12]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2b07      	cmp	r3, #7
 8009192:	d9e7      	bls.n	8009164 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009194:	bf00      	nop
 8009196:	bf00      	nop
 8009198:	3714      	adds	r7, #20
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	20001ebc 	.word	0x20001ebc

080091a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b086      	sub	sp, #24
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80091b8:	f001 fba4 	bl	800a904 <vPortEnterCritical>
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091c2:	b25b      	sxtb	r3, r3
 80091c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c8:	d103      	bne.n	80091d2 <vQueueWaitForMessageRestricted+0x2a>
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091d8:	b25b      	sxtb	r3, r3
 80091da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091de:	d103      	bne.n	80091e8 <vQueueWaitForMessageRestricted+0x40>
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091e8:	f001 fbbc 	bl	800a964 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d106      	bne.n	8009202 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	3324      	adds	r3, #36	; 0x24
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	68b9      	ldr	r1, [r7, #8]
 80091fc:	4618      	mov	r0, r3
 80091fe:	f000 fc3b 	bl	8009a78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009202:	6978      	ldr	r0, [r7, #20]
 8009204:	f7ff ff26 	bl	8009054 <prvUnlockQueue>
	}
 8009208:	bf00      	nop
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009210:	b580      	push	{r7, lr}
 8009212:	b08e      	sub	sp, #56	; 0x38
 8009214:	af04      	add	r7, sp, #16
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
 800921c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800921e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10a      	bne.n	800923a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009228:	f383 8811 	msr	BASEPRI, r3
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	623b      	str	r3, [r7, #32]
}
 8009236:	bf00      	nop
 8009238:	e7fe      	b.n	8009238 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800923a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10a      	bne.n	8009256 <xTaskCreateStatic+0x46>
	__asm volatile
 8009240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	61fb      	str	r3, [r7, #28]
}
 8009252:	bf00      	nop
 8009254:	e7fe      	b.n	8009254 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009256:	235c      	movs	r3, #92	; 0x5c
 8009258:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	2b5c      	cmp	r3, #92	; 0x5c
 800925e:	d00a      	beq.n	8009276 <xTaskCreateStatic+0x66>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	61bb      	str	r3, [r7, #24]
}
 8009272:	bf00      	nop
 8009274:	e7fe      	b.n	8009274 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009276:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800927a:	2b00      	cmp	r3, #0
 800927c:	d01e      	beq.n	80092bc <xTaskCreateStatic+0xac>
 800927e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009280:	2b00      	cmp	r3, #0
 8009282:	d01b      	beq.n	80092bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009286:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800928c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800928e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009290:	2202      	movs	r2, #2
 8009292:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009296:	2300      	movs	r3, #0
 8009298:	9303      	str	r3, [sp, #12]
 800929a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929c:	9302      	str	r3, [sp, #8]
 800929e:	f107 0314 	add.w	r3, r7, #20
 80092a2:	9301      	str	r3, [sp, #4]
 80092a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	68b9      	ldr	r1, [r7, #8]
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f000 f850 	bl	8009354 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092b6:	f000 f8dd 	bl	8009474 <prvAddNewTaskToReadyList>
 80092ba:	e001      	b.n	80092c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80092bc:	2300      	movs	r3, #0
 80092be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80092c0:	697b      	ldr	r3, [r7, #20]
	}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3728      	adds	r7, #40	; 0x28
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b08c      	sub	sp, #48	; 0x30
 80092ce:	af04      	add	r7, sp, #16
 80092d0:	60f8      	str	r0, [r7, #12]
 80092d2:	60b9      	str	r1, [r7, #8]
 80092d4:	603b      	str	r3, [r7, #0]
 80092d6:	4613      	mov	r3, r2
 80092d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80092da:	88fb      	ldrh	r3, [r7, #6]
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4618      	mov	r0, r3
 80092e0:	f001 fc32 	bl	800ab48 <pvPortMalloc>
 80092e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00e      	beq.n	800930a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80092ec:	205c      	movs	r0, #92	; 0x5c
 80092ee:	f001 fc2b 	bl	800ab48 <pvPortMalloc>
 80092f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	697a      	ldr	r2, [r7, #20]
 80092fe:	631a      	str	r2, [r3, #48]	; 0x30
 8009300:	e005      	b.n	800930e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009302:	6978      	ldr	r0, [r7, #20]
 8009304:	f001 fcec 	bl	800ace0 <vPortFree>
 8009308:	e001      	b.n	800930e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800930a:	2300      	movs	r3, #0
 800930c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d017      	beq.n	8009344 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800931c:	88fa      	ldrh	r2, [r7, #6]
 800931e:	2300      	movs	r3, #0
 8009320:	9303      	str	r3, [sp, #12]
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	9302      	str	r3, [sp, #8]
 8009326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009328:	9301      	str	r3, [sp, #4]
 800932a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	68b9      	ldr	r1, [r7, #8]
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f000 f80e 	bl	8009354 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009338:	69f8      	ldr	r0, [r7, #28]
 800933a:	f000 f89b 	bl	8009474 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800933e:	2301      	movs	r3, #1
 8009340:	61bb      	str	r3, [r7, #24]
 8009342:	e002      	b.n	800934a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009344:	f04f 33ff 	mov.w	r3, #4294967295
 8009348:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800934a:	69bb      	ldr	r3, [r7, #24]
	}
 800934c:	4618      	mov	r0, r3
 800934e:	3720      	adds	r7, #32
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b088      	sub	sp, #32
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
 8009360:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009364:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	461a      	mov	r2, r3
 800936c:	21a5      	movs	r1, #165	; 0xa5
 800936e:	f001 fe0d 	bl	800af8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800937c:	3b01      	subs	r3, #1
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	4413      	add	r3, r2
 8009382:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	f023 0307 	bic.w	r3, r3, #7
 800938a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	f003 0307 	and.w	r3, r3, #7
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00a      	beq.n	80093ac <prvInitialiseNewTask+0x58>
	__asm volatile
 8009396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939a:	f383 8811 	msr	BASEPRI, r3
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f3bf 8f4f 	dsb	sy
 80093a6:	617b      	str	r3, [r7, #20]
}
 80093a8:	bf00      	nop
 80093aa:	e7fe      	b.n	80093aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d01f      	beq.n	80093f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093b2:	2300      	movs	r3, #0
 80093b4:	61fb      	str	r3, [r7, #28]
 80093b6:	e012      	b.n	80093de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	4413      	add	r3, r2
 80093be:	7819      	ldrb	r1, [r3, #0]
 80093c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	4413      	add	r3, r2
 80093c6:	3334      	adds	r3, #52	; 0x34
 80093c8:	460a      	mov	r2, r1
 80093ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	4413      	add	r3, r2
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d006      	beq.n	80093e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	3301      	adds	r3, #1
 80093dc:	61fb      	str	r3, [r7, #28]
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	2b0f      	cmp	r3, #15
 80093e2:	d9e9      	bls.n	80093b8 <prvInitialiseNewTask+0x64>
 80093e4:	e000      	b.n	80093e8 <prvInitialiseNewTask+0x94>
			{
				break;
 80093e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80093e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093f0:	e003      	b.n	80093fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80093f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80093fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fc:	2b37      	cmp	r3, #55	; 0x37
 80093fe:	d901      	bls.n	8009404 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009400:	2337      	movs	r3, #55	; 0x37
 8009402:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009408:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800940a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800940e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009412:	2200      	movs	r2, #0
 8009414:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009418:	3304      	adds	r3, #4
 800941a:	4618      	mov	r0, r3
 800941c:	f7ff f882 	bl	8008524 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009422:	3318      	adds	r3, #24
 8009424:	4618      	mov	r0, r3
 8009426:	f7ff f87d 	bl	8008524 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800942a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800942e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009432:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009438:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800943a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800943e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009442:	2200      	movs	r2, #0
 8009444:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009448:	2200      	movs	r2, #0
 800944a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	68f9      	ldr	r1, [r7, #12]
 8009452:	69b8      	ldr	r0, [r7, #24]
 8009454:	f001 f928 	bl	800a6a8 <pxPortInitialiseStack>
 8009458:	4602      	mov	r2, r0
 800945a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800945e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009460:	2b00      	cmp	r3, #0
 8009462:	d002      	beq.n	800946a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009466:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009468:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800946a:	bf00      	nop
 800946c:	3720      	adds	r7, #32
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
	...

08009474 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800947c:	f001 fa42 	bl	800a904 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009480:	4b2d      	ldr	r3, [pc, #180]	; (8009538 <prvAddNewTaskToReadyList+0xc4>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3301      	adds	r3, #1
 8009486:	4a2c      	ldr	r2, [pc, #176]	; (8009538 <prvAddNewTaskToReadyList+0xc4>)
 8009488:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800948a:	4b2c      	ldr	r3, [pc, #176]	; (800953c <prvAddNewTaskToReadyList+0xc8>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d109      	bne.n	80094a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009492:	4a2a      	ldr	r2, [pc, #168]	; (800953c <prvAddNewTaskToReadyList+0xc8>)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009498:	4b27      	ldr	r3, [pc, #156]	; (8009538 <prvAddNewTaskToReadyList+0xc4>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b01      	cmp	r3, #1
 800949e:	d110      	bne.n	80094c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80094a0:	f000 fc16 	bl	8009cd0 <prvInitialiseTaskLists>
 80094a4:	e00d      	b.n	80094c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80094a6:	4b26      	ldr	r3, [pc, #152]	; (8009540 <prvAddNewTaskToReadyList+0xcc>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d109      	bne.n	80094c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80094ae:	4b23      	ldr	r3, [pc, #140]	; (800953c <prvAddNewTaskToReadyList+0xc8>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d802      	bhi.n	80094c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80094bc:	4a1f      	ldr	r2, [pc, #124]	; (800953c <prvAddNewTaskToReadyList+0xc8>)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80094c2:	4b20      	ldr	r3, [pc, #128]	; (8009544 <prvAddNewTaskToReadyList+0xd0>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3301      	adds	r3, #1
 80094c8:	4a1e      	ldr	r2, [pc, #120]	; (8009544 <prvAddNewTaskToReadyList+0xd0>)
 80094ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80094cc:	4b1d      	ldr	r3, [pc, #116]	; (8009544 <prvAddNewTaskToReadyList+0xd0>)
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094d8:	4b1b      	ldr	r3, [pc, #108]	; (8009548 <prvAddNewTaskToReadyList+0xd4>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d903      	bls.n	80094e8 <prvAddNewTaskToReadyList+0x74>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e4:	4a18      	ldr	r2, [pc, #96]	; (8009548 <prvAddNewTaskToReadyList+0xd4>)
 80094e6:	6013      	str	r3, [r2, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ec:	4613      	mov	r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	4413      	add	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4a15      	ldr	r2, [pc, #84]	; (800954c <prvAddNewTaskToReadyList+0xd8>)
 80094f6:	441a      	add	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	3304      	adds	r3, #4
 80094fc:	4619      	mov	r1, r3
 80094fe:	4610      	mov	r0, r2
 8009500:	f7ff f81d 	bl	800853e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009504:	f001 fa2e 	bl	800a964 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009508:	4b0d      	ldr	r3, [pc, #52]	; (8009540 <prvAddNewTaskToReadyList+0xcc>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00e      	beq.n	800952e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009510:	4b0a      	ldr	r3, [pc, #40]	; (800953c <prvAddNewTaskToReadyList+0xc8>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951a:	429a      	cmp	r2, r3
 800951c:	d207      	bcs.n	800952e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800951e:	4b0c      	ldr	r3, [pc, #48]	; (8009550 <prvAddNewTaskToReadyList+0xdc>)
 8009520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009524:	601a      	str	r2, [r3, #0]
 8009526:	f3bf 8f4f 	dsb	sy
 800952a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800952e:	bf00      	nop
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	20000ee4 	.word	0x20000ee4
 800953c:	20000a10 	.word	0x20000a10
 8009540:	20000ef0 	.word	0x20000ef0
 8009544:	20000f00 	.word	0x20000f00
 8009548:	20000eec 	.word	0x20000eec
 800954c:	20000a14 	.word	0x20000a14
 8009550:	e000ed04 	.word	0xe000ed04

08009554 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800955c:	2300      	movs	r3, #0
 800955e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d017      	beq.n	8009596 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009566:	4b13      	ldr	r3, [pc, #76]	; (80095b4 <vTaskDelay+0x60>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00a      	beq.n	8009584 <vTaskDelay+0x30>
	__asm volatile
 800956e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009572:	f383 8811 	msr	BASEPRI, r3
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	60bb      	str	r3, [r7, #8]
}
 8009580:	bf00      	nop
 8009582:	e7fe      	b.n	8009582 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009584:	f000 f880 	bl	8009688 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009588:	2100      	movs	r1, #0
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fcea 	bl	8009f64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009590:	f000 f888 	bl	80096a4 <xTaskResumeAll>
 8009594:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d107      	bne.n	80095ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800959c:	4b06      	ldr	r3, [pc, #24]	; (80095b8 <vTaskDelay+0x64>)
 800959e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	f3bf 8f4f 	dsb	sy
 80095a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095ac:	bf00      	nop
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	20000f0c 	.word	0x20000f0c
 80095b8:	e000ed04 	.word	0xe000ed04

080095bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b08a      	sub	sp, #40	; 0x28
 80095c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80095c2:	2300      	movs	r3, #0
 80095c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80095c6:	2300      	movs	r3, #0
 80095c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80095ca:	463a      	mov	r2, r7
 80095cc:	1d39      	adds	r1, r7, #4
 80095ce:	f107 0308 	add.w	r3, r7, #8
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7fe ff52 	bl	800847c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80095d8:	6839      	ldr	r1, [r7, #0]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	9202      	str	r2, [sp, #8]
 80095e0:	9301      	str	r3, [sp, #4]
 80095e2:	2300      	movs	r3, #0
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	2300      	movs	r3, #0
 80095e8:	460a      	mov	r2, r1
 80095ea:	4921      	ldr	r1, [pc, #132]	; (8009670 <vTaskStartScheduler+0xb4>)
 80095ec:	4821      	ldr	r0, [pc, #132]	; (8009674 <vTaskStartScheduler+0xb8>)
 80095ee:	f7ff fe0f 	bl	8009210 <xTaskCreateStatic>
 80095f2:	4603      	mov	r3, r0
 80095f4:	4a20      	ldr	r2, [pc, #128]	; (8009678 <vTaskStartScheduler+0xbc>)
 80095f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80095f8:	4b1f      	ldr	r3, [pc, #124]	; (8009678 <vTaskStartScheduler+0xbc>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009600:	2301      	movs	r3, #1
 8009602:	617b      	str	r3, [r7, #20]
 8009604:	e001      	b.n	800960a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009606:	2300      	movs	r3, #0
 8009608:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	2b01      	cmp	r3, #1
 800960e:	d102      	bne.n	8009616 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009610:	f000 fcfc 	bl	800a00c <xTimerCreateTimerTask>
 8009614:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	2b01      	cmp	r3, #1
 800961a:	d116      	bne.n	800964a <vTaskStartScheduler+0x8e>
	__asm volatile
 800961c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	613b      	str	r3, [r7, #16]
}
 800962e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009630:	4b12      	ldr	r3, [pc, #72]	; (800967c <vTaskStartScheduler+0xc0>)
 8009632:	f04f 32ff 	mov.w	r2, #4294967295
 8009636:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009638:	4b11      	ldr	r3, [pc, #68]	; (8009680 <vTaskStartScheduler+0xc4>)
 800963a:	2201      	movs	r2, #1
 800963c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800963e:	4b11      	ldr	r3, [pc, #68]	; (8009684 <vTaskStartScheduler+0xc8>)
 8009640:	2200      	movs	r2, #0
 8009642:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009644:	f001 f8bc 	bl	800a7c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009648:	e00e      	b.n	8009668 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009650:	d10a      	bne.n	8009668 <vTaskStartScheduler+0xac>
	__asm volatile
 8009652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009656:	f383 8811 	msr	BASEPRI, r3
 800965a:	f3bf 8f6f 	isb	sy
 800965e:	f3bf 8f4f 	dsb	sy
 8009662:	60fb      	str	r3, [r7, #12]
}
 8009664:	bf00      	nop
 8009666:	e7fe      	b.n	8009666 <vTaskStartScheduler+0xaa>
}
 8009668:	bf00      	nop
 800966a:	3718      	adds	r7, #24
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	0800f8a4 	.word	0x0800f8a4
 8009674:	08009ca1 	.word	0x08009ca1
 8009678:	20000f08 	.word	0x20000f08
 800967c:	20000f04 	.word	0x20000f04
 8009680:	20000ef0 	.word	0x20000ef0
 8009684:	20000ee8 	.word	0x20000ee8

08009688 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009688:	b480      	push	{r7}
 800968a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800968c:	4b04      	ldr	r3, [pc, #16]	; (80096a0 <vTaskSuspendAll+0x18>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	3301      	adds	r3, #1
 8009692:	4a03      	ldr	r2, [pc, #12]	; (80096a0 <vTaskSuspendAll+0x18>)
 8009694:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009696:	bf00      	nop
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr
 80096a0:	20000f0c 	.word	0x20000f0c

080096a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80096aa:	2300      	movs	r3, #0
 80096ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80096ae:	2300      	movs	r3, #0
 80096b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80096b2:	4b42      	ldr	r3, [pc, #264]	; (80097bc <xTaskResumeAll+0x118>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10a      	bne.n	80096d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80096ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096be:	f383 8811 	msr	BASEPRI, r3
 80096c2:	f3bf 8f6f 	isb	sy
 80096c6:	f3bf 8f4f 	dsb	sy
 80096ca:	603b      	str	r3, [r7, #0]
}
 80096cc:	bf00      	nop
 80096ce:	e7fe      	b.n	80096ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80096d0:	f001 f918 	bl	800a904 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80096d4:	4b39      	ldr	r3, [pc, #228]	; (80097bc <xTaskResumeAll+0x118>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	3b01      	subs	r3, #1
 80096da:	4a38      	ldr	r2, [pc, #224]	; (80097bc <xTaskResumeAll+0x118>)
 80096dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096de:	4b37      	ldr	r3, [pc, #220]	; (80097bc <xTaskResumeAll+0x118>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d162      	bne.n	80097ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80096e6:	4b36      	ldr	r3, [pc, #216]	; (80097c0 <xTaskResumeAll+0x11c>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d05e      	beq.n	80097ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096ee:	e02f      	b.n	8009750 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096f0:	4b34      	ldr	r3, [pc, #208]	; (80097c4 <xTaskResumeAll+0x120>)
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	3318      	adds	r3, #24
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7fe ff7b 	bl	80085f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	3304      	adds	r3, #4
 8009706:	4618      	mov	r0, r3
 8009708:	f7fe ff76 	bl	80085f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009710:	4b2d      	ldr	r3, [pc, #180]	; (80097c8 <xTaskResumeAll+0x124>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	429a      	cmp	r2, r3
 8009716:	d903      	bls.n	8009720 <xTaskResumeAll+0x7c>
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800971c:	4a2a      	ldr	r2, [pc, #168]	; (80097c8 <xTaskResumeAll+0x124>)
 800971e:	6013      	str	r3, [r2, #0]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009724:	4613      	mov	r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	4413      	add	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	4a27      	ldr	r2, [pc, #156]	; (80097cc <xTaskResumeAll+0x128>)
 800972e:	441a      	add	r2, r3
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	3304      	adds	r3, #4
 8009734:	4619      	mov	r1, r3
 8009736:	4610      	mov	r0, r2
 8009738:	f7fe ff01 	bl	800853e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009740:	4b23      	ldr	r3, [pc, #140]	; (80097d0 <xTaskResumeAll+0x12c>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009746:	429a      	cmp	r2, r3
 8009748:	d302      	bcc.n	8009750 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800974a:	4b22      	ldr	r3, [pc, #136]	; (80097d4 <xTaskResumeAll+0x130>)
 800974c:	2201      	movs	r2, #1
 800974e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009750:	4b1c      	ldr	r3, [pc, #112]	; (80097c4 <xTaskResumeAll+0x120>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1cb      	bne.n	80096f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d001      	beq.n	8009762 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800975e:	f000 fb55 	bl	8009e0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009762:	4b1d      	ldr	r3, [pc, #116]	; (80097d8 <xTaskResumeAll+0x134>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d010      	beq.n	8009790 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800976e:	f000 f847 	bl	8009800 <xTaskIncrementTick>
 8009772:	4603      	mov	r3, r0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d002      	beq.n	800977e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009778:	4b16      	ldr	r3, [pc, #88]	; (80097d4 <xTaskResumeAll+0x130>)
 800977a:	2201      	movs	r2, #1
 800977c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	3b01      	subs	r3, #1
 8009782:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1f1      	bne.n	800976e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800978a:	4b13      	ldr	r3, [pc, #76]	; (80097d8 <xTaskResumeAll+0x134>)
 800978c:	2200      	movs	r2, #0
 800978e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009790:	4b10      	ldr	r3, [pc, #64]	; (80097d4 <xTaskResumeAll+0x130>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d009      	beq.n	80097ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009798:	2301      	movs	r3, #1
 800979a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800979c:	4b0f      	ldr	r3, [pc, #60]	; (80097dc <xTaskResumeAll+0x138>)
 800979e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097a2:	601a      	str	r2, [r3, #0]
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097ac:	f001 f8da 	bl	800a964 <vPortExitCritical>

	return xAlreadyYielded;
 80097b0:	68bb      	ldr	r3, [r7, #8]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	20000f0c 	.word	0x20000f0c
 80097c0:	20000ee4 	.word	0x20000ee4
 80097c4:	20000ea4 	.word	0x20000ea4
 80097c8:	20000eec 	.word	0x20000eec
 80097cc:	20000a14 	.word	0x20000a14
 80097d0:	20000a10 	.word	0x20000a10
 80097d4:	20000ef8 	.word	0x20000ef8
 80097d8:	20000ef4 	.word	0x20000ef4
 80097dc:	e000ed04 	.word	0xe000ed04

080097e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80097e6:	4b05      	ldr	r3, [pc, #20]	; (80097fc <xTaskGetTickCount+0x1c>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80097ec:	687b      	ldr	r3, [r7, #4]
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	370c      	adds	r7, #12
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	20000ee8 	.word	0x20000ee8

08009800 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009806:	2300      	movs	r3, #0
 8009808:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800980a:	4b4f      	ldr	r3, [pc, #316]	; (8009948 <xTaskIncrementTick+0x148>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	f040 808f 	bne.w	8009932 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009814:	4b4d      	ldr	r3, [pc, #308]	; (800994c <xTaskIncrementTick+0x14c>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	3301      	adds	r3, #1
 800981a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800981c:	4a4b      	ldr	r2, [pc, #300]	; (800994c <xTaskIncrementTick+0x14c>)
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d120      	bne.n	800986a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009828:	4b49      	ldr	r3, [pc, #292]	; (8009950 <xTaskIncrementTick+0x150>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00a      	beq.n	8009848 <xTaskIncrementTick+0x48>
	__asm volatile
 8009832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009836:	f383 8811 	msr	BASEPRI, r3
 800983a:	f3bf 8f6f 	isb	sy
 800983e:	f3bf 8f4f 	dsb	sy
 8009842:	603b      	str	r3, [r7, #0]
}
 8009844:	bf00      	nop
 8009846:	e7fe      	b.n	8009846 <xTaskIncrementTick+0x46>
 8009848:	4b41      	ldr	r3, [pc, #260]	; (8009950 <xTaskIncrementTick+0x150>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	60fb      	str	r3, [r7, #12]
 800984e:	4b41      	ldr	r3, [pc, #260]	; (8009954 <xTaskIncrementTick+0x154>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a3f      	ldr	r2, [pc, #252]	; (8009950 <xTaskIncrementTick+0x150>)
 8009854:	6013      	str	r3, [r2, #0]
 8009856:	4a3f      	ldr	r2, [pc, #252]	; (8009954 <xTaskIncrementTick+0x154>)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6013      	str	r3, [r2, #0]
 800985c:	4b3e      	ldr	r3, [pc, #248]	; (8009958 <xTaskIncrementTick+0x158>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	3301      	adds	r3, #1
 8009862:	4a3d      	ldr	r2, [pc, #244]	; (8009958 <xTaskIncrementTick+0x158>)
 8009864:	6013      	str	r3, [r2, #0]
 8009866:	f000 fad1 	bl	8009e0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800986a:	4b3c      	ldr	r3, [pc, #240]	; (800995c <xTaskIncrementTick+0x15c>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	693a      	ldr	r2, [r7, #16]
 8009870:	429a      	cmp	r2, r3
 8009872:	d349      	bcc.n	8009908 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009874:	4b36      	ldr	r3, [pc, #216]	; (8009950 <xTaskIncrementTick+0x150>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d104      	bne.n	8009888 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800987e:	4b37      	ldr	r3, [pc, #220]	; (800995c <xTaskIncrementTick+0x15c>)
 8009880:	f04f 32ff 	mov.w	r2, #4294967295
 8009884:	601a      	str	r2, [r3, #0]
					break;
 8009886:	e03f      	b.n	8009908 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009888:	4b31      	ldr	r3, [pc, #196]	; (8009950 <xTaskIncrementTick+0x150>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	429a      	cmp	r2, r3
 800989e:	d203      	bcs.n	80098a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80098a0:	4a2e      	ldr	r2, [pc, #184]	; (800995c <xTaskIncrementTick+0x15c>)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80098a6:	e02f      	b.n	8009908 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	3304      	adds	r3, #4
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fe fea3 	bl	80085f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d004      	beq.n	80098c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	3318      	adds	r3, #24
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fe fe9a 	bl	80085f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c8:	4b25      	ldr	r3, [pc, #148]	; (8009960 <xTaskIncrementTick+0x160>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d903      	bls.n	80098d8 <xTaskIncrementTick+0xd8>
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d4:	4a22      	ldr	r2, [pc, #136]	; (8009960 <xTaskIncrementTick+0x160>)
 80098d6:	6013      	str	r3, [r2, #0]
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098dc:	4613      	mov	r3, r2
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	4413      	add	r3, r2
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	4a1f      	ldr	r2, [pc, #124]	; (8009964 <xTaskIncrementTick+0x164>)
 80098e6:	441a      	add	r2, r3
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	3304      	adds	r3, #4
 80098ec:	4619      	mov	r1, r3
 80098ee:	4610      	mov	r0, r2
 80098f0:	f7fe fe25 	bl	800853e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098f8:	4b1b      	ldr	r3, [pc, #108]	; (8009968 <xTaskIncrementTick+0x168>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098fe:	429a      	cmp	r2, r3
 8009900:	d3b8      	bcc.n	8009874 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009902:	2301      	movs	r3, #1
 8009904:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009906:	e7b5      	b.n	8009874 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009908:	4b17      	ldr	r3, [pc, #92]	; (8009968 <xTaskIncrementTick+0x168>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800990e:	4915      	ldr	r1, [pc, #84]	; (8009964 <xTaskIncrementTick+0x164>)
 8009910:	4613      	mov	r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4413      	add	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	440b      	add	r3, r1
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d901      	bls.n	8009924 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009920:	2301      	movs	r3, #1
 8009922:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009924:	4b11      	ldr	r3, [pc, #68]	; (800996c <xTaskIncrementTick+0x16c>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d007      	beq.n	800993c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800992c:	2301      	movs	r3, #1
 800992e:	617b      	str	r3, [r7, #20]
 8009930:	e004      	b.n	800993c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009932:	4b0f      	ldr	r3, [pc, #60]	; (8009970 <xTaskIncrementTick+0x170>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	3301      	adds	r3, #1
 8009938:	4a0d      	ldr	r2, [pc, #52]	; (8009970 <xTaskIncrementTick+0x170>)
 800993a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800993c:	697b      	ldr	r3, [r7, #20]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	20000f0c 	.word	0x20000f0c
 800994c:	20000ee8 	.word	0x20000ee8
 8009950:	20000e9c 	.word	0x20000e9c
 8009954:	20000ea0 	.word	0x20000ea0
 8009958:	20000efc 	.word	0x20000efc
 800995c:	20000f04 	.word	0x20000f04
 8009960:	20000eec 	.word	0x20000eec
 8009964:	20000a14 	.word	0x20000a14
 8009968:	20000a10 	.word	0x20000a10
 800996c:	20000ef8 	.word	0x20000ef8
 8009970:	20000ef4 	.word	0x20000ef4

08009974 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800997a:	4b28      	ldr	r3, [pc, #160]	; (8009a1c <vTaskSwitchContext+0xa8>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d003      	beq.n	800998a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009982:	4b27      	ldr	r3, [pc, #156]	; (8009a20 <vTaskSwitchContext+0xac>)
 8009984:	2201      	movs	r2, #1
 8009986:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009988:	e041      	b.n	8009a0e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800998a:	4b25      	ldr	r3, [pc, #148]	; (8009a20 <vTaskSwitchContext+0xac>)
 800998c:	2200      	movs	r2, #0
 800998e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009990:	4b24      	ldr	r3, [pc, #144]	; (8009a24 <vTaskSwitchContext+0xb0>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	60fb      	str	r3, [r7, #12]
 8009996:	e010      	b.n	80099ba <vTaskSwitchContext+0x46>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d10a      	bne.n	80099b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800999e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a2:	f383 8811 	msr	BASEPRI, r3
 80099a6:	f3bf 8f6f 	isb	sy
 80099aa:	f3bf 8f4f 	dsb	sy
 80099ae:	607b      	str	r3, [r7, #4]
}
 80099b0:	bf00      	nop
 80099b2:	e7fe      	b.n	80099b2 <vTaskSwitchContext+0x3e>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	3b01      	subs	r3, #1
 80099b8:	60fb      	str	r3, [r7, #12]
 80099ba:	491b      	ldr	r1, [pc, #108]	; (8009a28 <vTaskSwitchContext+0xb4>)
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	4613      	mov	r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	440b      	add	r3, r1
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d0e4      	beq.n	8009998 <vTaskSwitchContext+0x24>
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	4613      	mov	r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4413      	add	r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	4a13      	ldr	r2, [pc, #76]	; (8009a28 <vTaskSwitchContext+0xb4>)
 80099da:	4413      	add	r3, r2
 80099dc:	60bb      	str	r3, [r7, #8]
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	685a      	ldr	r2, [r3, #4]
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	605a      	str	r2, [r3, #4]
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	3308      	adds	r3, #8
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d104      	bne.n	80099fe <vTaskSwitchContext+0x8a>
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	685a      	ldr	r2, [r3, #4]
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	605a      	str	r2, [r3, #4]
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	4a09      	ldr	r2, [pc, #36]	; (8009a2c <vTaskSwitchContext+0xb8>)
 8009a06:	6013      	str	r3, [r2, #0]
 8009a08:	4a06      	ldr	r2, [pc, #24]	; (8009a24 <vTaskSwitchContext+0xb0>)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6013      	str	r3, [r2, #0]
}
 8009a0e:	bf00      	nop
 8009a10:	3714      	adds	r7, #20
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	20000f0c 	.word	0x20000f0c
 8009a20:	20000ef8 	.word	0x20000ef8
 8009a24:	20000eec 	.word	0x20000eec
 8009a28:	20000a14 	.word	0x20000a14
 8009a2c:	20000a10 	.word	0x20000a10

08009a30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10a      	bne.n	8009a56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	60fb      	str	r3, [r7, #12]
}
 8009a52:	bf00      	nop
 8009a54:	e7fe      	b.n	8009a54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a56:	4b07      	ldr	r3, [pc, #28]	; (8009a74 <vTaskPlaceOnEventList+0x44>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	3318      	adds	r3, #24
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f7fe fd91 	bl	8008586 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a64:	2101      	movs	r1, #1
 8009a66:	6838      	ldr	r0, [r7, #0]
 8009a68:	f000 fa7c 	bl	8009f64 <prvAddCurrentTaskToDelayedList>
}
 8009a6c:	bf00      	nop
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	20000a10 	.word	0x20000a10

08009a78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b086      	sub	sp, #24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d10a      	bne.n	8009aa0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8e:	f383 8811 	msr	BASEPRI, r3
 8009a92:	f3bf 8f6f 	isb	sy
 8009a96:	f3bf 8f4f 	dsb	sy
 8009a9a:	617b      	str	r3, [r7, #20]
}
 8009a9c:	bf00      	nop
 8009a9e:	e7fe      	b.n	8009a9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009aa0:	4b0a      	ldr	r3, [pc, #40]	; (8009acc <vTaskPlaceOnEventListRestricted+0x54>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	3318      	adds	r3, #24
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	68f8      	ldr	r0, [r7, #12]
 8009aaa:	f7fe fd48 	bl	800853e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d002      	beq.n	8009aba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ab8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009aba:	6879      	ldr	r1, [r7, #4]
 8009abc:	68b8      	ldr	r0, [r7, #8]
 8009abe:	f000 fa51 	bl	8009f64 <prvAddCurrentTaskToDelayedList>
	}
 8009ac2:	bf00      	nop
 8009ac4:	3718      	adds	r7, #24
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	20000a10 	.word	0x20000a10

08009ad0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b086      	sub	sp, #24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10a      	bne.n	8009afc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aea:	f383 8811 	msr	BASEPRI, r3
 8009aee:	f3bf 8f6f 	isb	sy
 8009af2:	f3bf 8f4f 	dsb	sy
 8009af6:	60fb      	str	r3, [r7, #12]
}
 8009af8:	bf00      	nop
 8009afa:	e7fe      	b.n	8009afa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	3318      	adds	r3, #24
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7fe fd79 	bl	80085f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b06:	4b1e      	ldr	r3, [pc, #120]	; (8009b80 <xTaskRemoveFromEventList+0xb0>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d11d      	bne.n	8009b4a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	3304      	adds	r3, #4
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fe fd70 	bl	80085f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b1c:	4b19      	ldr	r3, [pc, #100]	; (8009b84 <xTaskRemoveFromEventList+0xb4>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d903      	bls.n	8009b2c <xTaskRemoveFromEventList+0x5c>
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b28:	4a16      	ldr	r2, [pc, #88]	; (8009b84 <xTaskRemoveFromEventList+0xb4>)
 8009b2a:	6013      	str	r3, [r2, #0]
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b30:	4613      	mov	r3, r2
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	4413      	add	r3, r2
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	4a13      	ldr	r2, [pc, #76]	; (8009b88 <xTaskRemoveFromEventList+0xb8>)
 8009b3a:	441a      	add	r2, r3
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	3304      	adds	r3, #4
 8009b40:	4619      	mov	r1, r3
 8009b42:	4610      	mov	r0, r2
 8009b44:	f7fe fcfb 	bl	800853e <vListInsertEnd>
 8009b48:	e005      	b.n	8009b56 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	3318      	adds	r3, #24
 8009b4e:	4619      	mov	r1, r3
 8009b50:	480e      	ldr	r0, [pc, #56]	; (8009b8c <xTaskRemoveFromEventList+0xbc>)
 8009b52:	f7fe fcf4 	bl	800853e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b5a:	4b0d      	ldr	r3, [pc, #52]	; (8009b90 <xTaskRemoveFromEventList+0xc0>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d905      	bls.n	8009b70 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b64:	2301      	movs	r3, #1
 8009b66:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b68:	4b0a      	ldr	r3, [pc, #40]	; (8009b94 <xTaskRemoveFromEventList+0xc4>)
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	601a      	str	r2, [r3, #0]
 8009b6e:	e001      	b.n	8009b74 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009b70:	2300      	movs	r3, #0
 8009b72:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009b74:	697b      	ldr	r3, [r7, #20]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3718      	adds	r7, #24
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	20000f0c 	.word	0x20000f0c
 8009b84:	20000eec 	.word	0x20000eec
 8009b88:	20000a14 	.word	0x20000a14
 8009b8c:	20000ea4 	.word	0x20000ea4
 8009b90:	20000a10 	.word	0x20000a10
 8009b94:	20000ef8 	.word	0x20000ef8

08009b98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ba0:	4b06      	ldr	r3, [pc, #24]	; (8009bbc <vTaskInternalSetTimeOutState+0x24>)
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ba8:	4b05      	ldr	r3, [pc, #20]	; (8009bc0 <vTaskInternalSetTimeOutState+0x28>)
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	605a      	str	r2, [r3, #4]
}
 8009bb0:	bf00      	nop
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr
 8009bbc:	20000efc 	.word	0x20000efc
 8009bc0:	20000ee8 	.word	0x20000ee8

08009bc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b088      	sub	sp, #32
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d10a      	bne.n	8009bea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd8:	f383 8811 	msr	BASEPRI, r3
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f3bf 8f4f 	dsb	sy
 8009be4:	613b      	str	r3, [r7, #16]
}
 8009be6:	bf00      	nop
 8009be8:	e7fe      	b.n	8009be8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10a      	bne.n	8009c06 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	60fb      	str	r3, [r7, #12]
}
 8009c02:	bf00      	nop
 8009c04:	e7fe      	b.n	8009c04 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009c06:	f000 fe7d 	bl	800a904 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c0a:	4b1d      	ldr	r3, [pc, #116]	; (8009c80 <xTaskCheckForTimeOut+0xbc>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	69ba      	ldr	r2, [r7, #24]
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c22:	d102      	bne.n	8009c2a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009c24:	2300      	movs	r3, #0
 8009c26:	61fb      	str	r3, [r7, #28]
 8009c28:	e023      	b.n	8009c72 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	4b15      	ldr	r3, [pc, #84]	; (8009c84 <xTaskCheckForTimeOut+0xc0>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d007      	beq.n	8009c46 <xTaskCheckForTimeOut+0x82>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	69ba      	ldr	r2, [r7, #24]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d302      	bcc.n	8009c46 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009c40:	2301      	movs	r3, #1
 8009c42:	61fb      	str	r3, [r7, #28]
 8009c44:	e015      	b.n	8009c72 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	697a      	ldr	r2, [r7, #20]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d20b      	bcs.n	8009c68 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	1ad2      	subs	r2, r2, r3
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f7ff ff9b 	bl	8009b98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c62:	2300      	movs	r3, #0
 8009c64:	61fb      	str	r3, [r7, #28]
 8009c66:	e004      	b.n	8009c72 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c72:	f000 fe77 	bl	800a964 <vPortExitCritical>

	return xReturn;
 8009c76:	69fb      	ldr	r3, [r7, #28]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3720      	adds	r7, #32
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	20000ee8 	.word	0x20000ee8
 8009c84:	20000efc 	.word	0x20000efc

08009c88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c88:	b480      	push	{r7}
 8009c8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c8c:	4b03      	ldr	r3, [pc, #12]	; (8009c9c <vTaskMissedYield+0x14>)
 8009c8e:	2201      	movs	r2, #1
 8009c90:	601a      	str	r2, [r3, #0]
}
 8009c92:	bf00      	nop
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr
 8009c9c:	20000ef8 	.word	0x20000ef8

08009ca0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009ca8:	f000 f852 	bl	8009d50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009cac:	4b06      	ldr	r3, [pc, #24]	; (8009cc8 <prvIdleTask+0x28>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d9f9      	bls.n	8009ca8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009cb4:	4b05      	ldr	r3, [pc, #20]	; (8009ccc <prvIdleTask+0x2c>)
 8009cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cba:	601a      	str	r2, [r3, #0]
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009cc4:	e7f0      	b.n	8009ca8 <prvIdleTask+0x8>
 8009cc6:	bf00      	nop
 8009cc8:	20000a14 	.word	0x20000a14
 8009ccc:	e000ed04 	.word	0xe000ed04

08009cd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	607b      	str	r3, [r7, #4]
 8009cda:	e00c      	b.n	8009cf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	4413      	add	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	4a12      	ldr	r2, [pc, #72]	; (8009d30 <prvInitialiseTaskLists+0x60>)
 8009ce8:	4413      	add	r3, r2
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fe fbfa 	bl	80084e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	607b      	str	r3, [r7, #4]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b37      	cmp	r3, #55	; 0x37
 8009cfa:	d9ef      	bls.n	8009cdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009cfc:	480d      	ldr	r0, [pc, #52]	; (8009d34 <prvInitialiseTaskLists+0x64>)
 8009cfe:	f7fe fbf1 	bl	80084e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d02:	480d      	ldr	r0, [pc, #52]	; (8009d38 <prvInitialiseTaskLists+0x68>)
 8009d04:	f7fe fbee 	bl	80084e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d08:	480c      	ldr	r0, [pc, #48]	; (8009d3c <prvInitialiseTaskLists+0x6c>)
 8009d0a:	f7fe fbeb 	bl	80084e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d0e:	480c      	ldr	r0, [pc, #48]	; (8009d40 <prvInitialiseTaskLists+0x70>)
 8009d10:	f7fe fbe8 	bl	80084e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009d14:	480b      	ldr	r0, [pc, #44]	; (8009d44 <prvInitialiseTaskLists+0x74>)
 8009d16:	f7fe fbe5 	bl	80084e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009d1a:	4b0b      	ldr	r3, [pc, #44]	; (8009d48 <prvInitialiseTaskLists+0x78>)
 8009d1c:	4a05      	ldr	r2, [pc, #20]	; (8009d34 <prvInitialiseTaskLists+0x64>)
 8009d1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d20:	4b0a      	ldr	r3, [pc, #40]	; (8009d4c <prvInitialiseTaskLists+0x7c>)
 8009d22:	4a05      	ldr	r2, [pc, #20]	; (8009d38 <prvInitialiseTaskLists+0x68>)
 8009d24:	601a      	str	r2, [r3, #0]
}
 8009d26:	bf00      	nop
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	20000a14 	.word	0x20000a14
 8009d34:	20000e74 	.word	0x20000e74
 8009d38:	20000e88 	.word	0x20000e88
 8009d3c:	20000ea4 	.word	0x20000ea4
 8009d40:	20000eb8 	.word	0x20000eb8
 8009d44:	20000ed0 	.word	0x20000ed0
 8009d48:	20000e9c 	.word	0x20000e9c
 8009d4c:	20000ea0 	.word	0x20000ea0

08009d50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d56:	e019      	b.n	8009d8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d58:	f000 fdd4 	bl	800a904 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d5c:	4b10      	ldr	r3, [pc, #64]	; (8009da0 <prvCheckTasksWaitingTermination+0x50>)
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	3304      	adds	r3, #4
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7fe fc45 	bl	80085f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d6e:	4b0d      	ldr	r3, [pc, #52]	; (8009da4 <prvCheckTasksWaitingTermination+0x54>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	3b01      	subs	r3, #1
 8009d74:	4a0b      	ldr	r2, [pc, #44]	; (8009da4 <prvCheckTasksWaitingTermination+0x54>)
 8009d76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d78:	4b0b      	ldr	r3, [pc, #44]	; (8009da8 <prvCheckTasksWaitingTermination+0x58>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	3b01      	subs	r3, #1
 8009d7e:	4a0a      	ldr	r2, [pc, #40]	; (8009da8 <prvCheckTasksWaitingTermination+0x58>)
 8009d80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d82:	f000 fdef 	bl	800a964 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 f810 	bl	8009dac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d8c:	4b06      	ldr	r3, [pc, #24]	; (8009da8 <prvCheckTasksWaitingTermination+0x58>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1e1      	bne.n	8009d58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d94:	bf00      	nop
 8009d96:	bf00      	nop
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	20000eb8 	.word	0x20000eb8
 8009da4:	20000ee4 	.word	0x20000ee4
 8009da8:	20000ecc 	.word	0x20000ecc

08009dac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d108      	bne.n	8009dd0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f000 ff8c 	bl	800ace0 <vPortFree>
				vPortFree( pxTCB );
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 ff89 	bl	800ace0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009dce:	e018      	b.n	8009e02 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d103      	bne.n	8009de2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 ff80 	bl	800ace0 <vPortFree>
	}
 8009de0:	e00f      	b.n	8009e02 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009de8:	2b02      	cmp	r3, #2
 8009dea:	d00a      	beq.n	8009e02 <prvDeleteTCB+0x56>
	__asm volatile
 8009dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df0:	f383 8811 	msr	BASEPRI, r3
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	f3bf 8f4f 	dsb	sy
 8009dfc:	60fb      	str	r3, [r7, #12]
}
 8009dfe:	bf00      	nop
 8009e00:	e7fe      	b.n	8009e00 <prvDeleteTCB+0x54>
	}
 8009e02:	bf00      	nop
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
	...

08009e0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e12:	4b0c      	ldr	r3, [pc, #48]	; (8009e44 <prvResetNextTaskUnblockTime+0x38>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d104      	bne.n	8009e26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e1c:	4b0a      	ldr	r3, [pc, #40]	; (8009e48 <prvResetNextTaskUnblockTime+0x3c>)
 8009e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009e24:	e008      	b.n	8009e38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e26:	4b07      	ldr	r3, [pc, #28]	; (8009e44 <prvResetNextTaskUnblockTime+0x38>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	4a04      	ldr	r2, [pc, #16]	; (8009e48 <prvResetNextTaskUnblockTime+0x3c>)
 8009e36:	6013      	str	r3, [r2, #0]
}
 8009e38:	bf00      	nop
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr
 8009e44:	20000e9c 	.word	0x20000e9c
 8009e48:	20000f04 	.word	0x20000f04

08009e4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e52:	4b0b      	ldr	r3, [pc, #44]	; (8009e80 <xTaskGetSchedulerState+0x34>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d102      	bne.n	8009e60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	607b      	str	r3, [r7, #4]
 8009e5e:	e008      	b.n	8009e72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e60:	4b08      	ldr	r3, [pc, #32]	; (8009e84 <xTaskGetSchedulerState+0x38>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d102      	bne.n	8009e6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e68:	2302      	movs	r3, #2
 8009e6a:	607b      	str	r3, [r7, #4]
 8009e6c:	e001      	b.n	8009e72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e72:	687b      	ldr	r3, [r7, #4]
	}
 8009e74:	4618      	mov	r0, r3
 8009e76:	370c      	adds	r7, #12
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr
 8009e80:	20000ef0 	.word	0x20000ef0
 8009e84:	20000f0c 	.word	0x20000f0c

08009e88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e94:	2300      	movs	r3, #0
 8009e96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d056      	beq.n	8009f4c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e9e:	4b2e      	ldr	r3, [pc, #184]	; (8009f58 <xTaskPriorityDisinherit+0xd0>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	693a      	ldr	r2, [r7, #16]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d00a      	beq.n	8009ebe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eac:	f383 8811 	msr	BASEPRI, r3
 8009eb0:	f3bf 8f6f 	isb	sy
 8009eb4:	f3bf 8f4f 	dsb	sy
 8009eb8:	60fb      	str	r3, [r7, #12]
}
 8009eba:	bf00      	nop
 8009ebc:	e7fe      	b.n	8009ebc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d10a      	bne.n	8009edc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eca:	f383 8811 	msr	BASEPRI, r3
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	f3bf 8f4f 	dsb	sy
 8009ed6:	60bb      	str	r3, [r7, #8]
}
 8009ed8:	bf00      	nop
 8009eda:	e7fe      	b.n	8009eda <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ee0:	1e5a      	subs	r2, r3, #1
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d02c      	beq.n	8009f4c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d128      	bne.n	8009f4c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	3304      	adds	r3, #4
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fe fb7a 	bl	80085f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f1c:	4b0f      	ldr	r3, [pc, #60]	; (8009f5c <xTaskPriorityDisinherit+0xd4>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d903      	bls.n	8009f2c <xTaskPriorityDisinherit+0xa4>
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f28:	4a0c      	ldr	r2, [pc, #48]	; (8009f5c <xTaskPriorityDisinherit+0xd4>)
 8009f2a:	6013      	str	r3, [r2, #0]
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f30:	4613      	mov	r3, r2
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	4413      	add	r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4a09      	ldr	r2, [pc, #36]	; (8009f60 <xTaskPriorityDisinherit+0xd8>)
 8009f3a:	441a      	add	r2, r3
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	3304      	adds	r3, #4
 8009f40:	4619      	mov	r1, r3
 8009f42:	4610      	mov	r0, r2
 8009f44:	f7fe fafb 	bl	800853e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f4c:	697b      	ldr	r3, [r7, #20]
	}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3718      	adds	r7, #24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	20000a10 	.word	0x20000a10
 8009f5c:	20000eec 	.word	0x20000eec
 8009f60:	20000a14 	.word	0x20000a14

08009f64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f6e:	4b21      	ldr	r3, [pc, #132]	; (8009ff4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f74:	4b20      	ldr	r3, [pc, #128]	; (8009ff8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	3304      	adds	r3, #4
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fe fb3c 	bl	80085f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f86:	d10a      	bne.n	8009f9e <prvAddCurrentTaskToDelayedList+0x3a>
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d007      	beq.n	8009f9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f8e:	4b1a      	ldr	r3, [pc, #104]	; (8009ff8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	3304      	adds	r3, #4
 8009f94:	4619      	mov	r1, r3
 8009f96:	4819      	ldr	r0, [pc, #100]	; (8009ffc <prvAddCurrentTaskToDelayedList+0x98>)
 8009f98:	f7fe fad1 	bl	800853e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f9c:	e026      	b.n	8009fec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009fa6:	4b14      	ldr	r3, [pc, #80]	; (8009ff8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d209      	bcs.n	8009fca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fb6:	4b12      	ldr	r3, [pc, #72]	; (800a000 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	4b0f      	ldr	r3, [pc, #60]	; (8009ff8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	3304      	adds	r3, #4
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	4610      	mov	r0, r2
 8009fc4:	f7fe fadf 	bl	8008586 <vListInsert>
}
 8009fc8:	e010      	b.n	8009fec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fca:	4b0e      	ldr	r3, [pc, #56]	; (800a004 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	4b0a      	ldr	r3, [pc, #40]	; (8009ff8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	3304      	adds	r3, #4
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	f7fe fad5 	bl	8008586 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009fdc:	4b0a      	ldr	r3, [pc, #40]	; (800a008 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68ba      	ldr	r2, [r7, #8]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d202      	bcs.n	8009fec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009fe6:	4a08      	ldr	r2, [pc, #32]	; (800a008 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	6013      	str	r3, [r2, #0]
}
 8009fec:	bf00      	nop
 8009fee:	3710      	adds	r7, #16
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	20000ee8 	.word	0x20000ee8
 8009ff8:	20000a10 	.word	0x20000a10
 8009ffc:	20000ed0 	.word	0x20000ed0
 800a000:	20000ea0 	.word	0x20000ea0
 800a004:	20000e9c 	.word	0x20000e9c
 800a008:	20000f04 	.word	0x20000f04

0800a00c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b08a      	sub	sp, #40	; 0x28
 800a010:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a012:	2300      	movs	r3, #0
 800a014:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a016:	f000 fb07 	bl	800a628 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a01a:	4b1c      	ldr	r3, [pc, #112]	; (800a08c <xTimerCreateTimerTask+0x80>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d021      	beq.n	800a066 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a022:	2300      	movs	r3, #0
 800a024:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a026:	2300      	movs	r3, #0
 800a028:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a02a:	1d3a      	adds	r2, r7, #4
 800a02c:	f107 0108 	add.w	r1, r7, #8
 800a030:	f107 030c 	add.w	r3, r7, #12
 800a034:	4618      	mov	r0, r3
 800a036:	f7fe fa3b 	bl	80084b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a03a:	6879      	ldr	r1, [r7, #4]
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	9202      	str	r2, [sp, #8]
 800a042:	9301      	str	r3, [sp, #4]
 800a044:	2302      	movs	r3, #2
 800a046:	9300      	str	r3, [sp, #0]
 800a048:	2300      	movs	r3, #0
 800a04a:	460a      	mov	r2, r1
 800a04c:	4910      	ldr	r1, [pc, #64]	; (800a090 <xTimerCreateTimerTask+0x84>)
 800a04e:	4811      	ldr	r0, [pc, #68]	; (800a094 <xTimerCreateTimerTask+0x88>)
 800a050:	f7ff f8de 	bl	8009210 <xTaskCreateStatic>
 800a054:	4603      	mov	r3, r0
 800a056:	4a10      	ldr	r2, [pc, #64]	; (800a098 <xTimerCreateTimerTask+0x8c>)
 800a058:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a05a:	4b0f      	ldr	r3, [pc, #60]	; (800a098 <xTimerCreateTimerTask+0x8c>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a062:	2301      	movs	r3, #1
 800a064:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d10a      	bne.n	800a082 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a070:	f383 8811 	msr	BASEPRI, r3
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	613b      	str	r3, [r7, #16]
}
 800a07e:	bf00      	nop
 800a080:	e7fe      	b.n	800a080 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a082:	697b      	ldr	r3, [r7, #20]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3718      	adds	r7, #24
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	20000f40 	.word	0x20000f40
 800a090:	0800f8ac 	.word	0x0800f8ac
 800a094:	0800a1d1 	.word	0x0800a1d1
 800a098:	20000f44 	.word	0x20000f44

0800a09c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b08a      	sub	sp, #40	; 0x28
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]
 800a0a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d10a      	bne.n	800a0ca <xTimerGenericCommand+0x2e>
	__asm volatile
 800a0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b8:	f383 8811 	msr	BASEPRI, r3
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	623b      	str	r3, [r7, #32]
}
 800a0c6:	bf00      	nop
 800a0c8:	e7fe      	b.n	800a0c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a0ca:	4b1a      	ldr	r3, [pc, #104]	; (800a134 <xTimerGenericCommand+0x98>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d02a      	beq.n	800a128 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	2b05      	cmp	r3, #5
 800a0e2:	dc18      	bgt.n	800a116 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a0e4:	f7ff feb2 	bl	8009e4c <xTaskGetSchedulerState>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d109      	bne.n	800a102 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a0ee:	4b11      	ldr	r3, [pc, #68]	; (800a134 <xTimerGenericCommand+0x98>)
 800a0f0:	6818      	ldr	r0, [r3, #0]
 800a0f2:	f107 0110 	add.w	r1, r7, #16
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0fa:	f7fe fbe5 	bl	80088c8 <xQueueGenericSend>
 800a0fe:	6278      	str	r0, [r7, #36]	; 0x24
 800a100:	e012      	b.n	800a128 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a102:	4b0c      	ldr	r3, [pc, #48]	; (800a134 <xTimerGenericCommand+0x98>)
 800a104:	6818      	ldr	r0, [r3, #0]
 800a106:	f107 0110 	add.w	r1, r7, #16
 800a10a:	2300      	movs	r3, #0
 800a10c:	2200      	movs	r2, #0
 800a10e:	f7fe fbdb 	bl	80088c8 <xQueueGenericSend>
 800a112:	6278      	str	r0, [r7, #36]	; 0x24
 800a114:	e008      	b.n	800a128 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a116:	4b07      	ldr	r3, [pc, #28]	; (800a134 <xTimerGenericCommand+0x98>)
 800a118:	6818      	ldr	r0, [r3, #0]
 800a11a:	f107 0110 	add.w	r1, r7, #16
 800a11e:	2300      	movs	r3, #0
 800a120:	683a      	ldr	r2, [r7, #0]
 800a122:	f7fe fccf 	bl	8008ac4 <xQueueGenericSendFromISR>
 800a126:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3728      	adds	r7, #40	; 0x28
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20000f40 	.word	0x20000f40

0800a138 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b088      	sub	sp, #32
 800a13c:	af02      	add	r7, sp, #8
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a142:	4b22      	ldr	r3, [pc, #136]	; (800a1cc <prvProcessExpiredTimer+0x94>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	3304      	adds	r3, #4
 800a150:	4618      	mov	r0, r3
 800a152:	f7fe fa51 	bl	80085f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a15c:	f003 0304 	and.w	r3, r3, #4
 800a160:	2b00      	cmp	r3, #0
 800a162:	d022      	beq.n	800a1aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	699a      	ldr	r2, [r3, #24]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	18d1      	adds	r1, r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	683a      	ldr	r2, [r7, #0]
 800a170:	6978      	ldr	r0, [r7, #20]
 800a172:	f000 f8d1 	bl	800a318 <prvInsertTimerInActiveList>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d01f      	beq.n	800a1bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a17c:	2300      	movs	r3, #0
 800a17e:	9300      	str	r3, [sp, #0]
 800a180:	2300      	movs	r3, #0
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	2100      	movs	r1, #0
 800a186:	6978      	ldr	r0, [r7, #20]
 800a188:	f7ff ff88 	bl	800a09c <xTimerGenericCommand>
 800a18c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d113      	bne.n	800a1bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a198:	f383 8811 	msr	BASEPRI, r3
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	f3bf 8f4f 	dsb	sy
 800a1a4:	60fb      	str	r3, [r7, #12]
}
 800a1a6:	bf00      	nop
 800a1a8:	e7fe      	b.n	800a1a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1b0:	f023 0301 	bic.w	r3, r3, #1
 800a1b4:	b2da      	uxtb	r2, r3
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	6a1b      	ldr	r3, [r3, #32]
 800a1c0:	6978      	ldr	r0, [r7, #20]
 800a1c2:	4798      	blx	r3
}
 800a1c4:	bf00      	nop
 800a1c6:	3718      	adds	r7, #24
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	20000f38 	.word	0x20000f38

0800a1d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1d8:	f107 0308 	add.w	r3, r7, #8
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f000 f857 	bl	800a290 <prvGetNextExpireTime>
 800a1e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f000 f803 	bl	800a1f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a1ee:	f000 f8d5 	bl	800a39c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1f2:	e7f1      	b.n	800a1d8 <prvTimerTask+0x8>

0800a1f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a1fe:	f7ff fa43 	bl	8009688 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a202:	f107 0308 	add.w	r3, r7, #8
 800a206:	4618      	mov	r0, r3
 800a208:	f000 f866 	bl	800a2d8 <prvSampleTimeNow>
 800a20c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d130      	bne.n	800a276 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d10a      	bne.n	800a230 <prvProcessTimerOrBlockTask+0x3c>
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d806      	bhi.n	800a230 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a222:	f7ff fa3f 	bl	80096a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a226:	68f9      	ldr	r1, [r7, #12]
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f7ff ff85 	bl	800a138 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a22e:	e024      	b.n	800a27a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d008      	beq.n	800a248 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a236:	4b13      	ldr	r3, [pc, #76]	; (800a284 <prvProcessTimerOrBlockTask+0x90>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d101      	bne.n	800a244 <prvProcessTimerOrBlockTask+0x50>
 800a240:	2301      	movs	r3, #1
 800a242:	e000      	b.n	800a246 <prvProcessTimerOrBlockTask+0x52>
 800a244:	2300      	movs	r3, #0
 800a246:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a248:	4b0f      	ldr	r3, [pc, #60]	; (800a288 <prvProcessTimerOrBlockTask+0x94>)
 800a24a:	6818      	ldr	r0, [r3, #0]
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	1ad3      	subs	r3, r2, r3
 800a252:	683a      	ldr	r2, [r7, #0]
 800a254:	4619      	mov	r1, r3
 800a256:	f7fe ffa7 	bl	80091a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a25a:	f7ff fa23 	bl	80096a4 <xTaskResumeAll>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10a      	bne.n	800a27a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a264:	4b09      	ldr	r3, [pc, #36]	; (800a28c <prvProcessTimerOrBlockTask+0x98>)
 800a266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a26a:	601a      	str	r2, [r3, #0]
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	f3bf 8f6f 	isb	sy
}
 800a274:	e001      	b.n	800a27a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a276:	f7ff fa15 	bl	80096a4 <xTaskResumeAll>
}
 800a27a:	bf00      	nop
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	20000f3c 	.word	0x20000f3c
 800a288:	20000f40 	.word	0x20000f40
 800a28c:	e000ed04 	.word	0xe000ed04

0800a290 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a298:	4b0e      	ldr	r3, [pc, #56]	; (800a2d4 <prvGetNextExpireTime+0x44>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d101      	bne.n	800a2a6 <prvGetNextExpireTime+0x16>
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	e000      	b.n	800a2a8 <prvGetNextExpireTime+0x18>
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d105      	bne.n	800a2c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2b4:	4b07      	ldr	r3, [pc, #28]	; (800a2d4 <prvGetNextExpireTime+0x44>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	60fb      	str	r3, [r7, #12]
 800a2be:	e001      	b.n	800a2c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3714      	adds	r7, #20
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	20000f38 	.word	0x20000f38

0800a2d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a2e0:	f7ff fa7e 	bl	80097e0 <xTaskGetTickCount>
 800a2e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a2e6:	4b0b      	ldr	r3, [pc, #44]	; (800a314 <prvSampleTimeNow+0x3c>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d205      	bcs.n	800a2fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a2f0:	f000 f936 	bl	800a560 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	601a      	str	r2, [r3, #0]
 800a2fa:	e002      	b.n	800a302 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a302:	4a04      	ldr	r2, [pc, #16]	; (800a314 <prvSampleTimeNow+0x3c>)
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a308:	68fb      	ldr	r3, [r7, #12]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	20000f48 	.word	0x20000f48

0800a318 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
 800a324:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a326:	2300      	movs	r3, #0
 800a328:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	68ba      	ldr	r2, [r7, #8]
 800a32e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	68fa      	ldr	r2, [r7, #12]
 800a334:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d812      	bhi.n	800a364 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	1ad2      	subs	r2, r2, r3
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d302      	bcc.n	800a352 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a34c:	2301      	movs	r3, #1
 800a34e:	617b      	str	r3, [r7, #20]
 800a350:	e01b      	b.n	800a38a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a352:	4b10      	ldr	r3, [pc, #64]	; (800a394 <prvInsertTimerInActiveList+0x7c>)
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	3304      	adds	r3, #4
 800a35a:	4619      	mov	r1, r3
 800a35c:	4610      	mov	r0, r2
 800a35e:	f7fe f912 	bl	8008586 <vListInsert>
 800a362:	e012      	b.n	800a38a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d206      	bcs.n	800a37a <prvInsertTimerInActiveList+0x62>
 800a36c:	68ba      	ldr	r2, [r7, #8]
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	429a      	cmp	r2, r3
 800a372:	d302      	bcc.n	800a37a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a374:	2301      	movs	r3, #1
 800a376:	617b      	str	r3, [r7, #20]
 800a378:	e007      	b.n	800a38a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a37a:	4b07      	ldr	r3, [pc, #28]	; (800a398 <prvInsertTimerInActiveList+0x80>)
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3304      	adds	r3, #4
 800a382:	4619      	mov	r1, r3
 800a384:	4610      	mov	r0, r2
 800a386:	f7fe f8fe 	bl	8008586 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a38a:	697b      	ldr	r3, [r7, #20]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3718      	adds	r7, #24
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	20000f3c 	.word	0x20000f3c
 800a398:	20000f38 	.word	0x20000f38

0800a39c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b08e      	sub	sp, #56	; 0x38
 800a3a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3a2:	e0ca      	b.n	800a53a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	da18      	bge.n	800a3dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a3aa:	1d3b      	adds	r3, r7, #4
 800a3ac:	3304      	adds	r3, #4
 800a3ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10a      	bne.n	800a3cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ba:	f383 8811 	msr	BASEPRI, r3
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	f3bf 8f4f 	dsb	sy
 800a3c6:	61fb      	str	r3, [r7, #28]
}
 800a3c8:	bf00      	nop
 800a3ca:	e7fe      	b.n	800a3ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3d2:	6850      	ldr	r0, [r2, #4]
 800a3d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3d6:	6892      	ldr	r2, [r2, #8]
 800a3d8:	4611      	mov	r1, r2
 800a3da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	f2c0 80aa 	blt.w	800a538 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ea:	695b      	ldr	r3, [r3, #20]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d004      	beq.n	800a3fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f2:	3304      	adds	r3, #4
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7fe f8ff 	bl	80085f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3fa:	463b      	mov	r3, r7
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7ff ff6b 	bl	800a2d8 <prvSampleTimeNow>
 800a402:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b09      	cmp	r3, #9
 800a408:	f200 8097 	bhi.w	800a53a <prvProcessReceivedCommands+0x19e>
 800a40c:	a201      	add	r2, pc, #4	; (adr r2, 800a414 <prvProcessReceivedCommands+0x78>)
 800a40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a412:	bf00      	nop
 800a414:	0800a43d 	.word	0x0800a43d
 800a418:	0800a43d 	.word	0x0800a43d
 800a41c:	0800a43d 	.word	0x0800a43d
 800a420:	0800a4b1 	.word	0x0800a4b1
 800a424:	0800a4c5 	.word	0x0800a4c5
 800a428:	0800a50f 	.word	0x0800a50f
 800a42c:	0800a43d 	.word	0x0800a43d
 800a430:	0800a43d 	.word	0x0800a43d
 800a434:	0800a4b1 	.word	0x0800a4b1
 800a438:	0800a4c5 	.word	0x0800a4c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a442:	f043 0301 	orr.w	r3, r3, #1
 800a446:	b2da      	uxtb	r2, r3
 800a448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a44e:	68ba      	ldr	r2, [r7, #8]
 800a450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a452:	699b      	ldr	r3, [r3, #24]
 800a454:	18d1      	adds	r1, r2, r3
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a45a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a45c:	f7ff ff5c 	bl	800a318 <prvInsertTimerInActiveList>
 800a460:	4603      	mov	r3, r0
 800a462:	2b00      	cmp	r3, #0
 800a464:	d069      	beq.n	800a53a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a468:	6a1b      	ldr	r3, [r3, #32]
 800a46a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a46c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a474:	f003 0304 	and.w	r3, r3, #4
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d05e      	beq.n	800a53a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	441a      	add	r2, r3
 800a484:	2300      	movs	r3, #0
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	2300      	movs	r3, #0
 800a48a:	2100      	movs	r1, #0
 800a48c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a48e:	f7ff fe05 	bl	800a09c <xTimerGenericCommand>
 800a492:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a494:	6a3b      	ldr	r3, [r7, #32]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d14f      	bne.n	800a53a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49e:	f383 8811 	msr	BASEPRI, r3
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	61bb      	str	r3, [r7, #24]
}
 800a4ac:	bf00      	nop
 800a4ae:	e7fe      	b.n	800a4ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4b6:	f023 0301 	bic.w	r3, r3, #1
 800a4ba:	b2da      	uxtb	r2, r3
 800a4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a4c2:	e03a      	b.n	800a53a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4ca:	f043 0301 	orr.w	r3, r3, #1
 800a4ce:	b2da      	uxtb	r2, r3
 800a4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4de:	699b      	ldr	r3, [r3, #24]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10a      	bne.n	800a4fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e8:	f383 8811 	msr	BASEPRI, r3
 800a4ec:	f3bf 8f6f 	isb	sy
 800a4f0:	f3bf 8f4f 	dsb	sy
 800a4f4:	617b      	str	r3, [r7, #20]
}
 800a4f6:	bf00      	nop
 800a4f8:	e7fe      	b.n	800a4f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fc:	699a      	ldr	r2, [r3, #24]
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a500:	18d1      	adds	r1, r2, r3
 800a502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a508:	f7ff ff06 	bl	800a318 <prvInsertTimerInActiveList>
					break;
 800a50c:	e015      	b.n	800a53a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a514:	f003 0302 	and.w	r3, r3, #2
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d103      	bne.n	800a524 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a51c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a51e:	f000 fbdf 	bl	800ace0 <vPortFree>
 800a522:	e00a      	b.n	800a53a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a526:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a52a:	f023 0301 	bic.w	r3, r3, #1
 800a52e:	b2da      	uxtb	r2, r3
 800a530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a532:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a536:	e000      	b.n	800a53a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a538:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a53a:	4b08      	ldr	r3, [pc, #32]	; (800a55c <prvProcessReceivedCommands+0x1c0>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	1d39      	adds	r1, r7, #4
 800a540:	2200      	movs	r2, #0
 800a542:	4618      	mov	r0, r3
 800a544:	f7fe fb5a 	bl	8008bfc <xQueueReceive>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f47f af2a 	bne.w	800a3a4 <prvProcessReceivedCommands+0x8>
	}
}
 800a550:	bf00      	nop
 800a552:	bf00      	nop
 800a554:	3730      	adds	r7, #48	; 0x30
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	20000f40 	.word	0x20000f40

0800a560 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b088      	sub	sp, #32
 800a564:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a566:	e048      	b.n	800a5fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a568:	4b2d      	ldr	r3, [pc, #180]	; (800a620 <prvSwitchTimerLists+0xc0>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a572:	4b2b      	ldr	r3, [pc, #172]	; (800a620 <prvSwitchTimerLists+0xc0>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	3304      	adds	r3, #4
 800a580:	4618      	mov	r0, r3
 800a582:	f7fe f839 	bl	80085f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	6a1b      	ldr	r3, [r3, #32]
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a594:	f003 0304 	and.w	r3, r3, #4
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d02e      	beq.n	800a5fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	699b      	ldr	r3, [r3, #24]
 800a5a0:	693a      	ldr	r2, [r7, #16]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a5a6:	68ba      	ldr	r2, [r7, #8]
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d90e      	bls.n	800a5cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	68fa      	ldr	r2, [r7, #12]
 800a5b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5ba:	4b19      	ldr	r3, [pc, #100]	; (800a620 <prvSwitchTimerLists+0xc0>)
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	3304      	adds	r3, #4
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	4610      	mov	r0, r2
 800a5c6:	f7fd ffde 	bl	8008586 <vListInsert>
 800a5ca:	e016      	b.n	800a5fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	9300      	str	r3, [sp, #0]
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	693a      	ldr	r2, [r7, #16]
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f7ff fd60 	bl	800a09c <xTimerGenericCommand>
 800a5dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d10a      	bne.n	800a5fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e8:	f383 8811 	msr	BASEPRI, r3
 800a5ec:	f3bf 8f6f 	isb	sy
 800a5f0:	f3bf 8f4f 	dsb	sy
 800a5f4:	603b      	str	r3, [r7, #0]
}
 800a5f6:	bf00      	nop
 800a5f8:	e7fe      	b.n	800a5f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5fa:	4b09      	ldr	r3, [pc, #36]	; (800a620 <prvSwitchTimerLists+0xc0>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d1b1      	bne.n	800a568 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a604:	4b06      	ldr	r3, [pc, #24]	; (800a620 <prvSwitchTimerLists+0xc0>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a60a:	4b06      	ldr	r3, [pc, #24]	; (800a624 <prvSwitchTimerLists+0xc4>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a04      	ldr	r2, [pc, #16]	; (800a620 <prvSwitchTimerLists+0xc0>)
 800a610:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a612:	4a04      	ldr	r2, [pc, #16]	; (800a624 <prvSwitchTimerLists+0xc4>)
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	6013      	str	r3, [r2, #0]
}
 800a618:	bf00      	nop
 800a61a:	3718      	adds	r7, #24
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	20000f38 	.word	0x20000f38
 800a624:	20000f3c 	.word	0x20000f3c

0800a628 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a62e:	f000 f969 	bl	800a904 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a632:	4b15      	ldr	r3, [pc, #84]	; (800a688 <prvCheckForValidListAndQueue+0x60>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d120      	bne.n	800a67c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a63a:	4814      	ldr	r0, [pc, #80]	; (800a68c <prvCheckForValidListAndQueue+0x64>)
 800a63c:	f7fd ff52 	bl	80084e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a640:	4813      	ldr	r0, [pc, #76]	; (800a690 <prvCheckForValidListAndQueue+0x68>)
 800a642:	f7fd ff4f 	bl	80084e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a646:	4b13      	ldr	r3, [pc, #76]	; (800a694 <prvCheckForValidListAndQueue+0x6c>)
 800a648:	4a10      	ldr	r2, [pc, #64]	; (800a68c <prvCheckForValidListAndQueue+0x64>)
 800a64a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a64c:	4b12      	ldr	r3, [pc, #72]	; (800a698 <prvCheckForValidListAndQueue+0x70>)
 800a64e:	4a10      	ldr	r2, [pc, #64]	; (800a690 <prvCheckForValidListAndQueue+0x68>)
 800a650:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a652:	2300      	movs	r3, #0
 800a654:	9300      	str	r3, [sp, #0]
 800a656:	4b11      	ldr	r3, [pc, #68]	; (800a69c <prvCheckForValidListAndQueue+0x74>)
 800a658:	4a11      	ldr	r2, [pc, #68]	; (800a6a0 <prvCheckForValidListAndQueue+0x78>)
 800a65a:	2110      	movs	r1, #16
 800a65c:	200a      	movs	r0, #10
 800a65e:	f7fe f85d 	bl	800871c <xQueueGenericCreateStatic>
 800a662:	4603      	mov	r3, r0
 800a664:	4a08      	ldr	r2, [pc, #32]	; (800a688 <prvCheckForValidListAndQueue+0x60>)
 800a666:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a668:	4b07      	ldr	r3, [pc, #28]	; (800a688 <prvCheckForValidListAndQueue+0x60>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d005      	beq.n	800a67c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a670:	4b05      	ldr	r3, [pc, #20]	; (800a688 <prvCheckForValidListAndQueue+0x60>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	490b      	ldr	r1, [pc, #44]	; (800a6a4 <prvCheckForValidListAndQueue+0x7c>)
 800a676:	4618      	mov	r0, r3
 800a678:	f7fe fd6c 	bl	8009154 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a67c:	f000 f972 	bl	800a964 <vPortExitCritical>
}
 800a680:	bf00      	nop
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	20000f40 	.word	0x20000f40
 800a68c:	20000f10 	.word	0x20000f10
 800a690:	20000f24 	.word	0x20000f24
 800a694:	20000f38 	.word	0x20000f38
 800a698:	20000f3c 	.word	0x20000f3c
 800a69c:	20000fec 	.word	0x20000fec
 800a6a0:	20000f4c 	.word	0x20000f4c
 800a6a4:	0800f8b4 	.word	0x0800f8b4

0800a6a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	3b04      	subs	r3, #4
 800a6b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a6c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	3b04      	subs	r3, #4
 800a6c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	f023 0201 	bic.w	r2, r3, #1
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	3b04      	subs	r3, #4
 800a6d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a6d8:	4a0c      	ldr	r2, [pc, #48]	; (800a70c <pxPortInitialiseStack+0x64>)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	3b14      	subs	r3, #20
 800a6e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	3b04      	subs	r3, #4
 800a6ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f06f 0202 	mvn.w	r2, #2
 800a6f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	3b20      	subs	r3, #32
 800a6fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
}
 800a700:	4618      	mov	r0, r3
 800a702:	3714      	adds	r7, #20
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr
 800a70c:	0800a711 	.word	0x0800a711

0800a710 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a716:	2300      	movs	r3, #0
 800a718:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a71a:	4b12      	ldr	r3, [pc, #72]	; (800a764 <prvTaskExitError+0x54>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a722:	d00a      	beq.n	800a73a <prvTaskExitError+0x2a>
	__asm volatile
 800a724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a728:	f383 8811 	msr	BASEPRI, r3
 800a72c:	f3bf 8f6f 	isb	sy
 800a730:	f3bf 8f4f 	dsb	sy
 800a734:	60fb      	str	r3, [r7, #12]
}
 800a736:	bf00      	nop
 800a738:	e7fe      	b.n	800a738 <prvTaskExitError+0x28>
	__asm volatile
 800a73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	60bb      	str	r3, [r7, #8]
}
 800a74c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a74e:	bf00      	nop
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d0fc      	beq.n	800a750 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a756:	bf00      	nop
 800a758:	bf00      	nop
 800a75a:	3714      	adds	r7, #20
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr
 800a764:	2000013c 	.word	0x2000013c
	...

0800a770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a770:	4b07      	ldr	r3, [pc, #28]	; (800a790 <pxCurrentTCBConst2>)
 800a772:	6819      	ldr	r1, [r3, #0]
 800a774:	6808      	ldr	r0, [r1, #0]
 800a776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77a:	f380 8809 	msr	PSP, r0
 800a77e:	f3bf 8f6f 	isb	sy
 800a782:	f04f 0000 	mov.w	r0, #0
 800a786:	f380 8811 	msr	BASEPRI, r0
 800a78a:	4770      	bx	lr
 800a78c:	f3af 8000 	nop.w

0800a790 <pxCurrentTCBConst2>:
 800a790:	20000a10 	.word	0x20000a10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a794:	bf00      	nop
 800a796:	bf00      	nop

0800a798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a798:	4808      	ldr	r0, [pc, #32]	; (800a7bc <prvPortStartFirstTask+0x24>)
 800a79a:	6800      	ldr	r0, [r0, #0]
 800a79c:	6800      	ldr	r0, [r0, #0]
 800a79e:	f380 8808 	msr	MSP, r0
 800a7a2:	f04f 0000 	mov.w	r0, #0
 800a7a6:	f380 8814 	msr	CONTROL, r0
 800a7aa:	b662      	cpsie	i
 800a7ac:	b661      	cpsie	f
 800a7ae:	f3bf 8f4f 	dsb	sy
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	df00      	svc	0
 800a7b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a7ba:	bf00      	nop
 800a7bc:	e000ed08 	.word	0xe000ed08

0800a7c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a7c6:	4b46      	ldr	r3, [pc, #280]	; (800a8e0 <xPortStartScheduler+0x120>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a46      	ldr	r2, [pc, #280]	; (800a8e4 <xPortStartScheduler+0x124>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d10a      	bne.n	800a7e6 <xPortStartScheduler+0x26>
	__asm volatile
 800a7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	613b      	str	r3, [r7, #16]
}
 800a7e2:	bf00      	nop
 800a7e4:	e7fe      	b.n	800a7e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a7e6:	4b3e      	ldr	r3, [pc, #248]	; (800a8e0 <xPortStartScheduler+0x120>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a3f      	ldr	r2, [pc, #252]	; (800a8e8 <xPortStartScheduler+0x128>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d10a      	bne.n	800a806 <xPortStartScheduler+0x46>
	__asm volatile
 800a7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	60fb      	str	r3, [r7, #12]
}
 800a802:	bf00      	nop
 800a804:	e7fe      	b.n	800a804 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a806:	4b39      	ldr	r3, [pc, #228]	; (800a8ec <xPortStartScheduler+0x12c>)
 800a808:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	22ff      	movs	r2, #255	; 0xff
 800a816:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a820:	78fb      	ldrb	r3, [r7, #3]
 800a822:	b2db      	uxtb	r3, r3
 800a824:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a828:	b2da      	uxtb	r2, r3
 800a82a:	4b31      	ldr	r3, [pc, #196]	; (800a8f0 <xPortStartScheduler+0x130>)
 800a82c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a82e:	4b31      	ldr	r3, [pc, #196]	; (800a8f4 <xPortStartScheduler+0x134>)
 800a830:	2207      	movs	r2, #7
 800a832:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a834:	e009      	b.n	800a84a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a836:	4b2f      	ldr	r3, [pc, #188]	; (800a8f4 <xPortStartScheduler+0x134>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	3b01      	subs	r3, #1
 800a83c:	4a2d      	ldr	r2, [pc, #180]	; (800a8f4 <xPortStartScheduler+0x134>)
 800a83e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a840:	78fb      	ldrb	r3, [r7, #3]
 800a842:	b2db      	uxtb	r3, r3
 800a844:	005b      	lsls	r3, r3, #1
 800a846:	b2db      	uxtb	r3, r3
 800a848:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a84a:	78fb      	ldrb	r3, [r7, #3]
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a852:	2b80      	cmp	r3, #128	; 0x80
 800a854:	d0ef      	beq.n	800a836 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a856:	4b27      	ldr	r3, [pc, #156]	; (800a8f4 <xPortStartScheduler+0x134>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f1c3 0307 	rsb	r3, r3, #7
 800a85e:	2b04      	cmp	r3, #4
 800a860:	d00a      	beq.n	800a878 <xPortStartScheduler+0xb8>
	__asm volatile
 800a862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a866:	f383 8811 	msr	BASEPRI, r3
 800a86a:	f3bf 8f6f 	isb	sy
 800a86e:	f3bf 8f4f 	dsb	sy
 800a872:	60bb      	str	r3, [r7, #8]
}
 800a874:	bf00      	nop
 800a876:	e7fe      	b.n	800a876 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a878:	4b1e      	ldr	r3, [pc, #120]	; (800a8f4 <xPortStartScheduler+0x134>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	021b      	lsls	r3, r3, #8
 800a87e:	4a1d      	ldr	r2, [pc, #116]	; (800a8f4 <xPortStartScheduler+0x134>)
 800a880:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a882:	4b1c      	ldr	r3, [pc, #112]	; (800a8f4 <xPortStartScheduler+0x134>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a88a:	4a1a      	ldr	r2, [pc, #104]	; (800a8f4 <xPortStartScheduler+0x134>)
 800a88c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	b2da      	uxtb	r2, r3
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a896:	4b18      	ldr	r3, [pc, #96]	; (800a8f8 <xPortStartScheduler+0x138>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4a17      	ldr	r2, [pc, #92]	; (800a8f8 <xPortStartScheduler+0x138>)
 800a89c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a8a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a8a2:	4b15      	ldr	r3, [pc, #84]	; (800a8f8 <xPortStartScheduler+0x138>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a14      	ldr	r2, [pc, #80]	; (800a8f8 <xPortStartScheduler+0x138>)
 800a8a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a8ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a8ae:	f000 f8dd 	bl	800aa6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a8b2:	4b12      	ldr	r3, [pc, #72]	; (800a8fc <xPortStartScheduler+0x13c>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a8b8:	f000 f8fc 	bl	800aab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a8bc:	4b10      	ldr	r3, [pc, #64]	; (800a900 <xPortStartScheduler+0x140>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a0f      	ldr	r2, [pc, #60]	; (800a900 <xPortStartScheduler+0x140>)
 800a8c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a8c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a8c8:	f7ff ff66 	bl	800a798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a8cc:	f7ff f852 	bl	8009974 <vTaskSwitchContext>
	prvTaskExitError();
 800a8d0:	f7ff ff1e 	bl	800a710 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3718      	adds	r7, #24
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	e000ed00 	.word	0xe000ed00
 800a8e4:	410fc271 	.word	0x410fc271
 800a8e8:	410fc270 	.word	0x410fc270
 800a8ec:	e000e400 	.word	0xe000e400
 800a8f0:	2000103c 	.word	0x2000103c
 800a8f4:	20001040 	.word	0x20001040
 800a8f8:	e000ed20 	.word	0xe000ed20
 800a8fc:	2000013c 	.word	0x2000013c
 800a900:	e000ef34 	.word	0xe000ef34

0800a904 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
	__asm volatile
 800a90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90e:	f383 8811 	msr	BASEPRI, r3
 800a912:	f3bf 8f6f 	isb	sy
 800a916:	f3bf 8f4f 	dsb	sy
 800a91a:	607b      	str	r3, [r7, #4]
}
 800a91c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a91e:	4b0f      	ldr	r3, [pc, #60]	; (800a95c <vPortEnterCritical+0x58>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	3301      	adds	r3, #1
 800a924:	4a0d      	ldr	r2, [pc, #52]	; (800a95c <vPortEnterCritical+0x58>)
 800a926:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a928:	4b0c      	ldr	r3, [pc, #48]	; (800a95c <vPortEnterCritical+0x58>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d10f      	bne.n	800a950 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a930:	4b0b      	ldr	r3, [pc, #44]	; (800a960 <vPortEnterCritical+0x5c>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	b2db      	uxtb	r3, r3
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00a      	beq.n	800a950 <vPortEnterCritical+0x4c>
	__asm volatile
 800a93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93e:	f383 8811 	msr	BASEPRI, r3
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	f3bf 8f4f 	dsb	sy
 800a94a:	603b      	str	r3, [r7, #0]
}
 800a94c:	bf00      	nop
 800a94e:	e7fe      	b.n	800a94e <vPortEnterCritical+0x4a>
	}
}
 800a950:	bf00      	nop
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr
 800a95c:	2000013c 	.word	0x2000013c
 800a960:	e000ed04 	.word	0xe000ed04

0800a964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a96a:	4b12      	ldr	r3, [pc, #72]	; (800a9b4 <vPortExitCritical+0x50>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d10a      	bne.n	800a988 <vPortExitCritical+0x24>
	__asm volatile
 800a972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a976:	f383 8811 	msr	BASEPRI, r3
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	607b      	str	r3, [r7, #4]
}
 800a984:	bf00      	nop
 800a986:	e7fe      	b.n	800a986 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a988:	4b0a      	ldr	r3, [pc, #40]	; (800a9b4 <vPortExitCritical+0x50>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	3b01      	subs	r3, #1
 800a98e:	4a09      	ldr	r2, [pc, #36]	; (800a9b4 <vPortExitCritical+0x50>)
 800a990:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a992:	4b08      	ldr	r3, [pc, #32]	; (800a9b4 <vPortExitCritical+0x50>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d105      	bne.n	800a9a6 <vPortExitCritical+0x42>
 800a99a:	2300      	movs	r3, #0
 800a99c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	f383 8811 	msr	BASEPRI, r3
}
 800a9a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a9a6:	bf00      	nop
 800a9a8:	370c      	adds	r7, #12
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	2000013c 	.word	0x2000013c
	...

0800a9c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a9c0:	f3ef 8009 	mrs	r0, PSP
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	4b15      	ldr	r3, [pc, #84]	; (800aa20 <pxCurrentTCBConst>)
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	f01e 0f10 	tst.w	lr, #16
 800a9d0:	bf08      	it	eq
 800a9d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9da:	6010      	str	r0, [r2, #0]
 800a9dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a9e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a9e4:	f380 8811 	msr	BASEPRI, r0
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	f3bf 8f6f 	isb	sy
 800a9f0:	f7fe ffc0 	bl	8009974 <vTaskSwitchContext>
 800a9f4:	f04f 0000 	mov.w	r0, #0
 800a9f8:	f380 8811 	msr	BASEPRI, r0
 800a9fc:	bc09      	pop	{r0, r3}
 800a9fe:	6819      	ldr	r1, [r3, #0]
 800aa00:	6808      	ldr	r0, [r1, #0]
 800aa02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa06:	f01e 0f10 	tst.w	lr, #16
 800aa0a:	bf08      	it	eq
 800aa0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa10:	f380 8809 	msr	PSP, r0
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	4770      	bx	lr
 800aa1a:	bf00      	nop
 800aa1c:	f3af 8000 	nop.w

0800aa20 <pxCurrentTCBConst>:
 800aa20:	20000a10 	.word	0x20000a10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa24:	bf00      	nop
 800aa26:	bf00      	nop

0800aa28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa32:	f383 8811 	msr	BASEPRI, r3
 800aa36:	f3bf 8f6f 	isb	sy
 800aa3a:	f3bf 8f4f 	dsb	sy
 800aa3e:	607b      	str	r3, [r7, #4]
}
 800aa40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa42:	f7fe fedd 	bl	8009800 <xTaskIncrementTick>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d003      	beq.n	800aa54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa4c:	4b06      	ldr	r3, [pc, #24]	; (800aa68 <xPortSysTickHandler+0x40>)
 800aa4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa52:	601a      	str	r2, [r3, #0]
 800aa54:	2300      	movs	r3, #0
 800aa56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	f383 8811 	msr	BASEPRI, r3
}
 800aa5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa60:	bf00      	nop
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	e000ed04 	.word	0xe000ed04

0800aa6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa70:	4b0b      	ldr	r3, [pc, #44]	; (800aaa0 <vPortSetupTimerInterrupt+0x34>)
 800aa72:	2200      	movs	r2, #0
 800aa74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa76:	4b0b      	ldr	r3, [pc, #44]	; (800aaa4 <vPortSetupTimerInterrupt+0x38>)
 800aa78:	2200      	movs	r2, #0
 800aa7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa7c:	4b0a      	ldr	r3, [pc, #40]	; (800aaa8 <vPortSetupTimerInterrupt+0x3c>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a0a      	ldr	r2, [pc, #40]	; (800aaac <vPortSetupTimerInterrupt+0x40>)
 800aa82:	fba2 2303 	umull	r2, r3, r2, r3
 800aa86:	099b      	lsrs	r3, r3, #6
 800aa88:	4a09      	ldr	r2, [pc, #36]	; (800aab0 <vPortSetupTimerInterrupt+0x44>)
 800aa8a:	3b01      	subs	r3, #1
 800aa8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa8e:	4b04      	ldr	r3, [pc, #16]	; (800aaa0 <vPortSetupTimerInterrupt+0x34>)
 800aa90:	2207      	movs	r2, #7
 800aa92:	601a      	str	r2, [r3, #0]
}
 800aa94:	bf00      	nop
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	e000e010 	.word	0xe000e010
 800aaa4:	e000e018 	.word	0xe000e018
 800aaa8:	20000000 	.word	0x20000000
 800aaac:	10624dd3 	.word	0x10624dd3
 800aab0:	e000e014 	.word	0xe000e014

0800aab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aac4 <vPortEnableVFP+0x10>
 800aab8:	6801      	ldr	r1, [r0, #0]
 800aaba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aabe:	6001      	str	r1, [r0, #0]
 800aac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aac2:	bf00      	nop
 800aac4:	e000ed88 	.word	0xe000ed88

0800aac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aace:	f3ef 8305 	mrs	r3, IPSR
 800aad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2b0f      	cmp	r3, #15
 800aad8:	d914      	bls.n	800ab04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aada:	4a17      	ldr	r2, [pc, #92]	; (800ab38 <vPortValidateInterruptPriority+0x70>)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	4413      	add	r3, r2
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aae4:	4b15      	ldr	r3, [pc, #84]	; (800ab3c <vPortValidateInterruptPriority+0x74>)
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	7afa      	ldrb	r2, [r7, #11]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d20a      	bcs.n	800ab04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800aaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf2:	f383 8811 	msr	BASEPRI, r3
 800aaf6:	f3bf 8f6f 	isb	sy
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	607b      	str	r3, [r7, #4]
}
 800ab00:	bf00      	nop
 800ab02:	e7fe      	b.n	800ab02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab04:	4b0e      	ldr	r3, [pc, #56]	; (800ab40 <vPortValidateInterruptPriority+0x78>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab0c:	4b0d      	ldr	r3, [pc, #52]	; (800ab44 <vPortValidateInterruptPriority+0x7c>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d90a      	bls.n	800ab2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ab14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab18:	f383 8811 	msr	BASEPRI, r3
 800ab1c:	f3bf 8f6f 	isb	sy
 800ab20:	f3bf 8f4f 	dsb	sy
 800ab24:	603b      	str	r3, [r7, #0]
}
 800ab26:	bf00      	nop
 800ab28:	e7fe      	b.n	800ab28 <vPortValidateInterruptPriority+0x60>
	}
 800ab2a:	bf00      	nop
 800ab2c:	3714      	adds	r7, #20
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr
 800ab36:	bf00      	nop
 800ab38:	e000e3f0 	.word	0xe000e3f0
 800ab3c:	2000103c 	.word	0x2000103c
 800ab40:	e000ed0c 	.word	0xe000ed0c
 800ab44:	20001040 	.word	0x20001040

0800ab48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b08a      	sub	sp, #40	; 0x28
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab50:	2300      	movs	r3, #0
 800ab52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab54:	f7fe fd98 	bl	8009688 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab58:	4b5b      	ldr	r3, [pc, #364]	; (800acc8 <pvPortMalloc+0x180>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d101      	bne.n	800ab64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab60:	f000 f920 	bl	800ada4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab64:	4b59      	ldr	r3, [pc, #356]	; (800accc <pvPortMalloc+0x184>)
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4013      	ands	r3, r2
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f040 8093 	bne.w	800ac98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d01d      	beq.n	800abb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ab78:	2208      	movs	r2, #8
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f003 0307 	and.w	r3, r3, #7
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d014      	beq.n	800abb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f023 0307 	bic.w	r3, r3, #7
 800ab90:	3308      	adds	r3, #8
 800ab92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f003 0307 	and.w	r3, r3, #7
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00a      	beq.n	800abb4 <pvPortMalloc+0x6c>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	617b      	str	r3, [r7, #20]
}
 800abb0:	bf00      	nop
 800abb2:	e7fe      	b.n	800abb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d06e      	beq.n	800ac98 <pvPortMalloc+0x150>
 800abba:	4b45      	ldr	r3, [pc, #276]	; (800acd0 <pvPortMalloc+0x188>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d869      	bhi.n	800ac98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800abc4:	4b43      	ldr	r3, [pc, #268]	; (800acd4 <pvPortMalloc+0x18c>)
 800abc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800abc8:	4b42      	ldr	r3, [pc, #264]	; (800acd4 <pvPortMalloc+0x18c>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abce:	e004      	b.n	800abda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800abd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800abd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d903      	bls.n	800abec <pvPortMalloc+0xa4>
 800abe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d1f1      	bne.n	800abd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800abec:	4b36      	ldr	r3, [pc, #216]	; (800acc8 <pvPortMalloc+0x180>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d050      	beq.n	800ac98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800abf6:	6a3b      	ldr	r3, [r7, #32]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	2208      	movs	r2, #8
 800abfc:	4413      	add	r3, r2
 800abfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	6a3b      	ldr	r3, [r7, #32]
 800ac06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0a:	685a      	ldr	r2, [r3, #4]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	1ad2      	subs	r2, r2, r3
 800ac10:	2308      	movs	r3, #8
 800ac12:	005b      	lsls	r3, r3, #1
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d91f      	bls.n	800ac58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	f003 0307 	and.w	r3, r3, #7
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d00a      	beq.n	800ac40 <pvPortMalloc+0xf8>
	__asm volatile
 800ac2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2e:	f383 8811 	msr	BASEPRI, r3
 800ac32:	f3bf 8f6f 	isb	sy
 800ac36:	f3bf 8f4f 	dsb	sy
 800ac3a:	613b      	str	r3, [r7, #16]
}
 800ac3c:	bf00      	nop
 800ac3e:	e7fe      	b.n	800ac3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac42:	685a      	ldr	r2, [r3, #4]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	1ad2      	subs	r2, r2, r3
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac52:	69b8      	ldr	r0, [r7, #24]
 800ac54:	f000 f908 	bl	800ae68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac58:	4b1d      	ldr	r3, [pc, #116]	; (800acd0 <pvPortMalloc+0x188>)
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	1ad3      	subs	r3, r2, r3
 800ac62:	4a1b      	ldr	r2, [pc, #108]	; (800acd0 <pvPortMalloc+0x188>)
 800ac64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac66:	4b1a      	ldr	r3, [pc, #104]	; (800acd0 <pvPortMalloc+0x188>)
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	4b1b      	ldr	r3, [pc, #108]	; (800acd8 <pvPortMalloc+0x190>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d203      	bcs.n	800ac7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac72:	4b17      	ldr	r3, [pc, #92]	; (800acd0 <pvPortMalloc+0x188>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a18      	ldr	r2, [pc, #96]	; (800acd8 <pvPortMalloc+0x190>)
 800ac78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7c:	685a      	ldr	r2, [r3, #4]
 800ac7e:	4b13      	ldr	r3, [pc, #76]	; (800accc <pvPortMalloc+0x184>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	431a      	orrs	r2, r3
 800ac84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ac8e:	4b13      	ldr	r3, [pc, #76]	; (800acdc <pvPortMalloc+0x194>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	3301      	adds	r3, #1
 800ac94:	4a11      	ldr	r2, [pc, #68]	; (800acdc <pvPortMalloc+0x194>)
 800ac96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac98:	f7fe fd04 	bl	80096a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac9c:	69fb      	ldr	r3, [r7, #28]
 800ac9e:	f003 0307 	and.w	r3, r3, #7
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00a      	beq.n	800acbc <pvPortMalloc+0x174>
	__asm volatile
 800aca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acaa:	f383 8811 	msr	BASEPRI, r3
 800acae:	f3bf 8f6f 	isb	sy
 800acb2:	f3bf 8f4f 	dsb	sy
 800acb6:	60fb      	str	r3, [r7, #12]
}
 800acb8:	bf00      	nop
 800acba:	e7fe      	b.n	800acba <pvPortMalloc+0x172>
	return pvReturn;
 800acbc:	69fb      	ldr	r3, [r7, #28]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3728      	adds	r7, #40	; 0x28
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	20001c04 	.word	0x20001c04
 800accc:	20001c18 	.word	0x20001c18
 800acd0:	20001c08 	.word	0x20001c08
 800acd4:	20001bfc 	.word	0x20001bfc
 800acd8:	20001c0c 	.word	0x20001c0c
 800acdc:	20001c10 	.word	0x20001c10

0800ace0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d04d      	beq.n	800ad8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800acf2:	2308      	movs	r3, #8
 800acf4:	425b      	negs	r3, r3
 800acf6:	697a      	ldr	r2, [r7, #20]
 800acf8:	4413      	add	r3, r2
 800acfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	685a      	ldr	r2, [r3, #4]
 800ad04:	4b24      	ldr	r3, [pc, #144]	; (800ad98 <vPortFree+0xb8>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4013      	ands	r3, r2
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d10a      	bne.n	800ad24 <vPortFree+0x44>
	__asm volatile
 800ad0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	60fb      	str	r3, [r7, #12]
}
 800ad20:	bf00      	nop
 800ad22:	e7fe      	b.n	800ad22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00a      	beq.n	800ad42 <vPortFree+0x62>
	__asm volatile
 800ad2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad30:	f383 8811 	msr	BASEPRI, r3
 800ad34:	f3bf 8f6f 	isb	sy
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	60bb      	str	r3, [r7, #8]
}
 800ad3e:	bf00      	nop
 800ad40:	e7fe      	b.n	800ad40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	685a      	ldr	r2, [r3, #4]
 800ad46:	4b14      	ldr	r3, [pc, #80]	; (800ad98 <vPortFree+0xb8>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4013      	ands	r3, r2
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d01e      	beq.n	800ad8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d11a      	bne.n	800ad8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	685a      	ldr	r2, [r3, #4]
 800ad5c:	4b0e      	ldr	r3, [pc, #56]	; (800ad98 <vPortFree+0xb8>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	43db      	mvns	r3, r3
 800ad62:	401a      	ands	r2, r3
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad68:	f7fe fc8e 	bl	8009688 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	685a      	ldr	r2, [r3, #4]
 800ad70:	4b0a      	ldr	r3, [pc, #40]	; (800ad9c <vPortFree+0xbc>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4413      	add	r3, r2
 800ad76:	4a09      	ldr	r2, [pc, #36]	; (800ad9c <vPortFree+0xbc>)
 800ad78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad7a:	6938      	ldr	r0, [r7, #16]
 800ad7c:	f000 f874 	bl	800ae68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ad80:	4b07      	ldr	r3, [pc, #28]	; (800ada0 <vPortFree+0xc0>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	3301      	adds	r3, #1
 800ad86:	4a06      	ldr	r2, [pc, #24]	; (800ada0 <vPortFree+0xc0>)
 800ad88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ad8a:	f7fe fc8b 	bl	80096a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad8e:	bf00      	nop
 800ad90:	3718      	adds	r7, #24
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop
 800ad98:	20001c18 	.word	0x20001c18
 800ad9c:	20001c08 	.word	0x20001c08
 800ada0:	20001c14 	.word	0x20001c14

0800ada4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800adaa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800adae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800adb0:	4b27      	ldr	r3, [pc, #156]	; (800ae50 <prvHeapInit+0xac>)
 800adb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f003 0307 	and.w	r3, r3, #7
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00c      	beq.n	800add8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	3307      	adds	r3, #7
 800adc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f023 0307 	bic.w	r3, r3, #7
 800adca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800adcc:	68ba      	ldr	r2, [r7, #8]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	1ad3      	subs	r3, r2, r3
 800add2:	4a1f      	ldr	r2, [pc, #124]	; (800ae50 <prvHeapInit+0xac>)
 800add4:	4413      	add	r3, r2
 800add6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800addc:	4a1d      	ldr	r2, [pc, #116]	; (800ae54 <prvHeapInit+0xb0>)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ade2:	4b1c      	ldr	r3, [pc, #112]	; (800ae54 <prvHeapInit+0xb0>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	68ba      	ldr	r2, [r7, #8]
 800adec:	4413      	add	r3, r2
 800adee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800adf0:	2208      	movs	r2, #8
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	1a9b      	subs	r3, r3, r2
 800adf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f023 0307 	bic.w	r3, r3, #7
 800adfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	4a15      	ldr	r2, [pc, #84]	; (800ae58 <prvHeapInit+0xb4>)
 800ae04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae06:	4b14      	ldr	r3, [pc, #80]	; (800ae58 <prvHeapInit+0xb4>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae0e:	4b12      	ldr	r3, [pc, #72]	; (800ae58 <prvHeapInit+0xb4>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2200      	movs	r2, #0
 800ae14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	1ad2      	subs	r2, r2, r3
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae24:	4b0c      	ldr	r3, [pc, #48]	; (800ae58 <prvHeapInit+0xb4>)
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	4a0a      	ldr	r2, [pc, #40]	; (800ae5c <prvHeapInit+0xb8>)
 800ae32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	4a09      	ldr	r2, [pc, #36]	; (800ae60 <prvHeapInit+0xbc>)
 800ae3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae3c:	4b09      	ldr	r3, [pc, #36]	; (800ae64 <prvHeapInit+0xc0>)
 800ae3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ae42:	601a      	str	r2, [r3, #0]
}
 800ae44:	bf00      	nop
 800ae46:	3714      	adds	r7, #20
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr
 800ae50:	20001044 	.word	0x20001044
 800ae54:	20001bfc 	.word	0x20001bfc
 800ae58:	20001c04 	.word	0x20001c04
 800ae5c:	20001c0c 	.word	0x20001c0c
 800ae60:	20001c08 	.word	0x20001c08
 800ae64:	20001c18 	.word	0x20001c18

0800ae68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae70:	4b28      	ldr	r3, [pc, #160]	; (800af14 <prvInsertBlockIntoFreeList+0xac>)
 800ae72:	60fb      	str	r3, [r7, #12]
 800ae74:	e002      	b.n	800ae7c <prvInsertBlockIntoFreeList+0x14>
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	60fb      	str	r3, [r7, #12]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d8f7      	bhi.n	800ae76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	68ba      	ldr	r2, [r7, #8]
 800ae90:	4413      	add	r3, r2
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d108      	bne.n	800aeaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	685a      	ldr	r2, [r3, #4]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	441a      	add	r2, r3
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	68ba      	ldr	r2, [r7, #8]
 800aeb4:	441a      	add	r2, r3
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d118      	bne.n	800aef0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	4b15      	ldr	r3, [pc, #84]	; (800af18 <prvInsertBlockIntoFreeList+0xb0>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d00d      	beq.n	800aee6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	685a      	ldr	r2, [r3, #4]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	441a      	add	r2, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	601a      	str	r2, [r3, #0]
 800aee4:	e008      	b.n	800aef8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aee6:	4b0c      	ldr	r3, [pc, #48]	; (800af18 <prvInsertBlockIntoFreeList+0xb0>)
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	601a      	str	r2, [r3, #0]
 800aeee:	e003      	b.n	800aef8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d002      	beq.n	800af06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af06:	bf00      	nop
 800af08:	3714      	adds	r7, #20
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	20001bfc 	.word	0x20001bfc
 800af18:	20001c04 	.word	0x20001c04

0800af1c <__errno>:
 800af1c:	4b01      	ldr	r3, [pc, #4]	; (800af24 <__errno+0x8>)
 800af1e:	6818      	ldr	r0, [r3, #0]
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	20000140 	.word	0x20000140

0800af28 <__libc_init_array>:
 800af28:	b570      	push	{r4, r5, r6, lr}
 800af2a:	4d0d      	ldr	r5, [pc, #52]	; (800af60 <__libc_init_array+0x38>)
 800af2c:	4c0d      	ldr	r4, [pc, #52]	; (800af64 <__libc_init_array+0x3c>)
 800af2e:	1b64      	subs	r4, r4, r5
 800af30:	10a4      	asrs	r4, r4, #2
 800af32:	2600      	movs	r6, #0
 800af34:	42a6      	cmp	r6, r4
 800af36:	d109      	bne.n	800af4c <__libc_init_array+0x24>
 800af38:	4d0b      	ldr	r5, [pc, #44]	; (800af68 <__libc_init_array+0x40>)
 800af3a:	4c0c      	ldr	r4, [pc, #48]	; (800af6c <__libc_init_array+0x44>)
 800af3c:	f004 fc5c 	bl	800f7f8 <_init>
 800af40:	1b64      	subs	r4, r4, r5
 800af42:	10a4      	asrs	r4, r4, #2
 800af44:	2600      	movs	r6, #0
 800af46:	42a6      	cmp	r6, r4
 800af48:	d105      	bne.n	800af56 <__libc_init_array+0x2e>
 800af4a:	bd70      	pop	{r4, r5, r6, pc}
 800af4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800af50:	4798      	blx	r3
 800af52:	3601      	adds	r6, #1
 800af54:	e7ee      	b.n	800af34 <__libc_init_array+0xc>
 800af56:	f855 3b04 	ldr.w	r3, [r5], #4
 800af5a:	4798      	blx	r3
 800af5c:	3601      	adds	r6, #1
 800af5e:	e7f2      	b.n	800af46 <__libc_init_array+0x1e>
 800af60:	0800fe84 	.word	0x0800fe84
 800af64:	0800fe84 	.word	0x0800fe84
 800af68:	0800fe84 	.word	0x0800fe84
 800af6c:	0800fe88 	.word	0x0800fe88

0800af70 <memcpy>:
 800af70:	440a      	add	r2, r1
 800af72:	4291      	cmp	r1, r2
 800af74:	f100 33ff 	add.w	r3, r0, #4294967295
 800af78:	d100      	bne.n	800af7c <memcpy+0xc>
 800af7a:	4770      	bx	lr
 800af7c:	b510      	push	{r4, lr}
 800af7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af86:	4291      	cmp	r1, r2
 800af88:	d1f9      	bne.n	800af7e <memcpy+0xe>
 800af8a:	bd10      	pop	{r4, pc}

0800af8c <memset>:
 800af8c:	4402      	add	r2, r0
 800af8e:	4603      	mov	r3, r0
 800af90:	4293      	cmp	r3, r2
 800af92:	d100      	bne.n	800af96 <memset+0xa>
 800af94:	4770      	bx	lr
 800af96:	f803 1b01 	strb.w	r1, [r3], #1
 800af9a:	e7f9      	b.n	800af90 <memset+0x4>

0800af9c <__cvt>:
 800af9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afa0:	ec55 4b10 	vmov	r4, r5, d0
 800afa4:	2d00      	cmp	r5, #0
 800afa6:	460e      	mov	r6, r1
 800afa8:	4619      	mov	r1, r3
 800afaa:	462b      	mov	r3, r5
 800afac:	bfbb      	ittet	lt
 800afae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800afb2:	461d      	movlt	r5, r3
 800afb4:	2300      	movge	r3, #0
 800afb6:	232d      	movlt	r3, #45	; 0x2d
 800afb8:	700b      	strb	r3, [r1, #0]
 800afba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800afc0:	4691      	mov	r9, r2
 800afc2:	f023 0820 	bic.w	r8, r3, #32
 800afc6:	bfbc      	itt	lt
 800afc8:	4622      	movlt	r2, r4
 800afca:	4614      	movlt	r4, r2
 800afcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800afd0:	d005      	beq.n	800afde <__cvt+0x42>
 800afd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800afd6:	d100      	bne.n	800afda <__cvt+0x3e>
 800afd8:	3601      	adds	r6, #1
 800afda:	2102      	movs	r1, #2
 800afdc:	e000      	b.n	800afe0 <__cvt+0x44>
 800afde:	2103      	movs	r1, #3
 800afe0:	ab03      	add	r3, sp, #12
 800afe2:	9301      	str	r3, [sp, #4]
 800afe4:	ab02      	add	r3, sp, #8
 800afe6:	9300      	str	r3, [sp, #0]
 800afe8:	ec45 4b10 	vmov	d0, r4, r5
 800afec:	4653      	mov	r3, sl
 800afee:	4632      	mov	r2, r6
 800aff0:	f001 fdca 	bl	800cb88 <_dtoa_r>
 800aff4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aff8:	4607      	mov	r7, r0
 800affa:	d102      	bne.n	800b002 <__cvt+0x66>
 800affc:	f019 0f01 	tst.w	r9, #1
 800b000:	d022      	beq.n	800b048 <__cvt+0xac>
 800b002:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b006:	eb07 0906 	add.w	r9, r7, r6
 800b00a:	d110      	bne.n	800b02e <__cvt+0x92>
 800b00c:	783b      	ldrb	r3, [r7, #0]
 800b00e:	2b30      	cmp	r3, #48	; 0x30
 800b010:	d10a      	bne.n	800b028 <__cvt+0x8c>
 800b012:	2200      	movs	r2, #0
 800b014:	2300      	movs	r3, #0
 800b016:	4620      	mov	r0, r4
 800b018:	4629      	mov	r1, r5
 800b01a:	f7f5 fd6d 	bl	8000af8 <__aeabi_dcmpeq>
 800b01e:	b918      	cbnz	r0, 800b028 <__cvt+0x8c>
 800b020:	f1c6 0601 	rsb	r6, r6, #1
 800b024:	f8ca 6000 	str.w	r6, [sl]
 800b028:	f8da 3000 	ldr.w	r3, [sl]
 800b02c:	4499      	add	r9, r3
 800b02e:	2200      	movs	r2, #0
 800b030:	2300      	movs	r3, #0
 800b032:	4620      	mov	r0, r4
 800b034:	4629      	mov	r1, r5
 800b036:	f7f5 fd5f 	bl	8000af8 <__aeabi_dcmpeq>
 800b03a:	b108      	cbz	r0, 800b040 <__cvt+0xa4>
 800b03c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b040:	2230      	movs	r2, #48	; 0x30
 800b042:	9b03      	ldr	r3, [sp, #12]
 800b044:	454b      	cmp	r3, r9
 800b046:	d307      	bcc.n	800b058 <__cvt+0xbc>
 800b048:	9b03      	ldr	r3, [sp, #12]
 800b04a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b04c:	1bdb      	subs	r3, r3, r7
 800b04e:	4638      	mov	r0, r7
 800b050:	6013      	str	r3, [r2, #0]
 800b052:	b004      	add	sp, #16
 800b054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b058:	1c59      	adds	r1, r3, #1
 800b05a:	9103      	str	r1, [sp, #12]
 800b05c:	701a      	strb	r2, [r3, #0]
 800b05e:	e7f0      	b.n	800b042 <__cvt+0xa6>

0800b060 <__exponent>:
 800b060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b062:	4603      	mov	r3, r0
 800b064:	2900      	cmp	r1, #0
 800b066:	bfb8      	it	lt
 800b068:	4249      	neglt	r1, r1
 800b06a:	f803 2b02 	strb.w	r2, [r3], #2
 800b06e:	bfb4      	ite	lt
 800b070:	222d      	movlt	r2, #45	; 0x2d
 800b072:	222b      	movge	r2, #43	; 0x2b
 800b074:	2909      	cmp	r1, #9
 800b076:	7042      	strb	r2, [r0, #1]
 800b078:	dd2a      	ble.n	800b0d0 <__exponent+0x70>
 800b07a:	f10d 0407 	add.w	r4, sp, #7
 800b07e:	46a4      	mov	ip, r4
 800b080:	270a      	movs	r7, #10
 800b082:	46a6      	mov	lr, r4
 800b084:	460a      	mov	r2, r1
 800b086:	fb91 f6f7 	sdiv	r6, r1, r7
 800b08a:	fb07 1516 	mls	r5, r7, r6, r1
 800b08e:	3530      	adds	r5, #48	; 0x30
 800b090:	2a63      	cmp	r2, #99	; 0x63
 800b092:	f104 34ff 	add.w	r4, r4, #4294967295
 800b096:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b09a:	4631      	mov	r1, r6
 800b09c:	dcf1      	bgt.n	800b082 <__exponent+0x22>
 800b09e:	3130      	adds	r1, #48	; 0x30
 800b0a0:	f1ae 0502 	sub.w	r5, lr, #2
 800b0a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b0a8:	1c44      	adds	r4, r0, #1
 800b0aa:	4629      	mov	r1, r5
 800b0ac:	4561      	cmp	r1, ip
 800b0ae:	d30a      	bcc.n	800b0c6 <__exponent+0x66>
 800b0b0:	f10d 0209 	add.w	r2, sp, #9
 800b0b4:	eba2 020e 	sub.w	r2, r2, lr
 800b0b8:	4565      	cmp	r5, ip
 800b0ba:	bf88      	it	hi
 800b0bc:	2200      	movhi	r2, #0
 800b0be:	4413      	add	r3, r2
 800b0c0:	1a18      	subs	r0, r3, r0
 800b0c2:	b003      	add	sp, #12
 800b0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b0ce:	e7ed      	b.n	800b0ac <__exponent+0x4c>
 800b0d0:	2330      	movs	r3, #48	; 0x30
 800b0d2:	3130      	adds	r1, #48	; 0x30
 800b0d4:	7083      	strb	r3, [r0, #2]
 800b0d6:	70c1      	strb	r1, [r0, #3]
 800b0d8:	1d03      	adds	r3, r0, #4
 800b0da:	e7f1      	b.n	800b0c0 <__exponent+0x60>

0800b0dc <_printf_float>:
 800b0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e0:	ed2d 8b02 	vpush	{d8}
 800b0e4:	b08d      	sub	sp, #52	; 0x34
 800b0e6:	460c      	mov	r4, r1
 800b0e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b0ec:	4616      	mov	r6, r2
 800b0ee:	461f      	mov	r7, r3
 800b0f0:	4605      	mov	r5, r0
 800b0f2:	f002 fea5 	bl	800de40 <_localeconv_r>
 800b0f6:	f8d0 a000 	ldr.w	sl, [r0]
 800b0fa:	4650      	mov	r0, sl
 800b0fc:	f7f5 f880 	bl	8000200 <strlen>
 800b100:	2300      	movs	r3, #0
 800b102:	930a      	str	r3, [sp, #40]	; 0x28
 800b104:	6823      	ldr	r3, [r4, #0]
 800b106:	9305      	str	r3, [sp, #20]
 800b108:	f8d8 3000 	ldr.w	r3, [r8]
 800b10c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b110:	3307      	adds	r3, #7
 800b112:	f023 0307 	bic.w	r3, r3, #7
 800b116:	f103 0208 	add.w	r2, r3, #8
 800b11a:	f8c8 2000 	str.w	r2, [r8]
 800b11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b122:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b126:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b12a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b12e:	9307      	str	r3, [sp, #28]
 800b130:	f8cd 8018 	str.w	r8, [sp, #24]
 800b134:	ee08 0a10 	vmov	s16, r0
 800b138:	4b9f      	ldr	r3, [pc, #636]	; (800b3b8 <_printf_float+0x2dc>)
 800b13a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b13e:	f04f 32ff 	mov.w	r2, #4294967295
 800b142:	f7f5 fd0b 	bl	8000b5c <__aeabi_dcmpun>
 800b146:	bb88      	cbnz	r0, 800b1ac <_printf_float+0xd0>
 800b148:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b14c:	4b9a      	ldr	r3, [pc, #616]	; (800b3b8 <_printf_float+0x2dc>)
 800b14e:	f04f 32ff 	mov.w	r2, #4294967295
 800b152:	f7f5 fce5 	bl	8000b20 <__aeabi_dcmple>
 800b156:	bb48      	cbnz	r0, 800b1ac <_printf_float+0xd0>
 800b158:	2200      	movs	r2, #0
 800b15a:	2300      	movs	r3, #0
 800b15c:	4640      	mov	r0, r8
 800b15e:	4649      	mov	r1, r9
 800b160:	f7f5 fcd4 	bl	8000b0c <__aeabi_dcmplt>
 800b164:	b110      	cbz	r0, 800b16c <_printf_float+0x90>
 800b166:	232d      	movs	r3, #45	; 0x2d
 800b168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b16c:	4b93      	ldr	r3, [pc, #588]	; (800b3bc <_printf_float+0x2e0>)
 800b16e:	4894      	ldr	r0, [pc, #592]	; (800b3c0 <_printf_float+0x2e4>)
 800b170:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b174:	bf94      	ite	ls
 800b176:	4698      	movls	r8, r3
 800b178:	4680      	movhi	r8, r0
 800b17a:	2303      	movs	r3, #3
 800b17c:	6123      	str	r3, [r4, #16]
 800b17e:	9b05      	ldr	r3, [sp, #20]
 800b180:	f023 0204 	bic.w	r2, r3, #4
 800b184:	6022      	str	r2, [r4, #0]
 800b186:	f04f 0900 	mov.w	r9, #0
 800b18a:	9700      	str	r7, [sp, #0]
 800b18c:	4633      	mov	r3, r6
 800b18e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b190:	4621      	mov	r1, r4
 800b192:	4628      	mov	r0, r5
 800b194:	f000 f9d8 	bl	800b548 <_printf_common>
 800b198:	3001      	adds	r0, #1
 800b19a:	f040 8090 	bne.w	800b2be <_printf_float+0x1e2>
 800b19e:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a2:	b00d      	add	sp, #52	; 0x34
 800b1a4:	ecbd 8b02 	vpop	{d8}
 800b1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ac:	4642      	mov	r2, r8
 800b1ae:	464b      	mov	r3, r9
 800b1b0:	4640      	mov	r0, r8
 800b1b2:	4649      	mov	r1, r9
 800b1b4:	f7f5 fcd2 	bl	8000b5c <__aeabi_dcmpun>
 800b1b8:	b140      	cbz	r0, 800b1cc <_printf_float+0xf0>
 800b1ba:	464b      	mov	r3, r9
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	bfbc      	itt	lt
 800b1c0:	232d      	movlt	r3, #45	; 0x2d
 800b1c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b1c6:	487f      	ldr	r0, [pc, #508]	; (800b3c4 <_printf_float+0x2e8>)
 800b1c8:	4b7f      	ldr	r3, [pc, #508]	; (800b3c8 <_printf_float+0x2ec>)
 800b1ca:	e7d1      	b.n	800b170 <_printf_float+0x94>
 800b1cc:	6863      	ldr	r3, [r4, #4]
 800b1ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b1d2:	9206      	str	r2, [sp, #24]
 800b1d4:	1c5a      	adds	r2, r3, #1
 800b1d6:	d13f      	bne.n	800b258 <_printf_float+0x17c>
 800b1d8:	2306      	movs	r3, #6
 800b1da:	6063      	str	r3, [r4, #4]
 800b1dc:	9b05      	ldr	r3, [sp, #20]
 800b1de:	6861      	ldr	r1, [r4, #4]
 800b1e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	9303      	str	r3, [sp, #12]
 800b1e8:	ab0a      	add	r3, sp, #40	; 0x28
 800b1ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b1ee:	ab09      	add	r3, sp, #36	; 0x24
 800b1f0:	ec49 8b10 	vmov	d0, r8, r9
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	6022      	str	r2, [r4, #0]
 800b1f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	f7ff fecd 	bl	800af9c <__cvt>
 800b202:	9b06      	ldr	r3, [sp, #24]
 800b204:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b206:	2b47      	cmp	r3, #71	; 0x47
 800b208:	4680      	mov	r8, r0
 800b20a:	d108      	bne.n	800b21e <_printf_float+0x142>
 800b20c:	1cc8      	adds	r0, r1, #3
 800b20e:	db02      	blt.n	800b216 <_printf_float+0x13a>
 800b210:	6863      	ldr	r3, [r4, #4]
 800b212:	4299      	cmp	r1, r3
 800b214:	dd41      	ble.n	800b29a <_printf_float+0x1be>
 800b216:	f1ab 0b02 	sub.w	fp, fp, #2
 800b21a:	fa5f fb8b 	uxtb.w	fp, fp
 800b21e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b222:	d820      	bhi.n	800b266 <_printf_float+0x18a>
 800b224:	3901      	subs	r1, #1
 800b226:	465a      	mov	r2, fp
 800b228:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b22c:	9109      	str	r1, [sp, #36]	; 0x24
 800b22e:	f7ff ff17 	bl	800b060 <__exponent>
 800b232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b234:	1813      	adds	r3, r2, r0
 800b236:	2a01      	cmp	r2, #1
 800b238:	4681      	mov	r9, r0
 800b23a:	6123      	str	r3, [r4, #16]
 800b23c:	dc02      	bgt.n	800b244 <_printf_float+0x168>
 800b23e:	6822      	ldr	r2, [r4, #0]
 800b240:	07d2      	lsls	r2, r2, #31
 800b242:	d501      	bpl.n	800b248 <_printf_float+0x16c>
 800b244:	3301      	adds	r3, #1
 800b246:	6123      	str	r3, [r4, #16]
 800b248:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d09c      	beq.n	800b18a <_printf_float+0xae>
 800b250:	232d      	movs	r3, #45	; 0x2d
 800b252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b256:	e798      	b.n	800b18a <_printf_float+0xae>
 800b258:	9a06      	ldr	r2, [sp, #24]
 800b25a:	2a47      	cmp	r2, #71	; 0x47
 800b25c:	d1be      	bne.n	800b1dc <_printf_float+0x100>
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1bc      	bne.n	800b1dc <_printf_float+0x100>
 800b262:	2301      	movs	r3, #1
 800b264:	e7b9      	b.n	800b1da <_printf_float+0xfe>
 800b266:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b26a:	d118      	bne.n	800b29e <_printf_float+0x1c2>
 800b26c:	2900      	cmp	r1, #0
 800b26e:	6863      	ldr	r3, [r4, #4]
 800b270:	dd0b      	ble.n	800b28a <_printf_float+0x1ae>
 800b272:	6121      	str	r1, [r4, #16]
 800b274:	b913      	cbnz	r3, 800b27c <_printf_float+0x1a0>
 800b276:	6822      	ldr	r2, [r4, #0]
 800b278:	07d0      	lsls	r0, r2, #31
 800b27a:	d502      	bpl.n	800b282 <_printf_float+0x1a6>
 800b27c:	3301      	adds	r3, #1
 800b27e:	440b      	add	r3, r1
 800b280:	6123      	str	r3, [r4, #16]
 800b282:	65a1      	str	r1, [r4, #88]	; 0x58
 800b284:	f04f 0900 	mov.w	r9, #0
 800b288:	e7de      	b.n	800b248 <_printf_float+0x16c>
 800b28a:	b913      	cbnz	r3, 800b292 <_printf_float+0x1b6>
 800b28c:	6822      	ldr	r2, [r4, #0]
 800b28e:	07d2      	lsls	r2, r2, #31
 800b290:	d501      	bpl.n	800b296 <_printf_float+0x1ba>
 800b292:	3302      	adds	r3, #2
 800b294:	e7f4      	b.n	800b280 <_printf_float+0x1a4>
 800b296:	2301      	movs	r3, #1
 800b298:	e7f2      	b.n	800b280 <_printf_float+0x1a4>
 800b29a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b29e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2a0:	4299      	cmp	r1, r3
 800b2a2:	db05      	blt.n	800b2b0 <_printf_float+0x1d4>
 800b2a4:	6823      	ldr	r3, [r4, #0]
 800b2a6:	6121      	str	r1, [r4, #16]
 800b2a8:	07d8      	lsls	r0, r3, #31
 800b2aa:	d5ea      	bpl.n	800b282 <_printf_float+0x1a6>
 800b2ac:	1c4b      	adds	r3, r1, #1
 800b2ae:	e7e7      	b.n	800b280 <_printf_float+0x1a4>
 800b2b0:	2900      	cmp	r1, #0
 800b2b2:	bfd4      	ite	le
 800b2b4:	f1c1 0202 	rsble	r2, r1, #2
 800b2b8:	2201      	movgt	r2, #1
 800b2ba:	4413      	add	r3, r2
 800b2bc:	e7e0      	b.n	800b280 <_printf_float+0x1a4>
 800b2be:	6823      	ldr	r3, [r4, #0]
 800b2c0:	055a      	lsls	r2, r3, #21
 800b2c2:	d407      	bmi.n	800b2d4 <_printf_float+0x1f8>
 800b2c4:	6923      	ldr	r3, [r4, #16]
 800b2c6:	4642      	mov	r2, r8
 800b2c8:	4631      	mov	r1, r6
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	47b8      	blx	r7
 800b2ce:	3001      	adds	r0, #1
 800b2d0:	d12c      	bne.n	800b32c <_printf_float+0x250>
 800b2d2:	e764      	b.n	800b19e <_printf_float+0xc2>
 800b2d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b2d8:	f240 80e0 	bls.w	800b49c <_printf_float+0x3c0>
 800b2dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	f7f5 fc08 	bl	8000af8 <__aeabi_dcmpeq>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	d034      	beq.n	800b356 <_printf_float+0x27a>
 800b2ec:	4a37      	ldr	r2, [pc, #220]	; (800b3cc <_printf_float+0x2f0>)
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	4631      	mov	r1, r6
 800b2f2:	4628      	mov	r0, r5
 800b2f4:	47b8      	blx	r7
 800b2f6:	3001      	adds	r0, #1
 800b2f8:	f43f af51 	beq.w	800b19e <_printf_float+0xc2>
 800b2fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b300:	429a      	cmp	r2, r3
 800b302:	db02      	blt.n	800b30a <_printf_float+0x22e>
 800b304:	6823      	ldr	r3, [r4, #0]
 800b306:	07d8      	lsls	r0, r3, #31
 800b308:	d510      	bpl.n	800b32c <_printf_float+0x250>
 800b30a:	ee18 3a10 	vmov	r3, s16
 800b30e:	4652      	mov	r2, sl
 800b310:	4631      	mov	r1, r6
 800b312:	4628      	mov	r0, r5
 800b314:	47b8      	blx	r7
 800b316:	3001      	adds	r0, #1
 800b318:	f43f af41 	beq.w	800b19e <_printf_float+0xc2>
 800b31c:	f04f 0800 	mov.w	r8, #0
 800b320:	f104 091a 	add.w	r9, r4, #26
 800b324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b326:	3b01      	subs	r3, #1
 800b328:	4543      	cmp	r3, r8
 800b32a:	dc09      	bgt.n	800b340 <_printf_float+0x264>
 800b32c:	6823      	ldr	r3, [r4, #0]
 800b32e:	079b      	lsls	r3, r3, #30
 800b330:	f100 8105 	bmi.w	800b53e <_printf_float+0x462>
 800b334:	68e0      	ldr	r0, [r4, #12]
 800b336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b338:	4298      	cmp	r0, r3
 800b33a:	bfb8      	it	lt
 800b33c:	4618      	movlt	r0, r3
 800b33e:	e730      	b.n	800b1a2 <_printf_float+0xc6>
 800b340:	2301      	movs	r3, #1
 800b342:	464a      	mov	r2, r9
 800b344:	4631      	mov	r1, r6
 800b346:	4628      	mov	r0, r5
 800b348:	47b8      	blx	r7
 800b34a:	3001      	adds	r0, #1
 800b34c:	f43f af27 	beq.w	800b19e <_printf_float+0xc2>
 800b350:	f108 0801 	add.w	r8, r8, #1
 800b354:	e7e6      	b.n	800b324 <_printf_float+0x248>
 800b356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b358:	2b00      	cmp	r3, #0
 800b35a:	dc39      	bgt.n	800b3d0 <_printf_float+0x2f4>
 800b35c:	4a1b      	ldr	r2, [pc, #108]	; (800b3cc <_printf_float+0x2f0>)
 800b35e:	2301      	movs	r3, #1
 800b360:	4631      	mov	r1, r6
 800b362:	4628      	mov	r0, r5
 800b364:	47b8      	blx	r7
 800b366:	3001      	adds	r0, #1
 800b368:	f43f af19 	beq.w	800b19e <_printf_float+0xc2>
 800b36c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b370:	4313      	orrs	r3, r2
 800b372:	d102      	bne.n	800b37a <_printf_float+0x29e>
 800b374:	6823      	ldr	r3, [r4, #0]
 800b376:	07d9      	lsls	r1, r3, #31
 800b378:	d5d8      	bpl.n	800b32c <_printf_float+0x250>
 800b37a:	ee18 3a10 	vmov	r3, s16
 800b37e:	4652      	mov	r2, sl
 800b380:	4631      	mov	r1, r6
 800b382:	4628      	mov	r0, r5
 800b384:	47b8      	blx	r7
 800b386:	3001      	adds	r0, #1
 800b388:	f43f af09 	beq.w	800b19e <_printf_float+0xc2>
 800b38c:	f04f 0900 	mov.w	r9, #0
 800b390:	f104 0a1a 	add.w	sl, r4, #26
 800b394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b396:	425b      	negs	r3, r3
 800b398:	454b      	cmp	r3, r9
 800b39a:	dc01      	bgt.n	800b3a0 <_printf_float+0x2c4>
 800b39c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b39e:	e792      	b.n	800b2c6 <_printf_float+0x1ea>
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	4652      	mov	r2, sl
 800b3a4:	4631      	mov	r1, r6
 800b3a6:	4628      	mov	r0, r5
 800b3a8:	47b8      	blx	r7
 800b3aa:	3001      	adds	r0, #1
 800b3ac:	f43f aef7 	beq.w	800b19e <_printf_float+0xc2>
 800b3b0:	f109 0901 	add.w	r9, r9, #1
 800b3b4:	e7ee      	b.n	800b394 <_printf_float+0x2b8>
 800b3b6:	bf00      	nop
 800b3b8:	7fefffff 	.word	0x7fefffff
 800b3bc:	0800f9cc 	.word	0x0800f9cc
 800b3c0:	0800f9d0 	.word	0x0800f9d0
 800b3c4:	0800f9d8 	.word	0x0800f9d8
 800b3c8:	0800f9d4 	.word	0x0800f9d4
 800b3cc:	0800f9dc 	.word	0x0800f9dc
 800b3d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	bfa8      	it	ge
 800b3d8:	461a      	movge	r2, r3
 800b3da:	2a00      	cmp	r2, #0
 800b3dc:	4691      	mov	r9, r2
 800b3de:	dc37      	bgt.n	800b450 <_printf_float+0x374>
 800b3e0:	f04f 0b00 	mov.w	fp, #0
 800b3e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3e8:	f104 021a 	add.w	r2, r4, #26
 800b3ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b3ee:	9305      	str	r3, [sp, #20]
 800b3f0:	eba3 0309 	sub.w	r3, r3, r9
 800b3f4:	455b      	cmp	r3, fp
 800b3f6:	dc33      	bgt.n	800b460 <_printf_float+0x384>
 800b3f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	db3b      	blt.n	800b478 <_printf_float+0x39c>
 800b400:	6823      	ldr	r3, [r4, #0]
 800b402:	07da      	lsls	r2, r3, #31
 800b404:	d438      	bmi.n	800b478 <_printf_float+0x39c>
 800b406:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b408:	9b05      	ldr	r3, [sp, #20]
 800b40a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	eba2 0901 	sub.w	r9, r2, r1
 800b412:	4599      	cmp	r9, r3
 800b414:	bfa8      	it	ge
 800b416:	4699      	movge	r9, r3
 800b418:	f1b9 0f00 	cmp.w	r9, #0
 800b41c:	dc35      	bgt.n	800b48a <_printf_float+0x3ae>
 800b41e:	f04f 0800 	mov.w	r8, #0
 800b422:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b426:	f104 0a1a 	add.w	sl, r4, #26
 800b42a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b42e:	1a9b      	subs	r3, r3, r2
 800b430:	eba3 0309 	sub.w	r3, r3, r9
 800b434:	4543      	cmp	r3, r8
 800b436:	f77f af79 	ble.w	800b32c <_printf_float+0x250>
 800b43a:	2301      	movs	r3, #1
 800b43c:	4652      	mov	r2, sl
 800b43e:	4631      	mov	r1, r6
 800b440:	4628      	mov	r0, r5
 800b442:	47b8      	blx	r7
 800b444:	3001      	adds	r0, #1
 800b446:	f43f aeaa 	beq.w	800b19e <_printf_float+0xc2>
 800b44a:	f108 0801 	add.w	r8, r8, #1
 800b44e:	e7ec      	b.n	800b42a <_printf_float+0x34e>
 800b450:	4613      	mov	r3, r2
 800b452:	4631      	mov	r1, r6
 800b454:	4642      	mov	r2, r8
 800b456:	4628      	mov	r0, r5
 800b458:	47b8      	blx	r7
 800b45a:	3001      	adds	r0, #1
 800b45c:	d1c0      	bne.n	800b3e0 <_printf_float+0x304>
 800b45e:	e69e      	b.n	800b19e <_printf_float+0xc2>
 800b460:	2301      	movs	r3, #1
 800b462:	4631      	mov	r1, r6
 800b464:	4628      	mov	r0, r5
 800b466:	9205      	str	r2, [sp, #20]
 800b468:	47b8      	blx	r7
 800b46a:	3001      	adds	r0, #1
 800b46c:	f43f ae97 	beq.w	800b19e <_printf_float+0xc2>
 800b470:	9a05      	ldr	r2, [sp, #20]
 800b472:	f10b 0b01 	add.w	fp, fp, #1
 800b476:	e7b9      	b.n	800b3ec <_printf_float+0x310>
 800b478:	ee18 3a10 	vmov	r3, s16
 800b47c:	4652      	mov	r2, sl
 800b47e:	4631      	mov	r1, r6
 800b480:	4628      	mov	r0, r5
 800b482:	47b8      	blx	r7
 800b484:	3001      	adds	r0, #1
 800b486:	d1be      	bne.n	800b406 <_printf_float+0x32a>
 800b488:	e689      	b.n	800b19e <_printf_float+0xc2>
 800b48a:	9a05      	ldr	r2, [sp, #20]
 800b48c:	464b      	mov	r3, r9
 800b48e:	4442      	add	r2, r8
 800b490:	4631      	mov	r1, r6
 800b492:	4628      	mov	r0, r5
 800b494:	47b8      	blx	r7
 800b496:	3001      	adds	r0, #1
 800b498:	d1c1      	bne.n	800b41e <_printf_float+0x342>
 800b49a:	e680      	b.n	800b19e <_printf_float+0xc2>
 800b49c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b49e:	2a01      	cmp	r2, #1
 800b4a0:	dc01      	bgt.n	800b4a6 <_printf_float+0x3ca>
 800b4a2:	07db      	lsls	r3, r3, #31
 800b4a4:	d538      	bpl.n	800b518 <_printf_float+0x43c>
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	4642      	mov	r2, r8
 800b4aa:	4631      	mov	r1, r6
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	47b8      	blx	r7
 800b4b0:	3001      	adds	r0, #1
 800b4b2:	f43f ae74 	beq.w	800b19e <_printf_float+0xc2>
 800b4b6:	ee18 3a10 	vmov	r3, s16
 800b4ba:	4652      	mov	r2, sl
 800b4bc:	4631      	mov	r1, r6
 800b4be:	4628      	mov	r0, r5
 800b4c0:	47b8      	blx	r7
 800b4c2:	3001      	adds	r0, #1
 800b4c4:	f43f ae6b 	beq.w	800b19e <_printf_float+0xc2>
 800b4c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	f7f5 fb12 	bl	8000af8 <__aeabi_dcmpeq>
 800b4d4:	b9d8      	cbnz	r0, 800b50e <_printf_float+0x432>
 800b4d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4d8:	f108 0201 	add.w	r2, r8, #1
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	4631      	mov	r1, r6
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	47b8      	blx	r7
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	d10e      	bne.n	800b506 <_printf_float+0x42a>
 800b4e8:	e659      	b.n	800b19e <_printf_float+0xc2>
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	4652      	mov	r2, sl
 800b4ee:	4631      	mov	r1, r6
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	47b8      	blx	r7
 800b4f4:	3001      	adds	r0, #1
 800b4f6:	f43f ae52 	beq.w	800b19e <_printf_float+0xc2>
 800b4fa:	f108 0801 	add.w	r8, r8, #1
 800b4fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b500:	3b01      	subs	r3, #1
 800b502:	4543      	cmp	r3, r8
 800b504:	dcf1      	bgt.n	800b4ea <_printf_float+0x40e>
 800b506:	464b      	mov	r3, r9
 800b508:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b50c:	e6dc      	b.n	800b2c8 <_printf_float+0x1ec>
 800b50e:	f04f 0800 	mov.w	r8, #0
 800b512:	f104 0a1a 	add.w	sl, r4, #26
 800b516:	e7f2      	b.n	800b4fe <_printf_float+0x422>
 800b518:	2301      	movs	r3, #1
 800b51a:	4642      	mov	r2, r8
 800b51c:	e7df      	b.n	800b4de <_printf_float+0x402>
 800b51e:	2301      	movs	r3, #1
 800b520:	464a      	mov	r2, r9
 800b522:	4631      	mov	r1, r6
 800b524:	4628      	mov	r0, r5
 800b526:	47b8      	blx	r7
 800b528:	3001      	adds	r0, #1
 800b52a:	f43f ae38 	beq.w	800b19e <_printf_float+0xc2>
 800b52e:	f108 0801 	add.w	r8, r8, #1
 800b532:	68e3      	ldr	r3, [r4, #12]
 800b534:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b536:	1a5b      	subs	r3, r3, r1
 800b538:	4543      	cmp	r3, r8
 800b53a:	dcf0      	bgt.n	800b51e <_printf_float+0x442>
 800b53c:	e6fa      	b.n	800b334 <_printf_float+0x258>
 800b53e:	f04f 0800 	mov.w	r8, #0
 800b542:	f104 0919 	add.w	r9, r4, #25
 800b546:	e7f4      	b.n	800b532 <_printf_float+0x456>

0800b548 <_printf_common>:
 800b548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b54c:	4616      	mov	r6, r2
 800b54e:	4699      	mov	r9, r3
 800b550:	688a      	ldr	r2, [r1, #8]
 800b552:	690b      	ldr	r3, [r1, #16]
 800b554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b558:	4293      	cmp	r3, r2
 800b55a:	bfb8      	it	lt
 800b55c:	4613      	movlt	r3, r2
 800b55e:	6033      	str	r3, [r6, #0]
 800b560:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b564:	4607      	mov	r7, r0
 800b566:	460c      	mov	r4, r1
 800b568:	b10a      	cbz	r2, 800b56e <_printf_common+0x26>
 800b56a:	3301      	adds	r3, #1
 800b56c:	6033      	str	r3, [r6, #0]
 800b56e:	6823      	ldr	r3, [r4, #0]
 800b570:	0699      	lsls	r1, r3, #26
 800b572:	bf42      	ittt	mi
 800b574:	6833      	ldrmi	r3, [r6, #0]
 800b576:	3302      	addmi	r3, #2
 800b578:	6033      	strmi	r3, [r6, #0]
 800b57a:	6825      	ldr	r5, [r4, #0]
 800b57c:	f015 0506 	ands.w	r5, r5, #6
 800b580:	d106      	bne.n	800b590 <_printf_common+0x48>
 800b582:	f104 0a19 	add.w	sl, r4, #25
 800b586:	68e3      	ldr	r3, [r4, #12]
 800b588:	6832      	ldr	r2, [r6, #0]
 800b58a:	1a9b      	subs	r3, r3, r2
 800b58c:	42ab      	cmp	r3, r5
 800b58e:	dc26      	bgt.n	800b5de <_printf_common+0x96>
 800b590:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b594:	1e13      	subs	r3, r2, #0
 800b596:	6822      	ldr	r2, [r4, #0]
 800b598:	bf18      	it	ne
 800b59a:	2301      	movne	r3, #1
 800b59c:	0692      	lsls	r2, r2, #26
 800b59e:	d42b      	bmi.n	800b5f8 <_printf_common+0xb0>
 800b5a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5a4:	4649      	mov	r1, r9
 800b5a6:	4638      	mov	r0, r7
 800b5a8:	47c0      	blx	r8
 800b5aa:	3001      	adds	r0, #1
 800b5ac:	d01e      	beq.n	800b5ec <_printf_common+0xa4>
 800b5ae:	6823      	ldr	r3, [r4, #0]
 800b5b0:	68e5      	ldr	r5, [r4, #12]
 800b5b2:	6832      	ldr	r2, [r6, #0]
 800b5b4:	f003 0306 	and.w	r3, r3, #6
 800b5b8:	2b04      	cmp	r3, #4
 800b5ba:	bf08      	it	eq
 800b5bc:	1aad      	subeq	r5, r5, r2
 800b5be:	68a3      	ldr	r3, [r4, #8]
 800b5c0:	6922      	ldr	r2, [r4, #16]
 800b5c2:	bf0c      	ite	eq
 800b5c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5c8:	2500      	movne	r5, #0
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	bfc4      	itt	gt
 800b5ce:	1a9b      	subgt	r3, r3, r2
 800b5d0:	18ed      	addgt	r5, r5, r3
 800b5d2:	2600      	movs	r6, #0
 800b5d4:	341a      	adds	r4, #26
 800b5d6:	42b5      	cmp	r5, r6
 800b5d8:	d11a      	bne.n	800b610 <_printf_common+0xc8>
 800b5da:	2000      	movs	r0, #0
 800b5dc:	e008      	b.n	800b5f0 <_printf_common+0xa8>
 800b5de:	2301      	movs	r3, #1
 800b5e0:	4652      	mov	r2, sl
 800b5e2:	4649      	mov	r1, r9
 800b5e4:	4638      	mov	r0, r7
 800b5e6:	47c0      	blx	r8
 800b5e8:	3001      	adds	r0, #1
 800b5ea:	d103      	bne.n	800b5f4 <_printf_common+0xac>
 800b5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b5f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5f4:	3501      	adds	r5, #1
 800b5f6:	e7c6      	b.n	800b586 <_printf_common+0x3e>
 800b5f8:	18e1      	adds	r1, r4, r3
 800b5fa:	1c5a      	adds	r2, r3, #1
 800b5fc:	2030      	movs	r0, #48	; 0x30
 800b5fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b602:	4422      	add	r2, r4
 800b604:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b608:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b60c:	3302      	adds	r3, #2
 800b60e:	e7c7      	b.n	800b5a0 <_printf_common+0x58>
 800b610:	2301      	movs	r3, #1
 800b612:	4622      	mov	r2, r4
 800b614:	4649      	mov	r1, r9
 800b616:	4638      	mov	r0, r7
 800b618:	47c0      	blx	r8
 800b61a:	3001      	adds	r0, #1
 800b61c:	d0e6      	beq.n	800b5ec <_printf_common+0xa4>
 800b61e:	3601      	adds	r6, #1
 800b620:	e7d9      	b.n	800b5d6 <_printf_common+0x8e>
	...

0800b624 <_printf_i>:
 800b624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b628:	460c      	mov	r4, r1
 800b62a:	4691      	mov	r9, r2
 800b62c:	7e27      	ldrb	r7, [r4, #24]
 800b62e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b630:	2f78      	cmp	r7, #120	; 0x78
 800b632:	4680      	mov	r8, r0
 800b634:	469a      	mov	sl, r3
 800b636:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b63a:	d807      	bhi.n	800b64c <_printf_i+0x28>
 800b63c:	2f62      	cmp	r7, #98	; 0x62
 800b63e:	d80a      	bhi.n	800b656 <_printf_i+0x32>
 800b640:	2f00      	cmp	r7, #0
 800b642:	f000 80d8 	beq.w	800b7f6 <_printf_i+0x1d2>
 800b646:	2f58      	cmp	r7, #88	; 0x58
 800b648:	f000 80a3 	beq.w	800b792 <_printf_i+0x16e>
 800b64c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b650:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b654:	e03a      	b.n	800b6cc <_printf_i+0xa8>
 800b656:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b65a:	2b15      	cmp	r3, #21
 800b65c:	d8f6      	bhi.n	800b64c <_printf_i+0x28>
 800b65e:	a001      	add	r0, pc, #4	; (adr r0, 800b664 <_printf_i+0x40>)
 800b660:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b664:	0800b6bd 	.word	0x0800b6bd
 800b668:	0800b6d1 	.word	0x0800b6d1
 800b66c:	0800b64d 	.word	0x0800b64d
 800b670:	0800b64d 	.word	0x0800b64d
 800b674:	0800b64d 	.word	0x0800b64d
 800b678:	0800b64d 	.word	0x0800b64d
 800b67c:	0800b6d1 	.word	0x0800b6d1
 800b680:	0800b64d 	.word	0x0800b64d
 800b684:	0800b64d 	.word	0x0800b64d
 800b688:	0800b64d 	.word	0x0800b64d
 800b68c:	0800b64d 	.word	0x0800b64d
 800b690:	0800b7dd 	.word	0x0800b7dd
 800b694:	0800b701 	.word	0x0800b701
 800b698:	0800b7bf 	.word	0x0800b7bf
 800b69c:	0800b64d 	.word	0x0800b64d
 800b6a0:	0800b64d 	.word	0x0800b64d
 800b6a4:	0800b7ff 	.word	0x0800b7ff
 800b6a8:	0800b64d 	.word	0x0800b64d
 800b6ac:	0800b701 	.word	0x0800b701
 800b6b0:	0800b64d 	.word	0x0800b64d
 800b6b4:	0800b64d 	.word	0x0800b64d
 800b6b8:	0800b7c7 	.word	0x0800b7c7
 800b6bc:	680b      	ldr	r3, [r1, #0]
 800b6be:	1d1a      	adds	r2, r3, #4
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	600a      	str	r2, [r1, #0]
 800b6c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b6c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	e0a3      	b.n	800b818 <_printf_i+0x1f4>
 800b6d0:	6825      	ldr	r5, [r4, #0]
 800b6d2:	6808      	ldr	r0, [r1, #0]
 800b6d4:	062e      	lsls	r6, r5, #24
 800b6d6:	f100 0304 	add.w	r3, r0, #4
 800b6da:	d50a      	bpl.n	800b6f2 <_printf_i+0xce>
 800b6dc:	6805      	ldr	r5, [r0, #0]
 800b6de:	600b      	str	r3, [r1, #0]
 800b6e0:	2d00      	cmp	r5, #0
 800b6e2:	da03      	bge.n	800b6ec <_printf_i+0xc8>
 800b6e4:	232d      	movs	r3, #45	; 0x2d
 800b6e6:	426d      	negs	r5, r5
 800b6e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6ec:	485e      	ldr	r0, [pc, #376]	; (800b868 <_printf_i+0x244>)
 800b6ee:	230a      	movs	r3, #10
 800b6f0:	e019      	b.n	800b726 <_printf_i+0x102>
 800b6f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b6f6:	6805      	ldr	r5, [r0, #0]
 800b6f8:	600b      	str	r3, [r1, #0]
 800b6fa:	bf18      	it	ne
 800b6fc:	b22d      	sxthne	r5, r5
 800b6fe:	e7ef      	b.n	800b6e0 <_printf_i+0xbc>
 800b700:	680b      	ldr	r3, [r1, #0]
 800b702:	6825      	ldr	r5, [r4, #0]
 800b704:	1d18      	adds	r0, r3, #4
 800b706:	6008      	str	r0, [r1, #0]
 800b708:	0628      	lsls	r0, r5, #24
 800b70a:	d501      	bpl.n	800b710 <_printf_i+0xec>
 800b70c:	681d      	ldr	r5, [r3, #0]
 800b70e:	e002      	b.n	800b716 <_printf_i+0xf2>
 800b710:	0669      	lsls	r1, r5, #25
 800b712:	d5fb      	bpl.n	800b70c <_printf_i+0xe8>
 800b714:	881d      	ldrh	r5, [r3, #0]
 800b716:	4854      	ldr	r0, [pc, #336]	; (800b868 <_printf_i+0x244>)
 800b718:	2f6f      	cmp	r7, #111	; 0x6f
 800b71a:	bf0c      	ite	eq
 800b71c:	2308      	moveq	r3, #8
 800b71e:	230a      	movne	r3, #10
 800b720:	2100      	movs	r1, #0
 800b722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b726:	6866      	ldr	r6, [r4, #4]
 800b728:	60a6      	str	r6, [r4, #8]
 800b72a:	2e00      	cmp	r6, #0
 800b72c:	bfa2      	ittt	ge
 800b72e:	6821      	ldrge	r1, [r4, #0]
 800b730:	f021 0104 	bicge.w	r1, r1, #4
 800b734:	6021      	strge	r1, [r4, #0]
 800b736:	b90d      	cbnz	r5, 800b73c <_printf_i+0x118>
 800b738:	2e00      	cmp	r6, #0
 800b73a:	d04d      	beq.n	800b7d8 <_printf_i+0x1b4>
 800b73c:	4616      	mov	r6, r2
 800b73e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b742:	fb03 5711 	mls	r7, r3, r1, r5
 800b746:	5dc7      	ldrb	r7, [r0, r7]
 800b748:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b74c:	462f      	mov	r7, r5
 800b74e:	42bb      	cmp	r3, r7
 800b750:	460d      	mov	r5, r1
 800b752:	d9f4      	bls.n	800b73e <_printf_i+0x11a>
 800b754:	2b08      	cmp	r3, #8
 800b756:	d10b      	bne.n	800b770 <_printf_i+0x14c>
 800b758:	6823      	ldr	r3, [r4, #0]
 800b75a:	07df      	lsls	r7, r3, #31
 800b75c:	d508      	bpl.n	800b770 <_printf_i+0x14c>
 800b75e:	6923      	ldr	r3, [r4, #16]
 800b760:	6861      	ldr	r1, [r4, #4]
 800b762:	4299      	cmp	r1, r3
 800b764:	bfde      	ittt	le
 800b766:	2330      	movle	r3, #48	; 0x30
 800b768:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b76c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b770:	1b92      	subs	r2, r2, r6
 800b772:	6122      	str	r2, [r4, #16]
 800b774:	f8cd a000 	str.w	sl, [sp]
 800b778:	464b      	mov	r3, r9
 800b77a:	aa03      	add	r2, sp, #12
 800b77c:	4621      	mov	r1, r4
 800b77e:	4640      	mov	r0, r8
 800b780:	f7ff fee2 	bl	800b548 <_printf_common>
 800b784:	3001      	adds	r0, #1
 800b786:	d14c      	bne.n	800b822 <_printf_i+0x1fe>
 800b788:	f04f 30ff 	mov.w	r0, #4294967295
 800b78c:	b004      	add	sp, #16
 800b78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b792:	4835      	ldr	r0, [pc, #212]	; (800b868 <_printf_i+0x244>)
 800b794:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b798:	6823      	ldr	r3, [r4, #0]
 800b79a:	680e      	ldr	r6, [r1, #0]
 800b79c:	061f      	lsls	r7, r3, #24
 800b79e:	f856 5b04 	ldr.w	r5, [r6], #4
 800b7a2:	600e      	str	r6, [r1, #0]
 800b7a4:	d514      	bpl.n	800b7d0 <_printf_i+0x1ac>
 800b7a6:	07d9      	lsls	r1, r3, #31
 800b7a8:	bf44      	itt	mi
 800b7aa:	f043 0320 	orrmi.w	r3, r3, #32
 800b7ae:	6023      	strmi	r3, [r4, #0]
 800b7b0:	b91d      	cbnz	r5, 800b7ba <_printf_i+0x196>
 800b7b2:	6823      	ldr	r3, [r4, #0]
 800b7b4:	f023 0320 	bic.w	r3, r3, #32
 800b7b8:	6023      	str	r3, [r4, #0]
 800b7ba:	2310      	movs	r3, #16
 800b7bc:	e7b0      	b.n	800b720 <_printf_i+0xfc>
 800b7be:	6823      	ldr	r3, [r4, #0]
 800b7c0:	f043 0320 	orr.w	r3, r3, #32
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	2378      	movs	r3, #120	; 0x78
 800b7c8:	4828      	ldr	r0, [pc, #160]	; (800b86c <_printf_i+0x248>)
 800b7ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b7ce:	e7e3      	b.n	800b798 <_printf_i+0x174>
 800b7d0:	065e      	lsls	r6, r3, #25
 800b7d2:	bf48      	it	mi
 800b7d4:	b2ad      	uxthmi	r5, r5
 800b7d6:	e7e6      	b.n	800b7a6 <_printf_i+0x182>
 800b7d8:	4616      	mov	r6, r2
 800b7da:	e7bb      	b.n	800b754 <_printf_i+0x130>
 800b7dc:	680b      	ldr	r3, [r1, #0]
 800b7de:	6826      	ldr	r6, [r4, #0]
 800b7e0:	6960      	ldr	r0, [r4, #20]
 800b7e2:	1d1d      	adds	r5, r3, #4
 800b7e4:	600d      	str	r5, [r1, #0]
 800b7e6:	0635      	lsls	r5, r6, #24
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	d501      	bpl.n	800b7f0 <_printf_i+0x1cc>
 800b7ec:	6018      	str	r0, [r3, #0]
 800b7ee:	e002      	b.n	800b7f6 <_printf_i+0x1d2>
 800b7f0:	0671      	lsls	r1, r6, #25
 800b7f2:	d5fb      	bpl.n	800b7ec <_printf_i+0x1c8>
 800b7f4:	8018      	strh	r0, [r3, #0]
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	6123      	str	r3, [r4, #16]
 800b7fa:	4616      	mov	r6, r2
 800b7fc:	e7ba      	b.n	800b774 <_printf_i+0x150>
 800b7fe:	680b      	ldr	r3, [r1, #0]
 800b800:	1d1a      	adds	r2, r3, #4
 800b802:	600a      	str	r2, [r1, #0]
 800b804:	681e      	ldr	r6, [r3, #0]
 800b806:	6862      	ldr	r2, [r4, #4]
 800b808:	2100      	movs	r1, #0
 800b80a:	4630      	mov	r0, r6
 800b80c:	f7f4 fd00 	bl	8000210 <memchr>
 800b810:	b108      	cbz	r0, 800b816 <_printf_i+0x1f2>
 800b812:	1b80      	subs	r0, r0, r6
 800b814:	6060      	str	r0, [r4, #4]
 800b816:	6863      	ldr	r3, [r4, #4]
 800b818:	6123      	str	r3, [r4, #16]
 800b81a:	2300      	movs	r3, #0
 800b81c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b820:	e7a8      	b.n	800b774 <_printf_i+0x150>
 800b822:	6923      	ldr	r3, [r4, #16]
 800b824:	4632      	mov	r2, r6
 800b826:	4649      	mov	r1, r9
 800b828:	4640      	mov	r0, r8
 800b82a:	47d0      	blx	sl
 800b82c:	3001      	adds	r0, #1
 800b82e:	d0ab      	beq.n	800b788 <_printf_i+0x164>
 800b830:	6823      	ldr	r3, [r4, #0]
 800b832:	079b      	lsls	r3, r3, #30
 800b834:	d413      	bmi.n	800b85e <_printf_i+0x23a>
 800b836:	68e0      	ldr	r0, [r4, #12]
 800b838:	9b03      	ldr	r3, [sp, #12]
 800b83a:	4298      	cmp	r0, r3
 800b83c:	bfb8      	it	lt
 800b83e:	4618      	movlt	r0, r3
 800b840:	e7a4      	b.n	800b78c <_printf_i+0x168>
 800b842:	2301      	movs	r3, #1
 800b844:	4632      	mov	r2, r6
 800b846:	4649      	mov	r1, r9
 800b848:	4640      	mov	r0, r8
 800b84a:	47d0      	blx	sl
 800b84c:	3001      	adds	r0, #1
 800b84e:	d09b      	beq.n	800b788 <_printf_i+0x164>
 800b850:	3501      	adds	r5, #1
 800b852:	68e3      	ldr	r3, [r4, #12]
 800b854:	9903      	ldr	r1, [sp, #12]
 800b856:	1a5b      	subs	r3, r3, r1
 800b858:	42ab      	cmp	r3, r5
 800b85a:	dcf2      	bgt.n	800b842 <_printf_i+0x21e>
 800b85c:	e7eb      	b.n	800b836 <_printf_i+0x212>
 800b85e:	2500      	movs	r5, #0
 800b860:	f104 0619 	add.w	r6, r4, #25
 800b864:	e7f5      	b.n	800b852 <_printf_i+0x22e>
 800b866:	bf00      	nop
 800b868:	0800f9de 	.word	0x0800f9de
 800b86c:	0800f9ef 	.word	0x0800f9ef

0800b870 <_scanf_float>:
 800b870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b874:	b087      	sub	sp, #28
 800b876:	4617      	mov	r7, r2
 800b878:	9303      	str	r3, [sp, #12]
 800b87a:	688b      	ldr	r3, [r1, #8]
 800b87c:	1e5a      	subs	r2, r3, #1
 800b87e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b882:	bf83      	ittte	hi
 800b884:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b888:	195b      	addhi	r3, r3, r5
 800b88a:	9302      	strhi	r3, [sp, #8]
 800b88c:	2300      	movls	r3, #0
 800b88e:	bf86      	itte	hi
 800b890:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b894:	608b      	strhi	r3, [r1, #8]
 800b896:	9302      	strls	r3, [sp, #8]
 800b898:	680b      	ldr	r3, [r1, #0]
 800b89a:	468b      	mov	fp, r1
 800b89c:	2500      	movs	r5, #0
 800b89e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b8a2:	f84b 3b1c 	str.w	r3, [fp], #28
 800b8a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b8aa:	4680      	mov	r8, r0
 800b8ac:	460c      	mov	r4, r1
 800b8ae:	465e      	mov	r6, fp
 800b8b0:	46aa      	mov	sl, r5
 800b8b2:	46a9      	mov	r9, r5
 800b8b4:	9501      	str	r5, [sp, #4]
 800b8b6:	68a2      	ldr	r2, [r4, #8]
 800b8b8:	b152      	cbz	r2, 800b8d0 <_scanf_float+0x60>
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	2b4e      	cmp	r3, #78	; 0x4e
 800b8c0:	d864      	bhi.n	800b98c <_scanf_float+0x11c>
 800b8c2:	2b40      	cmp	r3, #64	; 0x40
 800b8c4:	d83c      	bhi.n	800b940 <_scanf_float+0xd0>
 800b8c6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b8ca:	b2c8      	uxtb	r0, r1
 800b8cc:	280e      	cmp	r0, #14
 800b8ce:	d93a      	bls.n	800b946 <_scanf_float+0xd6>
 800b8d0:	f1b9 0f00 	cmp.w	r9, #0
 800b8d4:	d003      	beq.n	800b8de <_scanf_float+0x6e>
 800b8d6:	6823      	ldr	r3, [r4, #0]
 800b8d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8dc:	6023      	str	r3, [r4, #0]
 800b8de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8e2:	f1ba 0f01 	cmp.w	sl, #1
 800b8e6:	f200 8113 	bhi.w	800bb10 <_scanf_float+0x2a0>
 800b8ea:	455e      	cmp	r6, fp
 800b8ec:	f200 8105 	bhi.w	800bafa <_scanf_float+0x28a>
 800b8f0:	2501      	movs	r5, #1
 800b8f2:	4628      	mov	r0, r5
 800b8f4:	b007      	add	sp, #28
 800b8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8fa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b8fe:	2a0d      	cmp	r2, #13
 800b900:	d8e6      	bhi.n	800b8d0 <_scanf_float+0x60>
 800b902:	a101      	add	r1, pc, #4	; (adr r1, 800b908 <_scanf_float+0x98>)
 800b904:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b908:	0800ba47 	.word	0x0800ba47
 800b90c:	0800b8d1 	.word	0x0800b8d1
 800b910:	0800b8d1 	.word	0x0800b8d1
 800b914:	0800b8d1 	.word	0x0800b8d1
 800b918:	0800baa7 	.word	0x0800baa7
 800b91c:	0800ba7f 	.word	0x0800ba7f
 800b920:	0800b8d1 	.word	0x0800b8d1
 800b924:	0800b8d1 	.word	0x0800b8d1
 800b928:	0800ba55 	.word	0x0800ba55
 800b92c:	0800b8d1 	.word	0x0800b8d1
 800b930:	0800b8d1 	.word	0x0800b8d1
 800b934:	0800b8d1 	.word	0x0800b8d1
 800b938:	0800b8d1 	.word	0x0800b8d1
 800b93c:	0800ba0d 	.word	0x0800ba0d
 800b940:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b944:	e7db      	b.n	800b8fe <_scanf_float+0x8e>
 800b946:	290e      	cmp	r1, #14
 800b948:	d8c2      	bhi.n	800b8d0 <_scanf_float+0x60>
 800b94a:	a001      	add	r0, pc, #4	; (adr r0, 800b950 <_scanf_float+0xe0>)
 800b94c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b950:	0800b9ff 	.word	0x0800b9ff
 800b954:	0800b8d1 	.word	0x0800b8d1
 800b958:	0800b9ff 	.word	0x0800b9ff
 800b95c:	0800ba93 	.word	0x0800ba93
 800b960:	0800b8d1 	.word	0x0800b8d1
 800b964:	0800b9ad 	.word	0x0800b9ad
 800b968:	0800b9e9 	.word	0x0800b9e9
 800b96c:	0800b9e9 	.word	0x0800b9e9
 800b970:	0800b9e9 	.word	0x0800b9e9
 800b974:	0800b9e9 	.word	0x0800b9e9
 800b978:	0800b9e9 	.word	0x0800b9e9
 800b97c:	0800b9e9 	.word	0x0800b9e9
 800b980:	0800b9e9 	.word	0x0800b9e9
 800b984:	0800b9e9 	.word	0x0800b9e9
 800b988:	0800b9e9 	.word	0x0800b9e9
 800b98c:	2b6e      	cmp	r3, #110	; 0x6e
 800b98e:	d809      	bhi.n	800b9a4 <_scanf_float+0x134>
 800b990:	2b60      	cmp	r3, #96	; 0x60
 800b992:	d8b2      	bhi.n	800b8fa <_scanf_float+0x8a>
 800b994:	2b54      	cmp	r3, #84	; 0x54
 800b996:	d077      	beq.n	800ba88 <_scanf_float+0x218>
 800b998:	2b59      	cmp	r3, #89	; 0x59
 800b99a:	d199      	bne.n	800b8d0 <_scanf_float+0x60>
 800b99c:	2d07      	cmp	r5, #7
 800b99e:	d197      	bne.n	800b8d0 <_scanf_float+0x60>
 800b9a0:	2508      	movs	r5, #8
 800b9a2:	e029      	b.n	800b9f8 <_scanf_float+0x188>
 800b9a4:	2b74      	cmp	r3, #116	; 0x74
 800b9a6:	d06f      	beq.n	800ba88 <_scanf_float+0x218>
 800b9a8:	2b79      	cmp	r3, #121	; 0x79
 800b9aa:	e7f6      	b.n	800b99a <_scanf_float+0x12a>
 800b9ac:	6821      	ldr	r1, [r4, #0]
 800b9ae:	05c8      	lsls	r0, r1, #23
 800b9b0:	d51a      	bpl.n	800b9e8 <_scanf_float+0x178>
 800b9b2:	9b02      	ldr	r3, [sp, #8]
 800b9b4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b9b8:	6021      	str	r1, [r4, #0]
 800b9ba:	f109 0901 	add.w	r9, r9, #1
 800b9be:	b11b      	cbz	r3, 800b9c8 <_scanf_float+0x158>
 800b9c0:	3b01      	subs	r3, #1
 800b9c2:	3201      	adds	r2, #1
 800b9c4:	9302      	str	r3, [sp, #8]
 800b9c6:	60a2      	str	r2, [r4, #8]
 800b9c8:	68a3      	ldr	r3, [r4, #8]
 800b9ca:	3b01      	subs	r3, #1
 800b9cc:	60a3      	str	r3, [r4, #8]
 800b9ce:	6923      	ldr	r3, [r4, #16]
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	6123      	str	r3, [r4, #16]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	3b01      	subs	r3, #1
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	607b      	str	r3, [r7, #4]
 800b9dc:	f340 8084 	ble.w	800bae8 <_scanf_float+0x278>
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	603b      	str	r3, [r7, #0]
 800b9e6:	e766      	b.n	800b8b6 <_scanf_float+0x46>
 800b9e8:	eb1a 0f05 	cmn.w	sl, r5
 800b9ec:	f47f af70 	bne.w	800b8d0 <_scanf_float+0x60>
 800b9f0:	6822      	ldr	r2, [r4, #0]
 800b9f2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b9f6:	6022      	str	r2, [r4, #0]
 800b9f8:	f806 3b01 	strb.w	r3, [r6], #1
 800b9fc:	e7e4      	b.n	800b9c8 <_scanf_float+0x158>
 800b9fe:	6822      	ldr	r2, [r4, #0]
 800ba00:	0610      	lsls	r0, r2, #24
 800ba02:	f57f af65 	bpl.w	800b8d0 <_scanf_float+0x60>
 800ba06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba0a:	e7f4      	b.n	800b9f6 <_scanf_float+0x186>
 800ba0c:	f1ba 0f00 	cmp.w	sl, #0
 800ba10:	d10e      	bne.n	800ba30 <_scanf_float+0x1c0>
 800ba12:	f1b9 0f00 	cmp.w	r9, #0
 800ba16:	d10e      	bne.n	800ba36 <_scanf_float+0x1c6>
 800ba18:	6822      	ldr	r2, [r4, #0]
 800ba1a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ba1e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ba22:	d108      	bne.n	800ba36 <_scanf_float+0x1c6>
 800ba24:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ba28:	6022      	str	r2, [r4, #0]
 800ba2a:	f04f 0a01 	mov.w	sl, #1
 800ba2e:	e7e3      	b.n	800b9f8 <_scanf_float+0x188>
 800ba30:	f1ba 0f02 	cmp.w	sl, #2
 800ba34:	d055      	beq.n	800bae2 <_scanf_float+0x272>
 800ba36:	2d01      	cmp	r5, #1
 800ba38:	d002      	beq.n	800ba40 <_scanf_float+0x1d0>
 800ba3a:	2d04      	cmp	r5, #4
 800ba3c:	f47f af48 	bne.w	800b8d0 <_scanf_float+0x60>
 800ba40:	3501      	adds	r5, #1
 800ba42:	b2ed      	uxtb	r5, r5
 800ba44:	e7d8      	b.n	800b9f8 <_scanf_float+0x188>
 800ba46:	f1ba 0f01 	cmp.w	sl, #1
 800ba4a:	f47f af41 	bne.w	800b8d0 <_scanf_float+0x60>
 800ba4e:	f04f 0a02 	mov.w	sl, #2
 800ba52:	e7d1      	b.n	800b9f8 <_scanf_float+0x188>
 800ba54:	b97d      	cbnz	r5, 800ba76 <_scanf_float+0x206>
 800ba56:	f1b9 0f00 	cmp.w	r9, #0
 800ba5a:	f47f af3c 	bne.w	800b8d6 <_scanf_float+0x66>
 800ba5e:	6822      	ldr	r2, [r4, #0]
 800ba60:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ba64:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ba68:	f47f af39 	bne.w	800b8de <_scanf_float+0x6e>
 800ba6c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ba70:	6022      	str	r2, [r4, #0]
 800ba72:	2501      	movs	r5, #1
 800ba74:	e7c0      	b.n	800b9f8 <_scanf_float+0x188>
 800ba76:	2d03      	cmp	r5, #3
 800ba78:	d0e2      	beq.n	800ba40 <_scanf_float+0x1d0>
 800ba7a:	2d05      	cmp	r5, #5
 800ba7c:	e7de      	b.n	800ba3c <_scanf_float+0x1cc>
 800ba7e:	2d02      	cmp	r5, #2
 800ba80:	f47f af26 	bne.w	800b8d0 <_scanf_float+0x60>
 800ba84:	2503      	movs	r5, #3
 800ba86:	e7b7      	b.n	800b9f8 <_scanf_float+0x188>
 800ba88:	2d06      	cmp	r5, #6
 800ba8a:	f47f af21 	bne.w	800b8d0 <_scanf_float+0x60>
 800ba8e:	2507      	movs	r5, #7
 800ba90:	e7b2      	b.n	800b9f8 <_scanf_float+0x188>
 800ba92:	6822      	ldr	r2, [r4, #0]
 800ba94:	0591      	lsls	r1, r2, #22
 800ba96:	f57f af1b 	bpl.w	800b8d0 <_scanf_float+0x60>
 800ba9a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ba9e:	6022      	str	r2, [r4, #0]
 800baa0:	f8cd 9004 	str.w	r9, [sp, #4]
 800baa4:	e7a8      	b.n	800b9f8 <_scanf_float+0x188>
 800baa6:	6822      	ldr	r2, [r4, #0]
 800baa8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800baac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bab0:	d006      	beq.n	800bac0 <_scanf_float+0x250>
 800bab2:	0550      	lsls	r0, r2, #21
 800bab4:	f57f af0c 	bpl.w	800b8d0 <_scanf_float+0x60>
 800bab8:	f1b9 0f00 	cmp.w	r9, #0
 800babc:	f43f af0f 	beq.w	800b8de <_scanf_float+0x6e>
 800bac0:	0591      	lsls	r1, r2, #22
 800bac2:	bf58      	it	pl
 800bac4:	9901      	ldrpl	r1, [sp, #4]
 800bac6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800baca:	bf58      	it	pl
 800bacc:	eba9 0101 	subpl.w	r1, r9, r1
 800bad0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bad4:	bf58      	it	pl
 800bad6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bada:	6022      	str	r2, [r4, #0]
 800badc:	f04f 0900 	mov.w	r9, #0
 800bae0:	e78a      	b.n	800b9f8 <_scanf_float+0x188>
 800bae2:	f04f 0a03 	mov.w	sl, #3
 800bae6:	e787      	b.n	800b9f8 <_scanf_float+0x188>
 800bae8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800baec:	4639      	mov	r1, r7
 800baee:	4640      	mov	r0, r8
 800baf0:	4798      	blx	r3
 800baf2:	2800      	cmp	r0, #0
 800baf4:	f43f aedf 	beq.w	800b8b6 <_scanf_float+0x46>
 800baf8:	e6ea      	b.n	800b8d0 <_scanf_float+0x60>
 800bafa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bafe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb02:	463a      	mov	r2, r7
 800bb04:	4640      	mov	r0, r8
 800bb06:	4798      	blx	r3
 800bb08:	6923      	ldr	r3, [r4, #16]
 800bb0a:	3b01      	subs	r3, #1
 800bb0c:	6123      	str	r3, [r4, #16]
 800bb0e:	e6ec      	b.n	800b8ea <_scanf_float+0x7a>
 800bb10:	1e6b      	subs	r3, r5, #1
 800bb12:	2b06      	cmp	r3, #6
 800bb14:	d825      	bhi.n	800bb62 <_scanf_float+0x2f2>
 800bb16:	2d02      	cmp	r5, #2
 800bb18:	d836      	bhi.n	800bb88 <_scanf_float+0x318>
 800bb1a:	455e      	cmp	r6, fp
 800bb1c:	f67f aee8 	bls.w	800b8f0 <_scanf_float+0x80>
 800bb20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb24:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb28:	463a      	mov	r2, r7
 800bb2a:	4640      	mov	r0, r8
 800bb2c:	4798      	blx	r3
 800bb2e:	6923      	ldr	r3, [r4, #16]
 800bb30:	3b01      	subs	r3, #1
 800bb32:	6123      	str	r3, [r4, #16]
 800bb34:	e7f1      	b.n	800bb1a <_scanf_float+0x2aa>
 800bb36:	9802      	ldr	r0, [sp, #8]
 800bb38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb3c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800bb40:	9002      	str	r0, [sp, #8]
 800bb42:	463a      	mov	r2, r7
 800bb44:	4640      	mov	r0, r8
 800bb46:	4798      	blx	r3
 800bb48:	6923      	ldr	r3, [r4, #16]
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	6123      	str	r3, [r4, #16]
 800bb4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bb52:	fa5f fa8a 	uxtb.w	sl, sl
 800bb56:	f1ba 0f02 	cmp.w	sl, #2
 800bb5a:	d1ec      	bne.n	800bb36 <_scanf_float+0x2c6>
 800bb5c:	3d03      	subs	r5, #3
 800bb5e:	b2ed      	uxtb	r5, r5
 800bb60:	1b76      	subs	r6, r6, r5
 800bb62:	6823      	ldr	r3, [r4, #0]
 800bb64:	05da      	lsls	r2, r3, #23
 800bb66:	d52f      	bpl.n	800bbc8 <_scanf_float+0x358>
 800bb68:	055b      	lsls	r3, r3, #21
 800bb6a:	d510      	bpl.n	800bb8e <_scanf_float+0x31e>
 800bb6c:	455e      	cmp	r6, fp
 800bb6e:	f67f aebf 	bls.w	800b8f0 <_scanf_float+0x80>
 800bb72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb7a:	463a      	mov	r2, r7
 800bb7c:	4640      	mov	r0, r8
 800bb7e:	4798      	blx	r3
 800bb80:	6923      	ldr	r3, [r4, #16]
 800bb82:	3b01      	subs	r3, #1
 800bb84:	6123      	str	r3, [r4, #16]
 800bb86:	e7f1      	b.n	800bb6c <_scanf_float+0x2fc>
 800bb88:	46aa      	mov	sl, r5
 800bb8a:	9602      	str	r6, [sp, #8]
 800bb8c:	e7df      	b.n	800bb4e <_scanf_float+0x2de>
 800bb8e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bb92:	6923      	ldr	r3, [r4, #16]
 800bb94:	2965      	cmp	r1, #101	; 0x65
 800bb96:	f103 33ff 	add.w	r3, r3, #4294967295
 800bb9a:	f106 35ff 	add.w	r5, r6, #4294967295
 800bb9e:	6123      	str	r3, [r4, #16]
 800bba0:	d00c      	beq.n	800bbbc <_scanf_float+0x34c>
 800bba2:	2945      	cmp	r1, #69	; 0x45
 800bba4:	d00a      	beq.n	800bbbc <_scanf_float+0x34c>
 800bba6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bbaa:	463a      	mov	r2, r7
 800bbac:	4640      	mov	r0, r8
 800bbae:	4798      	blx	r3
 800bbb0:	6923      	ldr	r3, [r4, #16]
 800bbb2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bbb6:	3b01      	subs	r3, #1
 800bbb8:	1eb5      	subs	r5, r6, #2
 800bbba:	6123      	str	r3, [r4, #16]
 800bbbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bbc0:	463a      	mov	r2, r7
 800bbc2:	4640      	mov	r0, r8
 800bbc4:	4798      	blx	r3
 800bbc6:	462e      	mov	r6, r5
 800bbc8:	6825      	ldr	r5, [r4, #0]
 800bbca:	f015 0510 	ands.w	r5, r5, #16
 800bbce:	d158      	bne.n	800bc82 <_scanf_float+0x412>
 800bbd0:	7035      	strb	r5, [r6, #0]
 800bbd2:	6823      	ldr	r3, [r4, #0]
 800bbd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bbd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbdc:	d11c      	bne.n	800bc18 <_scanf_float+0x3a8>
 800bbde:	9b01      	ldr	r3, [sp, #4]
 800bbe0:	454b      	cmp	r3, r9
 800bbe2:	eba3 0209 	sub.w	r2, r3, r9
 800bbe6:	d124      	bne.n	800bc32 <_scanf_float+0x3c2>
 800bbe8:	2200      	movs	r2, #0
 800bbea:	4659      	mov	r1, fp
 800bbec:	4640      	mov	r0, r8
 800bbee:	f000 feb1 	bl	800c954 <_strtod_r>
 800bbf2:	9b03      	ldr	r3, [sp, #12]
 800bbf4:	6821      	ldr	r1, [r4, #0]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f011 0f02 	tst.w	r1, #2
 800bbfc:	ec57 6b10 	vmov	r6, r7, d0
 800bc00:	f103 0204 	add.w	r2, r3, #4
 800bc04:	d020      	beq.n	800bc48 <_scanf_float+0x3d8>
 800bc06:	9903      	ldr	r1, [sp, #12]
 800bc08:	600a      	str	r2, [r1, #0]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	e9c3 6700 	strd	r6, r7, [r3]
 800bc10:	68e3      	ldr	r3, [r4, #12]
 800bc12:	3301      	adds	r3, #1
 800bc14:	60e3      	str	r3, [r4, #12]
 800bc16:	e66c      	b.n	800b8f2 <_scanf_float+0x82>
 800bc18:	9b04      	ldr	r3, [sp, #16]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d0e4      	beq.n	800bbe8 <_scanf_float+0x378>
 800bc1e:	9905      	ldr	r1, [sp, #20]
 800bc20:	230a      	movs	r3, #10
 800bc22:	462a      	mov	r2, r5
 800bc24:	3101      	adds	r1, #1
 800bc26:	4640      	mov	r0, r8
 800bc28:	f000 ff1e 	bl	800ca68 <_strtol_r>
 800bc2c:	9b04      	ldr	r3, [sp, #16]
 800bc2e:	9e05      	ldr	r6, [sp, #20]
 800bc30:	1ac2      	subs	r2, r0, r3
 800bc32:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bc36:	429e      	cmp	r6, r3
 800bc38:	bf28      	it	cs
 800bc3a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800bc3e:	4912      	ldr	r1, [pc, #72]	; (800bc88 <_scanf_float+0x418>)
 800bc40:	4630      	mov	r0, r6
 800bc42:	f000 f82b 	bl	800bc9c <siprintf>
 800bc46:	e7cf      	b.n	800bbe8 <_scanf_float+0x378>
 800bc48:	f011 0f04 	tst.w	r1, #4
 800bc4c:	9903      	ldr	r1, [sp, #12]
 800bc4e:	600a      	str	r2, [r1, #0]
 800bc50:	d1db      	bne.n	800bc0a <_scanf_float+0x39a>
 800bc52:	f8d3 8000 	ldr.w	r8, [r3]
 800bc56:	ee10 2a10 	vmov	r2, s0
 800bc5a:	ee10 0a10 	vmov	r0, s0
 800bc5e:	463b      	mov	r3, r7
 800bc60:	4639      	mov	r1, r7
 800bc62:	f7f4 ff7b 	bl	8000b5c <__aeabi_dcmpun>
 800bc66:	b128      	cbz	r0, 800bc74 <_scanf_float+0x404>
 800bc68:	4808      	ldr	r0, [pc, #32]	; (800bc8c <_scanf_float+0x41c>)
 800bc6a:	f000 f811 	bl	800bc90 <nanf>
 800bc6e:	ed88 0a00 	vstr	s0, [r8]
 800bc72:	e7cd      	b.n	800bc10 <_scanf_float+0x3a0>
 800bc74:	4630      	mov	r0, r6
 800bc76:	4639      	mov	r1, r7
 800bc78:	f7f4 ffce 	bl	8000c18 <__aeabi_d2f>
 800bc7c:	f8c8 0000 	str.w	r0, [r8]
 800bc80:	e7c6      	b.n	800bc10 <_scanf_float+0x3a0>
 800bc82:	2500      	movs	r5, #0
 800bc84:	e635      	b.n	800b8f2 <_scanf_float+0x82>
 800bc86:	bf00      	nop
 800bc88:	0800fa00 	.word	0x0800fa00
 800bc8c:	0800fe18 	.word	0x0800fe18

0800bc90 <nanf>:
 800bc90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bc98 <nanf+0x8>
 800bc94:	4770      	bx	lr
 800bc96:	bf00      	nop
 800bc98:	7fc00000 	.word	0x7fc00000

0800bc9c <siprintf>:
 800bc9c:	b40e      	push	{r1, r2, r3}
 800bc9e:	b500      	push	{lr}
 800bca0:	b09c      	sub	sp, #112	; 0x70
 800bca2:	ab1d      	add	r3, sp, #116	; 0x74
 800bca4:	9002      	str	r0, [sp, #8]
 800bca6:	9006      	str	r0, [sp, #24]
 800bca8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bcac:	4809      	ldr	r0, [pc, #36]	; (800bcd4 <siprintf+0x38>)
 800bcae:	9107      	str	r1, [sp, #28]
 800bcb0:	9104      	str	r1, [sp, #16]
 800bcb2:	4909      	ldr	r1, [pc, #36]	; (800bcd8 <siprintf+0x3c>)
 800bcb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcb8:	9105      	str	r1, [sp, #20]
 800bcba:	6800      	ldr	r0, [r0, #0]
 800bcbc:	9301      	str	r3, [sp, #4]
 800bcbe:	a902      	add	r1, sp, #8
 800bcc0:	f002 feac 	bl	800ea1c <_svfiprintf_r>
 800bcc4:	9b02      	ldr	r3, [sp, #8]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	701a      	strb	r2, [r3, #0]
 800bcca:	b01c      	add	sp, #112	; 0x70
 800bccc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcd0:	b003      	add	sp, #12
 800bcd2:	4770      	bx	lr
 800bcd4:	20000140 	.word	0x20000140
 800bcd8:	ffff0208 	.word	0xffff0208

0800bcdc <strncat>:
 800bcdc:	b530      	push	{r4, r5, lr}
 800bcde:	4604      	mov	r4, r0
 800bce0:	7825      	ldrb	r5, [r4, #0]
 800bce2:	4623      	mov	r3, r4
 800bce4:	3401      	adds	r4, #1
 800bce6:	2d00      	cmp	r5, #0
 800bce8:	d1fa      	bne.n	800bce0 <strncat+0x4>
 800bcea:	3a01      	subs	r2, #1
 800bcec:	d304      	bcc.n	800bcf8 <strncat+0x1c>
 800bcee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcf2:	f803 4b01 	strb.w	r4, [r3], #1
 800bcf6:	b904      	cbnz	r4, 800bcfa <strncat+0x1e>
 800bcf8:	bd30      	pop	{r4, r5, pc}
 800bcfa:	2a00      	cmp	r2, #0
 800bcfc:	d1f5      	bne.n	800bcea <strncat+0xe>
 800bcfe:	701a      	strb	r2, [r3, #0]
 800bd00:	e7f3      	b.n	800bcea <strncat+0xe>

0800bd02 <sulp>:
 800bd02:	b570      	push	{r4, r5, r6, lr}
 800bd04:	4604      	mov	r4, r0
 800bd06:	460d      	mov	r5, r1
 800bd08:	ec45 4b10 	vmov	d0, r4, r5
 800bd0c:	4616      	mov	r6, r2
 800bd0e:	f002 fc21 	bl	800e554 <__ulp>
 800bd12:	ec51 0b10 	vmov	r0, r1, d0
 800bd16:	b17e      	cbz	r6, 800bd38 <sulp+0x36>
 800bd18:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bd1c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	dd09      	ble.n	800bd38 <sulp+0x36>
 800bd24:	051b      	lsls	r3, r3, #20
 800bd26:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bd2a:	2400      	movs	r4, #0
 800bd2c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bd30:	4622      	mov	r2, r4
 800bd32:	462b      	mov	r3, r5
 800bd34:	f7f4 fc78 	bl	8000628 <__aeabi_dmul>
 800bd38:	bd70      	pop	{r4, r5, r6, pc}
 800bd3a:	0000      	movs	r0, r0
 800bd3c:	0000      	movs	r0, r0
	...

0800bd40 <_strtod_l>:
 800bd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd44:	b0a3      	sub	sp, #140	; 0x8c
 800bd46:	461f      	mov	r7, r3
 800bd48:	2300      	movs	r3, #0
 800bd4a:	931e      	str	r3, [sp, #120]	; 0x78
 800bd4c:	4ba4      	ldr	r3, [pc, #656]	; (800bfe0 <_strtod_l+0x2a0>)
 800bd4e:	9219      	str	r2, [sp, #100]	; 0x64
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	9307      	str	r3, [sp, #28]
 800bd54:	4604      	mov	r4, r0
 800bd56:	4618      	mov	r0, r3
 800bd58:	4688      	mov	r8, r1
 800bd5a:	f7f4 fa51 	bl	8000200 <strlen>
 800bd5e:	f04f 0a00 	mov.w	sl, #0
 800bd62:	4605      	mov	r5, r0
 800bd64:	f04f 0b00 	mov.w	fp, #0
 800bd68:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800bd6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bd6e:	781a      	ldrb	r2, [r3, #0]
 800bd70:	2a2b      	cmp	r2, #43	; 0x2b
 800bd72:	d04c      	beq.n	800be0e <_strtod_l+0xce>
 800bd74:	d839      	bhi.n	800bdea <_strtod_l+0xaa>
 800bd76:	2a0d      	cmp	r2, #13
 800bd78:	d832      	bhi.n	800bde0 <_strtod_l+0xa0>
 800bd7a:	2a08      	cmp	r2, #8
 800bd7c:	d832      	bhi.n	800bde4 <_strtod_l+0xa4>
 800bd7e:	2a00      	cmp	r2, #0
 800bd80:	d03c      	beq.n	800bdfc <_strtod_l+0xbc>
 800bd82:	2300      	movs	r3, #0
 800bd84:	930e      	str	r3, [sp, #56]	; 0x38
 800bd86:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800bd88:	7833      	ldrb	r3, [r6, #0]
 800bd8a:	2b30      	cmp	r3, #48	; 0x30
 800bd8c:	f040 80b4 	bne.w	800bef8 <_strtod_l+0x1b8>
 800bd90:	7873      	ldrb	r3, [r6, #1]
 800bd92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bd96:	2b58      	cmp	r3, #88	; 0x58
 800bd98:	d16c      	bne.n	800be74 <_strtod_l+0x134>
 800bd9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd9c:	9301      	str	r3, [sp, #4]
 800bd9e:	ab1e      	add	r3, sp, #120	; 0x78
 800bda0:	9702      	str	r7, [sp, #8]
 800bda2:	9300      	str	r3, [sp, #0]
 800bda4:	4a8f      	ldr	r2, [pc, #572]	; (800bfe4 <_strtod_l+0x2a4>)
 800bda6:	ab1f      	add	r3, sp, #124	; 0x7c
 800bda8:	a91d      	add	r1, sp, #116	; 0x74
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f001 fd40 	bl	800d830 <__gethex>
 800bdb0:	f010 0707 	ands.w	r7, r0, #7
 800bdb4:	4605      	mov	r5, r0
 800bdb6:	d005      	beq.n	800bdc4 <_strtod_l+0x84>
 800bdb8:	2f06      	cmp	r7, #6
 800bdba:	d12a      	bne.n	800be12 <_strtod_l+0xd2>
 800bdbc:	3601      	adds	r6, #1
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	961d      	str	r6, [sp, #116]	; 0x74
 800bdc2:	930e      	str	r3, [sp, #56]	; 0x38
 800bdc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	f040 8596 	bne.w	800c8f8 <_strtod_l+0xbb8>
 800bdcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bdce:	b1db      	cbz	r3, 800be08 <_strtod_l+0xc8>
 800bdd0:	4652      	mov	r2, sl
 800bdd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bdd6:	ec43 2b10 	vmov	d0, r2, r3
 800bdda:	b023      	add	sp, #140	; 0x8c
 800bddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde0:	2a20      	cmp	r2, #32
 800bde2:	d1ce      	bne.n	800bd82 <_strtod_l+0x42>
 800bde4:	3301      	adds	r3, #1
 800bde6:	931d      	str	r3, [sp, #116]	; 0x74
 800bde8:	e7c0      	b.n	800bd6c <_strtod_l+0x2c>
 800bdea:	2a2d      	cmp	r2, #45	; 0x2d
 800bdec:	d1c9      	bne.n	800bd82 <_strtod_l+0x42>
 800bdee:	2201      	movs	r2, #1
 800bdf0:	920e      	str	r2, [sp, #56]	; 0x38
 800bdf2:	1c5a      	adds	r2, r3, #1
 800bdf4:	921d      	str	r2, [sp, #116]	; 0x74
 800bdf6:	785b      	ldrb	r3, [r3, #1]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d1c4      	bne.n	800bd86 <_strtod_l+0x46>
 800bdfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bdfe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800be02:	2b00      	cmp	r3, #0
 800be04:	f040 8576 	bne.w	800c8f4 <_strtod_l+0xbb4>
 800be08:	4652      	mov	r2, sl
 800be0a:	465b      	mov	r3, fp
 800be0c:	e7e3      	b.n	800bdd6 <_strtod_l+0x96>
 800be0e:	2200      	movs	r2, #0
 800be10:	e7ee      	b.n	800bdf0 <_strtod_l+0xb0>
 800be12:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800be14:	b13a      	cbz	r2, 800be26 <_strtod_l+0xe6>
 800be16:	2135      	movs	r1, #53	; 0x35
 800be18:	a820      	add	r0, sp, #128	; 0x80
 800be1a:	f002 fca6 	bl	800e76a <__copybits>
 800be1e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800be20:	4620      	mov	r0, r4
 800be22:	f002 f86b 	bl	800defc <_Bfree>
 800be26:	3f01      	subs	r7, #1
 800be28:	2f05      	cmp	r7, #5
 800be2a:	d807      	bhi.n	800be3c <_strtod_l+0xfc>
 800be2c:	e8df f007 	tbb	[pc, r7]
 800be30:	1d180b0e 	.word	0x1d180b0e
 800be34:	030e      	.short	0x030e
 800be36:	f04f 0b00 	mov.w	fp, #0
 800be3a:	46da      	mov	sl, fp
 800be3c:	0728      	lsls	r0, r5, #28
 800be3e:	d5c1      	bpl.n	800bdc4 <_strtod_l+0x84>
 800be40:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800be44:	e7be      	b.n	800bdc4 <_strtod_l+0x84>
 800be46:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800be4a:	e7f7      	b.n	800be3c <_strtod_l+0xfc>
 800be4c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800be50:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800be52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800be56:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800be5a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800be5e:	e7ed      	b.n	800be3c <_strtod_l+0xfc>
 800be60:	f8df b184 	ldr.w	fp, [pc, #388]	; 800bfe8 <_strtod_l+0x2a8>
 800be64:	f04f 0a00 	mov.w	sl, #0
 800be68:	e7e8      	b.n	800be3c <_strtod_l+0xfc>
 800be6a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800be6e:	f04f 3aff 	mov.w	sl, #4294967295
 800be72:	e7e3      	b.n	800be3c <_strtod_l+0xfc>
 800be74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800be76:	1c5a      	adds	r2, r3, #1
 800be78:	921d      	str	r2, [sp, #116]	; 0x74
 800be7a:	785b      	ldrb	r3, [r3, #1]
 800be7c:	2b30      	cmp	r3, #48	; 0x30
 800be7e:	d0f9      	beq.n	800be74 <_strtod_l+0x134>
 800be80:	2b00      	cmp	r3, #0
 800be82:	d09f      	beq.n	800bdc4 <_strtod_l+0x84>
 800be84:	2301      	movs	r3, #1
 800be86:	f04f 0900 	mov.w	r9, #0
 800be8a:	9304      	str	r3, [sp, #16]
 800be8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800be8e:	930a      	str	r3, [sp, #40]	; 0x28
 800be90:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800be94:	464f      	mov	r7, r9
 800be96:	220a      	movs	r2, #10
 800be98:	981d      	ldr	r0, [sp, #116]	; 0x74
 800be9a:	7806      	ldrb	r6, [r0, #0]
 800be9c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800bea0:	b2d9      	uxtb	r1, r3
 800bea2:	2909      	cmp	r1, #9
 800bea4:	d92a      	bls.n	800befc <_strtod_l+0x1bc>
 800bea6:	9907      	ldr	r1, [sp, #28]
 800bea8:	462a      	mov	r2, r5
 800beaa:	f002 fed1 	bl	800ec50 <strncmp>
 800beae:	b398      	cbz	r0, 800bf18 <_strtod_l+0x1d8>
 800beb0:	2000      	movs	r0, #0
 800beb2:	4633      	mov	r3, r6
 800beb4:	463d      	mov	r5, r7
 800beb6:	9007      	str	r0, [sp, #28]
 800beb8:	4602      	mov	r2, r0
 800beba:	2b65      	cmp	r3, #101	; 0x65
 800bebc:	d001      	beq.n	800bec2 <_strtod_l+0x182>
 800bebe:	2b45      	cmp	r3, #69	; 0x45
 800bec0:	d118      	bne.n	800bef4 <_strtod_l+0x1b4>
 800bec2:	b91d      	cbnz	r5, 800becc <_strtod_l+0x18c>
 800bec4:	9b04      	ldr	r3, [sp, #16]
 800bec6:	4303      	orrs	r3, r0
 800bec8:	d098      	beq.n	800bdfc <_strtod_l+0xbc>
 800beca:	2500      	movs	r5, #0
 800becc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800bed0:	f108 0301 	add.w	r3, r8, #1
 800bed4:	931d      	str	r3, [sp, #116]	; 0x74
 800bed6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800beda:	2b2b      	cmp	r3, #43	; 0x2b
 800bedc:	d075      	beq.n	800bfca <_strtod_l+0x28a>
 800bede:	2b2d      	cmp	r3, #45	; 0x2d
 800bee0:	d07b      	beq.n	800bfda <_strtod_l+0x29a>
 800bee2:	f04f 0c00 	mov.w	ip, #0
 800bee6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800beea:	2909      	cmp	r1, #9
 800beec:	f240 8082 	bls.w	800bff4 <_strtod_l+0x2b4>
 800bef0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800bef4:	2600      	movs	r6, #0
 800bef6:	e09d      	b.n	800c034 <_strtod_l+0x2f4>
 800bef8:	2300      	movs	r3, #0
 800befa:	e7c4      	b.n	800be86 <_strtod_l+0x146>
 800befc:	2f08      	cmp	r7, #8
 800befe:	bfd8      	it	le
 800bf00:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800bf02:	f100 0001 	add.w	r0, r0, #1
 800bf06:	bfda      	itte	le
 800bf08:	fb02 3301 	mlale	r3, r2, r1, r3
 800bf0c:	9309      	strle	r3, [sp, #36]	; 0x24
 800bf0e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800bf12:	3701      	adds	r7, #1
 800bf14:	901d      	str	r0, [sp, #116]	; 0x74
 800bf16:	e7bf      	b.n	800be98 <_strtod_l+0x158>
 800bf18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bf1a:	195a      	adds	r2, r3, r5
 800bf1c:	921d      	str	r2, [sp, #116]	; 0x74
 800bf1e:	5d5b      	ldrb	r3, [r3, r5]
 800bf20:	2f00      	cmp	r7, #0
 800bf22:	d037      	beq.n	800bf94 <_strtod_l+0x254>
 800bf24:	9007      	str	r0, [sp, #28]
 800bf26:	463d      	mov	r5, r7
 800bf28:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bf2c:	2a09      	cmp	r2, #9
 800bf2e:	d912      	bls.n	800bf56 <_strtod_l+0x216>
 800bf30:	2201      	movs	r2, #1
 800bf32:	e7c2      	b.n	800beba <_strtod_l+0x17a>
 800bf34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bf36:	1c5a      	adds	r2, r3, #1
 800bf38:	921d      	str	r2, [sp, #116]	; 0x74
 800bf3a:	785b      	ldrb	r3, [r3, #1]
 800bf3c:	3001      	adds	r0, #1
 800bf3e:	2b30      	cmp	r3, #48	; 0x30
 800bf40:	d0f8      	beq.n	800bf34 <_strtod_l+0x1f4>
 800bf42:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800bf46:	2a08      	cmp	r2, #8
 800bf48:	f200 84db 	bhi.w	800c902 <_strtod_l+0xbc2>
 800bf4c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bf4e:	9007      	str	r0, [sp, #28]
 800bf50:	2000      	movs	r0, #0
 800bf52:	920a      	str	r2, [sp, #40]	; 0x28
 800bf54:	4605      	mov	r5, r0
 800bf56:	3b30      	subs	r3, #48	; 0x30
 800bf58:	f100 0201 	add.w	r2, r0, #1
 800bf5c:	d014      	beq.n	800bf88 <_strtod_l+0x248>
 800bf5e:	9907      	ldr	r1, [sp, #28]
 800bf60:	4411      	add	r1, r2
 800bf62:	9107      	str	r1, [sp, #28]
 800bf64:	462a      	mov	r2, r5
 800bf66:	eb00 0e05 	add.w	lr, r0, r5
 800bf6a:	210a      	movs	r1, #10
 800bf6c:	4572      	cmp	r2, lr
 800bf6e:	d113      	bne.n	800bf98 <_strtod_l+0x258>
 800bf70:	182a      	adds	r2, r5, r0
 800bf72:	2a08      	cmp	r2, #8
 800bf74:	f105 0501 	add.w	r5, r5, #1
 800bf78:	4405      	add	r5, r0
 800bf7a:	dc1c      	bgt.n	800bfb6 <_strtod_l+0x276>
 800bf7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf7e:	220a      	movs	r2, #10
 800bf80:	fb02 3301 	mla	r3, r2, r1, r3
 800bf84:	9309      	str	r3, [sp, #36]	; 0x24
 800bf86:	2200      	movs	r2, #0
 800bf88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bf8a:	1c59      	adds	r1, r3, #1
 800bf8c:	911d      	str	r1, [sp, #116]	; 0x74
 800bf8e:	785b      	ldrb	r3, [r3, #1]
 800bf90:	4610      	mov	r0, r2
 800bf92:	e7c9      	b.n	800bf28 <_strtod_l+0x1e8>
 800bf94:	4638      	mov	r0, r7
 800bf96:	e7d2      	b.n	800bf3e <_strtod_l+0x1fe>
 800bf98:	2a08      	cmp	r2, #8
 800bf9a:	dc04      	bgt.n	800bfa6 <_strtod_l+0x266>
 800bf9c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bf9e:	434e      	muls	r6, r1
 800bfa0:	9609      	str	r6, [sp, #36]	; 0x24
 800bfa2:	3201      	adds	r2, #1
 800bfa4:	e7e2      	b.n	800bf6c <_strtod_l+0x22c>
 800bfa6:	f102 0c01 	add.w	ip, r2, #1
 800bfaa:	f1bc 0f10 	cmp.w	ip, #16
 800bfae:	bfd8      	it	le
 800bfb0:	fb01 f909 	mulle.w	r9, r1, r9
 800bfb4:	e7f5      	b.n	800bfa2 <_strtod_l+0x262>
 800bfb6:	2d10      	cmp	r5, #16
 800bfb8:	bfdc      	itt	le
 800bfba:	220a      	movle	r2, #10
 800bfbc:	fb02 3909 	mlale	r9, r2, r9, r3
 800bfc0:	e7e1      	b.n	800bf86 <_strtod_l+0x246>
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	9307      	str	r3, [sp, #28]
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	e77c      	b.n	800bec4 <_strtod_l+0x184>
 800bfca:	f04f 0c00 	mov.w	ip, #0
 800bfce:	f108 0302 	add.w	r3, r8, #2
 800bfd2:	931d      	str	r3, [sp, #116]	; 0x74
 800bfd4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800bfd8:	e785      	b.n	800bee6 <_strtod_l+0x1a6>
 800bfda:	f04f 0c01 	mov.w	ip, #1
 800bfde:	e7f6      	b.n	800bfce <_strtod_l+0x28e>
 800bfe0:	0800fc58 	.word	0x0800fc58
 800bfe4:	0800fa08 	.word	0x0800fa08
 800bfe8:	7ff00000 	.word	0x7ff00000
 800bfec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bfee:	1c59      	adds	r1, r3, #1
 800bff0:	911d      	str	r1, [sp, #116]	; 0x74
 800bff2:	785b      	ldrb	r3, [r3, #1]
 800bff4:	2b30      	cmp	r3, #48	; 0x30
 800bff6:	d0f9      	beq.n	800bfec <_strtod_l+0x2ac>
 800bff8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800bffc:	2908      	cmp	r1, #8
 800bffe:	f63f af79 	bhi.w	800bef4 <_strtod_l+0x1b4>
 800c002:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800c006:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c008:	9308      	str	r3, [sp, #32]
 800c00a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c00c:	1c59      	adds	r1, r3, #1
 800c00e:	911d      	str	r1, [sp, #116]	; 0x74
 800c010:	785b      	ldrb	r3, [r3, #1]
 800c012:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800c016:	2e09      	cmp	r6, #9
 800c018:	d937      	bls.n	800c08a <_strtod_l+0x34a>
 800c01a:	9e08      	ldr	r6, [sp, #32]
 800c01c:	1b89      	subs	r1, r1, r6
 800c01e:	2908      	cmp	r1, #8
 800c020:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c024:	dc02      	bgt.n	800c02c <_strtod_l+0x2ec>
 800c026:	4576      	cmp	r6, lr
 800c028:	bfa8      	it	ge
 800c02a:	4676      	movge	r6, lr
 800c02c:	f1bc 0f00 	cmp.w	ip, #0
 800c030:	d000      	beq.n	800c034 <_strtod_l+0x2f4>
 800c032:	4276      	negs	r6, r6
 800c034:	2d00      	cmp	r5, #0
 800c036:	d14f      	bne.n	800c0d8 <_strtod_l+0x398>
 800c038:	9904      	ldr	r1, [sp, #16]
 800c03a:	4301      	orrs	r1, r0
 800c03c:	f47f aec2 	bne.w	800bdc4 <_strtod_l+0x84>
 800c040:	2a00      	cmp	r2, #0
 800c042:	f47f aedb 	bne.w	800bdfc <_strtod_l+0xbc>
 800c046:	2b69      	cmp	r3, #105	; 0x69
 800c048:	d027      	beq.n	800c09a <_strtod_l+0x35a>
 800c04a:	dc24      	bgt.n	800c096 <_strtod_l+0x356>
 800c04c:	2b49      	cmp	r3, #73	; 0x49
 800c04e:	d024      	beq.n	800c09a <_strtod_l+0x35a>
 800c050:	2b4e      	cmp	r3, #78	; 0x4e
 800c052:	f47f aed3 	bne.w	800bdfc <_strtod_l+0xbc>
 800c056:	499e      	ldr	r1, [pc, #632]	; (800c2d0 <_strtod_l+0x590>)
 800c058:	a81d      	add	r0, sp, #116	; 0x74
 800c05a:	f001 fe41 	bl	800dce0 <__match>
 800c05e:	2800      	cmp	r0, #0
 800c060:	f43f aecc 	beq.w	800bdfc <_strtod_l+0xbc>
 800c064:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	2b28      	cmp	r3, #40	; 0x28
 800c06a:	d12d      	bne.n	800c0c8 <_strtod_l+0x388>
 800c06c:	4999      	ldr	r1, [pc, #612]	; (800c2d4 <_strtod_l+0x594>)
 800c06e:	aa20      	add	r2, sp, #128	; 0x80
 800c070:	a81d      	add	r0, sp, #116	; 0x74
 800c072:	f001 fe49 	bl	800dd08 <__hexnan>
 800c076:	2805      	cmp	r0, #5
 800c078:	d126      	bne.n	800c0c8 <_strtod_l+0x388>
 800c07a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c07c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800c080:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c084:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c088:	e69c      	b.n	800bdc4 <_strtod_l+0x84>
 800c08a:	210a      	movs	r1, #10
 800c08c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800c090:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c094:	e7b9      	b.n	800c00a <_strtod_l+0x2ca>
 800c096:	2b6e      	cmp	r3, #110	; 0x6e
 800c098:	e7db      	b.n	800c052 <_strtod_l+0x312>
 800c09a:	498f      	ldr	r1, [pc, #572]	; (800c2d8 <_strtod_l+0x598>)
 800c09c:	a81d      	add	r0, sp, #116	; 0x74
 800c09e:	f001 fe1f 	bl	800dce0 <__match>
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	f43f aeaa 	beq.w	800bdfc <_strtod_l+0xbc>
 800c0a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c0aa:	498c      	ldr	r1, [pc, #560]	; (800c2dc <_strtod_l+0x59c>)
 800c0ac:	3b01      	subs	r3, #1
 800c0ae:	a81d      	add	r0, sp, #116	; 0x74
 800c0b0:	931d      	str	r3, [sp, #116]	; 0x74
 800c0b2:	f001 fe15 	bl	800dce0 <__match>
 800c0b6:	b910      	cbnz	r0, 800c0be <_strtod_l+0x37e>
 800c0b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	931d      	str	r3, [sp, #116]	; 0x74
 800c0be:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800c2ec <_strtod_l+0x5ac>
 800c0c2:	f04f 0a00 	mov.w	sl, #0
 800c0c6:	e67d      	b.n	800bdc4 <_strtod_l+0x84>
 800c0c8:	4885      	ldr	r0, [pc, #532]	; (800c2e0 <_strtod_l+0x5a0>)
 800c0ca:	f002 fda9 	bl	800ec20 <nan>
 800c0ce:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c0d2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c0d6:	e675      	b.n	800bdc4 <_strtod_l+0x84>
 800c0d8:	9b07      	ldr	r3, [sp, #28]
 800c0da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0dc:	1af3      	subs	r3, r6, r3
 800c0de:	2f00      	cmp	r7, #0
 800c0e0:	bf08      	it	eq
 800c0e2:	462f      	moveq	r7, r5
 800c0e4:	2d10      	cmp	r5, #16
 800c0e6:	9308      	str	r3, [sp, #32]
 800c0e8:	46a8      	mov	r8, r5
 800c0ea:	bfa8      	it	ge
 800c0ec:	f04f 0810 	movge.w	r8, #16
 800c0f0:	f7f4 fa20 	bl	8000534 <__aeabi_ui2d>
 800c0f4:	2d09      	cmp	r5, #9
 800c0f6:	4682      	mov	sl, r0
 800c0f8:	468b      	mov	fp, r1
 800c0fa:	dd13      	ble.n	800c124 <_strtod_l+0x3e4>
 800c0fc:	4b79      	ldr	r3, [pc, #484]	; (800c2e4 <_strtod_l+0x5a4>)
 800c0fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c102:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c106:	f7f4 fa8f 	bl	8000628 <__aeabi_dmul>
 800c10a:	4682      	mov	sl, r0
 800c10c:	4648      	mov	r0, r9
 800c10e:	468b      	mov	fp, r1
 800c110:	f7f4 fa10 	bl	8000534 <__aeabi_ui2d>
 800c114:	4602      	mov	r2, r0
 800c116:	460b      	mov	r3, r1
 800c118:	4650      	mov	r0, sl
 800c11a:	4659      	mov	r1, fp
 800c11c:	f7f4 f8ce 	bl	80002bc <__adddf3>
 800c120:	4682      	mov	sl, r0
 800c122:	468b      	mov	fp, r1
 800c124:	2d0f      	cmp	r5, #15
 800c126:	dc38      	bgt.n	800c19a <_strtod_l+0x45a>
 800c128:	9b08      	ldr	r3, [sp, #32]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	f43f ae4a 	beq.w	800bdc4 <_strtod_l+0x84>
 800c130:	dd24      	ble.n	800c17c <_strtod_l+0x43c>
 800c132:	2b16      	cmp	r3, #22
 800c134:	dc0b      	bgt.n	800c14e <_strtod_l+0x40e>
 800c136:	4d6b      	ldr	r5, [pc, #428]	; (800c2e4 <_strtod_l+0x5a4>)
 800c138:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800c13c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c140:	4652      	mov	r2, sl
 800c142:	465b      	mov	r3, fp
 800c144:	f7f4 fa70 	bl	8000628 <__aeabi_dmul>
 800c148:	4682      	mov	sl, r0
 800c14a:	468b      	mov	fp, r1
 800c14c:	e63a      	b.n	800bdc4 <_strtod_l+0x84>
 800c14e:	9a08      	ldr	r2, [sp, #32]
 800c150:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c154:	4293      	cmp	r3, r2
 800c156:	db20      	blt.n	800c19a <_strtod_l+0x45a>
 800c158:	4c62      	ldr	r4, [pc, #392]	; (800c2e4 <_strtod_l+0x5a4>)
 800c15a:	f1c5 050f 	rsb	r5, r5, #15
 800c15e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c162:	4652      	mov	r2, sl
 800c164:	465b      	mov	r3, fp
 800c166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c16a:	f7f4 fa5d 	bl	8000628 <__aeabi_dmul>
 800c16e:	9b08      	ldr	r3, [sp, #32]
 800c170:	1b5d      	subs	r5, r3, r5
 800c172:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c176:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c17a:	e7e3      	b.n	800c144 <_strtod_l+0x404>
 800c17c:	9b08      	ldr	r3, [sp, #32]
 800c17e:	3316      	adds	r3, #22
 800c180:	db0b      	blt.n	800c19a <_strtod_l+0x45a>
 800c182:	9b07      	ldr	r3, [sp, #28]
 800c184:	4a57      	ldr	r2, [pc, #348]	; (800c2e4 <_strtod_l+0x5a4>)
 800c186:	1b9e      	subs	r6, r3, r6
 800c188:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800c18c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c190:	4650      	mov	r0, sl
 800c192:	4659      	mov	r1, fp
 800c194:	f7f4 fb72 	bl	800087c <__aeabi_ddiv>
 800c198:	e7d6      	b.n	800c148 <_strtod_l+0x408>
 800c19a:	9b08      	ldr	r3, [sp, #32]
 800c19c:	eba5 0808 	sub.w	r8, r5, r8
 800c1a0:	4498      	add	r8, r3
 800c1a2:	f1b8 0f00 	cmp.w	r8, #0
 800c1a6:	dd71      	ble.n	800c28c <_strtod_l+0x54c>
 800c1a8:	f018 030f 	ands.w	r3, r8, #15
 800c1ac:	d00a      	beq.n	800c1c4 <_strtod_l+0x484>
 800c1ae:	494d      	ldr	r1, [pc, #308]	; (800c2e4 <_strtod_l+0x5a4>)
 800c1b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c1b4:	4652      	mov	r2, sl
 800c1b6:	465b      	mov	r3, fp
 800c1b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1bc:	f7f4 fa34 	bl	8000628 <__aeabi_dmul>
 800c1c0:	4682      	mov	sl, r0
 800c1c2:	468b      	mov	fp, r1
 800c1c4:	f038 080f 	bics.w	r8, r8, #15
 800c1c8:	d04d      	beq.n	800c266 <_strtod_l+0x526>
 800c1ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c1ce:	dd22      	ble.n	800c216 <_strtod_l+0x4d6>
 800c1d0:	2500      	movs	r5, #0
 800c1d2:	462e      	mov	r6, r5
 800c1d4:	9509      	str	r5, [sp, #36]	; 0x24
 800c1d6:	9507      	str	r5, [sp, #28]
 800c1d8:	2322      	movs	r3, #34	; 0x22
 800c1da:	f8df b110 	ldr.w	fp, [pc, #272]	; 800c2ec <_strtod_l+0x5ac>
 800c1de:	6023      	str	r3, [r4, #0]
 800c1e0:	f04f 0a00 	mov.w	sl, #0
 800c1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	f43f adec 	beq.w	800bdc4 <_strtod_l+0x84>
 800c1ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f001 fe84 	bl	800defc <_Bfree>
 800c1f4:	9907      	ldr	r1, [sp, #28]
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	f001 fe80 	bl	800defc <_Bfree>
 800c1fc:	4631      	mov	r1, r6
 800c1fe:	4620      	mov	r0, r4
 800c200:	f001 fe7c 	bl	800defc <_Bfree>
 800c204:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c206:	4620      	mov	r0, r4
 800c208:	f001 fe78 	bl	800defc <_Bfree>
 800c20c:	4629      	mov	r1, r5
 800c20e:	4620      	mov	r0, r4
 800c210:	f001 fe74 	bl	800defc <_Bfree>
 800c214:	e5d6      	b.n	800bdc4 <_strtod_l+0x84>
 800c216:	2300      	movs	r3, #0
 800c218:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c21c:	4650      	mov	r0, sl
 800c21e:	4659      	mov	r1, fp
 800c220:	4699      	mov	r9, r3
 800c222:	f1b8 0f01 	cmp.w	r8, #1
 800c226:	dc21      	bgt.n	800c26c <_strtod_l+0x52c>
 800c228:	b10b      	cbz	r3, 800c22e <_strtod_l+0x4ee>
 800c22a:	4682      	mov	sl, r0
 800c22c:	468b      	mov	fp, r1
 800c22e:	4b2e      	ldr	r3, [pc, #184]	; (800c2e8 <_strtod_l+0x5a8>)
 800c230:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c234:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c238:	4652      	mov	r2, sl
 800c23a:	465b      	mov	r3, fp
 800c23c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c240:	f7f4 f9f2 	bl	8000628 <__aeabi_dmul>
 800c244:	4b29      	ldr	r3, [pc, #164]	; (800c2ec <_strtod_l+0x5ac>)
 800c246:	460a      	mov	r2, r1
 800c248:	400b      	ands	r3, r1
 800c24a:	4929      	ldr	r1, [pc, #164]	; (800c2f0 <_strtod_l+0x5b0>)
 800c24c:	428b      	cmp	r3, r1
 800c24e:	4682      	mov	sl, r0
 800c250:	d8be      	bhi.n	800c1d0 <_strtod_l+0x490>
 800c252:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c256:	428b      	cmp	r3, r1
 800c258:	bf86      	itte	hi
 800c25a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800c2f4 <_strtod_l+0x5b4>
 800c25e:	f04f 3aff 	movhi.w	sl, #4294967295
 800c262:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c266:	2300      	movs	r3, #0
 800c268:	9304      	str	r3, [sp, #16]
 800c26a:	e081      	b.n	800c370 <_strtod_l+0x630>
 800c26c:	f018 0f01 	tst.w	r8, #1
 800c270:	d007      	beq.n	800c282 <_strtod_l+0x542>
 800c272:	4b1d      	ldr	r3, [pc, #116]	; (800c2e8 <_strtod_l+0x5a8>)
 800c274:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800c278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27c:	f7f4 f9d4 	bl	8000628 <__aeabi_dmul>
 800c280:	2301      	movs	r3, #1
 800c282:	f109 0901 	add.w	r9, r9, #1
 800c286:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c28a:	e7ca      	b.n	800c222 <_strtod_l+0x4e2>
 800c28c:	d0eb      	beq.n	800c266 <_strtod_l+0x526>
 800c28e:	f1c8 0800 	rsb	r8, r8, #0
 800c292:	f018 020f 	ands.w	r2, r8, #15
 800c296:	d00a      	beq.n	800c2ae <_strtod_l+0x56e>
 800c298:	4b12      	ldr	r3, [pc, #72]	; (800c2e4 <_strtod_l+0x5a4>)
 800c29a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c29e:	4650      	mov	r0, sl
 800c2a0:	4659      	mov	r1, fp
 800c2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a6:	f7f4 fae9 	bl	800087c <__aeabi_ddiv>
 800c2aa:	4682      	mov	sl, r0
 800c2ac:	468b      	mov	fp, r1
 800c2ae:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c2b2:	d0d8      	beq.n	800c266 <_strtod_l+0x526>
 800c2b4:	f1b8 0f1f 	cmp.w	r8, #31
 800c2b8:	dd1e      	ble.n	800c2f8 <_strtod_l+0x5b8>
 800c2ba:	2500      	movs	r5, #0
 800c2bc:	462e      	mov	r6, r5
 800c2be:	9509      	str	r5, [sp, #36]	; 0x24
 800c2c0:	9507      	str	r5, [sp, #28]
 800c2c2:	2322      	movs	r3, #34	; 0x22
 800c2c4:	f04f 0a00 	mov.w	sl, #0
 800c2c8:	f04f 0b00 	mov.w	fp, #0
 800c2cc:	6023      	str	r3, [r4, #0]
 800c2ce:	e789      	b.n	800c1e4 <_strtod_l+0x4a4>
 800c2d0:	0800f9d9 	.word	0x0800f9d9
 800c2d4:	0800fa1c 	.word	0x0800fa1c
 800c2d8:	0800f9d1 	.word	0x0800f9d1
 800c2dc:	0800fb5c 	.word	0x0800fb5c
 800c2e0:	0800fe18 	.word	0x0800fe18
 800c2e4:	0800fcf8 	.word	0x0800fcf8
 800c2e8:	0800fcd0 	.word	0x0800fcd0
 800c2ec:	7ff00000 	.word	0x7ff00000
 800c2f0:	7ca00000 	.word	0x7ca00000
 800c2f4:	7fefffff 	.word	0x7fefffff
 800c2f8:	f018 0310 	ands.w	r3, r8, #16
 800c2fc:	bf18      	it	ne
 800c2fe:	236a      	movne	r3, #106	; 0x6a
 800c300:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800c6b8 <_strtod_l+0x978>
 800c304:	9304      	str	r3, [sp, #16]
 800c306:	4650      	mov	r0, sl
 800c308:	4659      	mov	r1, fp
 800c30a:	2300      	movs	r3, #0
 800c30c:	f018 0f01 	tst.w	r8, #1
 800c310:	d004      	beq.n	800c31c <_strtod_l+0x5dc>
 800c312:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c316:	f7f4 f987 	bl	8000628 <__aeabi_dmul>
 800c31a:	2301      	movs	r3, #1
 800c31c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c320:	f109 0908 	add.w	r9, r9, #8
 800c324:	d1f2      	bne.n	800c30c <_strtod_l+0x5cc>
 800c326:	b10b      	cbz	r3, 800c32c <_strtod_l+0x5ec>
 800c328:	4682      	mov	sl, r0
 800c32a:	468b      	mov	fp, r1
 800c32c:	9b04      	ldr	r3, [sp, #16]
 800c32e:	b1bb      	cbz	r3, 800c360 <_strtod_l+0x620>
 800c330:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c334:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c338:	2b00      	cmp	r3, #0
 800c33a:	4659      	mov	r1, fp
 800c33c:	dd10      	ble.n	800c360 <_strtod_l+0x620>
 800c33e:	2b1f      	cmp	r3, #31
 800c340:	f340 8128 	ble.w	800c594 <_strtod_l+0x854>
 800c344:	2b34      	cmp	r3, #52	; 0x34
 800c346:	bfde      	ittt	le
 800c348:	3b20      	suble	r3, #32
 800c34a:	f04f 32ff 	movle.w	r2, #4294967295
 800c34e:	fa02 f303 	lslle.w	r3, r2, r3
 800c352:	f04f 0a00 	mov.w	sl, #0
 800c356:	bfcc      	ite	gt
 800c358:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c35c:	ea03 0b01 	andle.w	fp, r3, r1
 800c360:	2200      	movs	r2, #0
 800c362:	2300      	movs	r3, #0
 800c364:	4650      	mov	r0, sl
 800c366:	4659      	mov	r1, fp
 800c368:	f7f4 fbc6 	bl	8000af8 <__aeabi_dcmpeq>
 800c36c:	2800      	cmp	r0, #0
 800c36e:	d1a4      	bne.n	800c2ba <_strtod_l+0x57a>
 800c370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c372:	9300      	str	r3, [sp, #0]
 800c374:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c376:	462b      	mov	r3, r5
 800c378:	463a      	mov	r2, r7
 800c37a:	4620      	mov	r0, r4
 800c37c:	f001 fe2a 	bl	800dfd4 <__s2b>
 800c380:	9009      	str	r0, [sp, #36]	; 0x24
 800c382:	2800      	cmp	r0, #0
 800c384:	f43f af24 	beq.w	800c1d0 <_strtod_l+0x490>
 800c388:	9b07      	ldr	r3, [sp, #28]
 800c38a:	1b9e      	subs	r6, r3, r6
 800c38c:	9b08      	ldr	r3, [sp, #32]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	bfb4      	ite	lt
 800c392:	4633      	movlt	r3, r6
 800c394:	2300      	movge	r3, #0
 800c396:	9310      	str	r3, [sp, #64]	; 0x40
 800c398:	9b08      	ldr	r3, [sp, #32]
 800c39a:	2500      	movs	r5, #0
 800c39c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c3a0:	9318      	str	r3, [sp, #96]	; 0x60
 800c3a2:	462e      	mov	r6, r5
 800c3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	6859      	ldr	r1, [r3, #4]
 800c3aa:	f001 fd67 	bl	800de7c <_Balloc>
 800c3ae:	9007      	str	r0, [sp, #28]
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	f43f af11 	beq.w	800c1d8 <_strtod_l+0x498>
 800c3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3b8:	691a      	ldr	r2, [r3, #16]
 800c3ba:	3202      	adds	r2, #2
 800c3bc:	f103 010c 	add.w	r1, r3, #12
 800c3c0:	0092      	lsls	r2, r2, #2
 800c3c2:	300c      	adds	r0, #12
 800c3c4:	f7fe fdd4 	bl	800af70 <memcpy>
 800c3c8:	ec4b ab10 	vmov	d0, sl, fp
 800c3cc:	aa20      	add	r2, sp, #128	; 0x80
 800c3ce:	a91f      	add	r1, sp, #124	; 0x7c
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800c3d6:	f002 f939 	bl	800e64c <__d2b>
 800c3da:	901e      	str	r0, [sp, #120]	; 0x78
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	f43f aefb 	beq.w	800c1d8 <_strtod_l+0x498>
 800c3e2:	2101      	movs	r1, #1
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f001 fe8f 	bl	800e108 <__i2b>
 800c3ea:	4606      	mov	r6, r0
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	f43f aef3 	beq.w	800c1d8 <_strtod_l+0x498>
 800c3f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c3f4:	9904      	ldr	r1, [sp, #16]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	bfab      	itete	ge
 800c3fa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800c3fc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800c3fe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800c400:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800c404:	bfac      	ite	ge
 800c406:	eb03 0902 	addge.w	r9, r3, r2
 800c40a:	1ad7      	sublt	r7, r2, r3
 800c40c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c40e:	eba3 0801 	sub.w	r8, r3, r1
 800c412:	4490      	add	r8, r2
 800c414:	4ba3      	ldr	r3, [pc, #652]	; (800c6a4 <_strtod_l+0x964>)
 800c416:	f108 38ff 	add.w	r8, r8, #4294967295
 800c41a:	4598      	cmp	r8, r3
 800c41c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c420:	f280 80cc 	bge.w	800c5bc <_strtod_l+0x87c>
 800c424:	eba3 0308 	sub.w	r3, r3, r8
 800c428:	2b1f      	cmp	r3, #31
 800c42a:	eba2 0203 	sub.w	r2, r2, r3
 800c42e:	f04f 0101 	mov.w	r1, #1
 800c432:	f300 80b6 	bgt.w	800c5a2 <_strtod_l+0x862>
 800c436:	fa01 f303 	lsl.w	r3, r1, r3
 800c43a:	9311      	str	r3, [sp, #68]	; 0x44
 800c43c:	2300      	movs	r3, #0
 800c43e:	930c      	str	r3, [sp, #48]	; 0x30
 800c440:	eb09 0802 	add.w	r8, r9, r2
 800c444:	9b04      	ldr	r3, [sp, #16]
 800c446:	45c1      	cmp	r9, r8
 800c448:	4417      	add	r7, r2
 800c44a:	441f      	add	r7, r3
 800c44c:	464b      	mov	r3, r9
 800c44e:	bfa8      	it	ge
 800c450:	4643      	movge	r3, r8
 800c452:	42bb      	cmp	r3, r7
 800c454:	bfa8      	it	ge
 800c456:	463b      	movge	r3, r7
 800c458:	2b00      	cmp	r3, #0
 800c45a:	bfc2      	ittt	gt
 800c45c:	eba8 0803 	subgt.w	r8, r8, r3
 800c460:	1aff      	subgt	r7, r7, r3
 800c462:	eba9 0903 	subgt.w	r9, r9, r3
 800c466:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c468:	2b00      	cmp	r3, #0
 800c46a:	dd17      	ble.n	800c49c <_strtod_l+0x75c>
 800c46c:	4631      	mov	r1, r6
 800c46e:	461a      	mov	r2, r3
 800c470:	4620      	mov	r0, r4
 800c472:	f001 ff05 	bl	800e280 <__pow5mult>
 800c476:	4606      	mov	r6, r0
 800c478:	2800      	cmp	r0, #0
 800c47a:	f43f aead 	beq.w	800c1d8 <_strtod_l+0x498>
 800c47e:	4601      	mov	r1, r0
 800c480:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c482:	4620      	mov	r0, r4
 800c484:	f001 fe56 	bl	800e134 <__multiply>
 800c488:	900f      	str	r0, [sp, #60]	; 0x3c
 800c48a:	2800      	cmp	r0, #0
 800c48c:	f43f aea4 	beq.w	800c1d8 <_strtod_l+0x498>
 800c490:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c492:	4620      	mov	r0, r4
 800c494:	f001 fd32 	bl	800defc <_Bfree>
 800c498:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c49a:	931e      	str	r3, [sp, #120]	; 0x78
 800c49c:	f1b8 0f00 	cmp.w	r8, #0
 800c4a0:	f300 8091 	bgt.w	800c5c6 <_strtod_l+0x886>
 800c4a4:	9b08      	ldr	r3, [sp, #32]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	dd08      	ble.n	800c4bc <_strtod_l+0x77c>
 800c4aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c4ac:	9907      	ldr	r1, [sp, #28]
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	f001 fee6 	bl	800e280 <__pow5mult>
 800c4b4:	9007      	str	r0, [sp, #28]
 800c4b6:	2800      	cmp	r0, #0
 800c4b8:	f43f ae8e 	beq.w	800c1d8 <_strtod_l+0x498>
 800c4bc:	2f00      	cmp	r7, #0
 800c4be:	dd08      	ble.n	800c4d2 <_strtod_l+0x792>
 800c4c0:	9907      	ldr	r1, [sp, #28]
 800c4c2:	463a      	mov	r2, r7
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	f001 ff35 	bl	800e334 <__lshift>
 800c4ca:	9007      	str	r0, [sp, #28]
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	f43f ae83 	beq.w	800c1d8 <_strtod_l+0x498>
 800c4d2:	f1b9 0f00 	cmp.w	r9, #0
 800c4d6:	dd08      	ble.n	800c4ea <_strtod_l+0x7aa>
 800c4d8:	4631      	mov	r1, r6
 800c4da:	464a      	mov	r2, r9
 800c4dc:	4620      	mov	r0, r4
 800c4de:	f001 ff29 	bl	800e334 <__lshift>
 800c4e2:	4606      	mov	r6, r0
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	f43f ae77 	beq.w	800c1d8 <_strtod_l+0x498>
 800c4ea:	9a07      	ldr	r2, [sp, #28]
 800c4ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c4ee:	4620      	mov	r0, r4
 800c4f0:	f001 ffa8 	bl	800e444 <__mdiff>
 800c4f4:	4605      	mov	r5, r0
 800c4f6:	2800      	cmp	r0, #0
 800c4f8:	f43f ae6e 	beq.w	800c1d8 <_strtod_l+0x498>
 800c4fc:	68c3      	ldr	r3, [r0, #12]
 800c4fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800c500:	2300      	movs	r3, #0
 800c502:	60c3      	str	r3, [r0, #12]
 800c504:	4631      	mov	r1, r6
 800c506:	f001 ff81 	bl	800e40c <__mcmp>
 800c50a:	2800      	cmp	r0, #0
 800c50c:	da65      	bge.n	800c5da <_strtod_l+0x89a>
 800c50e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c510:	ea53 030a 	orrs.w	r3, r3, sl
 800c514:	f040 8087 	bne.w	800c626 <_strtod_l+0x8e6>
 800c518:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	f040 8082 	bne.w	800c626 <_strtod_l+0x8e6>
 800c522:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c526:	0d1b      	lsrs	r3, r3, #20
 800c528:	051b      	lsls	r3, r3, #20
 800c52a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c52e:	d97a      	bls.n	800c626 <_strtod_l+0x8e6>
 800c530:	696b      	ldr	r3, [r5, #20]
 800c532:	b913      	cbnz	r3, 800c53a <_strtod_l+0x7fa>
 800c534:	692b      	ldr	r3, [r5, #16]
 800c536:	2b01      	cmp	r3, #1
 800c538:	dd75      	ble.n	800c626 <_strtod_l+0x8e6>
 800c53a:	4629      	mov	r1, r5
 800c53c:	2201      	movs	r2, #1
 800c53e:	4620      	mov	r0, r4
 800c540:	f001 fef8 	bl	800e334 <__lshift>
 800c544:	4631      	mov	r1, r6
 800c546:	4605      	mov	r5, r0
 800c548:	f001 ff60 	bl	800e40c <__mcmp>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	dd6a      	ble.n	800c626 <_strtod_l+0x8e6>
 800c550:	9904      	ldr	r1, [sp, #16]
 800c552:	4a55      	ldr	r2, [pc, #340]	; (800c6a8 <_strtod_l+0x968>)
 800c554:	465b      	mov	r3, fp
 800c556:	2900      	cmp	r1, #0
 800c558:	f000 8085 	beq.w	800c666 <_strtod_l+0x926>
 800c55c:	ea02 010b 	and.w	r1, r2, fp
 800c560:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c564:	dc7f      	bgt.n	800c666 <_strtod_l+0x926>
 800c566:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c56a:	f77f aeaa 	ble.w	800c2c2 <_strtod_l+0x582>
 800c56e:	4a4f      	ldr	r2, [pc, #316]	; (800c6ac <_strtod_l+0x96c>)
 800c570:	2300      	movs	r3, #0
 800c572:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800c576:	4650      	mov	r0, sl
 800c578:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800c57c:	4659      	mov	r1, fp
 800c57e:	f7f4 f853 	bl	8000628 <__aeabi_dmul>
 800c582:	460b      	mov	r3, r1
 800c584:	4303      	orrs	r3, r0
 800c586:	bf08      	it	eq
 800c588:	2322      	moveq	r3, #34	; 0x22
 800c58a:	4682      	mov	sl, r0
 800c58c:	468b      	mov	fp, r1
 800c58e:	bf08      	it	eq
 800c590:	6023      	streq	r3, [r4, #0]
 800c592:	e62b      	b.n	800c1ec <_strtod_l+0x4ac>
 800c594:	f04f 32ff 	mov.w	r2, #4294967295
 800c598:	fa02 f303 	lsl.w	r3, r2, r3
 800c59c:	ea03 0a0a 	and.w	sl, r3, sl
 800c5a0:	e6de      	b.n	800c360 <_strtod_l+0x620>
 800c5a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c5a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c5aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c5ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c5b2:	fa01 f308 	lsl.w	r3, r1, r8
 800c5b6:	930c      	str	r3, [sp, #48]	; 0x30
 800c5b8:	9111      	str	r1, [sp, #68]	; 0x44
 800c5ba:	e741      	b.n	800c440 <_strtod_l+0x700>
 800c5bc:	2300      	movs	r3, #0
 800c5be:	930c      	str	r3, [sp, #48]	; 0x30
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	9311      	str	r3, [sp, #68]	; 0x44
 800c5c4:	e73c      	b.n	800c440 <_strtod_l+0x700>
 800c5c6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c5c8:	4642      	mov	r2, r8
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	f001 feb2 	bl	800e334 <__lshift>
 800c5d0:	901e      	str	r0, [sp, #120]	; 0x78
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	f47f af66 	bne.w	800c4a4 <_strtod_l+0x764>
 800c5d8:	e5fe      	b.n	800c1d8 <_strtod_l+0x498>
 800c5da:	465f      	mov	r7, fp
 800c5dc:	d16e      	bne.n	800c6bc <_strtod_l+0x97c>
 800c5de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c5e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5e4:	b342      	cbz	r2, 800c638 <_strtod_l+0x8f8>
 800c5e6:	4a32      	ldr	r2, [pc, #200]	; (800c6b0 <_strtod_l+0x970>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d128      	bne.n	800c63e <_strtod_l+0x8fe>
 800c5ec:	9b04      	ldr	r3, [sp, #16]
 800c5ee:	4650      	mov	r0, sl
 800c5f0:	b1eb      	cbz	r3, 800c62e <_strtod_l+0x8ee>
 800c5f2:	4a2d      	ldr	r2, [pc, #180]	; (800c6a8 <_strtod_l+0x968>)
 800c5f4:	403a      	ands	r2, r7
 800c5f6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c5fa:	f04f 31ff 	mov.w	r1, #4294967295
 800c5fe:	d819      	bhi.n	800c634 <_strtod_l+0x8f4>
 800c600:	0d12      	lsrs	r2, r2, #20
 800c602:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c606:	fa01 f303 	lsl.w	r3, r1, r3
 800c60a:	4298      	cmp	r0, r3
 800c60c:	d117      	bne.n	800c63e <_strtod_l+0x8fe>
 800c60e:	4b29      	ldr	r3, [pc, #164]	; (800c6b4 <_strtod_l+0x974>)
 800c610:	429f      	cmp	r7, r3
 800c612:	d102      	bne.n	800c61a <_strtod_l+0x8da>
 800c614:	3001      	adds	r0, #1
 800c616:	f43f addf 	beq.w	800c1d8 <_strtod_l+0x498>
 800c61a:	4b23      	ldr	r3, [pc, #140]	; (800c6a8 <_strtod_l+0x968>)
 800c61c:	403b      	ands	r3, r7
 800c61e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c622:	f04f 0a00 	mov.w	sl, #0
 800c626:	9b04      	ldr	r3, [sp, #16]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d1a0      	bne.n	800c56e <_strtod_l+0x82e>
 800c62c:	e5de      	b.n	800c1ec <_strtod_l+0x4ac>
 800c62e:	f04f 33ff 	mov.w	r3, #4294967295
 800c632:	e7ea      	b.n	800c60a <_strtod_l+0x8ca>
 800c634:	460b      	mov	r3, r1
 800c636:	e7e8      	b.n	800c60a <_strtod_l+0x8ca>
 800c638:	ea53 030a 	orrs.w	r3, r3, sl
 800c63c:	d088      	beq.n	800c550 <_strtod_l+0x810>
 800c63e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c640:	b1db      	cbz	r3, 800c67a <_strtod_l+0x93a>
 800c642:	423b      	tst	r3, r7
 800c644:	d0ef      	beq.n	800c626 <_strtod_l+0x8e6>
 800c646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c648:	9a04      	ldr	r2, [sp, #16]
 800c64a:	4650      	mov	r0, sl
 800c64c:	4659      	mov	r1, fp
 800c64e:	b1c3      	cbz	r3, 800c682 <_strtod_l+0x942>
 800c650:	f7ff fb57 	bl	800bd02 <sulp>
 800c654:	4602      	mov	r2, r0
 800c656:	460b      	mov	r3, r1
 800c658:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c65c:	f7f3 fe2e 	bl	80002bc <__adddf3>
 800c660:	4682      	mov	sl, r0
 800c662:	468b      	mov	fp, r1
 800c664:	e7df      	b.n	800c626 <_strtod_l+0x8e6>
 800c666:	4013      	ands	r3, r2
 800c668:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c66c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c670:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c674:	f04f 3aff 	mov.w	sl, #4294967295
 800c678:	e7d5      	b.n	800c626 <_strtod_l+0x8e6>
 800c67a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c67c:	ea13 0f0a 	tst.w	r3, sl
 800c680:	e7e0      	b.n	800c644 <_strtod_l+0x904>
 800c682:	f7ff fb3e 	bl	800bd02 <sulp>
 800c686:	4602      	mov	r2, r0
 800c688:	460b      	mov	r3, r1
 800c68a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c68e:	f7f3 fe13 	bl	80002b8 <__aeabi_dsub>
 800c692:	2200      	movs	r2, #0
 800c694:	2300      	movs	r3, #0
 800c696:	4682      	mov	sl, r0
 800c698:	468b      	mov	fp, r1
 800c69a:	f7f4 fa2d 	bl	8000af8 <__aeabi_dcmpeq>
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d0c1      	beq.n	800c626 <_strtod_l+0x8e6>
 800c6a2:	e60e      	b.n	800c2c2 <_strtod_l+0x582>
 800c6a4:	fffffc02 	.word	0xfffffc02
 800c6a8:	7ff00000 	.word	0x7ff00000
 800c6ac:	39500000 	.word	0x39500000
 800c6b0:	000fffff 	.word	0x000fffff
 800c6b4:	7fefffff 	.word	0x7fefffff
 800c6b8:	0800fa30 	.word	0x0800fa30
 800c6bc:	4631      	mov	r1, r6
 800c6be:	4628      	mov	r0, r5
 800c6c0:	f002 f820 	bl	800e704 <__ratio>
 800c6c4:	ec59 8b10 	vmov	r8, r9, d0
 800c6c8:	ee10 0a10 	vmov	r0, s0
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c6d2:	4649      	mov	r1, r9
 800c6d4:	f7f4 fa24 	bl	8000b20 <__aeabi_dcmple>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	d07c      	beq.n	800c7d6 <_strtod_l+0xa96>
 800c6dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d04c      	beq.n	800c77c <_strtod_l+0xa3c>
 800c6e2:	4b95      	ldr	r3, [pc, #596]	; (800c938 <_strtod_l+0xbf8>)
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c6ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c938 <_strtod_l+0xbf8>
 800c6ee:	f04f 0800 	mov.w	r8, #0
 800c6f2:	4b92      	ldr	r3, [pc, #584]	; (800c93c <_strtod_l+0xbfc>)
 800c6f4:	403b      	ands	r3, r7
 800c6f6:	9311      	str	r3, [sp, #68]	; 0x44
 800c6f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c6fa:	4b91      	ldr	r3, [pc, #580]	; (800c940 <_strtod_l+0xc00>)
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	f040 80b2 	bne.w	800c866 <_strtod_l+0xb26>
 800c702:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c706:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c70a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c70e:	ec4b ab10 	vmov	d0, sl, fp
 800c712:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800c716:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c71a:	f001 ff1b 	bl	800e554 <__ulp>
 800c71e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c722:	ec53 2b10 	vmov	r2, r3, d0
 800c726:	f7f3 ff7f 	bl	8000628 <__aeabi_dmul>
 800c72a:	4652      	mov	r2, sl
 800c72c:	465b      	mov	r3, fp
 800c72e:	f7f3 fdc5 	bl	80002bc <__adddf3>
 800c732:	460b      	mov	r3, r1
 800c734:	4981      	ldr	r1, [pc, #516]	; (800c93c <_strtod_l+0xbfc>)
 800c736:	4a83      	ldr	r2, [pc, #524]	; (800c944 <_strtod_l+0xc04>)
 800c738:	4019      	ands	r1, r3
 800c73a:	4291      	cmp	r1, r2
 800c73c:	4682      	mov	sl, r0
 800c73e:	d95e      	bls.n	800c7fe <_strtod_l+0xabe>
 800c740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c742:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c746:	4293      	cmp	r3, r2
 800c748:	d103      	bne.n	800c752 <_strtod_l+0xa12>
 800c74a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c74c:	3301      	adds	r3, #1
 800c74e:	f43f ad43 	beq.w	800c1d8 <_strtod_l+0x498>
 800c752:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800c950 <_strtod_l+0xc10>
 800c756:	f04f 3aff 	mov.w	sl, #4294967295
 800c75a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c75c:	4620      	mov	r0, r4
 800c75e:	f001 fbcd 	bl	800defc <_Bfree>
 800c762:	9907      	ldr	r1, [sp, #28]
 800c764:	4620      	mov	r0, r4
 800c766:	f001 fbc9 	bl	800defc <_Bfree>
 800c76a:	4631      	mov	r1, r6
 800c76c:	4620      	mov	r0, r4
 800c76e:	f001 fbc5 	bl	800defc <_Bfree>
 800c772:	4629      	mov	r1, r5
 800c774:	4620      	mov	r0, r4
 800c776:	f001 fbc1 	bl	800defc <_Bfree>
 800c77a:	e613      	b.n	800c3a4 <_strtod_l+0x664>
 800c77c:	f1ba 0f00 	cmp.w	sl, #0
 800c780:	d11b      	bne.n	800c7ba <_strtod_l+0xa7a>
 800c782:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c786:	b9f3      	cbnz	r3, 800c7c6 <_strtod_l+0xa86>
 800c788:	4b6b      	ldr	r3, [pc, #428]	; (800c938 <_strtod_l+0xbf8>)
 800c78a:	2200      	movs	r2, #0
 800c78c:	4640      	mov	r0, r8
 800c78e:	4649      	mov	r1, r9
 800c790:	f7f4 f9bc 	bl	8000b0c <__aeabi_dcmplt>
 800c794:	b9d0      	cbnz	r0, 800c7cc <_strtod_l+0xa8c>
 800c796:	4640      	mov	r0, r8
 800c798:	4649      	mov	r1, r9
 800c79a:	4b6b      	ldr	r3, [pc, #428]	; (800c948 <_strtod_l+0xc08>)
 800c79c:	2200      	movs	r2, #0
 800c79e:	f7f3 ff43 	bl	8000628 <__aeabi_dmul>
 800c7a2:	4680      	mov	r8, r0
 800c7a4:	4689      	mov	r9, r1
 800c7a6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c7aa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800c7ae:	931b      	str	r3, [sp, #108]	; 0x6c
 800c7b0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800c7b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c7b8:	e79b      	b.n	800c6f2 <_strtod_l+0x9b2>
 800c7ba:	f1ba 0f01 	cmp.w	sl, #1
 800c7be:	d102      	bne.n	800c7c6 <_strtod_l+0xa86>
 800c7c0:	2f00      	cmp	r7, #0
 800c7c2:	f43f ad7e 	beq.w	800c2c2 <_strtod_l+0x582>
 800c7c6:	4b61      	ldr	r3, [pc, #388]	; (800c94c <_strtod_l+0xc0c>)
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	e78c      	b.n	800c6e6 <_strtod_l+0x9a6>
 800c7cc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c948 <_strtod_l+0xc08>
 800c7d0:	f04f 0800 	mov.w	r8, #0
 800c7d4:	e7e7      	b.n	800c7a6 <_strtod_l+0xa66>
 800c7d6:	4b5c      	ldr	r3, [pc, #368]	; (800c948 <_strtod_l+0xc08>)
 800c7d8:	4640      	mov	r0, r8
 800c7da:	4649      	mov	r1, r9
 800c7dc:	2200      	movs	r2, #0
 800c7de:	f7f3 ff23 	bl	8000628 <__aeabi_dmul>
 800c7e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7e4:	4680      	mov	r8, r0
 800c7e6:	4689      	mov	r9, r1
 800c7e8:	b933      	cbnz	r3, 800c7f8 <_strtod_l+0xab8>
 800c7ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7ee:	9012      	str	r0, [sp, #72]	; 0x48
 800c7f0:	9313      	str	r3, [sp, #76]	; 0x4c
 800c7f2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c7f6:	e7dd      	b.n	800c7b4 <_strtod_l+0xa74>
 800c7f8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800c7fc:	e7f9      	b.n	800c7f2 <_strtod_l+0xab2>
 800c7fe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c802:	9b04      	ldr	r3, [sp, #16]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d1a8      	bne.n	800c75a <_strtod_l+0xa1a>
 800c808:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c80c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c80e:	0d1b      	lsrs	r3, r3, #20
 800c810:	051b      	lsls	r3, r3, #20
 800c812:	429a      	cmp	r2, r3
 800c814:	d1a1      	bne.n	800c75a <_strtod_l+0xa1a>
 800c816:	4640      	mov	r0, r8
 800c818:	4649      	mov	r1, r9
 800c81a:	f7f4 fa65 	bl	8000ce8 <__aeabi_d2lz>
 800c81e:	f7f3 fed5 	bl	80005cc <__aeabi_l2d>
 800c822:	4602      	mov	r2, r0
 800c824:	460b      	mov	r3, r1
 800c826:	4640      	mov	r0, r8
 800c828:	4649      	mov	r1, r9
 800c82a:	f7f3 fd45 	bl	80002b8 <__aeabi_dsub>
 800c82e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c830:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c834:	ea43 030a 	orr.w	r3, r3, sl
 800c838:	4313      	orrs	r3, r2
 800c83a:	4680      	mov	r8, r0
 800c83c:	4689      	mov	r9, r1
 800c83e:	d053      	beq.n	800c8e8 <_strtod_l+0xba8>
 800c840:	a335      	add	r3, pc, #212	; (adr r3, 800c918 <_strtod_l+0xbd8>)
 800c842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c846:	f7f4 f961 	bl	8000b0c <__aeabi_dcmplt>
 800c84a:	2800      	cmp	r0, #0
 800c84c:	f47f acce 	bne.w	800c1ec <_strtod_l+0x4ac>
 800c850:	a333      	add	r3, pc, #204	; (adr r3, 800c920 <_strtod_l+0xbe0>)
 800c852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c856:	4640      	mov	r0, r8
 800c858:	4649      	mov	r1, r9
 800c85a:	f7f4 f975 	bl	8000b48 <__aeabi_dcmpgt>
 800c85e:	2800      	cmp	r0, #0
 800c860:	f43f af7b 	beq.w	800c75a <_strtod_l+0xa1a>
 800c864:	e4c2      	b.n	800c1ec <_strtod_l+0x4ac>
 800c866:	9b04      	ldr	r3, [sp, #16]
 800c868:	b333      	cbz	r3, 800c8b8 <_strtod_l+0xb78>
 800c86a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c86c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c870:	d822      	bhi.n	800c8b8 <_strtod_l+0xb78>
 800c872:	a32d      	add	r3, pc, #180	; (adr r3, 800c928 <_strtod_l+0xbe8>)
 800c874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c878:	4640      	mov	r0, r8
 800c87a:	4649      	mov	r1, r9
 800c87c:	f7f4 f950 	bl	8000b20 <__aeabi_dcmple>
 800c880:	b1a0      	cbz	r0, 800c8ac <_strtod_l+0xb6c>
 800c882:	4649      	mov	r1, r9
 800c884:	4640      	mov	r0, r8
 800c886:	f7f4 f9a7 	bl	8000bd8 <__aeabi_d2uiz>
 800c88a:	2801      	cmp	r0, #1
 800c88c:	bf38      	it	cc
 800c88e:	2001      	movcc	r0, #1
 800c890:	f7f3 fe50 	bl	8000534 <__aeabi_ui2d>
 800c894:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c896:	4680      	mov	r8, r0
 800c898:	4689      	mov	r9, r1
 800c89a:	bb13      	cbnz	r3, 800c8e2 <_strtod_l+0xba2>
 800c89c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8a0:	9014      	str	r0, [sp, #80]	; 0x50
 800c8a2:	9315      	str	r3, [sp, #84]	; 0x54
 800c8a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c8a8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c8ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c8b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c8b4:	1a9b      	subs	r3, r3, r2
 800c8b6:	930d      	str	r3, [sp, #52]	; 0x34
 800c8b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c8bc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c8c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c8c4:	f001 fe46 	bl	800e554 <__ulp>
 800c8c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c8cc:	ec53 2b10 	vmov	r2, r3, d0
 800c8d0:	f7f3 feaa 	bl	8000628 <__aeabi_dmul>
 800c8d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c8d8:	f7f3 fcf0 	bl	80002bc <__adddf3>
 800c8dc:	4682      	mov	sl, r0
 800c8de:	468b      	mov	fp, r1
 800c8e0:	e78f      	b.n	800c802 <_strtod_l+0xac2>
 800c8e2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800c8e6:	e7dd      	b.n	800c8a4 <_strtod_l+0xb64>
 800c8e8:	a311      	add	r3, pc, #68	; (adr r3, 800c930 <_strtod_l+0xbf0>)
 800c8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ee:	f7f4 f90d 	bl	8000b0c <__aeabi_dcmplt>
 800c8f2:	e7b4      	b.n	800c85e <_strtod_l+0xb1e>
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	930e      	str	r3, [sp, #56]	; 0x38
 800c8f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c8fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c8fc:	6013      	str	r3, [r2, #0]
 800c8fe:	f7ff ba65 	b.w	800bdcc <_strtod_l+0x8c>
 800c902:	2b65      	cmp	r3, #101	; 0x65
 800c904:	f43f ab5d 	beq.w	800bfc2 <_strtod_l+0x282>
 800c908:	2b45      	cmp	r3, #69	; 0x45
 800c90a:	f43f ab5a 	beq.w	800bfc2 <_strtod_l+0x282>
 800c90e:	2201      	movs	r2, #1
 800c910:	f7ff bb92 	b.w	800c038 <_strtod_l+0x2f8>
 800c914:	f3af 8000 	nop.w
 800c918:	94a03595 	.word	0x94a03595
 800c91c:	3fdfffff 	.word	0x3fdfffff
 800c920:	35afe535 	.word	0x35afe535
 800c924:	3fe00000 	.word	0x3fe00000
 800c928:	ffc00000 	.word	0xffc00000
 800c92c:	41dfffff 	.word	0x41dfffff
 800c930:	94a03595 	.word	0x94a03595
 800c934:	3fcfffff 	.word	0x3fcfffff
 800c938:	3ff00000 	.word	0x3ff00000
 800c93c:	7ff00000 	.word	0x7ff00000
 800c940:	7fe00000 	.word	0x7fe00000
 800c944:	7c9fffff 	.word	0x7c9fffff
 800c948:	3fe00000 	.word	0x3fe00000
 800c94c:	bff00000 	.word	0xbff00000
 800c950:	7fefffff 	.word	0x7fefffff

0800c954 <_strtod_r>:
 800c954:	4b01      	ldr	r3, [pc, #4]	; (800c95c <_strtod_r+0x8>)
 800c956:	f7ff b9f3 	b.w	800bd40 <_strtod_l>
 800c95a:	bf00      	nop
 800c95c:	200001a8 	.word	0x200001a8

0800c960 <_strtol_l.isra.0>:
 800c960:	2b01      	cmp	r3, #1
 800c962:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c966:	d001      	beq.n	800c96c <_strtol_l.isra.0+0xc>
 800c968:	2b24      	cmp	r3, #36	; 0x24
 800c96a:	d906      	bls.n	800c97a <_strtol_l.isra.0+0x1a>
 800c96c:	f7fe fad6 	bl	800af1c <__errno>
 800c970:	2316      	movs	r3, #22
 800c972:	6003      	str	r3, [r0, #0]
 800c974:	2000      	movs	r0, #0
 800c976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c97a:	4f3a      	ldr	r7, [pc, #232]	; (800ca64 <_strtol_l.isra.0+0x104>)
 800c97c:	468e      	mov	lr, r1
 800c97e:	4676      	mov	r6, lr
 800c980:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c984:	5de5      	ldrb	r5, [r4, r7]
 800c986:	f015 0508 	ands.w	r5, r5, #8
 800c98a:	d1f8      	bne.n	800c97e <_strtol_l.isra.0+0x1e>
 800c98c:	2c2d      	cmp	r4, #45	; 0x2d
 800c98e:	d134      	bne.n	800c9fa <_strtol_l.isra.0+0x9a>
 800c990:	f89e 4000 	ldrb.w	r4, [lr]
 800c994:	f04f 0801 	mov.w	r8, #1
 800c998:	f106 0e02 	add.w	lr, r6, #2
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d05c      	beq.n	800ca5a <_strtol_l.isra.0+0xfa>
 800c9a0:	2b10      	cmp	r3, #16
 800c9a2:	d10c      	bne.n	800c9be <_strtol_l.isra.0+0x5e>
 800c9a4:	2c30      	cmp	r4, #48	; 0x30
 800c9a6:	d10a      	bne.n	800c9be <_strtol_l.isra.0+0x5e>
 800c9a8:	f89e 4000 	ldrb.w	r4, [lr]
 800c9ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c9b0:	2c58      	cmp	r4, #88	; 0x58
 800c9b2:	d14d      	bne.n	800ca50 <_strtol_l.isra.0+0xf0>
 800c9b4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800c9b8:	2310      	movs	r3, #16
 800c9ba:	f10e 0e02 	add.w	lr, lr, #2
 800c9be:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800c9c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c9c6:	2600      	movs	r6, #0
 800c9c8:	fbbc f9f3 	udiv	r9, ip, r3
 800c9cc:	4635      	mov	r5, r6
 800c9ce:	fb03 ca19 	mls	sl, r3, r9, ip
 800c9d2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c9d6:	2f09      	cmp	r7, #9
 800c9d8:	d818      	bhi.n	800ca0c <_strtol_l.isra.0+0xac>
 800c9da:	463c      	mov	r4, r7
 800c9dc:	42a3      	cmp	r3, r4
 800c9de:	dd24      	ble.n	800ca2a <_strtol_l.isra.0+0xca>
 800c9e0:	2e00      	cmp	r6, #0
 800c9e2:	db1f      	blt.n	800ca24 <_strtol_l.isra.0+0xc4>
 800c9e4:	45a9      	cmp	r9, r5
 800c9e6:	d31d      	bcc.n	800ca24 <_strtol_l.isra.0+0xc4>
 800c9e8:	d101      	bne.n	800c9ee <_strtol_l.isra.0+0x8e>
 800c9ea:	45a2      	cmp	sl, r4
 800c9ec:	db1a      	blt.n	800ca24 <_strtol_l.isra.0+0xc4>
 800c9ee:	fb05 4503 	mla	r5, r5, r3, r4
 800c9f2:	2601      	movs	r6, #1
 800c9f4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c9f8:	e7eb      	b.n	800c9d2 <_strtol_l.isra.0+0x72>
 800c9fa:	2c2b      	cmp	r4, #43	; 0x2b
 800c9fc:	bf08      	it	eq
 800c9fe:	f89e 4000 	ldrbeq.w	r4, [lr]
 800ca02:	46a8      	mov	r8, r5
 800ca04:	bf08      	it	eq
 800ca06:	f106 0e02 	addeq.w	lr, r6, #2
 800ca0a:	e7c7      	b.n	800c99c <_strtol_l.isra.0+0x3c>
 800ca0c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ca10:	2f19      	cmp	r7, #25
 800ca12:	d801      	bhi.n	800ca18 <_strtol_l.isra.0+0xb8>
 800ca14:	3c37      	subs	r4, #55	; 0x37
 800ca16:	e7e1      	b.n	800c9dc <_strtol_l.isra.0+0x7c>
 800ca18:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ca1c:	2f19      	cmp	r7, #25
 800ca1e:	d804      	bhi.n	800ca2a <_strtol_l.isra.0+0xca>
 800ca20:	3c57      	subs	r4, #87	; 0x57
 800ca22:	e7db      	b.n	800c9dc <_strtol_l.isra.0+0x7c>
 800ca24:	f04f 36ff 	mov.w	r6, #4294967295
 800ca28:	e7e4      	b.n	800c9f4 <_strtol_l.isra.0+0x94>
 800ca2a:	2e00      	cmp	r6, #0
 800ca2c:	da05      	bge.n	800ca3a <_strtol_l.isra.0+0xda>
 800ca2e:	2322      	movs	r3, #34	; 0x22
 800ca30:	6003      	str	r3, [r0, #0]
 800ca32:	4665      	mov	r5, ip
 800ca34:	b942      	cbnz	r2, 800ca48 <_strtol_l.isra.0+0xe8>
 800ca36:	4628      	mov	r0, r5
 800ca38:	e79d      	b.n	800c976 <_strtol_l.isra.0+0x16>
 800ca3a:	f1b8 0f00 	cmp.w	r8, #0
 800ca3e:	d000      	beq.n	800ca42 <_strtol_l.isra.0+0xe2>
 800ca40:	426d      	negs	r5, r5
 800ca42:	2a00      	cmp	r2, #0
 800ca44:	d0f7      	beq.n	800ca36 <_strtol_l.isra.0+0xd6>
 800ca46:	b10e      	cbz	r6, 800ca4c <_strtol_l.isra.0+0xec>
 800ca48:	f10e 31ff 	add.w	r1, lr, #4294967295
 800ca4c:	6011      	str	r1, [r2, #0]
 800ca4e:	e7f2      	b.n	800ca36 <_strtol_l.isra.0+0xd6>
 800ca50:	2430      	movs	r4, #48	; 0x30
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d1b3      	bne.n	800c9be <_strtol_l.isra.0+0x5e>
 800ca56:	2308      	movs	r3, #8
 800ca58:	e7b1      	b.n	800c9be <_strtol_l.isra.0+0x5e>
 800ca5a:	2c30      	cmp	r4, #48	; 0x30
 800ca5c:	d0a4      	beq.n	800c9a8 <_strtol_l.isra.0+0x48>
 800ca5e:	230a      	movs	r3, #10
 800ca60:	e7ad      	b.n	800c9be <_strtol_l.isra.0+0x5e>
 800ca62:	bf00      	nop
 800ca64:	0800fa59 	.word	0x0800fa59

0800ca68 <_strtol_r>:
 800ca68:	f7ff bf7a 	b.w	800c960 <_strtol_l.isra.0>

0800ca6c <quorem>:
 800ca6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca70:	6903      	ldr	r3, [r0, #16]
 800ca72:	690c      	ldr	r4, [r1, #16]
 800ca74:	42a3      	cmp	r3, r4
 800ca76:	4607      	mov	r7, r0
 800ca78:	f2c0 8081 	blt.w	800cb7e <quorem+0x112>
 800ca7c:	3c01      	subs	r4, #1
 800ca7e:	f101 0814 	add.w	r8, r1, #20
 800ca82:	f100 0514 	add.w	r5, r0, #20
 800ca86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca8a:	9301      	str	r3, [sp, #4]
 800ca8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ca90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca94:	3301      	adds	r3, #1
 800ca96:	429a      	cmp	r2, r3
 800ca98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ca9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800caa0:	fbb2 f6f3 	udiv	r6, r2, r3
 800caa4:	d331      	bcc.n	800cb0a <quorem+0x9e>
 800caa6:	f04f 0e00 	mov.w	lr, #0
 800caaa:	4640      	mov	r0, r8
 800caac:	46ac      	mov	ip, r5
 800caae:	46f2      	mov	sl, lr
 800cab0:	f850 2b04 	ldr.w	r2, [r0], #4
 800cab4:	b293      	uxth	r3, r2
 800cab6:	fb06 e303 	mla	r3, r6, r3, lr
 800caba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	ebaa 0303 	sub.w	r3, sl, r3
 800cac4:	0c12      	lsrs	r2, r2, #16
 800cac6:	f8dc a000 	ldr.w	sl, [ip]
 800caca:	fb06 e202 	mla	r2, r6, r2, lr
 800cace:	fa13 f38a 	uxtah	r3, r3, sl
 800cad2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cad6:	fa1f fa82 	uxth.w	sl, r2
 800cada:	f8dc 2000 	ldr.w	r2, [ip]
 800cade:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800cae2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800caec:	4581      	cmp	r9, r0
 800caee:	f84c 3b04 	str.w	r3, [ip], #4
 800caf2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800caf6:	d2db      	bcs.n	800cab0 <quorem+0x44>
 800caf8:	f855 300b 	ldr.w	r3, [r5, fp]
 800cafc:	b92b      	cbnz	r3, 800cb0a <quorem+0x9e>
 800cafe:	9b01      	ldr	r3, [sp, #4]
 800cb00:	3b04      	subs	r3, #4
 800cb02:	429d      	cmp	r5, r3
 800cb04:	461a      	mov	r2, r3
 800cb06:	d32e      	bcc.n	800cb66 <quorem+0xfa>
 800cb08:	613c      	str	r4, [r7, #16]
 800cb0a:	4638      	mov	r0, r7
 800cb0c:	f001 fc7e 	bl	800e40c <__mcmp>
 800cb10:	2800      	cmp	r0, #0
 800cb12:	db24      	blt.n	800cb5e <quorem+0xf2>
 800cb14:	3601      	adds	r6, #1
 800cb16:	4628      	mov	r0, r5
 800cb18:	f04f 0c00 	mov.w	ip, #0
 800cb1c:	f858 2b04 	ldr.w	r2, [r8], #4
 800cb20:	f8d0 e000 	ldr.w	lr, [r0]
 800cb24:	b293      	uxth	r3, r2
 800cb26:	ebac 0303 	sub.w	r3, ip, r3
 800cb2a:	0c12      	lsrs	r2, r2, #16
 800cb2c:	fa13 f38e 	uxtah	r3, r3, lr
 800cb30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cb34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb3e:	45c1      	cmp	r9, r8
 800cb40:	f840 3b04 	str.w	r3, [r0], #4
 800cb44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cb48:	d2e8      	bcs.n	800cb1c <quorem+0xb0>
 800cb4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb52:	b922      	cbnz	r2, 800cb5e <quorem+0xf2>
 800cb54:	3b04      	subs	r3, #4
 800cb56:	429d      	cmp	r5, r3
 800cb58:	461a      	mov	r2, r3
 800cb5a:	d30a      	bcc.n	800cb72 <quorem+0x106>
 800cb5c:	613c      	str	r4, [r7, #16]
 800cb5e:	4630      	mov	r0, r6
 800cb60:	b003      	add	sp, #12
 800cb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb66:	6812      	ldr	r2, [r2, #0]
 800cb68:	3b04      	subs	r3, #4
 800cb6a:	2a00      	cmp	r2, #0
 800cb6c:	d1cc      	bne.n	800cb08 <quorem+0x9c>
 800cb6e:	3c01      	subs	r4, #1
 800cb70:	e7c7      	b.n	800cb02 <quorem+0x96>
 800cb72:	6812      	ldr	r2, [r2, #0]
 800cb74:	3b04      	subs	r3, #4
 800cb76:	2a00      	cmp	r2, #0
 800cb78:	d1f0      	bne.n	800cb5c <quorem+0xf0>
 800cb7a:	3c01      	subs	r4, #1
 800cb7c:	e7eb      	b.n	800cb56 <quorem+0xea>
 800cb7e:	2000      	movs	r0, #0
 800cb80:	e7ee      	b.n	800cb60 <quorem+0xf4>
 800cb82:	0000      	movs	r0, r0
 800cb84:	0000      	movs	r0, r0
	...

0800cb88 <_dtoa_r>:
 800cb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb8c:	ed2d 8b02 	vpush	{d8}
 800cb90:	ec57 6b10 	vmov	r6, r7, d0
 800cb94:	b095      	sub	sp, #84	; 0x54
 800cb96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cb98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cb9c:	9105      	str	r1, [sp, #20]
 800cb9e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800cba2:	4604      	mov	r4, r0
 800cba4:	9209      	str	r2, [sp, #36]	; 0x24
 800cba6:	930f      	str	r3, [sp, #60]	; 0x3c
 800cba8:	b975      	cbnz	r5, 800cbc8 <_dtoa_r+0x40>
 800cbaa:	2010      	movs	r0, #16
 800cbac:	f001 f94c 	bl	800de48 <malloc>
 800cbb0:	4602      	mov	r2, r0
 800cbb2:	6260      	str	r0, [r4, #36]	; 0x24
 800cbb4:	b920      	cbnz	r0, 800cbc0 <_dtoa_r+0x38>
 800cbb6:	4bb2      	ldr	r3, [pc, #712]	; (800ce80 <_dtoa_r+0x2f8>)
 800cbb8:	21ea      	movs	r1, #234	; 0xea
 800cbba:	48b2      	ldr	r0, [pc, #712]	; (800ce84 <_dtoa_r+0x2fc>)
 800cbbc:	f002 f868 	bl	800ec90 <__assert_func>
 800cbc0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cbc4:	6005      	str	r5, [r0, #0]
 800cbc6:	60c5      	str	r5, [r0, #12]
 800cbc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbca:	6819      	ldr	r1, [r3, #0]
 800cbcc:	b151      	cbz	r1, 800cbe4 <_dtoa_r+0x5c>
 800cbce:	685a      	ldr	r2, [r3, #4]
 800cbd0:	604a      	str	r2, [r1, #4]
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	4093      	lsls	r3, r2
 800cbd6:	608b      	str	r3, [r1, #8]
 800cbd8:	4620      	mov	r0, r4
 800cbda:	f001 f98f 	bl	800defc <_Bfree>
 800cbde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	601a      	str	r2, [r3, #0]
 800cbe4:	1e3b      	subs	r3, r7, #0
 800cbe6:	bfb9      	ittee	lt
 800cbe8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cbec:	9303      	strlt	r3, [sp, #12]
 800cbee:	2300      	movge	r3, #0
 800cbf0:	f8c8 3000 	strge.w	r3, [r8]
 800cbf4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cbf8:	4ba3      	ldr	r3, [pc, #652]	; (800ce88 <_dtoa_r+0x300>)
 800cbfa:	bfbc      	itt	lt
 800cbfc:	2201      	movlt	r2, #1
 800cbfe:	f8c8 2000 	strlt.w	r2, [r8]
 800cc02:	ea33 0309 	bics.w	r3, r3, r9
 800cc06:	d11b      	bne.n	800cc40 <_dtoa_r+0xb8>
 800cc08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cc0a:	f242 730f 	movw	r3, #9999	; 0x270f
 800cc0e:	6013      	str	r3, [r2, #0]
 800cc10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc14:	4333      	orrs	r3, r6
 800cc16:	f000 857a 	beq.w	800d70e <_dtoa_r+0xb86>
 800cc1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc1c:	b963      	cbnz	r3, 800cc38 <_dtoa_r+0xb0>
 800cc1e:	4b9b      	ldr	r3, [pc, #620]	; (800ce8c <_dtoa_r+0x304>)
 800cc20:	e024      	b.n	800cc6c <_dtoa_r+0xe4>
 800cc22:	4b9b      	ldr	r3, [pc, #620]	; (800ce90 <_dtoa_r+0x308>)
 800cc24:	9300      	str	r3, [sp, #0]
 800cc26:	3308      	adds	r3, #8
 800cc28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cc2a:	6013      	str	r3, [r2, #0]
 800cc2c:	9800      	ldr	r0, [sp, #0]
 800cc2e:	b015      	add	sp, #84	; 0x54
 800cc30:	ecbd 8b02 	vpop	{d8}
 800cc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc38:	4b94      	ldr	r3, [pc, #592]	; (800ce8c <_dtoa_r+0x304>)
 800cc3a:	9300      	str	r3, [sp, #0]
 800cc3c:	3303      	adds	r3, #3
 800cc3e:	e7f3      	b.n	800cc28 <_dtoa_r+0xa0>
 800cc40:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cc44:	2200      	movs	r2, #0
 800cc46:	ec51 0b17 	vmov	r0, r1, d7
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800cc50:	f7f3 ff52 	bl	8000af8 <__aeabi_dcmpeq>
 800cc54:	4680      	mov	r8, r0
 800cc56:	b158      	cbz	r0, 800cc70 <_dtoa_r+0xe8>
 800cc58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	6013      	str	r3, [r2, #0]
 800cc5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	f000 8551 	beq.w	800d708 <_dtoa_r+0xb80>
 800cc66:	488b      	ldr	r0, [pc, #556]	; (800ce94 <_dtoa_r+0x30c>)
 800cc68:	6018      	str	r0, [r3, #0]
 800cc6a:	1e43      	subs	r3, r0, #1
 800cc6c:	9300      	str	r3, [sp, #0]
 800cc6e:	e7dd      	b.n	800cc2c <_dtoa_r+0xa4>
 800cc70:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800cc74:	aa12      	add	r2, sp, #72	; 0x48
 800cc76:	a913      	add	r1, sp, #76	; 0x4c
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f001 fce7 	bl	800e64c <__d2b>
 800cc7e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cc82:	4683      	mov	fp, r0
 800cc84:	2d00      	cmp	r5, #0
 800cc86:	d07c      	beq.n	800cd82 <_dtoa_r+0x1fa>
 800cc88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc8a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800cc8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc92:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800cc96:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cc9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cc9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cca2:	4b7d      	ldr	r3, [pc, #500]	; (800ce98 <_dtoa_r+0x310>)
 800cca4:	2200      	movs	r2, #0
 800cca6:	4630      	mov	r0, r6
 800cca8:	4639      	mov	r1, r7
 800ccaa:	f7f3 fb05 	bl	80002b8 <__aeabi_dsub>
 800ccae:	a36e      	add	r3, pc, #440	; (adr r3, 800ce68 <_dtoa_r+0x2e0>)
 800ccb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb4:	f7f3 fcb8 	bl	8000628 <__aeabi_dmul>
 800ccb8:	a36d      	add	r3, pc, #436	; (adr r3, 800ce70 <_dtoa_r+0x2e8>)
 800ccba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccbe:	f7f3 fafd 	bl	80002bc <__adddf3>
 800ccc2:	4606      	mov	r6, r0
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	460f      	mov	r7, r1
 800ccc8:	f7f3 fc44 	bl	8000554 <__aeabi_i2d>
 800cccc:	a36a      	add	r3, pc, #424	; (adr r3, 800ce78 <_dtoa_r+0x2f0>)
 800ccce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd2:	f7f3 fca9 	bl	8000628 <__aeabi_dmul>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	460b      	mov	r3, r1
 800ccda:	4630      	mov	r0, r6
 800ccdc:	4639      	mov	r1, r7
 800ccde:	f7f3 faed 	bl	80002bc <__adddf3>
 800cce2:	4606      	mov	r6, r0
 800cce4:	460f      	mov	r7, r1
 800cce6:	f7f3 ff4f 	bl	8000b88 <__aeabi_d2iz>
 800ccea:	2200      	movs	r2, #0
 800ccec:	4682      	mov	sl, r0
 800ccee:	2300      	movs	r3, #0
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	4639      	mov	r1, r7
 800ccf4:	f7f3 ff0a 	bl	8000b0c <__aeabi_dcmplt>
 800ccf8:	b148      	cbz	r0, 800cd0e <_dtoa_r+0x186>
 800ccfa:	4650      	mov	r0, sl
 800ccfc:	f7f3 fc2a 	bl	8000554 <__aeabi_i2d>
 800cd00:	4632      	mov	r2, r6
 800cd02:	463b      	mov	r3, r7
 800cd04:	f7f3 fef8 	bl	8000af8 <__aeabi_dcmpeq>
 800cd08:	b908      	cbnz	r0, 800cd0e <_dtoa_r+0x186>
 800cd0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd0e:	f1ba 0f16 	cmp.w	sl, #22
 800cd12:	d854      	bhi.n	800cdbe <_dtoa_r+0x236>
 800cd14:	4b61      	ldr	r3, [pc, #388]	; (800ce9c <_dtoa_r+0x314>)
 800cd16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cd22:	f7f3 fef3 	bl	8000b0c <__aeabi_dcmplt>
 800cd26:	2800      	cmp	r0, #0
 800cd28:	d04b      	beq.n	800cdc2 <_dtoa_r+0x23a>
 800cd2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd2e:	2300      	movs	r3, #0
 800cd30:	930e      	str	r3, [sp, #56]	; 0x38
 800cd32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cd34:	1b5d      	subs	r5, r3, r5
 800cd36:	1e6b      	subs	r3, r5, #1
 800cd38:	9304      	str	r3, [sp, #16]
 800cd3a:	bf43      	ittte	mi
 800cd3c:	2300      	movmi	r3, #0
 800cd3e:	f1c5 0801 	rsbmi	r8, r5, #1
 800cd42:	9304      	strmi	r3, [sp, #16]
 800cd44:	f04f 0800 	movpl.w	r8, #0
 800cd48:	f1ba 0f00 	cmp.w	sl, #0
 800cd4c:	db3b      	blt.n	800cdc6 <_dtoa_r+0x23e>
 800cd4e:	9b04      	ldr	r3, [sp, #16]
 800cd50:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800cd54:	4453      	add	r3, sl
 800cd56:	9304      	str	r3, [sp, #16]
 800cd58:	2300      	movs	r3, #0
 800cd5a:	9306      	str	r3, [sp, #24]
 800cd5c:	9b05      	ldr	r3, [sp, #20]
 800cd5e:	2b09      	cmp	r3, #9
 800cd60:	d869      	bhi.n	800ce36 <_dtoa_r+0x2ae>
 800cd62:	2b05      	cmp	r3, #5
 800cd64:	bfc4      	itt	gt
 800cd66:	3b04      	subgt	r3, #4
 800cd68:	9305      	strgt	r3, [sp, #20]
 800cd6a:	9b05      	ldr	r3, [sp, #20]
 800cd6c:	f1a3 0302 	sub.w	r3, r3, #2
 800cd70:	bfcc      	ite	gt
 800cd72:	2500      	movgt	r5, #0
 800cd74:	2501      	movle	r5, #1
 800cd76:	2b03      	cmp	r3, #3
 800cd78:	d869      	bhi.n	800ce4e <_dtoa_r+0x2c6>
 800cd7a:	e8df f003 	tbb	[pc, r3]
 800cd7e:	4e2c      	.short	0x4e2c
 800cd80:	5a4c      	.short	0x5a4c
 800cd82:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800cd86:	441d      	add	r5, r3
 800cd88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cd8c:	2b20      	cmp	r3, #32
 800cd8e:	bfc1      	itttt	gt
 800cd90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cd94:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cd98:	fa09 f303 	lslgt.w	r3, r9, r3
 800cd9c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cda0:	bfda      	itte	le
 800cda2:	f1c3 0320 	rsble	r3, r3, #32
 800cda6:	fa06 f003 	lslle.w	r0, r6, r3
 800cdaa:	4318      	orrgt	r0, r3
 800cdac:	f7f3 fbc2 	bl	8000534 <__aeabi_ui2d>
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	4606      	mov	r6, r0
 800cdb4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cdb8:	3d01      	subs	r5, #1
 800cdba:	9310      	str	r3, [sp, #64]	; 0x40
 800cdbc:	e771      	b.n	800cca2 <_dtoa_r+0x11a>
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	e7b6      	b.n	800cd30 <_dtoa_r+0x1a8>
 800cdc2:	900e      	str	r0, [sp, #56]	; 0x38
 800cdc4:	e7b5      	b.n	800cd32 <_dtoa_r+0x1aa>
 800cdc6:	f1ca 0300 	rsb	r3, sl, #0
 800cdca:	9306      	str	r3, [sp, #24]
 800cdcc:	2300      	movs	r3, #0
 800cdce:	eba8 080a 	sub.w	r8, r8, sl
 800cdd2:	930d      	str	r3, [sp, #52]	; 0x34
 800cdd4:	e7c2      	b.n	800cd5c <_dtoa_r+0x1d4>
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	9308      	str	r3, [sp, #32]
 800cdda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	dc39      	bgt.n	800ce54 <_dtoa_r+0x2cc>
 800cde0:	f04f 0901 	mov.w	r9, #1
 800cde4:	f8cd 9004 	str.w	r9, [sp, #4]
 800cde8:	464b      	mov	r3, r9
 800cdea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800cdee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	6042      	str	r2, [r0, #4]
 800cdf4:	2204      	movs	r2, #4
 800cdf6:	f102 0614 	add.w	r6, r2, #20
 800cdfa:	429e      	cmp	r6, r3
 800cdfc:	6841      	ldr	r1, [r0, #4]
 800cdfe:	d92f      	bls.n	800ce60 <_dtoa_r+0x2d8>
 800ce00:	4620      	mov	r0, r4
 800ce02:	f001 f83b 	bl	800de7c <_Balloc>
 800ce06:	9000      	str	r0, [sp, #0]
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	d14b      	bne.n	800cea4 <_dtoa_r+0x31c>
 800ce0c:	4b24      	ldr	r3, [pc, #144]	; (800cea0 <_dtoa_r+0x318>)
 800ce0e:	4602      	mov	r2, r0
 800ce10:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ce14:	e6d1      	b.n	800cbba <_dtoa_r+0x32>
 800ce16:	2301      	movs	r3, #1
 800ce18:	e7de      	b.n	800cdd8 <_dtoa_r+0x250>
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	9308      	str	r3, [sp, #32]
 800ce1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce20:	eb0a 0903 	add.w	r9, sl, r3
 800ce24:	f109 0301 	add.w	r3, r9, #1
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	9301      	str	r3, [sp, #4]
 800ce2c:	bfb8      	it	lt
 800ce2e:	2301      	movlt	r3, #1
 800ce30:	e7dd      	b.n	800cdee <_dtoa_r+0x266>
 800ce32:	2301      	movs	r3, #1
 800ce34:	e7f2      	b.n	800ce1c <_dtoa_r+0x294>
 800ce36:	2501      	movs	r5, #1
 800ce38:	2300      	movs	r3, #0
 800ce3a:	9305      	str	r3, [sp, #20]
 800ce3c:	9508      	str	r5, [sp, #32]
 800ce3e:	f04f 39ff 	mov.w	r9, #4294967295
 800ce42:	2200      	movs	r2, #0
 800ce44:	f8cd 9004 	str.w	r9, [sp, #4]
 800ce48:	2312      	movs	r3, #18
 800ce4a:	9209      	str	r2, [sp, #36]	; 0x24
 800ce4c:	e7cf      	b.n	800cdee <_dtoa_r+0x266>
 800ce4e:	2301      	movs	r3, #1
 800ce50:	9308      	str	r3, [sp, #32]
 800ce52:	e7f4      	b.n	800ce3e <_dtoa_r+0x2b6>
 800ce54:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ce58:	f8cd 9004 	str.w	r9, [sp, #4]
 800ce5c:	464b      	mov	r3, r9
 800ce5e:	e7c6      	b.n	800cdee <_dtoa_r+0x266>
 800ce60:	3101      	adds	r1, #1
 800ce62:	6041      	str	r1, [r0, #4]
 800ce64:	0052      	lsls	r2, r2, #1
 800ce66:	e7c6      	b.n	800cdf6 <_dtoa_r+0x26e>
 800ce68:	636f4361 	.word	0x636f4361
 800ce6c:	3fd287a7 	.word	0x3fd287a7
 800ce70:	8b60c8b3 	.word	0x8b60c8b3
 800ce74:	3fc68a28 	.word	0x3fc68a28
 800ce78:	509f79fb 	.word	0x509f79fb
 800ce7c:	3fd34413 	.word	0x3fd34413
 800ce80:	0800fb66 	.word	0x0800fb66
 800ce84:	0800fb7d 	.word	0x0800fb7d
 800ce88:	7ff00000 	.word	0x7ff00000
 800ce8c:	0800fb62 	.word	0x0800fb62
 800ce90:	0800fb59 	.word	0x0800fb59
 800ce94:	0800f9dd 	.word	0x0800f9dd
 800ce98:	3ff80000 	.word	0x3ff80000
 800ce9c:	0800fcf8 	.word	0x0800fcf8
 800cea0:	0800fbdc 	.word	0x0800fbdc
 800cea4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cea6:	9a00      	ldr	r2, [sp, #0]
 800cea8:	601a      	str	r2, [r3, #0]
 800ceaa:	9b01      	ldr	r3, [sp, #4]
 800ceac:	2b0e      	cmp	r3, #14
 800ceae:	f200 80ad 	bhi.w	800d00c <_dtoa_r+0x484>
 800ceb2:	2d00      	cmp	r5, #0
 800ceb4:	f000 80aa 	beq.w	800d00c <_dtoa_r+0x484>
 800ceb8:	f1ba 0f00 	cmp.w	sl, #0
 800cebc:	dd36      	ble.n	800cf2c <_dtoa_r+0x3a4>
 800cebe:	4ac3      	ldr	r2, [pc, #780]	; (800d1cc <_dtoa_r+0x644>)
 800cec0:	f00a 030f 	and.w	r3, sl, #15
 800cec4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cec8:	ed93 7b00 	vldr	d7, [r3]
 800cecc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ced0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ced4:	eeb0 8a47 	vmov.f32	s16, s14
 800ced8:	eef0 8a67 	vmov.f32	s17, s15
 800cedc:	d016      	beq.n	800cf0c <_dtoa_r+0x384>
 800cede:	4bbc      	ldr	r3, [pc, #752]	; (800d1d0 <_dtoa_r+0x648>)
 800cee0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cee4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cee8:	f7f3 fcc8 	bl	800087c <__aeabi_ddiv>
 800ceec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cef0:	f007 070f 	and.w	r7, r7, #15
 800cef4:	2503      	movs	r5, #3
 800cef6:	4eb6      	ldr	r6, [pc, #728]	; (800d1d0 <_dtoa_r+0x648>)
 800cef8:	b957      	cbnz	r7, 800cf10 <_dtoa_r+0x388>
 800cefa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cefe:	ec53 2b18 	vmov	r2, r3, d8
 800cf02:	f7f3 fcbb 	bl	800087c <__aeabi_ddiv>
 800cf06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf0a:	e029      	b.n	800cf60 <_dtoa_r+0x3d8>
 800cf0c:	2502      	movs	r5, #2
 800cf0e:	e7f2      	b.n	800cef6 <_dtoa_r+0x36e>
 800cf10:	07f9      	lsls	r1, r7, #31
 800cf12:	d508      	bpl.n	800cf26 <_dtoa_r+0x39e>
 800cf14:	ec51 0b18 	vmov	r0, r1, d8
 800cf18:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cf1c:	f7f3 fb84 	bl	8000628 <__aeabi_dmul>
 800cf20:	ec41 0b18 	vmov	d8, r0, r1
 800cf24:	3501      	adds	r5, #1
 800cf26:	107f      	asrs	r7, r7, #1
 800cf28:	3608      	adds	r6, #8
 800cf2a:	e7e5      	b.n	800cef8 <_dtoa_r+0x370>
 800cf2c:	f000 80a6 	beq.w	800d07c <_dtoa_r+0x4f4>
 800cf30:	f1ca 0600 	rsb	r6, sl, #0
 800cf34:	4ba5      	ldr	r3, [pc, #660]	; (800d1cc <_dtoa_r+0x644>)
 800cf36:	4fa6      	ldr	r7, [pc, #664]	; (800d1d0 <_dtoa_r+0x648>)
 800cf38:	f006 020f 	and.w	r2, r6, #15
 800cf3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cf48:	f7f3 fb6e 	bl	8000628 <__aeabi_dmul>
 800cf4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf50:	1136      	asrs	r6, r6, #4
 800cf52:	2300      	movs	r3, #0
 800cf54:	2502      	movs	r5, #2
 800cf56:	2e00      	cmp	r6, #0
 800cf58:	f040 8085 	bne.w	800d066 <_dtoa_r+0x4de>
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d1d2      	bne.n	800cf06 <_dtoa_r+0x37e>
 800cf60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	f000 808c 	beq.w	800d080 <_dtoa_r+0x4f8>
 800cf68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cf6c:	4b99      	ldr	r3, [pc, #612]	; (800d1d4 <_dtoa_r+0x64c>)
 800cf6e:	2200      	movs	r2, #0
 800cf70:	4630      	mov	r0, r6
 800cf72:	4639      	mov	r1, r7
 800cf74:	f7f3 fdca 	bl	8000b0c <__aeabi_dcmplt>
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	f000 8081 	beq.w	800d080 <_dtoa_r+0x4f8>
 800cf7e:	9b01      	ldr	r3, [sp, #4]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d07d      	beq.n	800d080 <_dtoa_r+0x4f8>
 800cf84:	f1b9 0f00 	cmp.w	r9, #0
 800cf88:	dd3c      	ble.n	800d004 <_dtoa_r+0x47c>
 800cf8a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cf8e:	9307      	str	r3, [sp, #28]
 800cf90:	2200      	movs	r2, #0
 800cf92:	4b91      	ldr	r3, [pc, #580]	; (800d1d8 <_dtoa_r+0x650>)
 800cf94:	4630      	mov	r0, r6
 800cf96:	4639      	mov	r1, r7
 800cf98:	f7f3 fb46 	bl	8000628 <__aeabi_dmul>
 800cf9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfa0:	3501      	adds	r5, #1
 800cfa2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800cfa6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cfaa:	4628      	mov	r0, r5
 800cfac:	f7f3 fad2 	bl	8000554 <__aeabi_i2d>
 800cfb0:	4632      	mov	r2, r6
 800cfb2:	463b      	mov	r3, r7
 800cfb4:	f7f3 fb38 	bl	8000628 <__aeabi_dmul>
 800cfb8:	4b88      	ldr	r3, [pc, #544]	; (800d1dc <_dtoa_r+0x654>)
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f7f3 f97e 	bl	80002bc <__adddf3>
 800cfc0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cfc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfc8:	9303      	str	r3, [sp, #12]
 800cfca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d15c      	bne.n	800d08a <_dtoa_r+0x502>
 800cfd0:	4b83      	ldr	r3, [pc, #524]	; (800d1e0 <_dtoa_r+0x658>)
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	4630      	mov	r0, r6
 800cfd6:	4639      	mov	r1, r7
 800cfd8:	f7f3 f96e 	bl	80002b8 <__aeabi_dsub>
 800cfdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cfe0:	4606      	mov	r6, r0
 800cfe2:	460f      	mov	r7, r1
 800cfe4:	f7f3 fdb0 	bl	8000b48 <__aeabi_dcmpgt>
 800cfe8:	2800      	cmp	r0, #0
 800cfea:	f040 8296 	bne.w	800d51a <_dtoa_r+0x992>
 800cfee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cff2:	4630      	mov	r0, r6
 800cff4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cff8:	4639      	mov	r1, r7
 800cffa:	f7f3 fd87 	bl	8000b0c <__aeabi_dcmplt>
 800cffe:	2800      	cmp	r0, #0
 800d000:	f040 8288 	bne.w	800d514 <_dtoa_r+0x98c>
 800d004:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d008:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d00c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d00e:	2b00      	cmp	r3, #0
 800d010:	f2c0 8158 	blt.w	800d2c4 <_dtoa_r+0x73c>
 800d014:	f1ba 0f0e 	cmp.w	sl, #14
 800d018:	f300 8154 	bgt.w	800d2c4 <_dtoa_r+0x73c>
 800d01c:	4b6b      	ldr	r3, [pc, #428]	; (800d1cc <_dtoa_r+0x644>)
 800d01e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d022:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d028:	2b00      	cmp	r3, #0
 800d02a:	f280 80e3 	bge.w	800d1f4 <_dtoa_r+0x66c>
 800d02e:	9b01      	ldr	r3, [sp, #4]
 800d030:	2b00      	cmp	r3, #0
 800d032:	f300 80df 	bgt.w	800d1f4 <_dtoa_r+0x66c>
 800d036:	f040 826d 	bne.w	800d514 <_dtoa_r+0x98c>
 800d03a:	4b69      	ldr	r3, [pc, #420]	; (800d1e0 <_dtoa_r+0x658>)
 800d03c:	2200      	movs	r2, #0
 800d03e:	4640      	mov	r0, r8
 800d040:	4649      	mov	r1, r9
 800d042:	f7f3 faf1 	bl	8000628 <__aeabi_dmul>
 800d046:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d04a:	f7f3 fd73 	bl	8000b34 <__aeabi_dcmpge>
 800d04e:	9e01      	ldr	r6, [sp, #4]
 800d050:	4637      	mov	r7, r6
 800d052:	2800      	cmp	r0, #0
 800d054:	f040 8243 	bne.w	800d4de <_dtoa_r+0x956>
 800d058:	9d00      	ldr	r5, [sp, #0]
 800d05a:	2331      	movs	r3, #49	; 0x31
 800d05c:	f805 3b01 	strb.w	r3, [r5], #1
 800d060:	f10a 0a01 	add.w	sl, sl, #1
 800d064:	e23f      	b.n	800d4e6 <_dtoa_r+0x95e>
 800d066:	07f2      	lsls	r2, r6, #31
 800d068:	d505      	bpl.n	800d076 <_dtoa_r+0x4ee>
 800d06a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d06e:	f7f3 fadb 	bl	8000628 <__aeabi_dmul>
 800d072:	3501      	adds	r5, #1
 800d074:	2301      	movs	r3, #1
 800d076:	1076      	asrs	r6, r6, #1
 800d078:	3708      	adds	r7, #8
 800d07a:	e76c      	b.n	800cf56 <_dtoa_r+0x3ce>
 800d07c:	2502      	movs	r5, #2
 800d07e:	e76f      	b.n	800cf60 <_dtoa_r+0x3d8>
 800d080:	9b01      	ldr	r3, [sp, #4]
 800d082:	f8cd a01c 	str.w	sl, [sp, #28]
 800d086:	930c      	str	r3, [sp, #48]	; 0x30
 800d088:	e78d      	b.n	800cfa6 <_dtoa_r+0x41e>
 800d08a:	9900      	ldr	r1, [sp, #0]
 800d08c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d08e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d090:	4b4e      	ldr	r3, [pc, #312]	; (800d1cc <_dtoa_r+0x644>)
 800d092:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d096:	4401      	add	r1, r0
 800d098:	9102      	str	r1, [sp, #8]
 800d09a:	9908      	ldr	r1, [sp, #32]
 800d09c:	eeb0 8a47 	vmov.f32	s16, s14
 800d0a0:	eef0 8a67 	vmov.f32	s17, s15
 800d0a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d0a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d0ac:	2900      	cmp	r1, #0
 800d0ae:	d045      	beq.n	800d13c <_dtoa_r+0x5b4>
 800d0b0:	494c      	ldr	r1, [pc, #304]	; (800d1e4 <_dtoa_r+0x65c>)
 800d0b2:	2000      	movs	r0, #0
 800d0b4:	f7f3 fbe2 	bl	800087c <__aeabi_ddiv>
 800d0b8:	ec53 2b18 	vmov	r2, r3, d8
 800d0bc:	f7f3 f8fc 	bl	80002b8 <__aeabi_dsub>
 800d0c0:	9d00      	ldr	r5, [sp, #0]
 800d0c2:	ec41 0b18 	vmov	d8, r0, r1
 800d0c6:	4639      	mov	r1, r7
 800d0c8:	4630      	mov	r0, r6
 800d0ca:	f7f3 fd5d 	bl	8000b88 <__aeabi_d2iz>
 800d0ce:	900c      	str	r0, [sp, #48]	; 0x30
 800d0d0:	f7f3 fa40 	bl	8000554 <__aeabi_i2d>
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	4630      	mov	r0, r6
 800d0da:	4639      	mov	r1, r7
 800d0dc:	f7f3 f8ec 	bl	80002b8 <__aeabi_dsub>
 800d0e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d0e2:	3330      	adds	r3, #48	; 0x30
 800d0e4:	f805 3b01 	strb.w	r3, [r5], #1
 800d0e8:	ec53 2b18 	vmov	r2, r3, d8
 800d0ec:	4606      	mov	r6, r0
 800d0ee:	460f      	mov	r7, r1
 800d0f0:	f7f3 fd0c 	bl	8000b0c <__aeabi_dcmplt>
 800d0f4:	2800      	cmp	r0, #0
 800d0f6:	d165      	bne.n	800d1c4 <_dtoa_r+0x63c>
 800d0f8:	4632      	mov	r2, r6
 800d0fa:	463b      	mov	r3, r7
 800d0fc:	4935      	ldr	r1, [pc, #212]	; (800d1d4 <_dtoa_r+0x64c>)
 800d0fe:	2000      	movs	r0, #0
 800d100:	f7f3 f8da 	bl	80002b8 <__aeabi_dsub>
 800d104:	ec53 2b18 	vmov	r2, r3, d8
 800d108:	f7f3 fd00 	bl	8000b0c <__aeabi_dcmplt>
 800d10c:	2800      	cmp	r0, #0
 800d10e:	f040 80b9 	bne.w	800d284 <_dtoa_r+0x6fc>
 800d112:	9b02      	ldr	r3, [sp, #8]
 800d114:	429d      	cmp	r5, r3
 800d116:	f43f af75 	beq.w	800d004 <_dtoa_r+0x47c>
 800d11a:	4b2f      	ldr	r3, [pc, #188]	; (800d1d8 <_dtoa_r+0x650>)
 800d11c:	ec51 0b18 	vmov	r0, r1, d8
 800d120:	2200      	movs	r2, #0
 800d122:	f7f3 fa81 	bl	8000628 <__aeabi_dmul>
 800d126:	4b2c      	ldr	r3, [pc, #176]	; (800d1d8 <_dtoa_r+0x650>)
 800d128:	ec41 0b18 	vmov	d8, r0, r1
 800d12c:	2200      	movs	r2, #0
 800d12e:	4630      	mov	r0, r6
 800d130:	4639      	mov	r1, r7
 800d132:	f7f3 fa79 	bl	8000628 <__aeabi_dmul>
 800d136:	4606      	mov	r6, r0
 800d138:	460f      	mov	r7, r1
 800d13a:	e7c4      	b.n	800d0c6 <_dtoa_r+0x53e>
 800d13c:	ec51 0b17 	vmov	r0, r1, d7
 800d140:	f7f3 fa72 	bl	8000628 <__aeabi_dmul>
 800d144:	9b02      	ldr	r3, [sp, #8]
 800d146:	9d00      	ldr	r5, [sp, #0]
 800d148:	930c      	str	r3, [sp, #48]	; 0x30
 800d14a:	ec41 0b18 	vmov	d8, r0, r1
 800d14e:	4639      	mov	r1, r7
 800d150:	4630      	mov	r0, r6
 800d152:	f7f3 fd19 	bl	8000b88 <__aeabi_d2iz>
 800d156:	9011      	str	r0, [sp, #68]	; 0x44
 800d158:	f7f3 f9fc 	bl	8000554 <__aeabi_i2d>
 800d15c:	4602      	mov	r2, r0
 800d15e:	460b      	mov	r3, r1
 800d160:	4630      	mov	r0, r6
 800d162:	4639      	mov	r1, r7
 800d164:	f7f3 f8a8 	bl	80002b8 <__aeabi_dsub>
 800d168:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d16a:	3330      	adds	r3, #48	; 0x30
 800d16c:	f805 3b01 	strb.w	r3, [r5], #1
 800d170:	9b02      	ldr	r3, [sp, #8]
 800d172:	429d      	cmp	r5, r3
 800d174:	4606      	mov	r6, r0
 800d176:	460f      	mov	r7, r1
 800d178:	f04f 0200 	mov.w	r2, #0
 800d17c:	d134      	bne.n	800d1e8 <_dtoa_r+0x660>
 800d17e:	4b19      	ldr	r3, [pc, #100]	; (800d1e4 <_dtoa_r+0x65c>)
 800d180:	ec51 0b18 	vmov	r0, r1, d8
 800d184:	f7f3 f89a 	bl	80002bc <__adddf3>
 800d188:	4602      	mov	r2, r0
 800d18a:	460b      	mov	r3, r1
 800d18c:	4630      	mov	r0, r6
 800d18e:	4639      	mov	r1, r7
 800d190:	f7f3 fcda 	bl	8000b48 <__aeabi_dcmpgt>
 800d194:	2800      	cmp	r0, #0
 800d196:	d175      	bne.n	800d284 <_dtoa_r+0x6fc>
 800d198:	ec53 2b18 	vmov	r2, r3, d8
 800d19c:	4911      	ldr	r1, [pc, #68]	; (800d1e4 <_dtoa_r+0x65c>)
 800d19e:	2000      	movs	r0, #0
 800d1a0:	f7f3 f88a 	bl	80002b8 <__aeabi_dsub>
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	4630      	mov	r0, r6
 800d1aa:	4639      	mov	r1, r7
 800d1ac:	f7f3 fcae 	bl	8000b0c <__aeabi_dcmplt>
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	f43f af27 	beq.w	800d004 <_dtoa_r+0x47c>
 800d1b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d1b8:	1e6b      	subs	r3, r5, #1
 800d1ba:	930c      	str	r3, [sp, #48]	; 0x30
 800d1bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d1c0:	2b30      	cmp	r3, #48	; 0x30
 800d1c2:	d0f8      	beq.n	800d1b6 <_dtoa_r+0x62e>
 800d1c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d1c8:	e04a      	b.n	800d260 <_dtoa_r+0x6d8>
 800d1ca:	bf00      	nop
 800d1cc:	0800fcf8 	.word	0x0800fcf8
 800d1d0:	0800fcd0 	.word	0x0800fcd0
 800d1d4:	3ff00000 	.word	0x3ff00000
 800d1d8:	40240000 	.word	0x40240000
 800d1dc:	401c0000 	.word	0x401c0000
 800d1e0:	40140000 	.word	0x40140000
 800d1e4:	3fe00000 	.word	0x3fe00000
 800d1e8:	4baf      	ldr	r3, [pc, #700]	; (800d4a8 <_dtoa_r+0x920>)
 800d1ea:	f7f3 fa1d 	bl	8000628 <__aeabi_dmul>
 800d1ee:	4606      	mov	r6, r0
 800d1f0:	460f      	mov	r7, r1
 800d1f2:	e7ac      	b.n	800d14e <_dtoa_r+0x5c6>
 800d1f4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d1f8:	9d00      	ldr	r5, [sp, #0]
 800d1fa:	4642      	mov	r2, r8
 800d1fc:	464b      	mov	r3, r9
 800d1fe:	4630      	mov	r0, r6
 800d200:	4639      	mov	r1, r7
 800d202:	f7f3 fb3b 	bl	800087c <__aeabi_ddiv>
 800d206:	f7f3 fcbf 	bl	8000b88 <__aeabi_d2iz>
 800d20a:	9002      	str	r0, [sp, #8]
 800d20c:	f7f3 f9a2 	bl	8000554 <__aeabi_i2d>
 800d210:	4642      	mov	r2, r8
 800d212:	464b      	mov	r3, r9
 800d214:	f7f3 fa08 	bl	8000628 <__aeabi_dmul>
 800d218:	4602      	mov	r2, r0
 800d21a:	460b      	mov	r3, r1
 800d21c:	4630      	mov	r0, r6
 800d21e:	4639      	mov	r1, r7
 800d220:	f7f3 f84a 	bl	80002b8 <__aeabi_dsub>
 800d224:	9e02      	ldr	r6, [sp, #8]
 800d226:	9f01      	ldr	r7, [sp, #4]
 800d228:	3630      	adds	r6, #48	; 0x30
 800d22a:	f805 6b01 	strb.w	r6, [r5], #1
 800d22e:	9e00      	ldr	r6, [sp, #0]
 800d230:	1bae      	subs	r6, r5, r6
 800d232:	42b7      	cmp	r7, r6
 800d234:	4602      	mov	r2, r0
 800d236:	460b      	mov	r3, r1
 800d238:	d137      	bne.n	800d2aa <_dtoa_r+0x722>
 800d23a:	f7f3 f83f 	bl	80002bc <__adddf3>
 800d23e:	4642      	mov	r2, r8
 800d240:	464b      	mov	r3, r9
 800d242:	4606      	mov	r6, r0
 800d244:	460f      	mov	r7, r1
 800d246:	f7f3 fc7f 	bl	8000b48 <__aeabi_dcmpgt>
 800d24a:	b9c8      	cbnz	r0, 800d280 <_dtoa_r+0x6f8>
 800d24c:	4642      	mov	r2, r8
 800d24e:	464b      	mov	r3, r9
 800d250:	4630      	mov	r0, r6
 800d252:	4639      	mov	r1, r7
 800d254:	f7f3 fc50 	bl	8000af8 <__aeabi_dcmpeq>
 800d258:	b110      	cbz	r0, 800d260 <_dtoa_r+0x6d8>
 800d25a:	9b02      	ldr	r3, [sp, #8]
 800d25c:	07d9      	lsls	r1, r3, #31
 800d25e:	d40f      	bmi.n	800d280 <_dtoa_r+0x6f8>
 800d260:	4620      	mov	r0, r4
 800d262:	4659      	mov	r1, fp
 800d264:	f000 fe4a 	bl	800defc <_Bfree>
 800d268:	2300      	movs	r3, #0
 800d26a:	702b      	strb	r3, [r5, #0]
 800d26c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d26e:	f10a 0001 	add.w	r0, sl, #1
 800d272:	6018      	str	r0, [r3, #0]
 800d274:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d276:	2b00      	cmp	r3, #0
 800d278:	f43f acd8 	beq.w	800cc2c <_dtoa_r+0xa4>
 800d27c:	601d      	str	r5, [r3, #0]
 800d27e:	e4d5      	b.n	800cc2c <_dtoa_r+0xa4>
 800d280:	f8cd a01c 	str.w	sl, [sp, #28]
 800d284:	462b      	mov	r3, r5
 800d286:	461d      	mov	r5, r3
 800d288:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d28c:	2a39      	cmp	r2, #57	; 0x39
 800d28e:	d108      	bne.n	800d2a2 <_dtoa_r+0x71a>
 800d290:	9a00      	ldr	r2, [sp, #0]
 800d292:	429a      	cmp	r2, r3
 800d294:	d1f7      	bne.n	800d286 <_dtoa_r+0x6fe>
 800d296:	9a07      	ldr	r2, [sp, #28]
 800d298:	9900      	ldr	r1, [sp, #0]
 800d29a:	3201      	adds	r2, #1
 800d29c:	9207      	str	r2, [sp, #28]
 800d29e:	2230      	movs	r2, #48	; 0x30
 800d2a0:	700a      	strb	r2, [r1, #0]
 800d2a2:	781a      	ldrb	r2, [r3, #0]
 800d2a4:	3201      	adds	r2, #1
 800d2a6:	701a      	strb	r2, [r3, #0]
 800d2a8:	e78c      	b.n	800d1c4 <_dtoa_r+0x63c>
 800d2aa:	4b7f      	ldr	r3, [pc, #508]	; (800d4a8 <_dtoa_r+0x920>)
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	f7f3 f9bb 	bl	8000628 <__aeabi_dmul>
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	4606      	mov	r6, r0
 800d2b8:	460f      	mov	r7, r1
 800d2ba:	f7f3 fc1d 	bl	8000af8 <__aeabi_dcmpeq>
 800d2be:	2800      	cmp	r0, #0
 800d2c0:	d09b      	beq.n	800d1fa <_dtoa_r+0x672>
 800d2c2:	e7cd      	b.n	800d260 <_dtoa_r+0x6d8>
 800d2c4:	9a08      	ldr	r2, [sp, #32]
 800d2c6:	2a00      	cmp	r2, #0
 800d2c8:	f000 80c4 	beq.w	800d454 <_dtoa_r+0x8cc>
 800d2cc:	9a05      	ldr	r2, [sp, #20]
 800d2ce:	2a01      	cmp	r2, #1
 800d2d0:	f300 80a8 	bgt.w	800d424 <_dtoa_r+0x89c>
 800d2d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d2d6:	2a00      	cmp	r2, #0
 800d2d8:	f000 80a0 	beq.w	800d41c <_dtoa_r+0x894>
 800d2dc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d2e0:	9e06      	ldr	r6, [sp, #24]
 800d2e2:	4645      	mov	r5, r8
 800d2e4:	9a04      	ldr	r2, [sp, #16]
 800d2e6:	2101      	movs	r1, #1
 800d2e8:	441a      	add	r2, r3
 800d2ea:	4620      	mov	r0, r4
 800d2ec:	4498      	add	r8, r3
 800d2ee:	9204      	str	r2, [sp, #16]
 800d2f0:	f000 ff0a 	bl	800e108 <__i2b>
 800d2f4:	4607      	mov	r7, r0
 800d2f6:	2d00      	cmp	r5, #0
 800d2f8:	dd0b      	ble.n	800d312 <_dtoa_r+0x78a>
 800d2fa:	9b04      	ldr	r3, [sp, #16]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	dd08      	ble.n	800d312 <_dtoa_r+0x78a>
 800d300:	42ab      	cmp	r3, r5
 800d302:	9a04      	ldr	r2, [sp, #16]
 800d304:	bfa8      	it	ge
 800d306:	462b      	movge	r3, r5
 800d308:	eba8 0803 	sub.w	r8, r8, r3
 800d30c:	1aed      	subs	r5, r5, r3
 800d30e:	1ad3      	subs	r3, r2, r3
 800d310:	9304      	str	r3, [sp, #16]
 800d312:	9b06      	ldr	r3, [sp, #24]
 800d314:	b1fb      	cbz	r3, 800d356 <_dtoa_r+0x7ce>
 800d316:	9b08      	ldr	r3, [sp, #32]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	f000 809f 	beq.w	800d45c <_dtoa_r+0x8d4>
 800d31e:	2e00      	cmp	r6, #0
 800d320:	dd11      	ble.n	800d346 <_dtoa_r+0x7be>
 800d322:	4639      	mov	r1, r7
 800d324:	4632      	mov	r2, r6
 800d326:	4620      	mov	r0, r4
 800d328:	f000 ffaa 	bl	800e280 <__pow5mult>
 800d32c:	465a      	mov	r2, fp
 800d32e:	4601      	mov	r1, r0
 800d330:	4607      	mov	r7, r0
 800d332:	4620      	mov	r0, r4
 800d334:	f000 fefe 	bl	800e134 <__multiply>
 800d338:	4659      	mov	r1, fp
 800d33a:	9007      	str	r0, [sp, #28]
 800d33c:	4620      	mov	r0, r4
 800d33e:	f000 fddd 	bl	800defc <_Bfree>
 800d342:	9b07      	ldr	r3, [sp, #28]
 800d344:	469b      	mov	fp, r3
 800d346:	9b06      	ldr	r3, [sp, #24]
 800d348:	1b9a      	subs	r2, r3, r6
 800d34a:	d004      	beq.n	800d356 <_dtoa_r+0x7ce>
 800d34c:	4659      	mov	r1, fp
 800d34e:	4620      	mov	r0, r4
 800d350:	f000 ff96 	bl	800e280 <__pow5mult>
 800d354:	4683      	mov	fp, r0
 800d356:	2101      	movs	r1, #1
 800d358:	4620      	mov	r0, r4
 800d35a:	f000 fed5 	bl	800e108 <__i2b>
 800d35e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d360:	2b00      	cmp	r3, #0
 800d362:	4606      	mov	r6, r0
 800d364:	dd7c      	ble.n	800d460 <_dtoa_r+0x8d8>
 800d366:	461a      	mov	r2, r3
 800d368:	4601      	mov	r1, r0
 800d36a:	4620      	mov	r0, r4
 800d36c:	f000 ff88 	bl	800e280 <__pow5mult>
 800d370:	9b05      	ldr	r3, [sp, #20]
 800d372:	2b01      	cmp	r3, #1
 800d374:	4606      	mov	r6, r0
 800d376:	dd76      	ble.n	800d466 <_dtoa_r+0x8de>
 800d378:	2300      	movs	r3, #0
 800d37a:	9306      	str	r3, [sp, #24]
 800d37c:	6933      	ldr	r3, [r6, #16]
 800d37e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d382:	6918      	ldr	r0, [r3, #16]
 800d384:	f000 fe70 	bl	800e068 <__hi0bits>
 800d388:	f1c0 0020 	rsb	r0, r0, #32
 800d38c:	9b04      	ldr	r3, [sp, #16]
 800d38e:	4418      	add	r0, r3
 800d390:	f010 001f 	ands.w	r0, r0, #31
 800d394:	f000 8086 	beq.w	800d4a4 <_dtoa_r+0x91c>
 800d398:	f1c0 0320 	rsb	r3, r0, #32
 800d39c:	2b04      	cmp	r3, #4
 800d39e:	dd7f      	ble.n	800d4a0 <_dtoa_r+0x918>
 800d3a0:	f1c0 001c 	rsb	r0, r0, #28
 800d3a4:	9b04      	ldr	r3, [sp, #16]
 800d3a6:	4403      	add	r3, r0
 800d3a8:	4480      	add	r8, r0
 800d3aa:	4405      	add	r5, r0
 800d3ac:	9304      	str	r3, [sp, #16]
 800d3ae:	f1b8 0f00 	cmp.w	r8, #0
 800d3b2:	dd05      	ble.n	800d3c0 <_dtoa_r+0x838>
 800d3b4:	4659      	mov	r1, fp
 800d3b6:	4642      	mov	r2, r8
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	f000 ffbb 	bl	800e334 <__lshift>
 800d3be:	4683      	mov	fp, r0
 800d3c0:	9b04      	ldr	r3, [sp, #16]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	dd05      	ble.n	800d3d2 <_dtoa_r+0x84a>
 800d3c6:	4631      	mov	r1, r6
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	f000 ffb2 	bl	800e334 <__lshift>
 800d3d0:	4606      	mov	r6, r0
 800d3d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d069      	beq.n	800d4ac <_dtoa_r+0x924>
 800d3d8:	4631      	mov	r1, r6
 800d3da:	4658      	mov	r0, fp
 800d3dc:	f001 f816 	bl	800e40c <__mcmp>
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	da63      	bge.n	800d4ac <_dtoa_r+0x924>
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	4659      	mov	r1, fp
 800d3e8:	220a      	movs	r2, #10
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	f000 fda8 	bl	800df40 <__multadd>
 800d3f0:	9b08      	ldr	r3, [sp, #32]
 800d3f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d3f6:	4683      	mov	fp, r0
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	f000 818f 	beq.w	800d71c <_dtoa_r+0xb94>
 800d3fe:	4639      	mov	r1, r7
 800d400:	2300      	movs	r3, #0
 800d402:	220a      	movs	r2, #10
 800d404:	4620      	mov	r0, r4
 800d406:	f000 fd9b 	bl	800df40 <__multadd>
 800d40a:	f1b9 0f00 	cmp.w	r9, #0
 800d40e:	4607      	mov	r7, r0
 800d410:	f300 808e 	bgt.w	800d530 <_dtoa_r+0x9a8>
 800d414:	9b05      	ldr	r3, [sp, #20]
 800d416:	2b02      	cmp	r3, #2
 800d418:	dc50      	bgt.n	800d4bc <_dtoa_r+0x934>
 800d41a:	e089      	b.n	800d530 <_dtoa_r+0x9a8>
 800d41c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d41e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d422:	e75d      	b.n	800d2e0 <_dtoa_r+0x758>
 800d424:	9b01      	ldr	r3, [sp, #4]
 800d426:	1e5e      	subs	r6, r3, #1
 800d428:	9b06      	ldr	r3, [sp, #24]
 800d42a:	42b3      	cmp	r3, r6
 800d42c:	bfbf      	itttt	lt
 800d42e:	9b06      	ldrlt	r3, [sp, #24]
 800d430:	9606      	strlt	r6, [sp, #24]
 800d432:	1af2      	sublt	r2, r6, r3
 800d434:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800d436:	bfb6      	itet	lt
 800d438:	189b      	addlt	r3, r3, r2
 800d43a:	1b9e      	subge	r6, r3, r6
 800d43c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800d43e:	9b01      	ldr	r3, [sp, #4]
 800d440:	bfb8      	it	lt
 800d442:	2600      	movlt	r6, #0
 800d444:	2b00      	cmp	r3, #0
 800d446:	bfb5      	itete	lt
 800d448:	eba8 0503 	sublt.w	r5, r8, r3
 800d44c:	9b01      	ldrge	r3, [sp, #4]
 800d44e:	2300      	movlt	r3, #0
 800d450:	4645      	movge	r5, r8
 800d452:	e747      	b.n	800d2e4 <_dtoa_r+0x75c>
 800d454:	9e06      	ldr	r6, [sp, #24]
 800d456:	9f08      	ldr	r7, [sp, #32]
 800d458:	4645      	mov	r5, r8
 800d45a:	e74c      	b.n	800d2f6 <_dtoa_r+0x76e>
 800d45c:	9a06      	ldr	r2, [sp, #24]
 800d45e:	e775      	b.n	800d34c <_dtoa_r+0x7c4>
 800d460:	9b05      	ldr	r3, [sp, #20]
 800d462:	2b01      	cmp	r3, #1
 800d464:	dc18      	bgt.n	800d498 <_dtoa_r+0x910>
 800d466:	9b02      	ldr	r3, [sp, #8]
 800d468:	b9b3      	cbnz	r3, 800d498 <_dtoa_r+0x910>
 800d46a:	9b03      	ldr	r3, [sp, #12]
 800d46c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d470:	b9a3      	cbnz	r3, 800d49c <_dtoa_r+0x914>
 800d472:	9b03      	ldr	r3, [sp, #12]
 800d474:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d478:	0d1b      	lsrs	r3, r3, #20
 800d47a:	051b      	lsls	r3, r3, #20
 800d47c:	b12b      	cbz	r3, 800d48a <_dtoa_r+0x902>
 800d47e:	9b04      	ldr	r3, [sp, #16]
 800d480:	3301      	adds	r3, #1
 800d482:	9304      	str	r3, [sp, #16]
 800d484:	f108 0801 	add.w	r8, r8, #1
 800d488:	2301      	movs	r3, #1
 800d48a:	9306      	str	r3, [sp, #24]
 800d48c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d48e:	2b00      	cmp	r3, #0
 800d490:	f47f af74 	bne.w	800d37c <_dtoa_r+0x7f4>
 800d494:	2001      	movs	r0, #1
 800d496:	e779      	b.n	800d38c <_dtoa_r+0x804>
 800d498:	2300      	movs	r3, #0
 800d49a:	e7f6      	b.n	800d48a <_dtoa_r+0x902>
 800d49c:	9b02      	ldr	r3, [sp, #8]
 800d49e:	e7f4      	b.n	800d48a <_dtoa_r+0x902>
 800d4a0:	d085      	beq.n	800d3ae <_dtoa_r+0x826>
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	301c      	adds	r0, #28
 800d4a6:	e77d      	b.n	800d3a4 <_dtoa_r+0x81c>
 800d4a8:	40240000 	.word	0x40240000
 800d4ac:	9b01      	ldr	r3, [sp, #4]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	dc38      	bgt.n	800d524 <_dtoa_r+0x99c>
 800d4b2:	9b05      	ldr	r3, [sp, #20]
 800d4b4:	2b02      	cmp	r3, #2
 800d4b6:	dd35      	ble.n	800d524 <_dtoa_r+0x99c>
 800d4b8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d4bc:	f1b9 0f00 	cmp.w	r9, #0
 800d4c0:	d10d      	bne.n	800d4de <_dtoa_r+0x956>
 800d4c2:	4631      	mov	r1, r6
 800d4c4:	464b      	mov	r3, r9
 800d4c6:	2205      	movs	r2, #5
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	f000 fd39 	bl	800df40 <__multadd>
 800d4ce:	4601      	mov	r1, r0
 800d4d0:	4606      	mov	r6, r0
 800d4d2:	4658      	mov	r0, fp
 800d4d4:	f000 ff9a 	bl	800e40c <__mcmp>
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	f73f adbd 	bgt.w	800d058 <_dtoa_r+0x4d0>
 800d4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4e0:	9d00      	ldr	r5, [sp, #0]
 800d4e2:	ea6f 0a03 	mvn.w	sl, r3
 800d4e6:	f04f 0800 	mov.w	r8, #0
 800d4ea:	4631      	mov	r1, r6
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	f000 fd05 	bl	800defc <_Bfree>
 800d4f2:	2f00      	cmp	r7, #0
 800d4f4:	f43f aeb4 	beq.w	800d260 <_dtoa_r+0x6d8>
 800d4f8:	f1b8 0f00 	cmp.w	r8, #0
 800d4fc:	d005      	beq.n	800d50a <_dtoa_r+0x982>
 800d4fe:	45b8      	cmp	r8, r7
 800d500:	d003      	beq.n	800d50a <_dtoa_r+0x982>
 800d502:	4641      	mov	r1, r8
 800d504:	4620      	mov	r0, r4
 800d506:	f000 fcf9 	bl	800defc <_Bfree>
 800d50a:	4639      	mov	r1, r7
 800d50c:	4620      	mov	r0, r4
 800d50e:	f000 fcf5 	bl	800defc <_Bfree>
 800d512:	e6a5      	b.n	800d260 <_dtoa_r+0x6d8>
 800d514:	2600      	movs	r6, #0
 800d516:	4637      	mov	r7, r6
 800d518:	e7e1      	b.n	800d4de <_dtoa_r+0x956>
 800d51a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d51c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d520:	4637      	mov	r7, r6
 800d522:	e599      	b.n	800d058 <_dtoa_r+0x4d0>
 800d524:	9b08      	ldr	r3, [sp, #32]
 800d526:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	f000 80fd 	beq.w	800d72a <_dtoa_r+0xba2>
 800d530:	2d00      	cmp	r5, #0
 800d532:	dd05      	ble.n	800d540 <_dtoa_r+0x9b8>
 800d534:	4639      	mov	r1, r7
 800d536:	462a      	mov	r2, r5
 800d538:	4620      	mov	r0, r4
 800d53a:	f000 fefb 	bl	800e334 <__lshift>
 800d53e:	4607      	mov	r7, r0
 800d540:	9b06      	ldr	r3, [sp, #24]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d05c      	beq.n	800d600 <_dtoa_r+0xa78>
 800d546:	6879      	ldr	r1, [r7, #4]
 800d548:	4620      	mov	r0, r4
 800d54a:	f000 fc97 	bl	800de7c <_Balloc>
 800d54e:	4605      	mov	r5, r0
 800d550:	b928      	cbnz	r0, 800d55e <_dtoa_r+0x9d6>
 800d552:	4b80      	ldr	r3, [pc, #512]	; (800d754 <_dtoa_r+0xbcc>)
 800d554:	4602      	mov	r2, r0
 800d556:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d55a:	f7ff bb2e 	b.w	800cbba <_dtoa_r+0x32>
 800d55e:	693a      	ldr	r2, [r7, #16]
 800d560:	3202      	adds	r2, #2
 800d562:	0092      	lsls	r2, r2, #2
 800d564:	f107 010c 	add.w	r1, r7, #12
 800d568:	300c      	adds	r0, #12
 800d56a:	f7fd fd01 	bl	800af70 <memcpy>
 800d56e:	2201      	movs	r2, #1
 800d570:	4629      	mov	r1, r5
 800d572:	4620      	mov	r0, r4
 800d574:	f000 fede 	bl	800e334 <__lshift>
 800d578:	9b00      	ldr	r3, [sp, #0]
 800d57a:	3301      	adds	r3, #1
 800d57c:	9301      	str	r3, [sp, #4]
 800d57e:	9b00      	ldr	r3, [sp, #0]
 800d580:	444b      	add	r3, r9
 800d582:	9307      	str	r3, [sp, #28]
 800d584:	9b02      	ldr	r3, [sp, #8]
 800d586:	f003 0301 	and.w	r3, r3, #1
 800d58a:	46b8      	mov	r8, r7
 800d58c:	9306      	str	r3, [sp, #24]
 800d58e:	4607      	mov	r7, r0
 800d590:	9b01      	ldr	r3, [sp, #4]
 800d592:	4631      	mov	r1, r6
 800d594:	3b01      	subs	r3, #1
 800d596:	4658      	mov	r0, fp
 800d598:	9302      	str	r3, [sp, #8]
 800d59a:	f7ff fa67 	bl	800ca6c <quorem>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	3330      	adds	r3, #48	; 0x30
 800d5a2:	9004      	str	r0, [sp, #16]
 800d5a4:	4641      	mov	r1, r8
 800d5a6:	4658      	mov	r0, fp
 800d5a8:	9308      	str	r3, [sp, #32]
 800d5aa:	f000 ff2f 	bl	800e40c <__mcmp>
 800d5ae:	463a      	mov	r2, r7
 800d5b0:	4681      	mov	r9, r0
 800d5b2:	4631      	mov	r1, r6
 800d5b4:	4620      	mov	r0, r4
 800d5b6:	f000 ff45 	bl	800e444 <__mdiff>
 800d5ba:	68c2      	ldr	r2, [r0, #12]
 800d5bc:	9b08      	ldr	r3, [sp, #32]
 800d5be:	4605      	mov	r5, r0
 800d5c0:	bb02      	cbnz	r2, 800d604 <_dtoa_r+0xa7c>
 800d5c2:	4601      	mov	r1, r0
 800d5c4:	4658      	mov	r0, fp
 800d5c6:	f000 ff21 	bl	800e40c <__mcmp>
 800d5ca:	9b08      	ldr	r3, [sp, #32]
 800d5cc:	4602      	mov	r2, r0
 800d5ce:	4629      	mov	r1, r5
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800d5d6:	f000 fc91 	bl	800defc <_Bfree>
 800d5da:	9b05      	ldr	r3, [sp, #20]
 800d5dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5de:	9d01      	ldr	r5, [sp, #4]
 800d5e0:	ea43 0102 	orr.w	r1, r3, r2
 800d5e4:	9b06      	ldr	r3, [sp, #24]
 800d5e6:	430b      	orrs	r3, r1
 800d5e8:	9b08      	ldr	r3, [sp, #32]
 800d5ea:	d10d      	bne.n	800d608 <_dtoa_r+0xa80>
 800d5ec:	2b39      	cmp	r3, #57	; 0x39
 800d5ee:	d029      	beq.n	800d644 <_dtoa_r+0xabc>
 800d5f0:	f1b9 0f00 	cmp.w	r9, #0
 800d5f4:	dd01      	ble.n	800d5fa <_dtoa_r+0xa72>
 800d5f6:	9b04      	ldr	r3, [sp, #16]
 800d5f8:	3331      	adds	r3, #49	; 0x31
 800d5fa:	9a02      	ldr	r2, [sp, #8]
 800d5fc:	7013      	strb	r3, [r2, #0]
 800d5fe:	e774      	b.n	800d4ea <_dtoa_r+0x962>
 800d600:	4638      	mov	r0, r7
 800d602:	e7b9      	b.n	800d578 <_dtoa_r+0x9f0>
 800d604:	2201      	movs	r2, #1
 800d606:	e7e2      	b.n	800d5ce <_dtoa_r+0xa46>
 800d608:	f1b9 0f00 	cmp.w	r9, #0
 800d60c:	db06      	blt.n	800d61c <_dtoa_r+0xa94>
 800d60e:	9905      	ldr	r1, [sp, #20]
 800d610:	ea41 0909 	orr.w	r9, r1, r9
 800d614:	9906      	ldr	r1, [sp, #24]
 800d616:	ea59 0101 	orrs.w	r1, r9, r1
 800d61a:	d120      	bne.n	800d65e <_dtoa_r+0xad6>
 800d61c:	2a00      	cmp	r2, #0
 800d61e:	ddec      	ble.n	800d5fa <_dtoa_r+0xa72>
 800d620:	4659      	mov	r1, fp
 800d622:	2201      	movs	r2, #1
 800d624:	4620      	mov	r0, r4
 800d626:	9301      	str	r3, [sp, #4]
 800d628:	f000 fe84 	bl	800e334 <__lshift>
 800d62c:	4631      	mov	r1, r6
 800d62e:	4683      	mov	fp, r0
 800d630:	f000 feec 	bl	800e40c <__mcmp>
 800d634:	2800      	cmp	r0, #0
 800d636:	9b01      	ldr	r3, [sp, #4]
 800d638:	dc02      	bgt.n	800d640 <_dtoa_r+0xab8>
 800d63a:	d1de      	bne.n	800d5fa <_dtoa_r+0xa72>
 800d63c:	07da      	lsls	r2, r3, #31
 800d63e:	d5dc      	bpl.n	800d5fa <_dtoa_r+0xa72>
 800d640:	2b39      	cmp	r3, #57	; 0x39
 800d642:	d1d8      	bne.n	800d5f6 <_dtoa_r+0xa6e>
 800d644:	9a02      	ldr	r2, [sp, #8]
 800d646:	2339      	movs	r3, #57	; 0x39
 800d648:	7013      	strb	r3, [r2, #0]
 800d64a:	462b      	mov	r3, r5
 800d64c:	461d      	mov	r5, r3
 800d64e:	3b01      	subs	r3, #1
 800d650:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d654:	2a39      	cmp	r2, #57	; 0x39
 800d656:	d050      	beq.n	800d6fa <_dtoa_r+0xb72>
 800d658:	3201      	adds	r2, #1
 800d65a:	701a      	strb	r2, [r3, #0]
 800d65c:	e745      	b.n	800d4ea <_dtoa_r+0x962>
 800d65e:	2a00      	cmp	r2, #0
 800d660:	dd03      	ble.n	800d66a <_dtoa_r+0xae2>
 800d662:	2b39      	cmp	r3, #57	; 0x39
 800d664:	d0ee      	beq.n	800d644 <_dtoa_r+0xabc>
 800d666:	3301      	adds	r3, #1
 800d668:	e7c7      	b.n	800d5fa <_dtoa_r+0xa72>
 800d66a:	9a01      	ldr	r2, [sp, #4]
 800d66c:	9907      	ldr	r1, [sp, #28]
 800d66e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d672:	428a      	cmp	r2, r1
 800d674:	d02a      	beq.n	800d6cc <_dtoa_r+0xb44>
 800d676:	4659      	mov	r1, fp
 800d678:	2300      	movs	r3, #0
 800d67a:	220a      	movs	r2, #10
 800d67c:	4620      	mov	r0, r4
 800d67e:	f000 fc5f 	bl	800df40 <__multadd>
 800d682:	45b8      	cmp	r8, r7
 800d684:	4683      	mov	fp, r0
 800d686:	f04f 0300 	mov.w	r3, #0
 800d68a:	f04f 020a 	mov.w	r2, #10
 800d68e:	4641      	mov	r1, r8
 800d690:	4620      	mov	r0, r4
 800d692:	d107      	bne.n	800d6a4 <_dtoa_r+0xb1c>
 800d694:	f000 fc54 	bl	800df40 <__multadd>
 800d698:	4680      	mov	r8, r0
 800d69a:	4607      	mov	r7, r0
 800d69c:	9b01      	ldr	r3, [sp, #4]
 800d69e:	3301      	adds	r3, #1
 800d6a0:	9301      	str	r3, [sp, #4]
 800d6a2:	e775      	b.n	800d590 <_dtoa_r+0xa08>
 800d6a4:	f000 fc4c 	bl	800df40 <__multadd>
 800d6a8:	4639      	mov	r1, r7
 800d6aa:	4680      	mov	r8, r0
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	220a      	movs	r2, #10
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	f000 fc45 	bl	800df40 <__multadd>
 800d6b6:	4607      	mov	r7, r0
 800d6b8:	e7f0      	b.n	800d69c <_dtoa_r+0xb14>
 800d6ba:	f1b9 0f00 	cmp.w	r9, #0
 800d6be:	9a00      	ldr	r2, [sp, #0]
 800d6c0:	bfcc      	ite	gt
 800d6c2:	464d      	movgt	r5, r9
 800d6c4:	2501      	movle	r5, #1
 800d6c6:	4415      	add	r5, r2
 800d6c8:	f04f 0800 	mov.w	r8, #0
 800d6cc:	4659      	mov	r1, fp
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	9301      	str	r3, [sp, #4]
 800d6d4:	f000 fe2e 	bl	800e334 <__lshift>
 800d6d8:	4631      	mov	r1, r6
 800d6da:	4683      	mov	fp, r0
 800d6dc:	f000 fe96 	bl	800e40c <__mcmp>
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	dcb2      	bgt.n	800d64a <_dtoa_r+0xac2>
 800d6e4:	d102      	bne.n	800d6ec <_dtoa_r+0xb64>
 800d6e6:	9b01      	ldr	r3, [sp, #4]
 800d6e8:	07db      	lsls	r3, r3, #31
 800d6ea:	d4ae      	bmi.n	800d64a <_dtoa_r+0xac2>
 800d6ec:	462b      	mov	r3, r5
 800d6ee:	461d      	mov	r5, r3
 800d6f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6f4:	2a30      	cmp	r2, #48	; 0x30
 800d6f6:	d0fa      	beq.n	800d6ee <_dtoa_r+0xb66>
 800d6f8:	e6f7      	b.n	800d4ea <_dtoa_r+0x962>
 800d6fa:	9a00      	ldr	r2, [sp, #0]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d1a5      	bne.n	800d64c <_dtoa_r+0xac4>
 800d700:	f10a 0a01 	add.w	sl, sl, #1
 800d704:	2331      	movs	r3, #49	; 0x31
 800d706:	e779      	b.n	800d5fc <_dtoa_r+0xa74>
 800d708:	4b13      	ldr	r3, [pc, #76]	; (800d758 <_dtoa_r+0xbd0>)
 800d70a:	f7ff baaf 	b.w	800cc6c <_dtoa_r+0xe4>
 800d70e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d710:	2b00      	cmp	r3, #0
 800d712:	f47f aa86 	bne.w	800cc22 <_dtoa_r+0x9a>
 800d716:	4b11      	ldr	r3, [pc, #68]	; (800d75c <_dtoa_r+0xbd4>)
 800d718:	f7ff baa8 	b.w	800cc6c <_dtoa_r+0xe4>
 800d71c:	f1b9 0f00 	cmp.w	r9, #0
 800d720:	dc03      	bgt.n	800d72a <_dtoa_r+0xba2>
 800d722:	9b05      	ldr	r3, [sp, #20]
 800d724:	2b02      	cmp	r3, #2
 800d726:	f73f aec9 	bgt.w	800d4bc <_dtoa_r+0x934>
 800d72a:	9d00      	ldr	r5, [sp, #0]
 800d72c:	4631      	mov	r1, r6
 800d72e:	4658      	mov	r0, fp
 800d730:	f7ff f99c 	bl	800ca6c <quorem>
 800d734:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d738:	f805 3b01 	strb.w	r3, [r5], #1
 800d73c:	9a00      	ldr	r2, [sp, #0]
 800d73e:	1aaa      	subs	r2, r5, r2
 800d740:	4591      	cmp	r9, r2
 800d742:	ddba      	ble.n	800d6ba <_dtoa_r+0xb32>
 800d744:	4659      	mov	r1, fp
 800d746:	2300      	movs	r3, #0
 800d748:	220a      	movs	r2, #10
 800d74a:	4620      	mov	r0, r4
 800d74c:	f000 fbf8 	bl	800df40 <__multadd>
 800d750:	4683      	mov	fp, r0
 800d752:	e7eb      	b.n	800d72c <_dtoa_r+0xba4>
 800d754:	0800fbdc 	.word	0x0800fbdc
 800d758:	0800f9dc 	.word	0x0800f9dc
 800d75c:	0800fb59 	.word	0x0800fb59

0800d760 <rshift>:
 800d760:	6903      	ldr	r3, [r0, #16]
 800d762:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d766:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d76a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d76e:	f100 0414 	add.w	r4, r0, #20
 800d772:	dd45      	ble.n	800d800 <rshift+0xa0>
 800d774:	f011 011f 	ands.w	r1, r1, #31
 800d778:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d77c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d780:	d10c      	bne.n	800d79c <rshift+0x3c>
 800d782:	f100 0710 	add.w	r7, r0, #16
 800d786:	4629      	mov	r1, r5
 800d788:	42b1      	cmp	r1, r6
 800d78a:	d334      	bcc.n	800d7f6 <rshift+0x96>
 800d78c:	1a9b      	subs	r3, r3, r2
 800d78e:	009b      	lsls	r3, r3, #2
 800d790:	1eea      	subs	r2, r5, #3
 800d792:	4296      	cmp	r6, r2
 800d794:	bf38      	it	cc
 800d796:	2300      	movcc	r3, #0
 800d798:	4423      	add	r3, r4
 800d79a:	e015      	b.n	800d7c8 <rshift+0x68>
 800d79c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d7a0:	f1c1 0820 	rsb	r8, r1, #32
 800d7a4:	40cf      	lsrs	r7, r1
 800d7a6:	f105 0e04 	add.w	lr, r5, #4
 800d7aa:	46a1      	mov	r9, r4
 800d7ac:	4576      	cmp	r6, lr
 800d7ae:	46f4      	mov	ip, lr
 800d7b0:	d815      	bhi.n	800d7de <rshift+0x7e>
 800d7b2:	1a9b      	subs	r3, r3, r2
 800d7b4:	009a      	lsls	r2, r3, #2
 800d7b6:	3a04      	subs	r2, #4
 800d7b8:	3501      	adds	r5, #1
 800d7ba:	42ae      	cmp	r6, r5
 800d7bc:	bf38      	it	cc
 800d7be:	2200      	movcc	r2, #0
 800d7c0:	18a3      	adds	r3, r4, r2
 800d7c2:	50a7      	str	r7, [r4, r2]
 800d7c4:	b107      	cbz	r7, 800d7c8 <rshift+0x68>
 800d7c6:	3304      	adds	r3, #4
 800d7c8:	1b1a      	subs	r2, r3, r4
 800d7ca:	42a3      	cmp	r3, r4
 800d7cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d7d0:	bf08      	it	eq
 800d7d2:	2300      	moveq	r3, #0
 800d7d4:	6102      	str	r2, [r0, #16]
 800d7d6:	bf08      	it	eq
 800d7d8:	6143      	streq	r3, [r0, #20]
 800d7da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7de:	f8dc c000 	ldr.w	ip, [ip]
 800d7e2:	fa0c fc08 	lsl.w	ip, ip, r8
 800d7e6:	ea4c 0707 	orr.w	r7, ip, r7
 800d7ea:	f849 7b04 	str.w	r7, [r9], #4
 800d7ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d7f2:	40cf      	lsrs	r7, r1
 800d7f4:	e7da      	b.n	800d7ac <rshift+0x4c>
 800d7f6:	f851 cb04 	ldr.w	ip, [r1], #4
 800d7fa:	f847 cf04 	str.w	ip, [r7, #4]!
 800d7fe:	e7c3      	b.n	800d788 <rshift+0x28>
 800d800:	4623      	mov	r3, r4
 800d802:	e7e1      	b.n	800d7c8 <rshift+0x68>

0800d804 <__hexdig_fun>:
 800d804:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d808:	2b09      	cmp	r3, #9
 800d80a:	d802      	bhi.n	800d812 <__hexdig_fun+0xe>
 800d80c:	3820      	subs	r0, #32
 800d80e:	b2c0      	uxtb	r0, r0
 800d810:	4770      	bx	lr
 800d812:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d816:	2b05      	cmp	r3, #5
 800d818:	d801      	bhi.n	800d81e <__hexdig_fun+0x1a>
 800d81a:	3847      	subs	r0, #71	; 0x47
 800d81c:	e7f7      	b.n	800d80e <__hexdig_fun+0xa>
 800d81e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d822:	2b05      	cmp	r3, #5
 800d824:	d801      	bhi.n	800d82a <__hexdig_fun+0x26>
 800d826:	3827      	subs	r0, #39	; 0x27
 800d828:	e7f1      	b.n	800d80e <__hexdig_fun+0xa>
 800d82a:	2000      	movs	r0, #0
 800d82c:	4770      	bx	lr
	...

0800d830 <__gethex>:
 800d830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d834:	ed2d 8b02 	vpush	{d8}
 800d838:	b089      	sub	sp, #36	; 0x24
 800d83a:	ee08 0a10 	vmov	s16, r0
 800d83e:	9304      	str	r3, [sp, #16]
 800d840:	4bbc      	ldr	r3, [pc, #752]	; (800db34 <__gethex+0x304>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	9301      	str	r3, [sp, #4]
 800d846:	4618      	mov	r0, r3
 800d848:	468b      	mov	fp, r1
 800d84a:	4690      	mov	r8, r2
 800d84c:	f7f2 fcd8 	bl	8000200 <strlen>
 800d850:	9b01      	ldr	r3, [sp, #4]
 800d852:	f8db 2000 	ldr.w	r2, [fp]
 800d856:	4403      	add	r3, r0
 800d858:	4682      	mov	sl, r0
 800d85a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d85e:	9305      	str	r3, [sp, #20]
 800d860:	1c93      	adds	r3, r2, #2
 800d862:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d866:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d86a:	32fe      	adds	r2, #254	; 0xfe
 800d86c:	18d1      	adds	r1, r2, r3
 800d86e:	461f      	mov	r7, r3
 800d870:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d874:	9100      	str	r1, [sp, #0]
 800d876:	2830      	cmp	r0, #48	; 0x30
 800d878:	d0f8      	beq.n	800d86c <__gethex+0x3c>
 800d87a:	f7ff ffc3 	bl	800d804 <__hexdig_fun>
 800d87e:	4604      	mov	r4, r0
 800d880:	2800      	cmp	r0, #0
 800d882:	d13a      	bne.n	800d8fa <__gethex+0xca>
 800d884:	9901      	ldr	r1, [sp, #4]
 800d886:	4652      	mov	r2, sl
 800d888:	4638      	mov	r0, r7
 800d88a:	f001 f9e1 	bl	800ec50 <strncmp>
 800d88e:	4605      	mov	r5, r0
 800d890:	2800      	cmp	r0, #0
 800d892:	d168      	bne.n	800d966 <__gethex+0x136>
 800d894:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d898:	eb07 060a 	add.w	r6, r7, sl
 800d89c:	f7ff ffb2 	bl	800d804 <__hexdig_fun>
 800d8a0:	2800      	cmp	r0, #0
 800d8a2:	d062      	beq.n	800d96a <__gethex+0x13a>
 800d8a4:	4633      	mov	r3, r6
 800d8a6:	7818      	ldrb	r0, [r3, #0]
 800d8a8:	2830      	cmp	r0, #48	; 0x30
 800d8aa:	461f      	mov	r7, r3
 800d8ac:	f103 0301 	add.w	r3, r3, #1
 800d8b0:	d0f9      	beq.n	800d8a6 <__gethex+0x76>
 800d8b2:	f7ff ffa7 	bl	800d804 <__hexdig_fun>
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	fab0 f480 	clz	r4, r0
 800d8bc:	0964      	lsrs	r4, r4, #5
 800d8be:	4635      	mov	r5, r6
 800d8c0:	9300      	str	r3, [sp, #0]
 800d8c2:	463a      	mov	r2, r7
 800d8c4:	4616      	mov	r6, r2
 800d8c6:	3201      	adds	r2, #1
 800d8c8:	7830      	ldrb	r0, [r6, #0]
 800d8ca:	f7ff ff9b 	bl	800d804 <__hexdig_fun>
 800d8ce:	2800      	cmp	r0, #0
 800d8d0:	d1f8      	bne.n	800d8c4 <__gethex+0x94>
 800d8d2:	9901      	ldr	r1, [sp, #4]
 800d8d4:	4652      	mov	r2, sl
 800d8d6:	4630      	mov	r0, r6
 800d8d8:	f001 f9ba 	bl	800ec50 <strncmp>
 800d8dc:	b980      	cbnz	r0, 800d900 <__gethex+0xd0>
 800d8de:	b94d      	cbnz	r5, 800d8f4 <__gethex+0xc4>
 800d8e0:	eb06 050a 	add.w	r5, r6, sl
 800d8e4:	462a      	mov	r2, r5
 800d8e6:	4616      	mov	r6, r2
 800d8e8:	3201      	adds	r2, #1
 800d8ea:	7830      	ldrb	r0, [r6, #0]
 800d8ec:	f7ff ff8a 	bl	800d804 <__hexdig_fun>
 800d8f0:	2800      	cmp	r0, #0
 800d8f2:	d1f8      	bne.n	800d8e6 <__gethex+0xb6>
 800d8f4:	1bad      	subs	r5, r5, r6
 800d8f6:	00ad      	lsls	r5, r5, #2
 800d8f8:	e004      	b.n	800d904 <__gethex+0xd4>
 800d8fa:	2400      	movs	r4, #0
 800d8fc:	4625      	mov	r5, r4
 800d8fe:	e7e0      	b.n	800d8c2 <__gethex+0x92>
 800d900:	2d00      	cmp	r5, #0
 800d902:	d1f7      	bne.n	800d8f4 <__gethex+0xc4>
 800d904:	7833      	ldrb	r3, [r6, #0]
 800d906:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d90a:	2b50      	cmp	r3, #80	; 0x50
 800d90c:	d13b      	bne.n	800d986 <__gethex+0x156>
 800d90e:	7873      	ldrb	r3, [r6, #1]
 800d910:	2b2b      	cmp	r3, #43	; 0x2b
 800d912:	d02c      	beq.n	800d96e <__gethex+0x13e>
 800d914:	2b2d      	cmp	r3, #45	; 0x2d
 800d916:	d02e      	beq.n	800d976 <__gethex+0x146>
 800d918:	1c71      	adds	r1, r6, #1
 800d91a:	f04f 0900 	mov.w	r9, #0
 800d91e:	7808      	ldrb	r0, [r1, #0]
 800d920:	f7ff ff70 	bl	800d804 <__hexdig_fun>
 800d924:	1e43      	subs	r3, r0, #1
 800d926:	b2db      	uxtb	r3, r3
 800d928:	2b18      	cmp	r3, #24
 800d92a:	d82c      	bhi.n	800d986 <__gethex+0x156>
 800d92c:	f1a0 0210 	sub.w	r2, r0, #16
 800d930:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d934:	f7ff ff66 	bl	800d804 <__hexdig_fun>
 800d938:	1e43      	subs	r3, r0, #1
 800d93a:	b2db      	uxtb	r3, r3
 800d93c:	2b18      	cmp	r3, #24
 800d93e:	d91d      	bls.n	800d97c <__gethex+0x14c>
 800d940:	f1b9 0f00 	cmp.w	r9, #0
 800d944:	d000      	beq.n	800d948 <__gethex+0x118>
 800d946:	4252      	negs	r2, r2
 800d948:	4415      	add	r5, r2
 800d94a:	f8cb 1000 	str.w	r1, [fp]
 800d94e:	b1e4      	cbz	r4, 800d98a <__gethex+0x15a>
 800d950:	9b00      	ldr	r3, [sp, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	bf14      	ite	ne
 800d956:	2700      	movne	r7, #0
 800d958:	2706      	moveq	r7, #6
 800d95a:	4638      	mov	r0, r7
 800d95c:	b009      	add	sp, #36	; 0x24
 800d95e:	ecbd 8b02 	vpop	{d8}
 800d962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d966:	463e      	mov	r6, r7
 800d968:	4625      	mov	r5, r4
 800d96a:	2401      	movs	r4, #1
 800d96c:	e7ca      	b.n	800d904 <__gethex+0xd4>
 800d96e:	f04f 0900 	mov.w	r9, #0
 800d972:	1cb1      	adds	r1, r6, #2
 800d974:	e7d3      	b.n	800d91e <__gethex+0xee>
 800d976:	f04f 0901 	mov.w	r9, #1
 800d97a:	e7fa      	b.n	800d972 <__gethex+0x142>
 800d97c:	230a      	movs	r3, #10
 800d97e:	fb03 0202 	mla	r2, r3, r2, r0
 800d982:	3a10      	subs	r2, #16
 800d984:	e7d4      	b.n	800d930 <__gethex+0x100>
 800d986:	4631      	mov	r1, r6
 800d988:	e7df      	b.n	800d94a <__gethex+0x11a>
 800d98a:	1bf3      	subs	r3, r6, r7
 800d98c:	3b01      	subs	r3, #1
 800d98e:	4621      	mov	r1, r4
 800d990:	2b07      	cmp	r3, #7
 800d992:	dc0b      	bgt.n	800d9ac <__gethex+0x17c>
 800d994:	ee18 0a10 	vmov	r0, s16
 800d998:	f000 fa70 	bl	800de7c <_Balloc>
 800d99c:	4604      	mov	r4, r0
 800d99e:	b940      	cbnz	r0, 800d9b2 <__gethex+0x182>
 800d9a0:	4b65      	ldr	r3, [pc, #404]	; (800db38 <__gethex+0x308>)
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	21de      	movs	r1, #222	; 0xde
 800d9a6:	4865      	ldr	r0, [pc, #404]	; (800db3c <__gethex+0x30c>)
 800d9a8:	f001 f972 	bl	800ec90 <__assert_func>
 800d9ac:	3101      	adds	r1, #1
 800d9ae:	105b      	asrs	r3, r3, #1
 800d9b0:	e7ee      	b.n	800d990 <__gethex+0x160>
 800d9b2:	f100 0914 	add.w	r9, r0, #20
 800d9b6:	f04f 0b00 	mov.w	fp, #0
 800d9ba:	f1ca 0301 	rsb	r3, sl, #1
 800d9be:	f8cd 9008 	str.w	r9, [sp, #8]
 800d9c2:	f8cd b000 	str.w	fp, [sp]
 800d9c6:	9306      	str	r3, [sp, #24]
 800d9c8:	42b7      	cmp	r7, r6
 800d9ca:	d340      	bcc.n	800da4e <__gethex+0x21e>
 800d9cc:	9802      	ldr	r0, [sp, #8]
 800d9ce:	9b00      	ldr	r3, [sp, #0]
 800d9d0:	f840 3b04 	str.w	r3, [r0], #4
 800d9d4:	eba0 0009 	sub.w	r0, r0, r9
 800d9d8:	1080      	asrs	r0, r0, #2
 800d9da:	0146      	lsls	r6, r0, #5
 800d9dc:	6120      	str	r0, [r4, #16]
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f000 fb42 	bl	800e068 <__hi0bits>
 800d9e4:	1a30      	subs	r0, r6, r0
 800d9e6:	f8d8 6000 	ldr.w	r6, [r8]
 800d9ea:	42b0      	cmp	r0, r6
 800d9ec:	dd63      	ble.n	800dab6 <__gethex+0x286>
 800d9ee:	1b87      	subs	r7, r0, r6
 800d9f0:	4639      	mov	r1, r7
 800d9f2:	4620      	mov	r0, r4
 800d9f4:	f000 fedc 	bl	800e7b0 <__any_on>
 800d9f8:	4682      	mov	sl, r0
 800d9fa:	b1a8      	cbz	r0, 800da28 <__gethex+0x1f8>
 800d9fc:	1e7b      	subs	r3, r7, #1
 800d9fe:	1159      	asrs	r1, r3, #5
 800da00:	f003 021f 	and.w	r2, r3, #31
 800da04:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800da08:	f04f 0a01 	mov.w	sl, #1
 800da0c:	fa0a f202 	lsl.w	r2, sl, r2
 800da10:	420a      	tst	r2, r1
 800da12:	d009      	beq.n	800da28 <__gethex+0x1f8>
 800da14:	4553      	cmp	r3, sl
 800da16:	dd05      	ble.n	800da24 <__gethex+0x1f4>
 800da18:	1eb9      	subs	r1, r7, #2
 800da1a:	4620      	mov	r0, r4
 800da1c:	f000 fec8 	bl	800e7b0 <__any_on>
 800da20:	2800      	cmp	r0, #0
 800da22:	d145      	bne.n	800dab0 <__gethex+0x280>
 800da24:	f04f 0a02 	mov.w	sl, #2
 800da28:	4639      	mov	r1, r7
 800da2a:	4620      	mov	r0, r4
 800da2c:	f7ff fe98 	bl	800d760 <rshift>
 800da30:	443d      	add	r5, r7
 800da32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da36:	42ab      	cmp	r3, r5
 800da38:	da4c      	bge.n	800dad4 <__gethex+0x2a4>
 800da3a:	ee18 0a10 	vmov	r0, s16
 800da3e:	4621      	mov	r1, r4
 800da40:	f000 fa5c 	bl	800defc <_Bfree>
 800da44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800da46:	2300      	movs	r3, #0
 800da48:	6013      	str	r3, [r2, #0]
 800da4a:	27a3      	movs	r7, #163	; 0xa3
 800da4c:	e785      	b.n	800d95a <__gethex+0x12a>
 800da4e:	1e73      	subs	r3, r6, #1
 800da50:	9a05      	ldr	r2, [sp, #20]
 800da52:	9303      	str	r3, [sp, #12]
 800da54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800da58:	4293      	cmp	r3, r2
 800da5a:	d019      	beq.n	800da90 <__gethex+0x260>
 800da5c:	f1bb 0f20 	cmp.w	fp, #32
 800da60:	d107      	bne.n	800da72 <__gethex+0x242>
 800da62:	9b02      	ldr	r3, [sp, #8]
 800da64:	9a00      	ldr	r2, [sp, #0]
 800da66:	f843 2b04 	str.w	r2, [r3], #4
 800da6a:	9302      	str	r3, [sp, #8]
 800da6c:	2300      	movs	r3, #0
 800da6e:	9300      	str	r3, [sp, #0]
 800da70:	469b      	mov	fp, r3
 800da72:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800da76:	f7ff fec5 	bl	800d804 <__hexdig_fun>
 800da7a:	9b00      	ldr	r3, [sp, #0]
 800da7c:	f000 000f 	and.w	r0, r0, #15
 800da80:	fa00 f00b 	lsl.w	r0, r0, fp
 800da84:	4303      	orrs	r3, r0
 800da86:	9300      	str	r3, [sp, #0]
 800da88:	f10b 0b04 	add.w	fp, fp, #4
 800da8c:	9b03      	ldr	r3, [sp, #12]
 800da8e:	e00d      	b.n	800daac <__gethex+0x27c>
 800da90:	9b03      	ldr	r3, [sp, #12]
 800da92:	9a06      	ldr	r2, [sp, #24]
 800da94:	4413      	add	r3, r2
 800da96:	42bb      	cmp	r3, r7
 800da98:	d3e0      	bcc.n	800da5c <__gethex+0x22c>
 800da9a:	4618      	mov	r0, r3
 800da9c:	9901      	ldr	r1, [sp, #4]
 800da9e:	9307      	str	r3, [sp, #28]
 800daa0:	4652      	mov	r2, sl
 800daa2:	f001 f8d5 	bl	800ec50 <strncmp>
 800daa6:	9b07      	ldr	r3, [sp, #28]
 800daa8:	2800      	cmp	r0, #0
 800daaa:	d1d7      	bne.n	800da5c <__gethex+0x22c>
 800daac:	461e      	mov	r6, r3
 800daae:	e78b      	b.n	800d9c8 <__gethex+0x198>
 800dab0:	f04f 0a03 	mov.w	sl, #3
 800dab4:	e7b8      	b.n	800da28 <__gethex+0x1f8>
 800dab6:	da0a      	bge.n	800dace <__gethex+0x29e>
 800dab8:	1a37      	subs	r7, r6, r0
 800daba:	4621      	mov	r1, r4
 800dabc:	ee18 0a10 	vmov	r0, s16
 800dac0:	463a      	mov	r2, r7
 800dac2:	f000 fc37 	bl	800e334 <__lshift>
 800dac6:	1bed      	subs	r5, r5, r7
 800dac8:	4604      	mov	r4, r0
 800daca:	f100 0914 	add.w	r9, r0, #20
 800dace:	f04f 0a00 	mov.w	sl, #0
 800dad2:	e7ae      	b.n	800da32 <__gethex+0x202>
 800dad4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dad8:	42a8      	cmp	r0, r5
 800dada:	dd72      	ble.n	800dbc2 <__gethex+0x392>
 800dadc:	1b45      	subs	r5, r0, r5
 800dade:	42ae      	cmp	r6, r5
 800dae0:	dc36      	bgt.n	800db50 <__gethex+0x320>
 800dae2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dae6:	2b02      	cmp	r3, #2
 800dae8:	d02a      	beq.n	800db40 <__gethex+0x310>
 800daea:	2b03      	cmp	r3, #3
 800daec:	d02c      	beq.n	800db48 <__gethex+0x318>
 800daee:	2b01      	cmp	r3, #1
 800daf0:	d115      	bne.n	800db1e <__gethex+0x2ee>
 800daf2:	42ae      	cmp	r6, r5
 800daf4:	d113      	bne.n	800db1e <__gethex+0x2ee>
 800daf6:	2e01      	cmp	r6, #1
 800daf8:	d10b      	bne.n	800db12 <__gethex+0x2e2>
 800dafa:	9a04      	ldr	r2, [sp, #16]
 800dafc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800db00:	6013      	str	r3, [r2, #0]
 800db02:	2301      	movs	r3, #1
 800db04:	6123      	str	r3, [r4, #16]
 800db06:	f8c9 3000 	str.w	r3, [r9]
 800db0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800db0c:	2762      	movs	r7, #98	; 0x62
 800db0e:	601c      	str	r4, [r3, #0]
 800db10:	e723      	b.n	800d95a <__gethex+0x12a>
 800db12:	1e71      	subs	r1, r6, #1
 800db14:	4620      	mov	r0, r4
 800db16:	f000 fe4b 	bl	800e7b0 <__any_on>
 800db1a:	2800      	cmp	r0, #0
 800db1c:	d1ed      	bne.n	800dafa <__gethex+0x2ca>
 800db1e:	ee18 0a10 	vmov	r0, s16
 800db22:	4621      	mov	r1, r4
 800db24:	f000 f9ea 	bl	800defc <_Bfree>
 800db28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800db2a:	2300      	movs	r3, #0
 800db2c:	6013      	str	r3, [r2, #0]
 800db2e:	2750      	movs	r7, #80	; 0x50
 800db30:	e713      	b.n	800d95a <__gethex+0x12a>
 800db32:	bf00      	nop
 800db34:	0800fc58 	.word	0x0800fc58
 800db38:	0800fbdc 	.word	0x0800fbdc
 800db3c:	0800fbed 	.word	0x0800fbed
 800db40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db42:	2b00      	cmp	r3, #0
 800db44:	d1eb      	bne.n	800db1e <__gethex+0x2ee>
 800db46:	e7d8      	b.n	800dafa <__gethex+0x2ca>
 800db48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d1d5      	bne.n	800dafa <__gethex+0x2ca>
 800db4e:	e7e6      	b.n	800db1e <__gethex+0x2ee>
 800db50:	1e6f      	subs	r7, r5, #1
 800db52:	f1ba 0f00 	cmp.w	sl, #0
 800db56:	d131      	bne.n	800dbbc <__gethex+0x38c>
 800db58:	b127      	cbz	r7, 800db64 <__gethex+0x334>
 800db5a:	4639      	mov	r1, r7
 800db5c:	4620      	mov	r0, r4
 800db5e:	f000 fe27 	bl	800e7b0 <__any_on>
 800db62:	4682      	mov	sl, r0
 800db64:	117b      	asrs	r3, r7, #5
 800db66:	2101      	movs	r1, #1
 800db68:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800db6c:	f007 071f 	and.w	r7, r7, #31
 800db70:	fa01 f707 	lsl.w	r7, r1, r7
 800db74:	421f      	tst	r7, r3
 800db76:	4629      	mov	r1, r5
 800db78:	4620      	mov	r0, r4
 800db7a:	bf18      	it	ne
 800db7c:	f04a 0a02 	orrne.w	sl, sl, #2
 800db80:	1b76      	subs	r6, r6, r5
 800db82:	f7ff fded 	bl	800d760 <rshift>
 800db86:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800db8a:	2702      	movs	r7, #2
 800db8c:	f1ba 0f00 	cmp.w	sl, #0
 800db90:	d048      	beq.n	800dc24 <__gethex+0x3f4>
 800db92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db96:	2b02      	cmp	r3, #2
 800db98:	d015      	beq.n	800dbc6 <__gethex+0x396>
 800db9a:	2b03      	cmp	r3, #3
 800db9c:	d017      	beq.n	800dbce <__gethex+0x39e>
 800db9e:	2b01      	cmp	r3, #1
 800dba0:	d109      	bne.n	800dbb6 <__gethex+0x386>
 800dba2:	f01a 0f02 	tst.w	sl, #2
 800dba6:	d006      	beq.n	800dbb6 <__gethex+0x386>
 800dba8:	f8d9 0000 	ldr.w	r0, [r9]
 800dbac:	ea4a 0a00 	orr.w	sl, sl, r0
 800dbb0:	f01a 0f01 	tst.w	sl, #1
 800dbb4:	d10e      	bne.n	800dbd4 <__gethex+0x3a4>
 800dbb6:	f047 0710 	orr.w	r7, r7, #16
 800dbba:	e033      	b.n	800dc24 <__gethex+0x3f4>
 800dbbc:	f04f 0a01 	mov.w	sl, #1
 800dbc0:	e7d0      	b.n	800db64 <__gethex+0x334>
 800dbc2:	2701      	movs	r7, #1
 800dbc4:	e7e2      	b.n	800db8c <__gethex+0x35c>
 800dbc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbc8:	f1c3 0301 	rsb	r3, r3, #1
 800dbcc:	9315      	str	r3, [sp, #84]	; 0x54
 800dbce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d0f0      	beq.n	800dbb6 <__gethex+0x386>
 800dbd4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dbd8:	f104 0314 	add.w	r3, r4, #20
 800dbdc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dbe0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dbe4:	f04f 0c00 	mov.w	ip, #0
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbee:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dbf2:	d01c      	beq.n	800dc2e <__gethex+0x3fe>
 800dbf4:	3201      	adds	r2, #1
 800dbf6:	6002      	str	r2, [r0, #0]
 800dbf8:	2f02      	cmp	r7, #2
 800dbfa:	f104 0314 	add.w	r3, r4, #20
 800dbfe:	d13f      	bne.n	800dc80 <__gethex+0x450>
 800dc00:	f8d8 2000 	ldr.w	r2, [r8]
 800dc04:	3a01      	subs	r2, #1
 800dc06:	42b2      	cmp	r2, r6
 800dc08:	d10a      	bne.n	800dc20 <__gethex+0x3f0>
 800dc0a:	1171      	asrs	r1, r6, #5
 800dc0c:	2201      	movs	r2, #1
 800dc0e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc12:	f006 061f 	and.w	r6, r6, #31
 800dc16:	fa02 f606 	lsl.w	r6, r2, r6
 800dc1a:	421e      	tst	r6, r3
 800dc1c:	bf18      	it	ne
 800dc1e:	4617      	movne	r7, r2
 800dc20:	f047 0720 	orr.w	r7, r7, #32
 800dc24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc26:	601c      	str	r4, [r3, #0]
 800dc28:	9b04      	ldr	r3, [sp, #16]
 800dc2a:	601d      	str	r5, [r3, #0]
 800dc2c:	e695      	b.n	800d95a <__gethex+0x12a>
 800dc2e:	4299      	cmp	r1, r3
 800dc30:	f843 cc04 	str.w	ip, [r3, #-4]
 800dc34:	d8d8      	bhi.n	800dbe8 <__gethex+0x3b8>
 800dc36:	68a3      	ldr	r3, [r4, #8]
 800dc38:	459b      	cmp	fp, r3
 800dc3a:	db19      	blt.n	800dc70 <__gethex+0x440>
 800dc3c:	6861      	ldr	r1, [r4, #4]
 800dc3e:	ee18 0a10 	vmov	r0, s16
 800dc42:	3101      	adds	r1, #1
 800dc44:	f000 f91a 	bl	800de7c <_Balloc>
 800dc48:	4681      	mov	r9, r0
 800dc4a:	b918      	cbnz	r0, 800dc54 <__gethex+0x424>
 800dc4c:	4b1a      	ldr	r3, [pc, #104]	; (800dcb8 <__gethex+0x488>)
 800dc4e:	4602      	mov	r2, r0
 800dc50:	2184      	movs	r1, #132	; 0x84
 800dc52:	e6a8      	b.n	800d9a6 <__gethex+0x176>
 800dc54:	6922      	ldr	r2, [r4, #16]
 800dc56:	3202      	adds	r2, #2
 800dc58:	f104 010c 	add.w	r1, r4, #12
 800dc5c:	0092      	lsls	r2, r2, #2
 800dc5e:	300c      	adds	r0, #12
 800dc60:	f7fd f986 	bl	800af70 <memcpy>
 800dc64:	4621      	mov	r1, r4
 800dc66:	ee18 0a10 	vmov	r0, s16
 800dc6a:	f000 f947 	bl	800defc <_Bfree>
 800dc6e:	464c      	mov	r4, r9
 800dc70:	6923      	ldr	r3, [r4, #16]
 800dc72:	1c5a      	adds	r2, r3, #1
 800dc74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dc78:	6122      	str	r2, [r4, #16]
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	615a      	str	r2, [r3, #20]
 800dc7e:	e7bb      	b.n	800dbf8 <__gethex+0x3c8>
 800dc80:	6922      	ldr	r2, [r4, #16]
 800dc82:	455a      	cmp	r2, fp
 800dc84:	dd0b      	ble.n	800dc9e <__gethex+0x46e>
 800dc86:	2101      	movs	r1, #1
 800dc88:	4620      	mov	r0, r4
 800dc8a:	f7ff fd69 	bl	800d760 <rshift>
 800dc8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc92:	3501      	adds	r5, #1
 800dc94:	42ab      	cmp	r3, r5
 800dc96:	f6ff aed0 	blt.w	800da3a <__gethex+0x20a>
 800dc9a:	2701      	movs	r7, #1
 800dc9c:	e7c0      	b.n	800dc20 <__gethex+0x3f0>
 800dc9e:	f016 061f 	ands.w	r6, r6, #31
 800dca2:	d0fa      	beq.n	800dc9a <__gethex+0x46a>
 800dca4:	449a      	add	sl, r3
 800dca6:	f1c6 0620 	rsb	r6, r6, #32
 800dcaa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800dcae:	f000 f9db 	bl	800e068 <__hi0bits>
 800dcb2:	42b0      	cmp	r0, r6
 800dcb4:	dbe7      	blt.n	800dc86 <__gethex+0x456>
 800dcb6:	e7f0      	b.n	800dc9a <__gethex+0x46a>
 800dcb8:	0800fbdc 	.word	0x0800fbdc

0800dcbc <L_shift>:
 800dcbc:	f1c2 0208 	rsb	r2, r2, #8
 800dcc0:	0092      	lsls	r2, r2, #2
 800dcc2:	b570      	push	{r4, r5, r6, lr}
 800dcc4:	f1c2 0620 	rsb	r6, r2, #32
 800dcc8:	6843      	ldr	r3, [r0, #4]
 800dcca:	6804      	ldr	r4, [r0, #0]
 800dccc:	fa03 f506 	lsl.w	r5, r3, r6
 800dcd0:	432c      	orrs	r4, r5
 800dcd2:	40d3      	lsrs	r3, r2
 800dcd4:	6004      	str	r4, [r0, #0]
 800dcd6:	f840 3f04 	str.w	r3, [r0, #4]!
 800dcda:	4288      	cmp	r0, r1
 800dcdc:	d3f4      	bcc.n	800dcc8 <L_shift+0xc>
 800dcde:	bd70      	pop	{r4, r5, r6, pc}

0800dce0 <__match>:
 800dce0:	b530      	push	{r4, r5, lr}
 800dce2:	6803      	ldr	r3, [r0, #0]
 800dce4:	3301      	adds	r3, #1
 800dce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcea:	b914      	cbnz	r4, 800dcf2 <__match+0x12>
 800dcec:	6003      	str	r3, [r0, #0]
 800dcee:	2001      	movs	r0, #1
 800dcf0:	bd30      	pop	{r4, r5, pc}
 800dcf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcf6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dcfa:	2d19      	cmp	r5, #25
 800dcfc:	bf98      	it	ls
 800dcfe:	3220      	addls	r2, #32
 800dd00:	42a2      	cmp	r2, r4
 800dd02:	d0f0      	beq.n	800dce6 <__match+0x6>
 800dd04:	2000      	movs	r0, #0
 800dd06:	e7f3      	b.n	800dcf0 <__match+0x10>

0800dd08 <__hexnan>:
 800dd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd0c:	680b      	ldr	r3, [r1, #0]
 800dd0e:	6801      	ldr	r1, [r0, #0]
 800dd10:	115e      	asrs	r6, r3, #5
 800dd12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dd16:	f013 031f 	ands.w	r3, r3, #31
 800dd1a:	b087      	sub	sp, #28
 800dd1c:	bf18      	it	ne
 800dd1e:	3604      	addne	r6, #4
 800dd20:	2500      	movs	r5, #0
 800dd22:	1f37      	subs	r7, r6, #4
 800dd24:	4682      	mov	sl, r0
 800dd26:	4690      	mov	r8, r2
 800dd28:	9301      	str	r3, [sp, #4]
 800dd2a:	f846 5c04 	str.w	r5, [r6, #-4]
 800dd2e:	46b9      	mov	r9, r7
 800dd30:	463c      	mov	r4, r7
 800dd32:	9502      	str	r5, [sp, #8]
 800dd34:	46ab      	mov	fp, r5
 800dd36:	784a      	ldrb	r2, [r1, #1]
 800dd38:	1c4b      	adds	r3, r1, #1
 800dd3a:	9303      	str	r3, [sp, #12]
 800dd3c:	b342      	cbz	r2, 800dd90 <__hexnan+0x88>
 800dd3e:	4610      	mov	r0, r2
 800dd40:	9105      	str	r1, [sp, #20]
 800dd42:	9204      	str	r2, [sp, #16]
 800dd44:	f7ff fd5e 	bl	800d804 <__hexdig_fun>
 800dd48:	2800      	cmp	r0, #0
 800dd4a:	d14f      	bne.n	800ddec <__hexnan+0xe4>
 800dd4c:	9a04      	ldr	r2, [sp, #16]
 800dd4e:	9905      	ldr	r1, [sp, #20]
 800dd50:	2a20      	cmp	r2, #32
 800dd52:	d818      	bhi.n	800dd86 <__hexnan+0x7e>
 800dd54:	9b02      	ldr	r3, [sp, #8]
 800dd56:	459b      	cmp	fp, r3
 800dd58:	dd13      	ble.n	800dd82 <__hexnan+0x7a>
 800dd5a:	454c      	cmp	r4, r9
 800dd5c:	d206      	bcs.n	800dd6c <__hexnan+0x64>
 800dd5e:	2d07      	cmp	r5, #7
 800dd60:	dc04      	bgt.n	800dd6c <__hexnan+0x64>
 800dd62:	462a      	mov	r2, r5
 800dd64:	4649      	mov	r1, r9
 800dd66:	4620      	mov	r0, r4
 800dd68:	f7ff ffa8 	bl	800dcbc <L_shift>
 800dd6c:	4544      	cmp	r4, r8
 800dd6e:	d950      	bls.n	800de12 <__hexnan+0x10a>
 800dd70:	2300      	movs	r3, #0
 800dd72:	f1a4 0904 	sub.w	r9, r4, #4
 800dd76:	f844 3c04 	str.w	r3, [r4, #-4]
 800dd7a:	f8cd b008 	str.w	fp, [sp, #8]
 800dd7e:	464c      	mov	r4, r9
 800dd80:	461d      	mov	r5, r3
 800dd82:	9903      	ldr	r1, [sp, #12]
 800dd84:	e7d7      	b.n	800dd36 <__hexnan+0x2e>
 800dd86:	2a29      	cmp	r2, #41	; 0x29
 800dd88:	d156      	bne.n	800de38 <__hexnan+0x130>
 800dd8a:	3102      	adds	r1, #2
 800dd8c:	f8ca 1000 	str.w	r1, [sl]
 800dd90:	f1bb 0f00 	cmp.w	fp, #0
 800dd94:	d050      	beq.n	800de38 <__hexnan+0x130>
 800dd96:	454c      	cmp	r4, r9
 800dd98:	d206      	bcs.n	800dda8 <__hexnan+0xa0>
 800dd9a:	2d07      	cmp	r5, #7
 800dd9c:	dc04      	bgt.n	800dda8 <__hexnan+0xa0>
 800dd9e:	462a      	mov	r2, r5
 800dda0:	4649      	mov	r1, r9
 800dda2:	4620      	mov	r0, r4
 800dda4:	f7ff ff8a 	bl	800dcbc <L_shift>
 800dda8:	4544      	cmp	r4, r8
 800ddaa:	d934      	bls.n	800de16 <__hexnan+0x10e>
 800ddac:	f1a8 0204 	sub.w	r2, r8, #4
 800ddb0:	4623      	mov	r3, r4
 800ddb2:	f853 1b04 	ldr.w	r1, [r3], #4
 800ddb6:	f842 1f04 	str.w	r1, [r2, #4]!
 800ddba:	429f      	cmp	r7, r3
 800ddbc:	d2f9      	bcs.n	800ddb2 <__hexnan+0xaa>
 800ddbe:	1b3b      	subs	r3, r7, r4
 800ddc0:	f023 0303 	bic.w	r3, r3, #3
 800ddc4:	3304      	adds	r3, #4
 800ddc6:	3401      	adds	r4, #1
 800ddc8:	3e03      	subs	r6, #3
 800ddca:	42b4      	cmp	r4, r6
 800ddcc:	bf88      	it	hi
 800ddce:	2304      	movhi	r3, #4
 800ddd0:	4443      	add	r3, r8
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	f843 2b04 	str.w	r2, [r3], #4
 800ddd8:	429f      	cmp	r7, r3
 800ddda:	d2fb      	bcs.n	800ddd4 <__hexnan+0xcc>
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	b91b      	cbnz	r3, 800dde8 <__hexnan+0xe0>
 800dde0:	4547      	cmp	r7, r8
 800dde2:	d127      	bne.n	800de34 <__hexnan+0x12c>
 800dde4:	2301      	movs	r3, #1
 800dde6:	603b      	str	r3, [r7, #0]
 800dde8:	2005      	movs	r0, #5
 800ddea:	e026      	b.n	800de3a <__hexnan+0x132>
 800ddec:	3501      	adds	r5, #1
 800ddee:	2d08      	cmp	r5, #8
 800ddf0:	f10b 0b01 	add.w	fp, fp, #1
 800ddf4:	dd06      	ble.n	800de04 <__hexnan+0xfc>
 800ddf6:	4544      	cmp	r4, r8
 800ddf8:	d9c3      	bls.n	800dd82 <__hexnan+0x7a>
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	f844 3c04 	str.w	r3, [r4, #-4]
 800de00:	2501      	movs	r5, #1
 800de02:	3c04      	subs	r4, #4
 800de04:	6822      	ldr	r2, [r4, #0]
 800de06:	f000 000f 	and.w	r0, r0, #15
 800de0a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800de0e:	6022      	str	r2, [r4, #0]
 800de10:	e7b7      	b.n	800dd82 <__hexnan+0x7a>
 800de12:	2508      	movs	r5, #8
 800de14:	e7b5      	b.n	800dd82 <__hexnan+0x7a>
 800de16:	9b01      	ldr	r3, [sp, #4]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d0df      	beq.n	800dddc <__hexnan+0xd4>
 800de1c:	f04f 32ff 	mov.w	r2, #4294967295
 800de20:	f1c3 0320 	rsb	r3, r3, #32
 800de24:	fa22 f303 	lsr.w	r3, r2, r3
 800de28:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800de2c:	401a      	ands	r2, r3
 800de2e:	f846 2c04 	str.w	r2, [r6, #-4]
 800de32:	e7d3      	b.n	800dddc <__hexnan+0xd4>
 800de34:	3f04      	subs	r7, #4
 800de36:	e7d1      	b.n	800dddc <__hexnan+0xd4>
 800de38:	2004      	movs	r0, #4
 800de3a:	b007      	add	sp, #28
 800de3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de40 <_localeconv_r>:
 800de40:	4800      	ldr	r0, [pc, #0]	; (800de44 <_localeconv_r+0x4>)
 800de42:	4770      	bx	lr
 800de44:	20000298 	.word	0x20000298

0800de48 <malloc>:
 800de48:	4b02      	ldr	r3, [pc, #8]	; (800de54 <malloc+0xc>)
 800de4a:	4601      	mov	r1, r0
 800de4c:	6818      	ldr	r0, [r3, #0]
 800de4e:	f000 bd2f 	b.w	800e8b0 <_malloc_r>
 800de52:	bf00      	nop
 800de54:	20000140 	.word	0x20000140

0800de58 <__ascii_mbtowc>:
 800de58:	b082      	sub	sp, #8
 800de5a:	b901      	cbnz	r1, 800de5e <__ascii_mbtowc+0x6>
 800de5c:	a901      	add	r1, sp, #4
 800de5e:	b142      	cbz	r2, 800de72 <__ascii_mbtowc+0x1a>
 800de60:	b14b      	cbz	r3, 800de76 <__ascii_mbtowc+0x1e>
 800de62:	7813      	ldrb	r3, [r2, #0]
 800de64:	600b      	str	r3, [r1, #0]
 800de66:	7812      	ldrb	r2, [r2, #0]
 800de68:	1e10      	subs	r0, r2, #0
 800de6a:	bf18      	it	ne
 800de6c:	2001      	movne	r0, #1
 800de6e:	b002      	add	sp, #8
 800de70:	4770      	bx	lr
 800de72:	4610      	mov	r0, r2
 800de74:	e7fb      	b.n	800de6e <__ascii_mbtowc+0x16>
 800de76:	f06f 0001 	mvn.w	r0, #1
 800de7a:	e7f8      	b.n	800de6e <__ascii_mbtowc+0x16>

0800de7c <_Balloc>:
 800de7c:	b570      	push	{r4, r5, r6, lr}
 800de7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800de80:	4604      	mov	r4, r0
 800de82:	460d      	mov	r5, r1
 800de84:	b976      	cbnz	r6, 800dea4 <_Balloc+0x28>
 800de86:	2010      	movs	r0, #16
 800de88:	f7ff ffde 	bl	800de48 <malloc>
 800de8c:	4602      	mov	r2, r0
 800de8e:	6260      	str	r0, [r4, #36]	; 0x24
 800de90:	b920      	cbnz	r0, 800de9c <_Balloc+0x20>
 800de92:	4b18      	ldr	r3, [pc, #96]	; (800def4 <_Balloc+0x78>)
 800de94:	4818      	ldr	r0, [pc, #96]	; (800def8 <_Balloc+0x7c>)
 800de96:	2166      	movs	r1, #102	; 0x66
 800de98:	f000 fefa 	bl	800ec90 <__assert_func>
 800de9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dea0:	6006      	str	r6, [r0, #0]
 800dea2:	60c6      	str	r6, [r0, #12]
 800dea4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dea6:	68f3      	ldr	r3, [r6, #12]
 800dea8:	b183      	cbz	r3, 800decc <_Balloc+0x50>
 800deaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800deac:	68db      	ldr	r3, [r3, #12]
 800deae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800deb2:	b9b8      	cbnz	r0, 800dee4 <_Balloc+0x68>
 800deb4:	2101      	movs	r1, #1
 800deb6:	fa01 f605 	lsl.w	r6, r1, r5
 800deba:	1d72      	adds	r2, r6, #5
 800debc:	0092      	lsls	r2, r2, #2
 800debe:	4620      	mov	r0, r4
 800dec0:	f000 fc97 	bl	800e7f2 <_calloc_r>
 800dec4:	b160      	cbz	r0, 800dee0 <_Balloc+0x64>
 800dec6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800deca:	e00e      	b.n	800deea <_Balloc+0x6e>
 800decc:	2221      	movs	r2, #33	; 0x21
 800dece:	2104      	movs	r1, #4
 800ded0:	4620      	mov	r0, r4
 800ded2:	f000 fc8e 	bl	800e7f2 <_calloc_r>
 800ded6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ded8:	60f0      	str	r0, [r6, #12]
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d1e4      	bne.n	800deaa <_Balloc+0x2e>
 800dee0:	2000      	movs	r0, #0
 800dee2:	bd70      	pop	{r4, r5, r6, pc}
 800dee4:	6802      	ldr	r2, [r0, #0]
 800dee6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800deea:	2300      	movs	r3, #0
 800deec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800def0:	e7f7      	b.n	800dee2 <_Balloc+0x66>
 800def2:	bf00      	nop
 800def4:	0800fb66 	.word	0x0800fb66
 800def8:	0800fc6c 	.word	0x0800fc6c

0800defc <_Bfree>:
 800defc:	b570      	push	{r4, r5, r6, lr}
 800defe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800df00:	4605      	mov	r5, r0
 800df02:	460c      	mov	r4, r1
 800df04:	b976      	cbnz	r6, 800df24 <_Bfree+0x28>
 800df06:	2010      	movs	r0, #16
 800df08:	f7ff ff9e 	bl	800de48 <malloc>
 800df0c:	4602      	mov	r2, r0
 800df0e:	6268      	str	r0, [r5, #36]	; 0x24
 800df10:	b920      	cbnz	r0, 800df1c <_Bfree+0x20>
 800df12:	4b09      	ldr	r3, [pc, #36]	; (800df38 <_Bfree+0x3c>)
 800df14:	4809      	ldr	r0, [pc, #36]	; (800df3c <_Bfree+0x40>)
 800df16:	218a      	movs	r1, #138	; 0x8a
 800df18:	f000 feba 	bl	800ec90 <__assert_func>
 800df1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df20:	6006      	str	r6, [r0, #0]
 800df22:	60c6      	str	r6, [r0, #12]
 800df24:	b13c      	cbz	r4, 800df36 <_Bfree+0x3a>
 800df26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800df28:	6862      	ldr	r2, [r4, #4]
 800df2a:	68db      	ldr	r3, [r3, #12]
 800df2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df30:	6021      	str	r1, [r4, #0]
 800df32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800df36:	bd70      	pop	{r4, r5, r6, pc}
 800df38:	0800fb66 	.word	0x0800fb66
 800df3c:	0800fc6c 	.word	0x0800fc6c

0800df40 <__multadd>:
 800df40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df44:	690e      	ldr	r6, [r1, #16]
 800df46:	4607      	mov	r7, r0
 800df48:	4698      	mov	r8, r3
 800df4a:	460c      	mov	r4, r1
 800df4c:	f101 0014 	add.w	r0, r1, #20
 800df50:	2300      	movs	r3, #0
 800df52:	6805      	ldr	r5, [r0, #0]
 800df54:	b2a9      	uxth	r1, r5
 800df56:	fb02 8101 	mla	r1, r2, r1, r8
 800df5a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800df5e:	0c2d      	lsrs	r5, r5, #16
 800df60:	fb02 c505 	mla	r5, r2, r5, ip
 800df64:	b289      	uxth	r1, r1
 800df66:	3301      	adds	r3, #1
 800df68:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800df6c:	429e      	cmp	r6, r3
 800df6e:	f840 1b04 	str.w	r1, [r0], #4
 800df72:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800df76:	dcec      	bgt.n	800df52 <__multadd+0x12>
 800df78:	f1b8 0f00 	cmp.w	r8, #0
 800df7c:	d022      	beq.n	800dfc4 <__multadd+0x84>
 800df7e:	68a3      	ldr	r3, [r4, #8]
 800df80:	42b3      	cmp	r3, r6
 800df82:	dc19      	bgt.n	800dfb8 <__multadd+0x78>
 800df84:	6861      	ldr	r1, [r4, #4]
 800df86:	4638      	mov	r0, r7
 800df88:	3101      	adds	r1, #1
 800df8a:	f7ff ff77 	bl	800de7c <_Balloc>
 800df8e:	4605      	mov	r5, r0
 800df90:	b928      	cbnz	r0, 800df9e <__multadd+0x5e>
 800df92:	4602      	mov	r2, r0
 800df94:	4b0d      	ldr	r3, [pc, #52]	; (800dfcc <__multadd+0x8c>)
 800df96:	480e      	ldr	r0, [pc, #56]	; (800dfd0 <__multadd+0x90>)
 800df98:	21b5      	movs	r1, #181	; 0xb5
 800df9a:	f000 fe79 	bl	800ec90 <__assert_func>
 800df9e:	6922      	ldr	r2, [r4, #16]
 800dfa0:	3202      	adds	r2, #2
 800dfa2:	f104 010c 	add.w	r1, r4, #12
 800dfa6:	0092      	lsls	r2, r2, #2
 800dfa8:	300c      	adds	r0, #12
 800dfaa:	f7fc ffe1 	bl	800af70 <memcpy>
 800dfae:	4621      	mov	r1, r4
 800dfb0:	4638      	mov	r0, r7
 800dfb2:	f7ff ffa3 	bl	800defc <_Bfree>
 800dfb6:	462c      	mov	r4, r5
 800dfb8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800dfbc:	3601      	adds	r6, #1
 800dfbe:	f8c3 8014 	str.w	r8, [r3, #20]
 800dfc2:	6126      	str	r6, [r4, #16]
 800dfc4:	4620      	mov	r0, r4
 800dfc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfca:	bf00      	nop
 800dfcc:	0800fbdc 	.word	0x0800fbdc
 800dfd0:	0800fc6c 	.word	0x0800fc6c

0800dfd4 <__s2b>:
 800dfd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfd8:	460c      	mov	r4, r1
 800dfda:	4615      	mov	r5, r2
 800dfdc:	461f      	mov	r7, r3
 800dfde:	2209      	movs	r2, #9
 800dfe0:	3308      	adds	r3, #8
 800dfe2:	4606      	mov	r6, r0
 800dfe4:	fb93 f3f2 	sdiv	r3, r3, r2
 800dfe8:	2100      	movs	r1, #0
 800dfea:	2201      	movs	r2, #1
 800dfec:	429a      	cmp	r2, r3
 800dfee:	db09      	blt.n	800e004 <__s2b+0x30>
 800dff0:	4630      	mov	r0, r6
 800dff2:	f7ff ff43 	bl	800de7c <_Balloc>
 800dff6:	b940      	cbnz	r0, 800e00a <__s2b+0x36>
 800dff8:	4602      	mov	r2, r0
 800dffa:	4b19      	ldr	r3, [pc, #100]	; (800e060 <__s2b+0x8c>)
 800dffc:	4819      	ldr	r0, [pc, #100]	; (800e064 <__s2b+0x90>)
 800dffe:	21ce      	movs	r1, #206	; 0xce
 800e000:	f000 fe46 	bl	800ec90 <__assert_func>
 800e004:	0052      	lsls	r2, r2, #1
 800e006:	3101      	adds	r1, #1
 800e008:	e7f0      	b.n	800dfec <__s2b+0x18>
 800e00a:	9b08      	ldr	r3, [sp, #32]
 800e00c:	6143      	str	r3, [r0, #20]
 800e00e:	2d09      	cmp	r5, #9
 800e010:	f04f 0301 	mov.w	r3, #1
 800e014:	6103      	str	r3, [r0, #16]
 800e016:	dd16      	ble.n	800e046 <__s2b+0x72>
 800e018:	f104 0909 	add.w	r9, r4, #9
 800e01c:	46c8      	mov	r8, r9
 800e01e:	442c      	add	r4, r5
 800e020:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e024:	4601      	mov	r1, r0
 800e026:	3b30      	subs	r3, #48	; 0x30
 800e028:	220a      	movs	r2, #10
 800e02a:	4630      	mov	r0, r6
 800e02c:	f7ff ff88 	bl	800df40 <__multadd>
 800e030:	45a0      	cmp	r8, r4
 800e032:	d1f5      	bne.n	800e020 <__s2b+0x4c>
 800e034:	f1a5 0408 	sub.w	r4, r5, #8
 800e038:	444c      	add	r4, r9
 800e03a:	1b2d      	subs	r5, r5, r4
 800e03c:	1963      	adds	r3, r4, r5
 800e03e:	42bb      	cmp	r3, r7
 800e040:	db04      	blt.n	800e04c <__s2b+0x78>
 800e042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e046:	340a      	adds	r4, #10
 800e048:	2509      	movs	r5, #9
 800e04a:	e7f6      	b.n	800e03a <__s2b+0x66>
 800e04c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e050:	4601      	mov	r1, r0
 800e052:	3b30      	subs	r3, #48	; 0x30
 800e054:	220a      	movs	r2, #10
 800e056:	4630      	mov	r0, r6
 800e058:	f7ff ff72 	bl	800df40 <__multadd>
 800e05c:	e7ee      	b.n	800e03c <__s2b+0x68>
 800e05e:	bf00      	nop
 800e060:	0800fbdc 	.word	0x0800fbdc
 800e064:	0800fc6c 	.word	0x0800fc6c

0800e068 <__hi0bits>:
 800e068:	0c03      	lsrs	r3, r0, #16
 800e06a:	041b      	lsls	r3, r3, #16
 800e06c:	b9d3      	cbnz	r3, 800e0a4 <__hi0bits+0x3c>
 800e06e:	0400      	lsls	r0, r0, #16
 800e070:	2310      	movs	r3, #16
 800e072:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e076:	bf04      	itt	eq
 800e078:	0200      	lsleq	r0, r0, #8
 800e07a:	3308      	addeq	r3, #8
 800e07c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e080:	bf04      	itt	eq
 800e082:	0100      	lsleq	r0, r0, #4
 800e084:	3304      	addeq	r3, #4
 800e086:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e08a:	bf04      	itt	eq
 800e08c:	0080      	lsleq	r0, r0, #2
 800e08e:	3302      	addeq	r3, #2
 800e090:	2800      	cmp	r0, #0
 800e092:	db05      	blt.n	800e0a0 <__hi0bits+0x38>
 800e094:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e098:	f103 0301 	add.w	r3, r3, #1
 800e09c:	bf08      	it	eq
 800e09e:	2320      	moveq	r3, #32
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	4770      	bx	lr
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	e7e4      	b.n	800e072 <__hi0bits+0xa>

0800e0a8 <__lo0bits>:
 800e0a8:	6803      	ldr	r3, [r0, #0]
 800e0aa:	f013 0207 	ands.w	r2, r3, #7
 800e0ae:	4601      	mov	r1, r0
 800e0b0:	d00b      	beq.n	800e0ca <__lo0bits+0x22>
 800e0b2:	07da      	lsls	r2, r3, #31
 800e0b4:	d424      	bmi.n	800e100 <__lo0bits+0x58>
 800e0b6:	0798      	lsls	r0, r3, #30
 800e0b8:	bf49      	itett	mi
 800e0ba:	085b      	lsrmi	r3, r3, #1
 800e0bc:	089b      	lsrpl	r3, r3, #2
 800e0be:	2001      	movmi	r0, #1
 800e0c0:	600b      	strmi	r3, [r1, #0]
 800e0c2:	bf5c      	itt	pl
 800e0c4:	600b      	strpl	r3, [r1, #0]
 800e0c6:	2002      	movpl	r0, #2
 800e0c8:	4770      	bx	lr
 800e0ca:	b298      	uxth	r0, r3
 800e0cc:	b9b0      	cbnz	r0, 800e0fc <__lo0bits+0x54>
 800e0ce:	0c1b      	lsrs	r3, r3, #16
 800e0d0:	2010      	movs	r0, #16
 800e0d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e0d6:	bf04      	itt	eq
 800e0d8:	0a1b      	lsreq	r3, r3, #8
 800e0da:	3008      	addeq	r0, #8
 800e0dc:	071a      	lsls	r2, r3, #28
 800e0de:	bf04      	itt	eq
 800e0e0:	091b      	lsreq	r3, r3, #4
 800e0e2:	3004      	addeq	r0, #4
 800e0e4:	079a      	lsls	r2, r3, #30
 800e0e6:	bf04      	itt	eq
 800e0e8:	089b      	lsreq	r3, r3, #2
 800e0ea:	3002      	addeq	r0, #2
 800e0ec:	07da      	lsls	r2, r3, #31
 800e0ee:	d403      	bmi.n	800e0f8 <__lo0bits+0x50>
 800e0f0:	085b      	lsrs	r3, r3, #1
 800e0f2:	f100 0001 	add.w	r0, r0, #1
 800e0f6:	d005      	beq.n	800e104 <__lo0bits+0x5c>
 800e0f8:	600b      	str	r3, [r1, #0]
 800e0fa:	4770      	bx	lr
 800e0fc:	4610      	mov	r0, r2
 800e0fe:	e7e8      	b.n	800e0d2 <__lo0bits+0x2a>
 800e100:	2000      	movs	r0, #0
 800e102:	4770      	bx	lr
 800e104:	2020      	movs	r0, #32
 800e106:	4770      	bx	lr

0800e108 <__i2b>:
 800e108:	b510      	push	{r4, lr}
 800e10a:	460c      	mov	r4, r1
 800e10c:	2101      	movs	r1, #1
 800e10e:	f7ff feb5 	bl	800de7c <_Balloc>
 800e112:	4602      	mov	r2, r0
 800e114:	b928      	cbnz	r0, 800e122 <__i2b+0x1a>
 800e116:	4b05      	ldr	r3, [pc, #20]	; (800e12c <__i2b+0x24>)
 800e118:	4805      	ldr	r0, [pc, #20]	; (800e130 <__i2b+0x28>)
 800e11a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e11e:	f000 fdb7 	bl	800ec90 <__assert_func>
 800e122:	2301      	movs	r3, #1
 800e124:	6144      	str	r4, [r0, #20]
 800e126:	6103      	str	r3, [r0, #16]
 800e128:	bd10      	pop	{r4, pc}
 800e12a:	bf00      	nop
 800e12c:	0800fbdc 	.word	0x0800fbdc
 800e130:	0800fc6c 	.word	0x0800fc6c

0800e134 <__multiply>:
 800e134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e138:	4614      	mov	r4, r2
 800e13a:	690a      	ldr	r2, [r1, #16]
 800e13c:	6923      	ldr	r3, [r4, #16]
 800e13e:	429a      	cmp	r2, r3
 800e140:	bfb8      	it	lt
 800e142:	460b      	movlt	r3, r1
 800e144:	460d      	mov	r5, r1
 800e146:	bfbc      	itt	lt
 800e148:	4625      	movlt	r5, r4
 800e14a:	461c      	movlt	r4, r3
 800e14c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e150:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e154:	68ab      	ldr	r3, [r5, #8]
 800e156:	6869      	ldr	r1, [r5, #4]
 800e158:	eb0a 0709 	add.w	r7, sl, r9
 800e15c:	42bb      	cmp	r3, r7
 800e15e:	b085      	sub	sp, #20
 800e160:	bfb8      	it	lt
 800e162:	3101      	addlt	r1, #1
 800e164:	f7ff fe8a 	bl	800de7c <_Balloc>
 800e168:	b930      	cbnz	r0, 800e178 <__multiply+0x44>
 800e16a:	4602      	mov	r2, r0
 800e16c:	4b42      	ldr	r3, [pc, #264]	; (800e278 <__multiply+0x144>)
 800e16e:	4843      	ldr	r0, [pc, #268]	; (800e27c <__multiply+0x148>)
 800e170:	f240 115d 	movw	r1, #349	; 0x15d
 800e174:	f000 fd8c 	bl	800ec90 <__assert_func>
 800e178:	f100 0614 	add.w	r6, r0, #20
 800e17c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e180:	4633      	mov	r3, r6
 800e182:	2200      	movs	r2, #0
 800e184:	4543      	cmp	r3, r8
 800e186:	d31e      	bcc.n	800e1c6 <__multiply+0x92>
 800e188:	f105 0c14 	add.w	ip, r5, #20
 800e18c:	f104 0314 	add.w	r3, r4, #20
 800e190:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e194:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e198:	9202      	str	r2, [sp, #8]
 800e19a:	ebac 0205 	sub.w	r2, ip, r5
 800e19e:	3a15      	subs	r2, #21
 800e1a0:	f022 0203 	bic.w	r2, r2, #3
 800e1a4:	3204      	adds	r2, #4
 800e1a6:	f105 0115 	add.w	r1, r5, #21
 800e1aa:	458c      	cmp	ip, r1
 800e1ac:	bf38      	it	cc
 800e1ae:	2204      	movcc	r2, #4
 800e1b0:	9201      	str	r2, [sp, #4]
 800e1b2:	9a02      	ldr	r2, [sp, #8]
 800e1b4:	9303      	str	r3, [sp, #12]
 800e1b6:	429a      	cmp	r2, r3
 800e1b8:	d808      	bhi.n	800e1cc <__multiply+0x98>
 800e1ba:	2f00      	cmp	r7, #0
 800e1bc:	dc55      	bgt.n	800e26a <__multiply+0x136>
 800e1be:	6107      	str	r7, [r0, #16]
 800e1c0:	b005      	add	sp, #20
 800e1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1c6:	f843 2b04 	str.w	r2, [r3], #4
 800e1ca:	e7db      	b.n	800e184 <__multiply+0x50>
 800e1cc:	f8b3 a000 	ldrh.w	sl, [r3]
 800e1d0:	f1ba 0f00 	cmp.w	sl, #0
 800e1d4:	d020      	beq.n	800e218 <__multiply+0xe4>
 800e1d6:	f105 0e14 	add.w	lr, r5, #20
 800e1da:	46b1      	mov	r9, r6
 800e1dc:	2200      	movs	r2, #0
 800e1de:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e1e2:	f8d9 b000 	ldr.w	fp, [r9]
 800e1e6:	b2a1      	uxth	r1, r4
 800e1e8:	fa1f fb8b 	uxth.w	fp, fp
 800e1ec:	fb0a b101 	mla	r1, sl, r1, fp
 800e1f0:	4411      	add	r1, r2
 800e1f2:	f8d9 2000 	ldr.w	r2, [r9]
 800e1f6:	0c24      	lsrs	r4, r4, #16
 800e1f8:	0c12      	lsrs	r2, r2, #16
 800e1fa:	fb0a 2404 	mla	r4, sl, r4, r2
 800e1fe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e202:	b289      	uxth	r1, r1
 800e204:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e208:	45f4      	cmp	ip, lr
 800e20a:	f849 1b04 	str.w	r1, [r9], #4
 800e20e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e212:	d8e4      	bhi.n	800e1de <__multiply+0xaa>
 800e214:	9901      	ldr	r1, [sp, #4]
 800e216:	5072      	str	r2, [r6, r1]
 800e218:	9a03      	ldr	r2, [sp, #12]
 800e21a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e21e:	3304      	adds	r3, #4
 800e220:	f1b9 0f00 	cmp.w	r9, #0
 800e224:	d01f      	beq.n	800e266 <__multiply+0x132>
 800e226:	6834      	ldr	r4, [r6, #0]
 800e228:	f105 0114 	add.w	r1, r5, #20
 800e22c:	46b6      	mov	lr, r6
 800e22e:	f04f 0a00 	mov.w	sl, #0
 800e232:	880a      	ldrh	r2, [r1, #0]
 800e234:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e238:	fb09 b202 	mla	r2, r9, r2, fp
 800e23c:	4492      	add	sl, r2
 800e23e:	b2a4      	uxth	r4, r4
 800e240:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e244:	f84e 4b04 	str.w	r4, [lr], #4
 800e248:	f851 4b04 	ldr.w	r4, [r1], #4
 800e24c:	f8be 2000 	ldrh.w	r2, [lr]
 800e250:	0c24      	lsrs	r4, r4, #16
 800e252:	fb09 2404 	mla	r4, r9, r4, r2
 800e256:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e25a:	458c      	cmp	ip, r1
 800e25c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e260:	d8e7      	bhi.n	800e232 <__multiply+0xfe>
 800e262:	9a01      	ldr	r2, [sp, #4]
 800e264:	50b4      	str	r4, [r6, r2]
 800e266:	3604      	adds	r6, #4
 800e268:	e7a3      	b.n	800e1b2 <__multiply+0x7e>
 800e26a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d1a5      	bne.n	800e1be <__multiply+0x8a>
 800e272:	3f01      	subs	r7, #1
 800e274:	e7a1      	b.n	800e1ba <__multiply+0x86>
 800e276:	bf00      	nop
 800e278:	0800fbdc 	.word	0x0800fbdc
 800e27c:	0800fc6c 	.word	0x0800fc6c

0800e280 <__pow5mult>:
 800e280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e284:	4615      	mov	r5, r2
 800e286:	f012 0203 	ands.w	r2, r2, #3
 800e28a:	4606      	mov	r6, r0
 800e28c:	460f      	mov	r7, r1
 800e28e:	d007      	beq.n	800e2a0 <__pow5mult+0x20>
 800e290:	4c25      	ldr	r4, [pc, #148]	; (800e328 <__pow5mult+0xa8>)
 800e292:	3a01      	subs	r2, #1
 800e294:	2300      	movs	r3, #0
 800e296:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e29a:	f7ff fe51 	bl	800df40 <__multadd>
 800e29e:	4607      	mov	r7, r0
 800e2a0:	10ad      	asrs	r5, r5, #2
 800e2a2:	d03d      	beq.n	800e320 <__pow5mult+0xa0>
 800e2a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e2a6:	b97c      	cbnz	r4, 800e2c8 <__pow5mult+0x48>
 800e2a8:	2010      	movs	r0, #16
 800e2aa:	f7ff fdcd 	bl	800de48 <malloc>
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	6270      	str	r0, [r6, #36]	; 0x24
 800e2b2:	b928      	cbnz	r0, 800e2c0 <__pow5mult+0x40>
 800e2b4:	4b1d      	ldr	r3, [pc, #116]	; (800e32c <__pow5mult+0xac>)
 800e2b6:	481e      	ldr	r0, [pc, #120]	; (800e330 <__pow5mult+0xb0>)
 800e2b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e2bc:	f000 fce8 	bl	800ec90 <__assert_func>
 800e2c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e2c4:	6004      	str	r4, [r0, #0]
 800e2c6:	60c4      	str	r4, [r0, #12]
 800e2c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e2cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e2d0:	b94c      	cbnz	r4, 800e2e6 <__pow5mult+0x66>
 800e2d2:	f240 2171 	movw	r1, #625	; 0x271
 800e2d6:	4630      	mov	r0, r6
 800e2d8:	f7ff ff16 	bl	800e108 <__i2b>
 800e2dc:	2300      	movs	r3, #0
 800e2de:	f8c8 0008 	str.w	r0, [r8, #8]
 800e2e2:	4604      	mov	r4, r0
 800e2e4:	6003      	str	r3, [r0, #0]
 800e2e6:	f04f 0900 	mov.w	r9, #0
 800e2ea:	07eb      	lsls	r3, r5, #31
 800e2ec:	d50a      	bpl.n	800e304 <__pow5mult+0x84>
 800e2ee:	4639      	mov	r1, r7
 800e2f0:	4622      	mov	r2, r4
 800e2f2:	4630      	mov	r0, r6
 800e2f4:	f7ff ff1e 	bl	800e134 <__multiply>
 800e2f8:	4639      	mov	r1, r7
 800e2fa:	4680      	mov	r8, r0
 800e2fc:	4630      	mov	r0, r6
 800e2fe:	f7ff fdfd 	bl	800defc <_Bfree>
 800e302:	4647      	mov	r7, r8
 800e304:	106d      	asrs	r5, r5, #1
 800e306:	d00b      	beq.n	800e320 <__pow5mult+0xa0>
 800e308:	6820      	ldr	r0, [r4, #0]
 800e30a:	b938      	cbnz	r0, 800e31c <__pow5mult+0x9c>
 800e30c:	4622      	mov	r2, r4
 800e30e:	4621      	mov	r1, r4
 800e310:	4630      	mov	r0, r6
 800e312:	f7ff ff0f 	bl	800e134 <__multiply>
 800e316:	6020      	str	r0, [r4, #0]
 800e318:	f8c0 9000 	str.w	r9, [r0]
 800e31c:	4604      	mov	r4, r0
 800e31e:	e7e4      	b.n	800e2ea <__pow5mult+0x6a>
 800e320:	4638      	mov	r0, r7
 800e322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e326:	bf00      	nop
 800e328:	0800fdc0 	.word	0x0800fdc0
 800e32c:	0800fb66 	.word	0x0800fb66
 800e330:	0800fc6c 	.word	0x0800fc6c

0800e334 <__lshift>:
 800e334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e338:	460c      	mov	r4, r1
 800e33a:	6849      	ldr	r1, [r1, #4]
 800e33c:	6923      	ldr	r3, [r4, #16]
 800e33e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e342:	68a3      	ldr	r3, [r4, #8]
 800e344:	4607      	mov	r7, r0
 800e346:	4691      	mov	r9, r2
 800e348:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e34c:	f108 0601 	add.w	r6, r8, #1
 800e350:	42b3      	cmp	r3, r6
 800e352:	db0b      	blt.n	800e36c <__lshift+0x38>
 800e354:	4638      	mov	r0, r7
 800e356:	f7ff fd91 	bl	800de7c <_Balloc>
 800e35a:	4605      	mov	r5, r0
 800e35c:	b948      	cbnz	r0, 800e372 <__lshift+0x3e>
 800e35e:	4602      	mov	r2, r0
 800e360:	4b28      	ldr	r3, [pc, #160]	; (800e404 <__lshift+0xd0>)
 800e362:	4829      	ldr	r0, [pc, #164]	; (800e408 <__lshift+0xd4>)
 800e364:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e368:	f000 fc92 	bl	800ec90 <__assert_func>
 800e36c:	3101      	adds	r1, #1
 800e36e:	005b      	lsls	r3, r3, #1
 800e370:	e7ee      	b.n	800e350 <__lshift+0x1c>
 800e372:	2300      	movs	r3, #0
 800e374:	f100 0114 	add.w	r1, r0, #20
 800e378:	f100 0210 	add.w	r2, r0, #16
 800e37c:	4618      	mov	r0, r3
 800e37e:	4553      	cmp	r3, sl
 800e380:	db33      	blt.n	800e3ea <__lshift+0xb6>
 800e382:	6920      	ldr	r0, [r4, #16]
 800e384:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e388:	f104 0314 	add.w	r3, r4, #20
 800e38c:	f019 091f 	ands.w	r9, r9, #31
 800e390:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e394:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e398:	d02b      	beq.n	800e3f2 <__lshift+0xbe>
 800e39a:	f1c9 0e20 	rsb	lr, r9, #32
 800e39e:	468a      	mov	sl, r1
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	6818      	ldr	r0, [r3, #0]
 800e3a4:	fa00 f009 	lsl.w	r0, r0, r9
 800e3a8:	4302      	orrs	r2, r0
 800e3aa:	f84a 2b04 	str.w	r2, [sl], #4
 800e3ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3b2:	459c      	cmp	ip, r3
 800e3b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e3b8:	d8f3      	bhi.n	800e3a2 <__lshift+0x6e>
 800e3ba:	ebac 0304 	sub.w	r3, ip, r4
 800e3be:	3b15      	subs	r3, #21
 800e3c0:	f023 0303 	bic.w	r3, r3, #3
 800e3c4:	3304      	adds	r3, #4
 800e3c6:	f104 0015 	add.w	r0, r4, #21
 800e3ca:	4584      	cmp	ip, r0
 800e3cc:	bf38      	it	cc
 800e3ce:	2304      	movcc	r3, #4
 800e3d0:	50ca      	str	r2, [r1, r3]
 800e3d2:	b10a      	cbz	r2, 800e3d8 <__lshift+0xa4>
 800e3d4:	f108 0602 	add.w	r6, r8, #2
 800e3d8:	3e01      	subs	r6, #1
 800e3da:	4638      	mov	r0, r7
 800e3dc:	612e      	str	r6, [r5, #16]
 800e3de:	4621      	mov	r1, r4
 800e3e0:	f7ff fd8c 	bl	800defc <_Bfree>
 800e3e4:	4628      	mov	r0, r5
 800e3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	e7c5      	b.n	800e37e <__lshift+0x4a>
 800e3f2:	3904      	subs	r1, #4
 800e3f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e3fc:	459c      	cmp	ip, r3
 800e3fe:	d8f9      	bhi.n	800e3f4 <__lshift+0xc0>
 800e400:	e7ea      	b.n	800e3d8 <__lshift+0xa4>
 800e402:	bf00      	nop
 800e404:	0800fbdc 	.word	0x0800fbdc
 800e408:	0800fc6c 	.word	0x0800fc6c

0800e40c <__mcmp>:
 800e40c:	b530      	push	{r4, r5, lr}
 800e40e:	6902      	ldr	r2, [r0, #16]
 800e410:	690c      	ldr	r4, [r1, #16]
 800e412:	1b12      	subs	r2, r2, r4
 800e414:	d10e      	bne.n	800e434 <__mcmp+0x28>
 800e416:	f100 0314 	add.w	r3, r0, #20
 800e41a:	3114      	adds	r1, #20
 800e41c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e420:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e424:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e428:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e42c:	42a5      	cmp	r5, r4
 800e42e:	d003      	beq.n	800e438 <__mcmp+0x2c>
 800e430:	d305      	bcc.n	800e43e <__mcmp+0x32>
 800e432:	2201      	movs	r2, #1
 800e434:	4610      	mov	r0, r2
 800e436:	bd30      	pop	{r4, r5, pc}
 800e438:	4283      	cmp	r3, r0
 800e43a:	d3f3      	bcc.n	800e424 <__mcmp+0x18>
 800e43c:	e7fa      	b.n	800e434 <__mcmp+0x28>
 800e43e:	f04f 32ff 	mov.w	r2, #4294967295
 800e442:	e7f7      	b.n	800e434 <__mcmp+0x28>

0800e444 <__mdiff>:
 800e444:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e448:	460c      	mov	r4, r1
 800e44a:	4606      	mov	r6, r0
 800e44c:	4611      	mov	r1, r2
 800e44e:	4620      	mov	r0, r4
 800e450:	4617      	mov	r7, r2
 800e452:	f7ff ffdb 	bl	800e40c <__mcmp>
 800e456:	1e05      	subs	r5, r0, #0
 800e458:	d110      	bne.n	800e47c <__mdiff+0x38>
 800e45a:	4629      	mov	r1, r5
 800e45c:	4630      	mov	r0, r6
 800e45e:	f7ff fd0d 	bl	800de7c <_Balloc>
 800e462:	b930      	cbnz	r0, 800e472 <__mdiff+0x2e>
 800e464:	4b39      	ldr	r3, [pc, #228]	; (800e54c <__mdiff+0x108>)
 800e466:	4602      	mov	r2, r0
 800e468:	f240 2132 	movw	r1, #562	; 0x232
 800e46c:	4838      	ldr	r0, [pc, #224]	; (800e550 <__mdiff+0x10c>)
 800e46e:	f000 fc0f 	bl	800ec90 <__assert_func>
 800e472:	2301      	movs	r3, #1
 800e474:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e478:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e47c:	bfa4      	itt	ge
 800e47e:	463b      	movge	r3, r7
 800e480:	4627      	movge	r7, r4
 800e482:	4630      	mov	r0, r6
 800e484:	6879      	ldr	r1, [r7, #4]
 800e486:	bfa6      	itte	ge
 800e488:	461c      	movge	r4, r3
 800e48a:	2500      	movge	r5, #0
 800e48c:	2501      	movlt	r5, #1
 800e48e:	f7ff fcf5 	bl	800de7c <_Balloc>
 800e492:	b920      	cbnz	r0, 800e49e <__mdiff+0x5a>
 800e494:	4b2d      	ldr	r3, [pc, #180]	; (800e54c <__mdiff+0x108>)
 800e496:	4602      	mov	r2, r0
 800e498:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e49c:	e7e6      	b.n	800e46c <__mdiff+0x28>
 800e49e:	693e      	ldr	r6, [r7, #16]
 800e4a0:	60c5      	str	r5, [r0, #12]
 800e4a2:	6925      	ldr	r5, [r4, #16]
 800e4a4:	f107 0114 	add.w	r1, r7, #20
 800e4a8:	f104 0914 	add.w	r9, r4, #20
 800e4ac:	f100 0e14 	add.w	lr, r0, #20
 800e4b0:	f107 0210 	add.w	r2, r7, #16
 800e4b4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e4b8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e4bc:	46f2      	mov	sl, lr
 800e4be:	2700      	movs	r7, #0
 800e4c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800e4c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e4c8:	fa1f f883 	uxth.w	r8, r3
 800e4cc:	fa17 f78b 	uxtah	r7, r7, fp
 800e4d0:	0c1b      	lsrs	r3, r3, #16
 800e4d2:	eba7 0808 	sub.w	r8, r7, r8
 800e4d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e4da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e4de:	fa1f f888 	uxth.w	r8, r8
 800e4e2:	141f      	asrs	r7, r3, #16
 800e4e4:	454d      	cmp	r5, r9
 800e4e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e4ea:	f84a 3b04 	str.w	r3, [sl], #4
 800e4ee:	d8e7      	bhi.n	800e4c0 <__mdiff+0x7c>
 800e4f0:	1b2b      	subs	r3, r5, r4
 800e4f2:	3b15      	subs	r3, #21
 800e4f4:	f023 0303 	bic.w	r3, r3, #3
 800e4f8:	3304      	adds	r3, #4
 800e4fa:	3415      	adds	r4, #21
 800e4fc:	42a5      	cmp	r5, r4
 800e4fe:	bf38      	it	cc
 800e500:	2304      	movcc	r3, #4
 800e502:	4419      	add	r1, r3
 800e504:	4473      	add	r3, lr
 800e506:	469e      	mov	lr, r3
 800e508:	460d      	mov	r5, r1
 800e50a:	4565      	cmp	r5, ip
 800e50c:	d30e      	bcc.n	800e52c <__mdiff+0xe8>
 800e50e:	f10c 0203 	add.w	r2, ip, #3
 800e512:	1a52      	subs	r2, r2, r1
 800e514:	f022 0203 	bic.w	r2, r2, #3
 800e518:	3903      	subs	r1, #3
 800e51a:	458c      	cmp	ip, r1
 800e51c:	bf38      	it	cc
 800e51e:	2200      	movcc	r2, #0
 800e520:	441a      	add	r2, r3
 800e522:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e526:	b17b      	cbz	r3, 800e548 <__mdiff+0x104>
 800e528:	6106      	str	r6, [r0, #16]
 800e52a:	e7a5      	b.n	800e478 <__mdiff+0x34>
 800e52c:	f855 8b04 	ldr.w	r8, [r5], #4
 800e530:	fa17 f488 	uxtah	r4, r7, r8
 800e534:	1422      	asrs	r2, r4, #16
 800e536:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e53a:	b2a4      	uxth	r4, r4
 800e53c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e540:	f84e 4b04 	str.w	r4, [lr], #4
 800e544:	1417      	asrs	r7, r2, #16
 800e546:	e7e0      	b.n	800e50a <__mdiff+0xc6>
 800e548:	3e01      	subs	r6, #1
 800e54a:	e7ea      	b.n	800e522 <__mdiff+0xde>
 800e54c:	0800fbdc 	.word	0x0800fbdc
 800e550:	0800fc6c 	.word	0x0800fc6c

0800e554 <__ulp>:
 800e554:	b082      	sub	sp, #8
 800e556:	ed8d 0b00 	vstr	d0, [sp]
 800e55a:	9b01      	ldr	r3, [sp, #4]
 800e55c:	4912      	ldr	r1, [pc, #72]	; (800e5a8 <__ulp+0x54>)
 800e55e:	4019      	ands	r1, r3
 800e560:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e564:	2900      	cmp	r1, #0
 800e566:	dd05      	ble.n	800e574 <__ulp+0x20>
 800e568:	2200      	movs	r2, #0
 800e56a:	460b      	mov	r3, r1
 800e56c:	ec43 2b10 	vmov	d0, r2, r3
 800e570:	b002      	add	sp, #8
 800e572:	4770      	bx	lr
 800e574:	4249      	negs	r1, r1
 800e576:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e57a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e57e:	f04f 0200 	mov.w	r2, #0
 800e582:	f04f 0300 	mov.w	r3, #0
 800e586:	da04      	bge.n	800e592 <__ulp+0x3e>
 800e588:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e58c:	fa41 f300 	asr.w	r3, r1, r0
 800e590:	e7ec      	b.n	800e56c <__ulp+0x18>
 800e592:	f1a0 0114 	sub.w	r1, r0, #20
 800e596:	291e      	cmp	r1, #30
 800e598:	bfda      	itte	le
 800e59a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e59e:	fa20 f101 	lsrle.w	r1, r0, r1
 800e5a2:	2101      	movgt	r1, #1
 800e5a4:	460a      	mov	r2, r1
 800e5a6:	e7e1      	b.n	800e56c <__ulp+0x18>
 800e5a8:	7ff00000 	.word	0x7ff00000

0800e5ac <__b2d>:
 800e5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ae:	6905      	ldr	r5, [r0, #16]
 800e5b0:	f100 0714 	add.w	r7, r0, #20
 800e5b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e5b8:	1f2e      	subs	r6, r5, #4
 800e5ba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e5be:	4620      	mov	r0, r4
 800e5c0:	f7ff fd52 	bl	800e068 <__hi0bits>
 800e5c4:	f1c0 0320 	rsb	r3, r0, #32
 800e5c8:	280a      	cmp	r0, #10
 800e5ca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e648 <__b2d+0x9c>
 800e5ce:	600b      	str	r3, [r1, #0]
 800e5d0:	dc14      	bgt.n	800e5fc <__b2d+0x50>
 800e5d2:	f1c0 0e0b 	rsb	lr, r0, #11
 800e5d6:	fa24 f10e 	lsr.w	r1, r4, lr
 800e5da:	42b7      	cmp	r7, r6
 800e5dc:	ea41 030c 	orr.w	r3, r1, ip
 800e5e0:	bf34      	ite	cc
 800e5e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e5e6:	2100      	movcs	r1, #0
 800e5e8:	3015      	adds	r0, #21
 800e5ea:	fa04 f000 	lsl.w	r0, r4, r0
 800e5ee:	fa21 f10e 	lsr.w	r1, r1, lr
 800e5f2:	ea40 0201 	orr.w	r2, r0, r1
 800e5f6:	ec43 2b10 	vmov	d0, r2, r3
 800e5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5fc:	42b7      	cmp	r7, r6
 800e5fe:	bf3a      	itte	cc
 800e600:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e604:	f1a5 0608 	subcc.w	r6, r5, #8
 800e608:	2100      	movcs	r1, #0
 800e60a:	380b      	subs	r0, #11
 800e60c:	d017      	beq.n	800e63e <__b2d+0x92>
 800e60e:	f1c0 0c20 	rsb	ip, r0, #32
 800e612:	fa04 f500 	lsl.w	r5, r4, r0
 800e616:	42be      	cmp	r6, r7
 800e618:	fa21 f40c 	lsr.w	r4, r1, ip
 800e61c:	ea45 0504 	orr.w	r5, r5, r4
 800e620:	bf8c      	ite	hi
 800e622:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e626:	2400      	movls	r4, #0
 800e628:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e62c:	fa01 f000 	lsl.w	r0, r1, r0
 800e630:	fa24 f40c 	lsr.w	r4, r4, ip
 800e634:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e638:	ea40 0204 	orr.w	r2, r0, r4
 800e63c:	e7db      	b.n	800e5f6 <__b2d+0x4a>
 800e63e:	ea44 030c 	orr.w	r3, r4, ip
 800e642:	460a      	mov	r2, r1
 800e644:	e7d7      	b.n	800e5f6 <__b2d+0x4a>
 800e646:	bf00      	nop
 800e648:	3ff00000 	.word	0x3ff00000

0800e64c <__d2b>:
 800e64c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e650:	4689      	mov	r9, r1
 800e652:	2101      	movs	r1, #1
 800e654:	ec57 6b10 	vmov	r6, r7, d0
 800e658:	4690      	mov	r8, r2
 800e65a:	f7ff fc0f 	bl	800de7c <_Balloc>
 800e65e:	4604      	mov	r4, r0
 800e660:	b930      	cbnz	r0, 800e670 <__d2b+0x24>
 800e662:	4602      	mov	r2, r0
 800e664:	4b25      	ldr	r3, [pc, #148]	; (800e6fc <__d2b+0xb0>)
 800e666:	4826      	ldr	r0, [pc, #152]	; (800e700 <__d2b+0xb4>)
 800e668:	f240 310a 	movw	r1, #778	; 0x30a
 800e66c:	f000 fb10 	bl	800ec90 <__assert_func>
 800e670:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e674:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e678:	bb35      	cbnz	r5, 800e6c8 <__d2b+0x7c>
 800e67a:	2e00      	cmp	r6, #0
 800e67c:	9301      	str	r3, [sp, #4]
 800e67e:	d028      	beq.n	800e6d2 <__d2b+0x86>
 800e680:	4668      	mov	r0, sp
 800e682:	9600      	str	r6, [sp, #0]
 800e684:	f7ff fd10 	bl	800e0a8 <__lo0bits>
 800e688:	9900      	ldr	r1, [sp, #0]
 800e68a:	b300      	cbz	r0, 800e6ce <__d2b+0x82>
 800e68c:	9a01      	ldr	r2, [sp, #4]
 800e68e:	f1c0 0320 	rsb	r3, r0, #32
 800e692:	fa02 f303 	lsl.w	r3, r2, r3
 800e696:	430b      	orrs	r3, r1
 800e698:	40c2      	lsrs	r2, r0
 800e69a:	6163      	str	r3, [r4, #20]
 800e69c:	9201      	str	r2, [sp, #4]
 800e69e:	9b01      	ldr	r3, [sp, #4]
 800e6a0:	61a3      	str	r3, [r4, #24]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	bf14      	ite	ne
 800e6a6:	2202      	movne	r2, #2
 800e6a8:	2201      	moveq	r2, #1
 800e6aa:	6122      	str	r2, [r4, #16]
 800e6ac:	b1d5      	cbz	r5, 800e6e4 <__d2b+0x98>
 800e6ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e6b2:	4405      	add	r5, r0
 800e6b4:	f8c9 5000 	str.w	r5, [r9]
 800e6b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e6bc:	f8c8 0000 	str.w	r0, [r8]
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	b003      	add	sp, #12
 800e6c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e6cc:	e7d5      	b.n	800e67a <__d2b+0x2e>
 800e6ce:	6161      	str	r1, [r4, #20]
 800e6d0:	e7e5      	b.n	800e69e <__d2b+0x52>
 800e6d2:	a801      	add	r0, sp, #4
 800e6d4:	f7ff fce8 	bl	800e0a8 <__lo0bits>
 800e6d8:	9b01      	ldr	r3, [sp, #4]
 800e6da:	6163      	str	r3, [r4, #20]
 800e6dc:	2201      	movs	r2, #1
 800e6de:	6122      	str	r2, [r4, #16]
 800e6e0:	3020      	adds	r0, #32
 800e6e2:	e7e3      	b.n	800e6ac <__d2b+0x60>
 800e6e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e6e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e6ec:	f8c9 0000 	str.w	r0, [r9]
 800e6f0:	6918      	ldr	r0, [r3, #16]
 800e6f2:	f7ff fcb9 	bl	800e068 <__hi0bits>
 800e6f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e6fa:	e7df      	b.n	800e6bc <__d2b+0x70>
 800e6fc:	0800fbdc 	.word	0x0800fbdc
 800e700:	0800fc6c 	.word	0x0800fc6c

0800e704 <__ratio>:
 800e704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e708:	4688      	mov	r8, r1
 800e70a:	4669      	mov	r1, sp
 800e70c:	4681      	mov	r9, r0
 800e70e:	f7ff ff4d 	bl	800e5ac <__b2d>
 800e712:	a901      	add	r1, sp, #4
 800e714:	4640      	mov	r0, r8
 800e716:	ec55 4b10 	vmov	r4, r5, d0
 800e71a:	f7ff ff47 	bl	800e5ac <__b2d>
 800e71e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e722:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e726:	eba3 0c02 	sub.w	ip, r3, r2
 800e72a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e72e:	1a9b      	subs	r3, r3, r2
 800e730:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e734:	ec51 0b10 	vmov	r0, r1, d0
 800e738:	2b00      	cmp	r3, #0
 800e73a:	bfd6      	itet	le
 800e73c:	460a      	movle	r2, r1
 800e73e:	462a      	movgt	r2, r5
 800e740:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e744:	468b      	mov	fp, r1
 800e746:	462f      	mov	r7, r5
 800e748:	bfd4      	ite	le
 800e74a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e74e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e752:	4620      	mov	r0, r4
 800e754:	ee10 2a10 	vmov	r2, s0
 800e758:	465b      	mov	r3, fp
 800e75a:	4639      	mov	r1, r7
 800e75c:	f7f2 f88e 	bl	800087c <__aeabi_ddiv>
 800e760:	ec41 0b10 	vmov	d0, r0, r1
 800e764:	b003      	add	sp, #12
 800e766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e76a <__copybits>:
 800e76a:	3901      	subs	r1, #1
 800e76c:	b570      	push	{r4, r5, r6, lr}
 800e76e:	1149      	asrs	r1, r1, #5
 800e770:	6914      	ldr	r4, [r2, #16]
 800e772:	3101      	adds	r1, #1
 800e774:	f102 0314 	add.w	r3, r2, #20
 800e778:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e77c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e780:	1f05      	subs	r5, r0, #4
 800e782:	42a3      	cmp	r3, r4
 800e784:	d30c      	bcc.n	800e7a0 <__copybits+0x36>
 800e786:	1aa3      	subs	r3, r4, r2
 800e788:	3b11      	subs	r3, #17
 800e78a:	f023 0303 	bic.w	r3, r3, #3
 800e78e:	3211      	adds	r2, #17
 800e790:	42a2      	cmp	r2, r4
 800e792:	bf88      	it	hi
 800e794:	2300      	movhi	r3, #0
 800e796:	4418      	add	r0, r3
 800e798:	2300      	movs	r3, #0
 800e79a:	4288      	cmp	r0, r1
 800e79c:	d305      	bcc.n	800e7aa <__copybits+0x40>
 800e79e:	bd70      	pop	{r4, r5, r6, pc}
 800e7a0:	f853 6b04 	ldr.w	r6, [r3], #4
 800e7a4:	f845 6f04 	str.w	r6, [r5, #4]!
 800e7a8:	e7eb      	b.n	800e782 <__copybits+0x18>
 800e7aa:	f840 3b04 	str.w	r3, [r0], #4
 800e7ae:	e7f4      	b.n	800e79a <__copybits+0x30>

0800e7b0 <__any_on>:
 800e7b0:	f100 0214 	add.w	r2, r0, #20
 800e7b4:	6900      	ldr	r0, [r0, #16]
 800e7b6:	114b      	asrs	r3, r1, #5
 800e7b8:	4298      	cmp	r0, r3
 800e7ba:	b510      	push	{r4, lr}
 800e7bc:	db11      	blt.n	800e7e2 <__any_on+0x32>
 800e7be:	dd0a      	ble.n	800e7d6 <__any_on+0x26>
 800e7c0:	f011 011f 	ands.w	r1, r1, #31
 800e7c4:	d007      	beq.n	800e7d6 <__any_on+0x26>
 800e7c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e7ca:	fa24 f001 	lsr.w	r0, r4, r1
 800e7ce:	fa00 f101 	lsl.w	r1, r0, r1
 800e7d2:	428c      	cmp	r4, r1
 800e7d4:	d10b      	bne.n	800e7ee <__any_on+0x3e>
 800e7d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d803      	bhi.n	800e7e6 <__any_on+0x36>
 800e7de:	2000      	movs	r0, #0
 800e7e0:	bd10      	pop	{r4, pc}
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	e7f7      	b.n	800e7d6 <__any_on+0x26>
 800e7e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e7ea:	2900      	cmp	r1, #0
 800e7ec:	d0f5      	beq.n	800e7da <__any_on+0x2a>
 800e7ee:	2001      	movs	r0, #1
 800e7f0:	e7f6      	b.n	800e7e0 <__any_on+0x30>

0800e7f2 <_calloc_r>:
 800e7f2:	b513      	push	{r0, r1, r4, lr}
 800e7f4:	434a      	muls	r2, r1
 800e7f6:	4611      	mov	r1, r2
 800e7f8:	9201      	str	r2, [sp, #4]
 800e7fa:	f000 f859 	bl	800e8b0 <_malloc_r>
 800e7fe:	4604      	mov	r4, r0
 800e800:	b118      	cbz	r0, 800e80a <_calloc_r+0x18>
 800e802:	9a01      	ldr	r2, [sp, #4]
 800e804:	2100      	movs	r1, #0
 800e806:	f7fc fbc1 	bl	800af8c <memset>
 800e80a:	4620      	mov	r0, r4
 800e80c:	b002      	add	sp, #8
 800e80e:	bd10      	pop	{r4, pc}

0800e810 <_free_r>:
 800e810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e812:	2900      	cmp	r1, #0
 800e814:	d048      	beq.n	800e8a8 <_free_r+0x98>
 800e816:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e81a:	9001      	str	r0, [sp, #4]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	f1a1 0404 	sub.w	r4, r1, #4
 800e822:	bfb8      	it	lt
 800e824:	18e4      	addlt	r4, r4, r3
 800e826:	f000 fa7d 	bl	800ed24 <__malloc_lock>
 800e82a:	4a20      	ldr	r2, [pc, #128]	; (800e8ac <_free_r+0x9c>)
 800e82c:	9801      	ldr	r0, [sp, #4]
 800e82e:	6813      	ldr	r3, [r2, #0]
 800e830:	4615      	mov	r5, r2
 800e832:	b933      	cbnz	r3, 800e842 <_free_r+0x32>
 800e834:	6063      	str	r3, [r4, #4]
 800e836:	6014      	str	r4, [r2, #0]
 800e838:	b003      	add	sp, #12
 800e83a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e83e:	f000 ba77 	b.w	800ed30 <__malloc_unlock>
 800e842:	42a3      	cmp	r3, r4
 800e844:	d90b      	bls.n	800e85e <_free_r+0x4e>
 800e846:	6821      	ldr	r1, [r4, #0]
 800e848:	1862      	adds	r2, r4, r1
 800e84a:	4293      	cmp	r3, r2
 800e84c:	bf04      	itt	eq
 800e84e:	681a      	ldreq	r2, [r3, #0]
 800e850:	685b      	ldreq	r3, [r3, #4]
 800e852:	6063      	str	r3, [r4, #4]
 800e854:	bf04      	itt	eq
 800e856:	1852      	addeq	r2, r2, r1
 800e858:	6022      	streq	r2, [r4, #0]
 800e85a:	602c      	str	r4, [r5, #0]
 800e85c:	e7ec      	b.n	800e838 <_free_r+0x28>
 800e85e:	461a      	mov	r2, r3
 800e860:	685b      	ldr	r3, [r3, #4]
 800e862:	b10b      	cbz	r3, 800e868 <_free_r+0x58>
 800e864:	42a3      	cmp	r3, r4
 800e866:	d9fa      	bls.n	800e85e <_free_r+0x4e>
 800e868:	6811      	ldr	r1, [r2, #0]
 800e86a:	1855      	adds	r5, r2, r1
 800e86c:	42a5      	cmp	r5, r4
 800e86e:	d10b      	bne.n	800e888 <_free_r+0x78>
 800e870:	6824      	ldr	r4, [r4, #0]
 800e872:	4421      	add	r1, r4
 800e874:	1854      	adds	r4, r2, r1
 800e876:	42a3      	cmp	r3, r4
 800e878:	6011      	str	r1, [r2, #0]
 800e87a:	d1dd      	bne.n	800e838 <_free_r+0x28>
 800e87c:	681c      	ldr	r4, [r3, #0]
 800e87e:	685b      	ldr	r3, [r3, #4]
 800e880:	6053      	str	r3, [r2, #4]
 800e882:	4421      	add	r1, r4
 800e884:	6011      	str	r1, [r2, #0]
 800e886:	e7d7      	b.n	800e838 <_free_r+0x28>
 800e888:	d902      	bls.n	800e890 <_free_r+0x80>
 800e88a:	230c      	movs	r3, #12
 800e88c:	6003      	str	r3, [r0, #0]
 800e88e:	e7d3      	b.n	800e838 <_free_r+0x28>
 800e890:	6825      	ldr	r5, [r4, #0]
 800e892:	1961      	adds	r1, r4, r5
 800e894:	428b      	cmp	r3, r1
 800e896:	bf04      	itt	eq
 800e898:	6819      	ldreq	r1, [r3, #0]
 800e89a:	685b      	ldreq	r3, [r3, #4]
 800e89c:	6063      	str	r3, [r4, #4]
 800e89e:	bf04      	itt	eq
 800e8a0:	1949      	addeq	r1, r1, r5
 800e8a2:	6021      	streq	r1, [r4, #0]
 800e8a4:	6054      	str	r4, [r2, #4]
 800e8a6:	e7c7      	b.n	800e838 <_free_r+0x28>
 800e8a8:	b003      	add	sp, #12
 800e8aa:	bd30      	pop	{r4, r5, pc}
 800e8ac:	20001c1c 	.word	0x20001c1c

0800e8b0 <_malloc_r>:
 800e8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8b2:	1ccd      	adds	r5, r1, #3
 800e8b4:	f025 0503 	bic.w	r5, r5, #3
 800e8b8:	3508      	adds	r5, #8
 800e8ba:	2d0c      	cmp	r5, #12
 800e8bc:	bf38      	it	cc
 800e8be:	250c      	movcc	r5, #12
 800e8c0:	2d00      	cmp	r5, #0
 800e8c2:	4606      	mov	r6, r0
 800e8c4:	db01      	blt.n	800e8ca <_malloc_r+0x1a>
 800e8c6:	42a9      	cmp	r1, r5
 800e8c8:	d903      	bls.n	800e8d2 <_malloc_r+0x22>
 800e8ca:	230c      	movs	r3, #12
 800e8cc:	6033      	str	r3, [r6, #0]
 800e8ce:	2000      	movs	r0, #0
 800e8d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8d2:	f000 fa27 	bl	800ed24 <__malloc_lock>
 800e8d6:	4921      	ldr	r1, [pc, #132]	; (800e95c <_malloc_r+0xac>)
 800e8d8:	680a      	ldr	r2, [r1, #0]
 800e8da:	4614      	mov	r4, r2
 800e8dc:	b99c      	cbnz	r4, 800e906 <_malloc_r+0x56>
 800e8de:	4f20      	ldr	r7, [pc, #128]	; (800e960 <_malloc_r+0xb0>)
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	b923      	cbnz	r3, 800e8ee <_malloc_r+0x3e>
 800e8e4:	4621      	mov	r1, r4
 800e8e6:	4630      	mov	r0, r6
 800e8e8:	f000 f9a2 	bl	800ec30 <_sbrk_r>
 800e8ec:	6038      	str	r0, [r7, #0]
 800e8ee:	4629      	mov	r1, r5
 800e8f0:	4630      	mov	r0, r6
 800e8f2:	f000 f99d 	bl	800ec30 <_sbrk_r>
 800e8f6:	1c43      	adds	r3, r0, #1
 800e8f8:	d123      	bne.n	800e942 <_malloc_r+0x92>
 800e8fa:	230c      	movs	r3, #12
 800e8fc:	6033      	str	r3, [r6, #0]
 800e8fe:	4630      	mov	r0, r6
 800e900:	f000 fa16 	bl	800ed30 <__malloc_unlock>
 800e904:	e7e3      	b.n	800e8ce <_malloc_r+0x1e>
 800e906:	6823      	ldr	r3, [r4, #0]
 800e908:	1b5b      	subs	r3, r3, r5
 800e90a:	d417      	bmi.n	800e93c <_malloc_r+0x8c>
 800e90c:	2b0b      	cmp	r3, #11
 800e90e:	d903      	bls.n	800e918 <_malloc_r+0x68>
 800e910:	6023      	str	r3, [r4, #0]
 800e912:	441c      	add	r4, r3
 800e914:	6025      	str	r5, [r4, #0]
 800e916:	e004      	b.n	800e922 <_malloc_r+0x72>
 800e918:	6863      	ldr	r3, [r4, #4]
 800e91a:	42a2      	cmp	r2, r4
 800e91c:	bf0c      	ite	eq
 800e91e:	600b      	streq	r3, [r1, #0]
 800e920:	6053      	strne	r3, [r2, #4]
 800e922:	4630      	mov	r0, r6
 800e924:	f000 fa04 	bl	800ed30 <__malloc_unlock>
 800e928:	f104 000b 	add.w	r0, r4, #11
 800e92c:	1d23      	adds	r3, r4, #4
 800e92e:	f020 0007 	bic.w	r0, r0, #7
 800e932:	1ac2      	subs	r2, r0, r3
 800e934:	d0cc      	beq.n	800e8d0 <_malloc_r+0x20>
 800e936:	1a1b      	subs	r3, r3, r0
 800e938:	50a3      	str	r3, [r4, r2]
 800e93a:	e7c9      	b.n	800e8d0 <_malloc_r+0x20>
 800e93c:	4622      	mov	r2, r4
 800e93e:	6864      	ldr	r4, [r4, #4]
 800e940:	e7cc      	b.n	800e8dc <_malloc_r+0x2c>
 800e942:	1cc4      	adds	r4, r0, #3
 800e944:	f024 0403 	bic.w	r4, r4, #3
 800e948:	42a0      	cmp	r0, r4
 800e94a:	d0e3      	beq.n	800e914 <_malloc_r+0x64>
 800e94c:	1a21      	subs	r1, r4, r0
 800e94e:	4630      	mov	r0, r6
 800e950:	f000 f96e 	bl	800ec30 <_sbrk_r>
 800e954:	3001      	adds	r0, #1
 800e956:	d1dd      	bne.n	800e914 <_malloc_r+0x64>
 800e958:	e7cf      	b.n	800e8fa <_malloc_r+0x4a>
 800e95a:	bf00      	nop
 800e95c:	20001c1c 	.word	0x20001c1c
 800e960:	20001c20 	.word	0x20001c20

0800e964 <__ssputs_r>:
 800e964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e968:	688e      	ldr	r6, [r1, #8]
 800e96a:	429e      	cmp	r6, r3
 800e96c:	4682      	mov	sl, r0
 800e96e:	460c      	mov	r4, r1
 800e970:	4690      	mov	r8, r2
 800e972:	461f      	mov	r7, r3
 800e974:	d838      	bhi.n	800e9e8 <__ssputs_r+0x84>
 800e976:	898a      	ldrh	r2, [r1, #12]
 800e978:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e97c:	d032      	beq.n	800e9e4 <__ssputs_r+0x80>
 800e97e:	6825      	ldr	r5, [r4, #0]
 800e980:	6909      	ldr	r1, [r1, #16]
 800e982:	eba5 0901 	sub.w	r9, r5, r1
 800e986:	6965      	ldr	r5, [r4, #20]
 800e988:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e98c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e990:	3301      	adds	r3, #1
 800e992:	444b      	add	r3, r9
 800e994:	106d      	asrs	r5, r5, #1
 800e996:	429d      	cmp	r5, r3
 800e998:	bf38      	it	cc
 800e99a:	461d      	movcc	r5, r3
 800e99c:	0553      	lsls	r3, r2, #21
 800e99e:	d531      	bpl.n	800ea04 <__ssputs_r+0xa0>
 800e9a0:	4629      	mov	r1, r5
 800e9a2:	f7ff ff85 	bl	800e8b0 <_malloc_r>
 800e9a6:	4606      	mov	r6, r0
 800e9a8:	b950      	cbnz	r0, 800e9c0 <__ssputs_r+0x5c>
 800e9aa:	230c      	movs	r3, #12
 800e9ac:	f8ca 3000 	str.w	r3, [sl]
 800e9b0:	89a3      	ldrh	r3, [r4, #12]
 800e9b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9b6:	81a3      	strh	r3, [r4, #12]
 800e9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9c0:	6921      	ldr	r1, [r4, #16]
 800e9c2:	464a      	mov	r2, r9
 800e9c4:	f7fc fad4 	bl	800af70 <memcpy>
 800e9c8:	89a3      	ldrh	r3, [r4, #12]
 800e9ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e9ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9d2:	81a3      	strh	r3, [r4, #12]
 800e9d4:	6126      	str	r6, [r4, #16]
 800e9d6:	6165      	str	r5, [r4, #20]
 800e9d8:	444e      	add	r6, r9
 800e9da:	eba5 0509 	sub.w	r5, r5, r9
 800e9de:	6026      	str	r6, [r4, #0]
 800e9e0:	60a5      	str	r5, [r4, #8]
 800e9e2:	463e      	mov	r6, r7
 800e9e4:	42be      	cmp	r6, r7
 800e9e6:	d900      	bls.n	800e9ea <__ssputs_r+0x86>
 800e9e8:	463e      	mov	r6, r7
 800e9ea:	4632      	mov	r2, r6
 800e9ec:	6820      	ldr	r0, [r4, #0]
 800e9ee:	4641      	mov	r1, r8
 800e9f0:	f000 f97e 	bl	800ecf0 <memmove>
 800e9f4:	68a3      	ldr	r3, [r4, #8]
 800e9f6:	6822      	ldr	r2, [r4, #0]
 800e9f8:	1b9b      	subs	r3, r3, r6
 800e9fa:	4432      	add	r2, r6
 800e9fc:	60a3      	str	r3, [r4, #8]
 800e9fe:	6022      	str	r2, [r4, #0]
 800ea00:	2000      	movs	r0, #0
 800ea02:	e7db      	b.n	800e9bc <__ssputs_r+0x58>
 800ea04:	462a      	mov	r2, r5
 800ea06:	f000 f999 	bl	800ed3c <_realloc_r>
 800ea0a:	4606      	mov	r6, r0
 800ea0c:	2800      	cmp	r0, #0
 800ea0e:	d1e1      	bne.n	800e9d4 <__ssputs_r+0x70>
 800ea10:	6921      	ldr	r1, [r4, #16]
 800ea12:	4650      	mov	r0, sl
 800ea14:	f7ff fefc 	bl	800e810 <_free_r>
 800ea18:	e7c7      	b.n	800e9aa <__ssputs_r+0x46>
	...

0800ea1c <_svfiprintf_r>:
 800ea1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea20:	4698      	mov	r8, r3
 800ea22:	898b      	ldrh	r3, [r1, #12]
 800ea24:	061b      	lsls	r3, r3, #24
 800ea26:	b09d      	sub	sp, #116	; 0x74
 800ea28:	4607      	mov	r7, r0
 800ea2a:	460d      	mov	r5, r1
 800ea2c:	4614      	mov	r4, r2
 800ea2e:	d50e      	bpl.n	800ea4e <_svfiprintf_r+0x32>
 800ea30:	690b      	ldr	r3, [r1, #16]
 800ea32:	b963      	cbnz	r3, 800ea4e <_svfiprintf_r+0x32>
 800ea34:	2140      	movs	r1, #64	; 0x40
 800ea36:	f7ff ff3b 	bl	800e8b0 <_malloc_r>
 800ea3a:	6028      	str	r0, [r5, #0]
 800ea3c:	6128      	str	r0, [r5, #16]
 800ea3e:	b920      	cbnz	r0, 800ea4a <_svfiprintf_r+0x2e>
 800ea40:	230c      	movs	r3, #12
 800ea42:	603b      	str	r3, [r7, #0]
 800ea44:	f04f 30ff 	mov.w	r0, #4294967295
 800ea48:	e0d1      	b.n	800ebee <_svfiprintf_r+0x1d2>
 800ea4a:	2340      	movs	r3, #64	; 0x40
 800ea4c:	616b      	str	r3, [r5, #20]
 800ea4e:	2300      	movs	r3, #0
 800ea50:	9309      	str	r3, [sp, #36]	; 0x24
 800ea52:	2320      	movs	r3, #32
 800ea54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea58:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea5c:	2330      	movs	r3, #48	; 0x30
 800ea5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ec08 <_svfiprintf_r+0x1ec>
 800ea62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea66:	f04f 0901 	mov.w	r9, #1
 800ea6a:	4623      	mov	r3, r4
 800ea6c:	469a      	mov	sl, r3
 800ea6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea72:	b10a      	cbz	r2, 800ea78 <_svfiprintf_r+0x5c>
 800ea74:	2a25      	cmp	r2, #37	; 0x25
 800ea76:	d1f9      	bne.n	800ea6c <_svfiprintf_r+0x50>
 800ea78:	ebba 0b04 	subs.w	fp, sl, r4
 800ea7c:	d00b      	beq.n	800ea96 <_svfiprintf_r+0x7a>
 800ea7e:	465b      	mov	r3, fp
 800ea80:	4622      	mov	r2, r4
 800ea82:	4629      	mov	r1, r5
 800ea84:	4638      	mov	r0, r7
 800ea86:	f7ff ff6d 	bl	800e964 <__ssputs_r>
 800ea8a:	3001      	adds	r0, #1
 800ea8c:	f000 80aa 	beq.w	800ebe4 <_svfiprintf_r+0x1c8>
 800ea90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea92:	445a      	add	r2, fp
 800ea94:	9209      	str	r2, [sp, #36]	; 0x24
 800ea96:	f89a 3000 	ldrb.w	r3, [sl]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	f000 80a2 	beq.w	800ebe4 <_svfiprintf_r+0x1c8>
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	f04f 32ff 	mov.w	r2, #4294967295
 800eaa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eaaa:	f10a 0a01 	add.w	sl, sl, #1
 800eaae:	9304      	str	r3, [sp, #16]
 800eab0:	9307      	str	r3, [sp, #28]
 800eab2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eab6:	931a      	str	r3, [sp, #104]	; 0x68
 800eab8:	4654      	mov	r4, sl
 800eaba:	2205      	movs	r2, #5
 800eabc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eac0:	4851      	ldr	r0, [pc, #324]	; (800ec08 <_svfiprintf_r+0x1ec>)
 800eac2:	f7f1 fba5 	bl	8000210 <memchr>
 800eac6:	9a04      	ldr	r2, [sp, #16]
 800eac8:	b9d8      	cbnz	r0, 800eb02 <_svfiprintf_r+0xe6>
 800eaca:	06d0      	lsls	r0, r2, #27
 800eacc:	bf44      	itt	mi
 800eace:	2320      	movmi	r3, #32
 800ead0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ead4:	0711      	lsls	r1, r2, #28
 800ead6:	bf44      	itt	mi
 800ead8:	232b      	movmi	r3, #43	; 0x2b
 800eada:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eade:	f89a 3000 	ldrb.w	r3, [sl]
 800eae2:	2b2a      	cmp	r3, #42	; 0x2a
 800eae4:	d015      	beq.n	800eb12 <_svfiprintf_r+0xf6>
 800eae6:	9a07      	ldr	r2, [sp, #28]
 800eae8:	4654      	mov	r4, sl
 800eaea:	2000      	movs	r0, #0
 800eaec:	f04f 0c0a 	mov.w	ip, #10
 800eaf0:	4621      	mov	r1, r4
 800eaf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eaf6:	3b30      	subs	r3, #48	; 0x30
 800eaf8:	2b09      	cmp	r3, #9
 800eafa:	d94e      	bls.n	800eb9a <_svfiprintf_r+0x17e>
 800eafc:	b1b0      	cbz	r0, 800eb2c <_svfiprintf_r+0x110>
 800eafe:	9207      	str	r2, [sp, #28]
 800eb00:	e014      	b.n	800eb2c <_svfiprintf_r+0x110>
 800eb02:	eba0 0308 	sub.w	r3, r0, r8
 800eb06:	fa09 f303 	lsl.w	r3, r9, r3
 800eb0a:	4313      	orrs	r3, r2
 800eb0c:	9304      	str	r3, [sp, #16]
 800eb0e:	46a2      	mov	sl, r4
 800eb10:	e7d2      	b.n	800eab8 <_svfiprintf_r+0x9c>
 800eb12:	9b03      	ldr	r3, [sp, #12]
 800eb14:	1d19      	adds	r1, r3, #4
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	9103      	str	r1, [sp, #12]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	bfbb      	ittet	lt
 800eb1e:	425b      	neglt	r3, r3
 800eb20:	f042 0202 	orrlt.w	r2, r2, #2
 800eb24:	9307      	strge	r3, [sp, #28]
 800eb26:	9307      	strlt	r3, [sp, #28]
 800eb28:	bfb8      	it	lt
 800eb2a:	9204      	strlt	r2, [sp, #16]
 800eb2c:	7823      	ldrb	r3, [r4, #0]
 800eb2e:	2b2e      	cmp	r3, #46	; 0x2e
 800eb30:	d10c      	bne.n	800eb4c <_svfiprintf_r+0x130>
 800eb32:	7863      	ldrb	r3, [r4, #1]
 800eb34:	2b2a      	cmp	r3, #42	; 0x2a
 800eb36:	d135      	bne.n	800eba4 <_svfiprintf_r+0x188>
 800eb38:	9b03      	ldr	r3, [sp, #12]
 800eb3a:	1d1a      	adds	r2, r3, #4
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	9203      	str	r2, [sp, #12]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	bfb8      	it	lt
 800eb44:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb48:	3402      	adds	r4, #2
 800eb4a:	9305      	str	r3, [sp, #20]
 800eb4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ec18 <_svfiprintf_r+0x1fc>
 800eb50:	7821      	ldrb	r1, [r4, #0]
 800eb52:	2203      	movs	r2, #3
 800eb54:	4650      	mov	r0, sl
 800eb56:	f7f1 fb5b 	bl	8000210 <memchr>
 800eb5a:	b140      	cbz	r0, 800eb6e <_svfiprintf_r+0x152>
 800eb5c:	2340      	movs	r3, #64	; 0x40
 800eb5e:	eba0 000a 	sub.w	r0, r0, sl
 800eb62:	fa03 f000 	lsl.w	r0, r3, r0
 800eb66:	9b04      	ldr	r3, [sp, #16]
 800eb68:	4303      	orrs	r3, r0
 800eb6a:	3401      	adds	r4, #1
 800eb6c:	9304      	str	r3, [sp, #16]
 800eb6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb72:	4826      	ldr	r0, [pc, #152]	; (800ec0c <_svfiprintf_r+0x1f0>)
 800eb74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb78:	2206      	movs	r2, #6
 800eb7a:	f7f1 fb49 	bl	8000210 <memchr>
 800eb7e:	2800      	cmp	r0, #0
 800eb80:	d038      	beq.n	800ebf4 <_svfiprintf_r+0x1d8>
 800eb82:	4b23      	ldr	r3, [pc, #140]	; (800ec10 <_svfiprintf_r+0x1f4>)
 800eb84:	bb1b      	cbnz	r3, 800ebce <_svfiprintf_r+0x1b2>
 800eb86:	9b03      	ldr	r3, [sp, #12]
 800eb88:	3307      	adds	r3, #7
 800eb8a:	f023 0307 	bic.w	r3, r3, #7
 800eb8e:	3308      	adds	r3, #8
 800eb90:	9303      	str	r3, [sp, #12]
 800eb92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb94:	4433      	add	r3, r6
 800eb96:	9309      	str	r3, [sp, #36]	; 0x24
 800eb98:	e767      	b.n	800ea6a <_svfiprintf_r+0x4e>
 800eb9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb9e:	460c      	mov	r4, r1
 800eba0:	2001      	movs	r0, #1
 800eba2:	e7a5      	b.n	800eaf0 <_svfiprintf_r+0xd4>
 800eba4:	2300      	movs	r3, #0
 800eba6:	3401      	adds	r4, #1
 800eba8:	9305      	str	r3, [sp, #20]
 800ebaa:	4619      	mov	r1, r3
 800ebac:	f04f 0c0a 	mov.w	ip, #10
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebb6:	3a30      	subs	r2, #48	; 0x30
 800ebb8:	2a09      	cmp	r2, #9
 800ebba:	d903      	bls.n	800ebc4 <_svfiprintf_r+0x1a8>
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d0c5      	beq.n	800eb4c <_svfiprintf_r+0x130>
 800ebc0:	9105      	str	r1, [sp, #20]
 800ebc2:	e7c3      	b.n	800eb4c <_svfiprintf_r+0x130>
 800ebc4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebc8:	4604      	mov	r4, r0
 800ebca:	2301      	movs	r3, #1
 800ebcc:	e7f0      	b.n	800ebb0 <_svfiprintf_r+0x194>
 800ebce:	ab03      	add	r3, sp, #12
 800ebd0:	9300      	str	r3, [sp, #0]
 800ebd2:	462a      	mov	r2, r5
 800ebd4:	4b0f      	ldr	r3, [pc, #60]	; (800ec14 <_svfiprintf_r+0x1f8>)
 800ebd6:	a904      	add	r1, sp, #16
 800ebd8:	4638      	mov	r0, r7
 800ebda:	f7fc fa7f 	bl	800b0dc <_printf_float>
 800ebde:	1c42      	adds	r2, r0, #1
 800ebe0:	4606      	mov	r6, r0
 800ebe2:	d1d6      	bne.n	800eb92 <_svfiprintf_r+0x176>
 800ebe4:	89ab      	ldrh	r3, [r5, #12]
 800ebe6:	065b      	lsls	r3, r3, #25
 800ebe8:	f53f af2c 	bmi.w	800ea44 <_svfiprintf_r+0x28>
 800ebec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebee:	b01d      	add	sp, #116	; 0x74
 800ebf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebf4:	ab03      	add	r3, sp, #12
 800ebf6:	9300      	str	r3, [sp, #0]
 800ebf8:	462a      	mov	r2, r5
 800ebfa:	4b06      	ldr	r3, [pc, #24]	; (800ec14 <_svfiprintf_r+0x1f8>)
 800ebfc:	a904      	add	r1, sp, #16
 800ebfe:	4638      	mov	r0, r7
 800ec00:	f7fc fd10 	bl	800b624 <_printf_i>
 800ec04:	e7eb      	b.n	800ebde <_svfiprintf_r+0x1c2>
 800ec06:	bf00      	nop
 800ec08:	0800fdcc 	.word	0x0800fdcc
 800ec0c:	0800fdd6 	.word	0x0800fdd6
 800ec10:	0800b0dd 	.word	0x0800b0dd
 800ec14:	0800e965 	.word	0x0800e965
 800ec18:	0800fdd2 	.word	0x0800fdd2
 800ec1c:	00000000 	.word	0x00000000

0800ec20 <nan>:
 800ec20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ec28 <nan+0x8>
 800ec24:	4770      	bx	lr
 800ec26:	bf00      	nop
 800ec28:	00000000 	.word	0x00000000
 800ec2c:	7ff80000 	.word	0x7ff80000

0800ec30 <_sbrk_r>:
 800ec30:	b538      	push	{r3, r4, r5, lr}
 800ec32:	4d06      	ldr	r5, [pc, #24]	; (800ec4c <_sbrk_r+0x1c>)
 800ec34:	2300      	movs	r3, #0
 800ec36:	4604      	mov	r4, r0
 800ec38:	4608      	mov	r0, r1
 800ec3a:	602b      	str	r3, [r5, #0]
 800ec3c:	f7f3 f8d2 	bl	8001de4 <_sbrk>
 800ec40:	1c43      	adds	r3, r0, #1
 800ec42:	d102      	bne.n	800ec4a <_sbrk_r+0x1a>
 800ec44:	682b      	ldr	r3, [r5, #0]
 800ec46:	b103      	cbz	r3, 800ec4a <_sbrk_r+0x1a>
 800ec48:	6023      	str	r3, [r4, #0]
 800ec4a:	bd38      	pop	{r3, r4, r5, pc}
 800ec4c:	20001efc 	.word	0x20001efc

0800ec50 <strncmp>:
 800ec50:	b510      	push	{r4, lr}
 800ec52:	b16a      	cbz	r2, 800ec70 <strncmp+0x20>
 800ec54:	3901      	subs	r1, #1
 800ec56:	1884      	adds	r4, r0, r2
 800ec58:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ec5c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ec60:	4293      	cmp	r3, r2
 800ec62:	d103      	bne.n	800ec6c <strncmp+0x1c>
 800ec64:	42a0      	cmp	r0, r4
 800ec66:	d001      	beq.n	800ec6c <strncmp+0x1c>
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d1f5      	bne.n	800ec58 <strncmp+0x8>
 800ec6c:	1a98      	subs	r0, r3, r2
 800ec6e:	bd10      	pop	{r4, pc}
 800ec70:	4610      	mov	r0, r2
 800ec72:	e7fc      	b.n	800ec6e <strncmp+0x1e>

0800ec74 <__ascii_wctomb>:
 800ec74:	b149      	cbz	r1, 800ec8a <__ascii_wctomb+0x16>
 800ec76:	2aff      	cmp	r2, #255	; 0xff
 800ec78:	bf85      	ittet	hi
 800ec7a:	238a      	movhi	r3, #138	; 0x8a
 800ec7c:	6003      	strhi	r3, [r0, #0]
 800ec7e:	700a      	strbls	r2, [r1, #0]
 800ec80:	f04f 30ff 	movhi.w	r0, #4294967295
 800ec84:	bf98      	it	ls
 800ec86:	2001      	movls	r0, #1
 800ec88:	4770      	bx	lr
 800ec8a:	4608      	mov	r0, r1
 800ec8c:	4770      	bx	lr
	...

0800ec90 <__assert_func>:
 800ec90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec92:	4614      	mov	r4, r2
 800ec94:	461a      	mov	r2, r3
 800ec96:	4b09      	ldr	r3, [pc, #36]	; (800ecbc <__assert_func+0x2c>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	4605      	mov	r5, r0
 800ec9c:	68d8      	ldr	r0, [r3, #12]
 800ec9e:	b14c      	cbz	r4, 800ecb4 <__assert_func+0x24>
 800eca0:	4b07      	ldr	r3, [pc, #28]	; (800ecc0 <__assert_func+0x30>)
 800eca2:	9100      	str	r1, [sp, #0]
 800eca4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eca8:	4906      	ldr	r1, [pc, #24]	; (800ecc4 <__assert_func+0x34>)
 800ecaa:	462b      	mov	r3, r5
 800ecac:	f000 f80e 	bl	800eccc <fiprintf>
 800ecb0:	f000 fa84 	bl	800f1bc <abort>
 800ecb4:	4b04      	ldr	r3, [pc, #16]	; (800ecc8 <__assert_func+0x38>)
 800ecb6:	461c      	mov	r4, r3
 800ecb8:	e7f3      	b.n	800eca2 <__assert_func+0x12>
 800ecba:	bf00      	nop
 800ecbc:	20000140 	.word	0x20000140
 800ecc0:	0800fddd 	.word	0x0800fddd
 800ecc4:	0800fdea 	.word	0x0800fdea
 800ecc8:	0800fe18 	.word	0x0800fe18

0800eccc <fiprintf>:
 800eccc:	b40e      	push	{r1, r2, r3}
 800ecce:	b503      	push	{r0, r1, lr}
 800ecd0:	4601      	mov	r1, r0
 800ecd2:	ab03      	add	r3, sp, #12
 800ecd4:	4805      	ldr	r0, [pc, #20]	; (800ecec <fiprintf+0x20>)
 800ecd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecda:	6800      	ldr	r0, [r0, #0]
 800ecdc:	9301      	str	r3, [sp, #4]
 800ecde:	f000 f87d 	bl	800eddc <_vfiprintf_r>
 800ece2:	b002      	add	sp, #8
 800ece4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ece8:	b003      	add	sp, #12
 800ecea:	4770      	bx	lr
 800ecec:	20000140 	.word	0x20000140

0800ecf0 <memmove>:
 800ecf0:	4288      	cmp	r0, r1
 800ecf2:	b510      	push	{r4, lr}
 800ecf4:	eb01 0402 	add.w	r4, r1, r2
 800ecf8:	d902      	bls.n	800ed00 <memmove+0x10>
 800ecfa:	4284      	cmp	r4, r0
 800ecfc:	4623      	mov	r3, r4
 800ecfe:	d807      	bhi.n	800ed10 <memmove+0x20>
 800ed00:	1e43      	subs	r3, r0, #1
 800ed02:	42a1      	cmp	r1, r4
 800ed04:	d008      	beq.n	800ed18 <memmove+0x28>
 800ed06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed0e:	e7f8      	b.n	800ed02 <memmove+0x12>
 800ed10:	4402      	add	r2, r0
 800ed12:	4601      	mov	r1, r0
 800ed14:	428a      	cmp	r2, r1
 800ed16:	d100      	bne.n	800ed1a <memmove+0x2a>
 800ed18:	bd10      	pop	{r4, pc}
 800ed1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed22:	e7f7      	b.n	800ed14 <memmove+0x24>

0800ed24 <__malloc_lock>:
 800ed24:	4801      	ldr	r0, [pc, #4]	; (800ed2c <__malloc_lock+0x8>)
 800ed26:	f000 bc09 	b.w	800f53c <__retarget_lock_acquire_recursive>
 800ed2a:	bf00      	nop
 800ed2c:	20001f04 	.word	0x20001f04

0800ed30 <__malloc_unlock>:
 800ed30:	4801      	ldr	r0, [pc, #4]	; (800ed38 <__malloc_unlock+0x8>)
 800ed32:	f000 bc04 	b.w	800f53e <__retarget_lock_release_recursive>
 800ed36:	bf00      	nop
 800ed38:	20001f04 	.word	0x20001f04

0800ed3c <_realloc_r>:
 800ed3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed3e:	4607      	mov	r7, r0
 800ed40:	4614      	mov	r4, r2
 800ed42:	460e      	mov	r6, r1
 800ed44:	b921      	cbnz	r1, 800ed50 <_realloc_r+0x14>
 800ed46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ed4a:	4611      	mov	r1, r2
 800ed4c:	f7ff bdb0 	b.w	800e8b0 <_malloc_r>
 800ed50:	b922      	cbnz	r2, 800ed5c <_realloc_r+0x20>
 800ed52:	f7ff fd5d 	bl	800e810 <_free_r>
 800ed56:	4625      	mov	r5, r4
 800ed58:	4628      	mov	r0, r5
 800ed5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed5c:	f000 fc54 	bl	800f608 <_malloc_usable_size_r>
 800ed60:	42a0      	cmp	r0, r4
 800ed62:	d20f      	bcs.n	800ed84 <_realloc_r+0x48>
 800ed64:	4621      	mov	r1, r4
 800ed66:	4638      	mov	r0, r7
 800ed68:	f7ff fda2 	bl	800e8b0 <_malloc_r>
 800ed6c:	4605      	mov	r5, r0
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	d0f2      	beq.n	800ed58 <_realloc_r+0x1c>
 800ed72:	4631      	mov	r1, r6
 800ed74:	4622      	mov	r2, r4
 800ed76:	f7fc f8fb 	bl	800af70 <memcpy>
 800ed7a:	4631      	mov	r1, r6
 800ed7c:	4638      	mov	r0, r7
 800ed7e:	f7ff fd47 	bl	800e810 <_free_r>
 800ed82:	e7e9      	b.n	800ed58 <_realloc_r+0x1c>
 800ed84:	4635      	mov	r5, r6
 800ed86:	e7e7      	b.n	800ed58 <_realloc_r+0x1c>

0800ed88 <__sfputc_r>:
 800ed88:	6893      	ldr	r3, [r2, #8]
 800ed8a:	3b01      	subs	r3, #1
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	b410      	push	{r4}
 800ed90:	6093      	str	r3, [r2, #8]
 800ed92:	da08      	bge.n	800eda6 <__sfputc_r+0x1e>
 800ed94:	6994      	ldr	r4, [r2, #24]
 800ed96:	42a3      	cmp	r3, r4
 800ed98:	db01      	blt.n	800ed9e <__sfputc_r+0x16>
 800ed9a:	290a      	cmp	r1, #10
 800ed9c:	d103      	bne.n	800eda6 <__sfputc_r+0x1e>
 800ed9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eda2:	f000 b94b 	b.w	800f03c <__swbuf_r>
 800eda6:	6813      	ldr	r3, [r2, #0]
 800eda8:	1c58      	adds	r0, r3, #1
 800edaa:	6010      	str	r0, [r2, #0]
 800edac:	7019      	strb	r1, [r3, #0]
 800edae:	4608      	mov	r0, r1
 800edb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edb4:	4770      	bx	lr

0800edb6 <__sfputs_r>:
 800edb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edb8:	4606      	mov	r6, r0
 800edba:	460f      	mov	r7, r1
 800edbc:	4614      	mov	r4, r2
 800edbe:	18d5      	adds	r5, r2, r3
 800edc0:	42ac      	cmp	r4, r5
 800edc2:	d101      	bne.n	800edc8 <__sfputs_r+0x12>
 800edc4:	2000      	movs	r0, #0
 800edc6:	e007      	b.n	800edd8 <__sfputs_r+0x22>
 800edc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edcc:	463a      	mov	r2, r7
 800edce:	4630      	mov	r0, r6
 800edd0:	f7ff ffda 	bl	800ed88 <__sfputc_r>
 800edd4:	1c43      	adds	r3, r0, #1
 800edd6:	d1f3      	bne.n	800edc0 <__sfputs_r+0xa>
 800edd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eddc <_vfiprintf_r>:
 800eddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede0:	460d      	mov	r5, r1
 800ede2:	b09d      	sub	sp, #116	; 0x74
 800ede4:	4614      	mov	r4, r2
 800ede6:	4698      	mov	r8, r3
 800ede8:	4606      	mov	r6, r0
 800edea:	b118      	cbz	r0, 800edf4 <_vfiprintf_r+0x18>
 800edec:	6983      	ldr	r3, [r0, #24]
 800edee:	b90b      	cbnz	r3, 800edf4 <_vfiprintf_r+0x18>
 800edf0:	f000 fb06 	bl	800f400 <__sinit>
 800edf4:	4b89      	ldr	r3, [pc, #548]	; (800f01c <_vfiprintf_r+0x240>)
 800edf6:	429d      	cmp	r5, r3
 800edf8:	d11b      	bne.n	800ee32 <_vfiprintf_r+0x56>
 800edfa:	6875      	ldr	r5, [r6, #4]
 800edfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edfe:	07d9      	lsls	r1, r3, #31
 800ee00:	d405      	bmi.n	800ee0e <_vfiprintf_r+0x32>
 800ee02:	89ab      	ldrh	r3, [r5, #12]
 800ee04:	059a      	lsls	r2, r3, #22
 800ee06:	d402      	bmi.n	800ee0e <_vfiprintf_r+0x32>
 800ee08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee0a:	f000 fb97 	bl	800f53c <__retarget_lock_acquire_recursive>
 800ee0e:	89ab      	ldrh	r3, [r5, #12]
 800ee10:	071b      	lsls	r3, r3, #28
 800ee12:	d501      	bpl.n	800ee18 <_vfiprintf_r+0x3c>
 800ee14:	692b      	ldr	r3, [r5, #16]
 800ee16:	b9eb      	cbnz	r3, 800ee54 <_vfiprintf_r+0x78>
 800ee18:	4629      	mov	r1, r5
 800ee1a:	4630      	mov	r0, r6
 800ee1c:	f000 f960 	bl	800f0e0 <__swsetup_r>
 800ee20:	b1c0      	cbz	r0, 800ee54 <_vfiprintf_r+0x78>
 800ee22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee24:	07dc      	lsls	r4, r3, #31
 800ee26:	d50e      	bpl.n	800ee46 <_vfiprintf_r+0x6a>
 800ee28:	f04f 30ff 	mov.w	r0, #4294967295
 800ee2c:	b01d      	add	sp, #116	; 0x74
 800ee2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee32:	4b7b      	ldr	r3, [pc, #492]	; (800f020 <_vfiprintf_r+0x244>)
 800ee34:	429d      	cmp	r5, r3
 800ee36:	d101      	bne.n	800ee3c <_vfiprintf_r+0x60>
 800ee38:	68b5      	ldr	r5, [r6, #8]
 800ee3a:	e7df      	b.n	800edfc <_vfiprintf_r+0x20>
 800ee3c:	4b79      	ldr	r3, [pc, #484]	; (800f024 <_vfiprintf_r+0x248>)
 800ee3e:	429d      	cmp	r5, r3
 800ee40:	bf08      	it	eq
 800ee42:	68f5      	ldreq	r5, [r6, #12]
 800ee44:	e7da      	b.n	800edfc <_vfiprintf_r+0x20>
 800ee46:	89ab      	ldrh	r3, [r5, #12]
 800ee48:	0598      	lsls	r0, r3, #22
 800ee4a:	d4ed      	bmi.n	800ee28 <_vfiprintf_r+0x4c>
 800ee4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee4e:	f000 fb76 	bl	800f53e <__retarget_lock_release_recursive>
 800ee52:	e7e9      	b.n	800ee28 <_vfiprintf_r+0x4c>
 800ee54:	2300      	movs	r3, #0
 800ee56:	9309      	str	r3, [sp, #36]	; 0x24
 800ee58:	2320      	movs	r3, #32
 800ee5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee62:	2330      	movs	r3, #48	; 0x30
 800ee64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f028 <_vfiprintf_r+0x24c>
 800ee68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee6c:	f04f 0901 	mov.w	r9, #1
 800ee70:	4623      	mov	r3, r4
 800ee72:	469a      	mov	sl, r3
 800ee74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee78:	b10a      	cbz	r2, 800ee7e <_vfiprintf_r+0xa2>
 800ee7a:	2a25      	cmp	r2, #37	; 0x25
 800ee7c:	d1f9      	bne.n	800ee72 <_vfiprintf_r+0x96>
 800ee7e:	ebba 0b04 	subs.w	fp, sl, r4
 800ee82:	d00b      	beq.n	800ee9c <_vfiprintf_r+0xc0>
 800ee84:	465b      	mov	r3, fp
 800ee86:	4622      	mov	r2, r4
 800ee88:	4629      	mov	r1, r5
 800ee8a:	4630      	mov	r0, r6
 800ee8c:	f7ff ff93 	bl	800edb6 <__sfputs_r>
 800ee90:	3001      	adds	r0, #1
 800ee92:	f000 80aa 	beq.w	800efea <_vfiprintf_r+0x20e>
 800ee96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee98:	445a      	add	r2, fp
 800ee9a:	9209      	str	r2, [sp, #36]	; 0x24
 800ee9c:	f89a 3000 	ldrb.w	r3, [sl]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	f000 80a2 	beq.w	800efea <_vfiprintf_r+0x20e>
 800eea6:	2300      	movs	r3, #0
 800eea8:	f04f 32ff 	mov.w	r2, #4294967295
 800eeac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eeb0:	f10a 0a01 	add.w	sl, sl, #1
 800eeb4:	9304      	str	r3, [sp, #16]
 800eeb6:	9307      	str	r3, [sp, #28]
 800eeb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eebc:	931a      	str	r3, [sp, #104]	; 0x68
 800eebe:	4654      	mov	r4, sl
 800eec0:	2205      	movs	r2, #5
 800eec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eec6:	4858      	ldr	r0, [pc, #352]	; (800f028 <_vfiprintf_r+0x24c>)
 800eec8:	f7f1 f9a2 	bl	8000210 <memchr>
 800eecc:	9a04      	ldr	r2, [sp, #16]
 800eece:	b9d8      	cbnz	r0, 800ef08 <_vfiprintf_r+0x12c>
 800eed0:	06d1      	lsls	r1, r2, #27
 800eed2:	bf44      	itt	mi
 800eed4:	2320      	movmi	r3, #32
 800eed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eeda:	0713      	lsls	r3, r2, #28
 800eedc:	bf44      	itt	mi
 800eede:	232b      	movmi	r3, #43	; 0x2b
 800eee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eee4:	f89a 3000 	ldrb.w	r3, [sl]
 800eee8:	2b2a      	cmp	r3, #42	; 0x2a
 800eeea:	d015      	beq.n	800ef18 <_vfiprintf_r+0x13c>
 800eeec:	9a07      	ldr	r2, [sp, #28]
 800eeee:	4654      	mov	r4, sl
 800eef0:	2000      	movs	r0, #0
 800eef2:	f04f 0c0a 	mov.w	ip, #10
 800eef6:	4621      	mov	r1, r4
 800eef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eefc:	3b30      	subs	r3, #48	; 0x30
 800eefe:	2b09      	cmp	r3, #9
 800ef00:	d94e      	bls.n	800efa0 <_vfiprintf_r+0x1c4>
 800ef02:	b1b0      	cbz	r0, 800ef32 <_vfiprintf_r+0x156>
 800ef04:	9207      	str	r2, [sp, #28]
 800ef06:	e014      	b.n	800ef32 <_vfiprintf_r+0x156>
 800ef08:	eba0 0308 	sub.w	r3, r0, r8
 800ef0c:	fa09 f303 	lsl.w	r3, r9, r3
 800ef10:	4313      	orrs	r3, r2
 800ef12:	9304      	str	r3, [sp, #16]
 800ef14:	46a2      	mov	sl, r4
 800ef16:	e7d2      	b.n	800eebe <_vfiprintf_r+0xe2>
 800ef18:	9b03      	ldr	r3, [sp, #12]
 800ef1a:	1d19      	adds	r1, r3, #4
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	9103      	str	r1, [sp, #12]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	bfbb      	ittet	lt
 800ef24:	425b      	neglt	r3, r3
 800ef26:	f042 0202 	orrlt.w	r2, r2, #2
 800ef2a:	9307      	strge	r3, [sp, #28]
 800ef2c:	9307      	strlt	r3, [sp, #28]
 800ef2e:	bfb8      	it	lt
 800ef30:	9204      	strlt	r2, [sp, #16]
 800ef32:	7823      	ldrb	r3, [r4, #0]
 800ef34:	2b2e      	cmp	r3, #46	; 0x2e
 800ef36:	d10c      	bne.n	800ef52 <_vfiprintf_r+0x176>
 800ef38:	7863      	ldrb	r3, [r4, #1]
 800ef3a:	2b2a      	cmp	r3, #42	; 0x2a
 800ef3c:	d135      	bne.n	800efaa <_vfiprintf_r+0x1ce>
 800ef3e:	9b03      	ldr	r3, [sp, #12]
 800ef40:	1d1a      	adds	r2, r3, #4
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	9203      	str	r2, [sp, #12]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	bfb8      	it	lt
 800ef4a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef4e:	3402      	adds	r4, #2
 800ef50:	9305      	str	r3, [sp, #20]
 800ef52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f038 <_vfiprintf_r+0x25c>
 800ef56:	7821      	ldrb	r1, [r4, #0]
 800ef58:	2203      	movs	r2, #3
 800ef5a:	4650      	mov	r0, sl
 800ef5c:	f7f1 f958 	bl	8000210 <memchr>
 800ef60:	b140      	cbz	r0, 800ef74 <_vfiprintf_r+0x198>
 800ef62:	2340      	movs	r3, #64	; 0x40
 800ef64:	eba0 000a 	sub.w	r0, r0, sl
 800ef68:	fa03 f000 	lsl.w	r0, r3, r0
 800ef6c:	9b04      	ldr	r3, [sp, #16]
 800ef6e:	4303      	orrs	r3, r0
 800ef70:	3401      	adds	r4, #1
 800ef72:	9304      	str	r3, [sp, #16]
 800ef74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef78:	482c      	ldr	r0, [pc, #176]	; (800f02c <_vfiprintf_r+0x250>)
 800ef7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef7e:	2206      	movs	r2, #6
 800ef80:	f7f1 f946 	bl	8000210 <memchr>
 800ef84:	2800      	cmp	r0, #0
 800ef86:	d03f      	beq.n	800f008 <_vfiprintf_r+0x22c>
 800ef88:	4b29      	ldr	r3, [pc, #164]	; (800f030 <_vfiprintf_r+0x254>)
 800ef8a:	bb1b      	cbnz	r3, 800efd4 <_vfiprintf_r+0x1f8>
 800ef8c:	9b03      	ldr	r3, [sp, #12]
 800ef8e:	3307      	adds	r3, #7
 800ef90:	f023 0307 	bic.w	r3, r3, #7
 800ef94:	3308      	adds	r3, #8
 800ef96:	9303      	str	r3, [sp, #12]
 800ef98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef9a:	443b      	add	r3, r7
 800ef9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ef9e:	e767      	b.n	800ee70 <_vfiprintf_r+0x94>
 800efa0:	fb0c 3202 	mla	r2, ip, r2, r3
 800efa4:	460c      	mov	r4, r1
 800efa6:	2001      	movs	r0, #1
 800efa8:	e7a5      	b.n	800eef6 <_vfiprintf_r+0x11a>
 800efaa:	2300      	movs	r3, #0
 800efac:	3401      	adds	r4, #1
 800efae:	9305      	str	r3, [sp, #20]
 800efb0:	4619      	mov	r1, r3
 800efb2:	f04f 0c0a 	mov.w	ip, #10
 800efb6:	4620      	mov	r0, r4
 800efb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efbc:	3a30      	subs	r2, #48	; 0x30
 800efbe:	2a09      	cmp	r2, #9
 800efc0:	d903      	bls.n	800efca <_vfiprintf_r+0x1ee>
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d0c5      	beq.n	800ef52 <_vfiprintf_r+0x176>
 800efc6:	9105      	str	r1, [sp, #20]
 800efc8:	e7c3      	b.n	800ef52 <_vfiprintf_r+0x176>
 800efca:	fb0c 2101 	mla	r1, ip, r1, r2
 800efce:	4604      	mov	r4, r0
 800efd0:	2301      	movs	r3, #1
 800efd2:	e7f0      	b.n	800efb6 <_vfiprintf_r+0x1da>
 800efd4:	ab03      	add	r3, sp, #12
 800efd6:	9300      	str	r3, [sp, #0]
 800efd8:	462a      	mov	r2, r5
 800efda:	4b16      	ldr	r3, [pc, #88]	; (800f034 <_vfiprintf_r+0x258>)
 800efdc:	a904      	add	r1, sp, #16
 800efde:	4630      	mov	r0, r6
 800efe0:	f7fc f87c 	bl	800b0dc <_printf_float>
 800efe4:	4607      	mov	r7, r0
 800efe6:	1c78      	adds	r0, r7, #1
 800efe8:	d1d6      	bne.n	800ef98 <_vfiprintf_r+0x1bc>
 800efea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800efec:	07d9      	lsls	r1, r3, #31
 800efee:	d405      	bmi.n	800effc <_vfiprintf_r+0x220>
 800eff0:	89ab      	ldrh	r3, [r5, #12]
 800eff2:	059a      	lsls	r2, r3, #22
 800eff4:	d402      	bmi.n	800effc <_vfiprintf_r+0x220>
 800eff6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eff8:	f000 faa1 	bl	800f53e <__retarget_lock_release_recursive>
 800effc:	89ab      	ldrh	r3, [r5, #12]
 800effe:	065b      	lsls	r3, r3, #25
 800f000:	f53f af12 	bmi.w	800ee28 <_vfiprintf_r+0x4c>
 800f004:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f006:	e711      	b.n	800ee2c <_vfiprintf_r+0x50>
 800f008:	ab03      	add	r3, sp, #12
 800f00a:	9300      	str	r3, [sp, #0]
 800f00c:	462a      	mov	r2, r5
 800f00e:	4b09      	ldr	r3, [pc, #36]	; (800f034 <_vfiprintf_r+0x258>)
 800f010:	a904      	add	r1, sp, #16
 800f012:	4630      	mov	r0, r6
 800f014:	f7fc fb06 	bl	800b624 <_printf_i>
 800f018:	e7e4      	b.n	800efe4 <_vfiprintf_r+0x208>
 800f01a:	bf00      	nop
 800f01c:	0800fe3c 	.word	0x0800fe3c
 800f020:	0800fe5c 	.word	0x0800fe5c
 800f024:	0800fe1c 	.word	0x0800fe1c
 800f028:	0800fdcc 	.word	0x0800fdcc
 800f02c:	0800fdd6 	.word	0x0800fdd6
 800f030:	0800b0dd 	.word	0x0800b0dd
 800f034:	0800edb7 	.word	0x0800edb7
 800f038:	0800fdd2 	.word	0x0800fdd2

0800f03c <__swbuf_r>:
 800f03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f03e:	460e      	mov	r6, r1
 800f040:	4614      	mov	r4, r2
 800f042:	4605      	mov	r5, r0
 800f044:	b118      	cbz	r0, 800f04e <__swbuf_r+0x12>
 800f046:	6983      	ldr	r3, [r0, #24]
 800f048:	b90b      	cbnz	r3, 800f04e <__swbuf_r+0x12>
 800f04a:	f000 f9d9 	bl	800f400 <__sinit>
 800f04e:	4b21      	ldr	r3, [pc, #132]	; (800f0d4 <__swbuf_r+0x98>)
 800f050:	429c      	cmp	r4, r3
 800f052:	d12b      	bne.n	800f0ac <__swbuf_r+0x70>
 800f054:	686c      	ldr	r4, [r5, #4]
 800f056:	69a3      	ldr	r3, [r4, #24]
 800f058:	60a3      	str	r3, [r4, #8]
 800f05a:	89a3      	ldrh	r3, [r4, #12]
 800f05c:	071a      	lsls	r2, r3, #28
 800f05e:	d52f      	bpl.n	800f0c0 <__swbuf_r+0x84>
 800f060:	6923      	ldr	r3, [r4, #16]
 800f062:	b36b      	cbz	r3, 800f0c0 <__swbuf_r+0x84>
 800f064:	6923      	ldr	r3, [r4, #16]
 800f066:	6820      	ldr	r0, [r4, #0]
 800f068:	1ac0      	subs	r0, r0, r3
 800f06a:	6963      	ldr	r3, [r4, #20]
 800f06c:	b2f6      	uxtb	r6, r6
 800f06e:	4283      	cmp	r3, r0
 800f070:	4637      	mov	r7, r6
 800f072:	dc04      	bgt.n	800f07e <__swbuf_r+0x42>
 800f074:	4621      	mov	r1, r4
 800f076:	4628      	mov	r0, r5
 800f078:	f000 f92e 	bl	800f2d8 <_fflush_r>
 800f07c:	bb30      	cbnz	r0, 800f0cc <__swbuf_r+0x90>
 800f07e:	68a3      	ldr	r3, [r4, #8]
 800f080:	3b01      	subs	r3, #1
 800f082:	60a3      	str	r3, [r4, #8]
 800f084:	6823      	ldr	r3, [r4, #0]
 800f086:	1c5a      	adds	r2, r3, #1
 800f088:	6022      	str	r2, [r4, #0]
 800f08a:	701e      	strb	r6, [r3, #0]
 800f08c:	6963      	ldr	r3, [r4, #20]
 800f08e:	3001      	adds	r0, #1
 800f090:	4283      	cmp	r3, r0
 800f092:	d004      	beq.n	800f09e <__swbuf_r+0x62>
 800f094:	89a3      	ldrh	r3, [r4, #12]
 800f096:	07db      	lsls	r3, r3, #31
 800f098:	d506      	bpl.n	800f0a8 <__swbuf_r+0x6c>
 800f09a:	2e0a      	cmp	r6, #10
 800f09c:	d104      	bne.n	800f0a8 <__swbuf_r+0x6c>
 800f09e:	4621      	mov	r1, r4
 800f0a0:	4628      	mov	r0, r5
 800f0a2:	f000 f919 	bl	800f2d8 <_fflush_r>
 800f0a6:	b988      	cbnz	r0, 800f0cc <__swbuf_r+0x90>
 800f0a8:	4638      	mov	r0, r7
 800f0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0ac:	4b0a      	ldr	r3, [pc, #40]	; (800f0d8 <__swbuf_r+0x9c>)
 800f0ae:	429c      	cmp	r4, r3
 800f0b0:	d101      	bne.n	800f0b6 <__swbuf_r+0x7a>
 800f0b2:	68ac      	ldr	r4, [r5, #8]
 800f0b4:	e7cf      	b.n	800f056 <__swbuf_r+0x1a>
 800f0b6:	4b09      	ldr	r3, [pc, #36]	; (800f0dc <__swbuf_r+0xa0>)
 800f0b8:	429c      	cmp	r4, r3
 800f0ba:	bf08      	it	eq
 800f0bc:	68ec      	ldreq	r4, [r5, #12]
 800f0be:	e7ca      	b.n	800f056 <__swbuf_r+0x1a>
 800f0c0:	4621      	mov	r1, r4
 800f0c2:	4628      	mov	r0, r5
 800f0c4:	f000 f80c 	bl	800f0e0 <__swsetup_r>
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	d0cb      	beq.n	800f064 <__swbuf_r+0x28>
 800f0cc:	f04f 37ff 	mov.w	r7, #4294967295
 800f0d0:	e7ea      	b.n	800f0a8 <__swbuf_r+0x6c>
 800f0d2:	bf00      	nop
 800f0d4:	0800fe3c 	.word	0x0800fe3c
 800f0d8:	0800fe5c 	.word	0x0800fe5c
 800f0dc:	0800fe1c 	.word	0x0800fe1c

0800f0e0 <__swsetup_r>:
 800f0e0:	4b32      	ldr	r3, [pc, #200]	; (800f1ac <__swsetup_r+0xcc>)
 800f0e2:	b570      	push	{r4, r5, r6, lr}
 800f0e4:	681d      	ldr	r5, [r3, #0]
 800f0e6:	4606      	mov	r6, r0
 800f0e8:	460c      	mov	r4, r1
 800f0ea:	b125      	cbz	r5, 800f0f6 <__swsetup_r+0x16>
 800f0ec:	69ab      	ldr	r3, [r5, #24]
 800f0ee:	b913      	cbnz	r3, 800f0f6 <__swsetup_r+0x16>
 800f0f0:	4628      	mov	r0, r5
 800f0f2:	f000 f985 	bl	800f400 <__sinit>
 800f0f6:	4b2e      	ldr	r3, [pc, #184]	; (800f1b0 <__swsetup_r+0xd0>)
 800f0f8:	429c      	cmp	r4, r3
 800f0fa:	d10f      	bne.n	800f11c <__swsetup_r+0x3c>
 800f0fc:	686c      	ldr	r4, [r5, #4]
 800f0fe:	89a3      	ldrh	r3, [r4, #12]
 800f100:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f104:	0719      	lsls	r1, r3, #28
 800f106:	d42c      	bmi.n	800f162 <__swsetup_r+0x82>
 800f108:	06dd      	lsls	r5, r3, #27
 800f10a:	d411      	bmi.n	800f130 <__swsetup_r+0x50>
 800f10c:	2309      	movs	r3, #9
 800f10e:	6033      	str	r3, [r6, #0]
 800f110:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f114:	81a3      	strh	r3, [r4, #12]
 800f116:	f04f 30ff 	mov.w	r0, #4294967295
 800f11a:	e03e      	b.n	800f19a <__swsetup_r+0xba>
 800f11c:	4b25      	ldr	r3, [pc, #148]	; (800f1b4 <__swsetup_r+0xd4>)
 800f11e:	429c      	cmp	r4, r3
 800f120:	d101      	bne.n	800f126 <__swsetup_r+0x46>
 800f122:	68ac      	ldr	r4, [r5, #8]
 800f124:	e7eb      	b.n	800f0fe <__swsetup_r+0x1e>
 800f126:	4b24      	ldr	r3, [pc, #144]	; (800f1b8 <__swsetup_r+0xd8>)
 800f128:	429c      	cmp	r4, r3
 800f12a:	bf08      	it	eq
 800f12c:	68ec      	ldreq	r4, [r5, #12]
 800f12e:	e7e6      	b.n	800f0fe <__swsetup_r+0x1e>
 800f130:	0758      	lsls	r0, r3, #29
 800f132:	d512      	bpl.n	800f15a <__swsetup_r+0x7a>
 800f134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f136:	b141      	cbz	r1, 800f14a <__swsetup_r+0x6a>
 800f138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f13c:	4299      	cmp	r1, r3
 800f13e:	d002      	beq.n	800f146 <__swsetup_r+0x66>
 800f140:	4630      	mov	r0, r6
 800f142:	f7ff fb65 	bl	800e810 <_free_r>
 800f146:	2300      	movs	r3, #0
 800f148:	6363      	str	r3, [r4, #52]	; 0x34
 800f14a:	89a3      	ldrh	r3, [r4, #12]
 800f14c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f150:	81a3      	strh	r3, [r4, #12]
 800f152:	2300      	movs	r3, #0
 800f154:	6063      	str	r3, [r4, #4]
 800f156:	6923      	ldr	r3, [r4, #16]
 800f158:	6023      	str	r3, [r4, #0]
 800f15a:	89a3      	ldrh	r3, [r4, #12]
 800f15c:	f043 0308 	orr.w	r3, r3, #8
 800f160:	81a3      	strh	r3, [r4, #12]
 800f162:	6923      	ldr	r3, [r4, #16]
 800f164:	b94b      	cbnz	r3, 800f17a <__swsetup_r+0x9a>
 800f166:	89a3      	ldrh	r3, [r4, #12]
 800f168:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f16c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f170:	d003      	beq.n	800f17a <__swsetup_r+0x9a>
 800f172:	4621      	mov	r1, r4
 800f174:	4630      	mov	r0, r6
 800f176:	f000 fa07 	bl	800f588 <__smakebuf_r>
 800f17a:	89a0      	ldrh	r0, [r4, #12]
 800f17c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f180:	f010 0301 	ands.w	r3, r0, #1
 800f184:	d00a      	beq.n	800f19c <__swsetup_r+0xbc>
 800f186:	2300      	movs	r3, #0
 800f188:	60a3      	str	r3, [r4, #8]
 800f18a:	6963      	ldr	r3, [r4, #20]
 800f18c:	425b      	negs	r3, r3
 800f18e:	61a3      	str	r3, [r4, #24]
 800f190:	6923      	ldr	r3, [r4, #16]
 800f192:	b943      	cbnz	r3, 800f1a6 <__swsetup_r+0xc6>
 800f194:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f198:	d1ba      	bne.n	800f110 <__swsetup_r+0x30>
 800f19a:	bd70      	pop	{r4, r5, r6, pc}
 800f19c:	0781      	lsls	r1, r0, #30
 800f19e:	bf58      	it	pl
 800f1a0:	6963      	ldrpl	r3, [r4, #20]
 800f1a2:	60a3      	str	r3, [r4, #8]
 800f1a4:	e7f4      	b.n	800f190 <__swsetup_r+0xb0>
 800f1a6:	2000      	movs	r0, #0
 800f1a8:	e7f7      	b.n	800f19a <__swsetup_r+0xba>
 800f1aa:	bf00      	nop
 800f1ac:	20000140 	.word	0x20000140
 800f1b0:	0800fe3c 	.word	0x0800fe3c
 800f1b4:	0800fe5c 	.word	0x0800fe5c
 800f1b8:	0800fe1c 	.word	0x0800fe1c

0800f1bc <abort>:
 800f1bc:	b508      	push	{r3, lr}
 800f1be:	2006      	movs	r0, #6
 800f1c0:	f000 fa52 	bl	800f668 <raise>
 800f1c4:	2001      	movs	r0, #1
 800f1c6:	f7f2 fd95 	bl	8001cf4 <_exit>
	...

0800f1cc <__sflush_r>:
 800f1cc:	898a      	ldrh	r2, [r1, #12]
 800f1ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1d2:	4605      	mov	r5, r0
 800f1d4:	0710      	lsls	r0, r2, #28
 800f1d6:	460c      	mov	r4, r1
 800f1d8:	d458      	bmi.n	800f28c <__sflush_r+0xc0>
 800f1da:	684b      	ldr	r3, [r1, #4]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	dc05      	bgt.n	800f1ec <__sflush_r+0x20>
 800f1e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	dc02      	bgt.n	800f1ec <__sflush_r+0x20>
 800f1e6:	2000      	movs	r0, #0
 800f1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1ee:	2e00      	cmp	r6, #0
 800f1f0:	d0f9      	beq.n	800f1e6 <__sflush_r+0x1a>
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f1f8:	682f      	ldr	r7, [r5, #0]
 800f1fa:	602b      	str	r3, [r5, #0]
 800f1fc:	d032      	beq.n	800f264 <__sflush_r+0x98>
 800f1fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f200:	89a3      	ldrh	r3, [r4, #12]
 800f202:	075a      	lsls	r2, r3, #29
 800f204:	d505      	bpl.n	800f212 <__sflush_r+0x46>
 800f206:	6863      	ldr	r3, [r4, #4]
 800f208:	1ac0      	subs	r0, r0, r3
 800f20a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f20c:	b10b      	cbz	r3, 800f212 <__sflush_r+0x46>
 800f20e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f210:	1ac0      	subs	r0, r0, r3
 800f212:	2300      	movs	r3, #0
 800f214:	4602      	mov	r2, r0
 800f216:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f218:	6a21      	ldr	r1, [r4, #32]
 800f21a:	4628      	mov	r0, r5
 800f21c:	47b0      	blx	r6
 800f21e:	1c43      	adds	r3, r0, #1
 800f220:	89a3      	ldrh	r3, [r4, #12]
 800f222:	d106      	bne.n	800f232 <__sflush_r+0x66>
 800f224:	6829      	ldr	r1, [r5, #0]
 800f226:	291d      	cmp	r1, #29
 800f228:	d82c      	bhi.n	800f284 <__sflush_r+0xb8>
 800f22a:	4a2a      	ldr	r2, [pc, #168]	; (800f2d4 <__sflush_r+0x108>)
 800f22c:	40ca      	lsrs	r2, r1
 800f22e:	07d6      	lsls	r6, r2, #31
 800f230:	d528      	bpl.n	800f284 <__sflush_r+0xb8>
 800f232:	2200      	movs	r2, #0
 800f234:	6062      	str	r2, [r4, #4]
 800f236:	04d9      	lsls	r1, r3, #19
 800f238:	6922      	ldr	r2, [r4, #16]
 800f23a:	6022      	str	r2, [r4, #0]
 800f23c:	d504      	bpl.n	800f248 <__sflush_r+0x7c>
 800f23e:	1c42      	adds	r2, r0, #1
 800f240:	d101      	bne.n	800f246 <__sflush_r+0x7a>
 800f242:	682b      	ldr	r3, [r5, #0]
 800f244:	b903      	cbnz	r3, 800f248 <__sflush_r+0x7c>
 800f246:	6560      	str	r0, [r4, #84]	; 0x54
 800f248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f24a:	602f      	str	r7, [r5, #0]
 800f24c:	2900      	cmp	r1, #0
 800f24e:	d0ca      	beq.n	800f1e6 <__sflush_r+0x1a>
 800f250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f254:	4299      	cmp	r1, r3
 800f256:	d002      	beq.n	800f25e <__sflush_r+0x92>
 800f258:	4628      	mov	r0, r5
 800f25a:	f7ff fad9 	bl	800e810 <_free_r>
 800f25e:	2000      	movs	r0, #0
 800f260:	6360      	str	r0, [r4, #52]	; 0x34
 800f262:	e7c1      	b.n	800f1e8 <__sflush_r+0x1c>
 800f264:	6a21      	ldr	r1, [r4, #32]
 800f266:	2301      	movs	r3, #1
 800f268:	4628      	mov	r0, r5
 800f26a:	47b0      	blx	r6
 800f26c:	1c41      	adds	r1, r0, #1
 800f26e:	d1c7      	bne.n	800f200 <__sflush_r+0x34>
 800f270:	682b      	ldr	r3, [r5, #0]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d0c4      	beq.n	800f200 <__sflush_r+0x34>
 800f276:	2b1d      	cmp	r3, #29
 800f278:	d001      	beq.n	800f27e <__sflush_r+0xb2>
 800f27a:	2b16      	cmp	r3, #22
 800f27c:	d101      	bne.n	800f282 <__sflush_r+0xb6>
 800f27e:	602f      	str	r7, [r5, #0]
 800f280:	e7b1      	b.n	800f1e6 <__sflush_r+0x1a>
 800f282:	89a3      	ldrh	r3, [r4, #12]
 800f284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f288:	81a3      	strh	r3, [r4, #12]
 800f28a:	e7ad      	b.n	800f1e8 <__sflush_r+0x1c>
 800f28c:	690f      	ldr	r7, [r1, #16]
 800f28e:	2f00      	cmp	r7, #0
 800f290:	d0a9      	beq.n	800f1e6 <__sflush_r+0x1a>
 800f292:	0793      	lsls	r3, r2, #30
 800f294:	680e      	ldr	r6, [r1, #0]
 800f296:	bf08      	it	eq
 800f298:	694b      	ldreq	r3, [r1, #20]
 800f29a:	600f      	str	r7, [r1, #0]
 800f29c:	bf18      	it	ne
 800f29e:	2300      	movne	r3, #0
 800f2a0:	eba6 0807 	sub.w	r8, r6, r7
 800f2a4:	608b      	str	r3, [r1, #8]
 800f2a6:	f1b8 0f00 	cmp.w	r8, #0
 800f2aa:	dd9c      	ble.n	800f1e6 <__sflush_r+0x1a>
 800f2ac:	6a21      	ldr	r1, [r4, #32]
 800f2ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f2b0:	4643      	mov	r3, r8
 800f2b2:	463a      	mov	r2, r7
 800f2b4:	4628      	mov	r0, r5
 800f2b6:	47b0      	blx	r6
 800f2b8:	2800      	cmp	r0, #0
 800f2ba:	dc06      	bgt.n	800f2ca <__sflush_r+0xfe>
 800f2bc:	89a3      	ldrh	r3, [r4, #12]
 800f2be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2c2:	81a3      	strh	r3, [r4, #12]
 800f2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2c8:	e78e      	b.n	800f1e8 <__sflush_r+0x1c>
 800f2ca:	4407      	add	r7, r0
 800f2cc:	eba8 0800 	sub.w	r8, r8, r0
 800f2d0:	e7e9      	b.n	800f2a6 <__sflush_r+0xda>
 800f2d2:	bf00      	nop
 800f2d4:	20400001 	.word	0x20400001

0800f2d8 <_fflush_r>:
 800f2d8:	b538      	push	{r3, r4, r5, lr}
 800f2da:	690b      	ldr	r3, [r1, #16]
 800f2dc:	4605      	mov	r5, r0
 800f2de:	460c      	mov	r4, r1
 800f2e0:	b913      	cbnz	r3, 800f2e8 <_fflush_r+0x10>
 800f2e2:	2500      	movs	r5, #0
 800f2e4:	4628      	mov	r0, r5
 800f2e6:	bd38      	pop	{r3, r4, r5, pc}
 800f2e8:	b118      	cbz	r0, 800f2f2 <_fflush_r+0x1a>
 800f2ea:	6983      	ldr	r3, [r0, #24]
 800f2ec:	b90b      	cbnz	r3, 800f2f2 <_fflush_r+0x1a>
 800f2ee:	f000 f887 	bl	800f400 <__sinit>
 800f2f2:	4b14      	ldr	r3, [pc, #80]	; (800f344 <_fflush_r+0x6c>)
 800f2f4:	429c      	cmp	r4, r3
 800f2f6:	d11b      	bne.n	800f330 <_fflush_r+0x58>
 800f2f8:	686c      	ldr	r4, [r5, #4]
 800f2fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d0ef      	beq.n	800f2e2 <_fflush_r+0xa>
 800f302:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f304:	07d0      	lsls	r0, r2, #31
 800f306:	d404      	bmi.n	800f312 <_fflush_r+0x3a>
 800f308:	0599      	lsls	r1, r3, #22
 800f30a:	d402      	bmi.n	800f312 <_fflush_r+0x3a>
 800f30c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f30e:	f000 f915 	bl	800f53c <__retarget_lock_acquire_recursive>
 800f312:	4628      	mov	r0, r5
 800f314:	4621      	mov	r1, r4
 800f316:	f7ff ff59 	bl	800f1cc <__sflush_r>
 800f31a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f31c:	07da      	lsls	r2, r3, #31
 800f31e:	4605      	mov	r5, r0
 800f320:	d4e0      	bmi.n	800f2e4 <_fflush_r+0xc>
 800f322:	89a3      	ldrh	r3, [r4, #12]
 800f324:	059b      	lsls	r3, r3, #22
 800f326:	d4dd      	bmi.n	800f2e4 <_fflush_r+0xc>
 800f328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f32a:	f000 f908 	bl	800f53e <__retarget_lock_release_recursive>
 800f32e:	e7d9      	b.n	800f2e4 <_fflush_r+0xc>
 800f330:	4b05      	ldr	r3, [pc, #20]	; (800f348 <_fflush_r+0x70>)
 800f332:	429c      	cmp	r4, r3
 800f334:	d101      	bne.n	800f33a <_fflush_r+0x62>
 800f336:	68ac      	ldr	r4, [r5, #8]
 800f338:	e7df      	b.n	800f2fa <_fflush_r+0x22>
 800f33a:	4b04      	ldr	r3, [pc, #16]	; (800f34c <_fflush_r+0x74>)
 800f33c:	429c      	cmp	r4, r3
 800f33e:	bf08      	it	eq
 800f340:	68ec      	ldreq	r4, [r5, #12]
 800f342:	e7da      	b.n	800f2fa <_fflush_r+0x22>
 800f344:	0800fe3c 	.word	0x0800fe3c
 800f348:	0800fe5c 	.word	0x0800fe5c
 800f34c:	0800fe1c 	.word	0x0800fe1c

0800f350 <std>:
 800f350:	2300      	movs	r3, #0
 800f352:	b510      	push	{r4, lr}
 800f354:	4604      	mov	r4, r0
 800f356:	e9c0 3300 	strd	r3, r3, [r0]
 800f35a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f35e:	6083      	str	r3, [r0, #8]
 800f360:	8181      	strh	r1, [r0, #12]
 800f362:	6643      	str	r3, [r0, #100]	; 0x64
 800f364:	81c2      	strh	r2, [r0, #14]
 800f366:	6183      	str	r3, [r0, #24]
 800f368:	4619      	mov	r1, r3
 800f36a:	2208      	movs	r2, #8
 800f36c:	305c      	adds	r0, #92	; 0x5c
 800f36e:	f7fb fe0d 	bl	800af8c <memset>
 800f372:	4b05      	ldr	r3, [pc, #20]	; (800f388 <std+0x38>)
 800f374:	6263      	str	r3, [r4, #36]	; 0x24
 800f376:	4b05      	ldr	r3, [pc, #20]	; (800f38c <std+0x3c>)
 800f378:	62a3      	str	r3, [r4, #40]	; 0x28
 800f37a:	4b05      	ldr	r3, [pc, #20]	; (800f390 <std+0x40>)
 800f37c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f37e:	4b05      	ldr	r3, [pc, #20]	; (800f394 <std+0x44>)
 800f380:	6224      	str	r4, [r4, #32]
 800f382:	6323      	str	r3, [r4, #48]	; 0x30
 800f384:	bd10      	pop	{r4, pc}
 800f386:	bf00      	nop
 800f388:	0800f6a1 	.word	0x0800f6a1
 800f38c:	0800f6c3 	.word	0x0800f6c3
 800f390:	0800f6fb 	.word	0x0800f6fb
 800f394:	0800f71f 	.word	0x0800f71f

0800f398 <_cleanup_r>:
 800f398:	4901      	ldr	r1, [pc, #4]	; (800f3a0 <_cleanup_r+0x8>)
 800f39a:	f000 b8af 	b.w	800f4fc <_fwalk_reent>
 800f39e:	bf00      	nop
 800f3a0:	0800f2d9 	.word	0x0800f2d9

0800f3a4 <__sfmoreglue>:
 800f3a4:	b570      	push	{r4, r5, r6, lr}
 800f3a6:	1e4a      	subs	r2, r1, #1
 800f3a8:	2568      	movs	r5, #104	; 0x68
 800f3aa:	4355      	muls	r5, r2
 800f3ac:	460e      	mov	r6, r1
 800f3ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f3b2:	f7ff fa7d 	bl	800e8b0 <_malloc_r>
 800f3b6:	4604      	mov	r4, r0
 800f3b8:	b140      	cbz	r0, 800f3cc <__sfmoreglue+0x28>
 800f3ba:	2100      	movs	r1, #0
 800f3bc:	e9c0 1600 	strd	r1, r6, [r0]
 800f3c0:	300c      	adds	r0, #12
 800f3c2:	60a0      	str	r0, [r4, #8]
 800f3c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f3c8:	f7fb fde0 	bl	800af8c <memset>
 800f3cc:	4620      	mov	r0, r4
 800f3ce:	bd70      	pop	{r4, r5, r6, pc}

0800f3d0 <__sfp_lock_acquire>:
 800f3d0:	4801      	ldr	r0, [pc, #4]	; (800f3d8 <__sfp_lock_acquire+0x8>)
 800f3d2:	f000 b8b3 	b.w	800f53c <__retarget_lock_acquire_recursive>
 800f3d6:	bf00      	nop
 800f3d8:	20001f08 	.word	0x20001f08

0800f3dc <__sfp_lock_release>:
 800f3dc:	4801      	ldr	r0, [pc, #4]	; (800f3e4 <__sfp_lock_release+0x8>)
 800f3de:	f000 b8ae 	b.w	800f53e <__retarget_lock_release_recursive>
 800f3e2:	bf00      	nop
 800f3e4:	20001f08 	.word	0x20001f08

0800f3e8 <__sinit_lock_acquire>:
 800f3e8:	4801      	ldr	r0, [pc, #4]	; (800f3f0 <__sinit_lock_acquire+0x8>)
 800f3ea:	f000 b8a7 	b.w	800f53c <__retarget_lock_acquire_recursive>
 800f3ee:	bf00      	nop
 800f3f0:	20001f03 	.word	0x20001f03

0800f3f4 <__sinit_lock_release>:
 800f3f4:	4801      	ldr	r0, [pc, #4]	; (800f3fc <__sinit_lock_release+0x8>)
 800f3f6:	f000 b8a2 	b.w	800f53e <__retarget_lock_release_recursive>
 800f3fa:	bf00      	nop
 800f3fc:	20001f03 	.word	0x20001f03

0800f400 <__sinit>:
 800f400:	b510      	push	{r4, lr}
 800f402:	4604      	mov	r4, r0
 800f404:	f7ff fff0 	bl	800f3e8 <__sinit_lock_acquire>
 800f408:	69a3      	ldr	r3, [r4, #24]
 800f40a:	b11b      	cbz	r3, 800f414 <__sinit+0x14>
 800f40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f410:	f7ff bff0 	b.w	800f3f4 <__sinit_lock_release>
 800f414:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f418:	6523      	str	r3, [r4, #80]	; 0x50
 800f41a:	4b13      	ldr	r3, [pc, #76]	; (800f468 <__sinit+0x68>)
 800f41c:	4a13      	ldr	r2, [pc, #76]	; (800f46c <__sinit+0x6c>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	62a2      	str	r2, [r4, #40]	; 0x28
 800f422:	42a3      	cmp	r3, r4
 800f424:	bf04      	itt	eq
 800f426:	2301      	moveq	r3, #1
 800f428:	61a3      	streq	r3, [r4, #24]
 800f42a:	4620      	mov	r0, r4
 800f42c:	f000 f820 	bl	800f470 <__sfp>
 800f430:	6060      	str	r0, [r4, #4]
 800f432:	4620      	mov	r0, r4
 800f434:	f000 f81c 	bl	800f470 <__sfp>
 800f438:	60a0      	str	r0, [r4, #8]
 800f43a:	4620      	mov	r0, r4
 800f43c:	f000 f818 	bl	800f470 <__sfp>
 800f440:	2200      	movs	r2, #0
 800f442:	60e0      	str	r0, [r4, #12]
 800f444:	2104      	movs	r1, #4
 800f446:	6860      	ldr	r0, [r4, #4]
 800f448:	f7ff ff82 	bl	800f350 <std>
 800f44c:	68a0      	ldr	r0, [r4, #8]
 800f44e:	2201      	movs	r2, #1
 800f450:	2109      	movs	r1, #9
 800f452:	f7ff ff7d 	bl	800f350 <std>
 800f456:	68e0      	ldr	r0, [r4, #12]
 800f458:	2202      	movs	r2, #2
 800f45a:	2112      	movs	r1, #18
 800f45c:	f7ff ff78 	bl	800f350 <std>
 800f460:	2301      	movs	r3, #1
 800f462:	61a3      	str	r3, [r4, #24]
 800f464:	e7d2      	b.n	800f40c <__sinit+0xc>
 800f466:	bf00      	nop
 800f468:	0800f9c8 	.word	0x0800f9c8
 800f46c:	0800f399 	.word	0x0800f399

0800f470 <__sfp>:
 800f470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f472:	4607      	mov	r7, r0
 800f474:	f7ff ffac 	bl	800f3d0 <__sfp_lock_acquire>
 800f478:	4b1e      	ldr	r3, [pc, #120]	; (800f4f4 <__sfp+0x84>)
 800f47a:	681e      	ldr	r6, [r3, #0]
 800f47c:	69b3      	ldr	r3, [r6, #24]
 800f47e:	b913      	cbnz	r3, 800f486 <__sfp+0x16>
 800f480:	4630      	mov	r0, r6
 800f482:	f7ff ffbd 	bl	800f400 <__sinit>
 800f486:	3648      	adds	r6, #72	; 0x48
 800f488:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f48c:	3b01      	subs	r3, #1
 800f48e:	d503      	bpl.n	800f498 <__sfp+0x28>
 800f490:	6833      	ldr	r3, [r6, #0]
 800f492:	b30b      	cbz	r3, 800f4d8 <__sfp+0x68>
 800f494:	6836      	ldr	r6, [r6, #0]
 800f496:	e7f7      	b.n	800f488 <__sfp+0x18>
 800f498:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f49c:	b9d5      	cbnz	r5, 800f4d4 <__sfp+0x64>
 800f49e:	4b16      	ldr	r3, [pc, #88]	; (800f4f8 <__sfp+0x88>)
 800f4a0:	60e3      	str	r3, [r4, #12]
 800f4a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f4a6:	6665      	str	r5, [r4, #100]	; 0x64
 800f4a8:	f000 f847 	bl	800f53a <__retarget_lock_init_recursive>
 800f4ac:	f7ff ff96 	bl	800f3dc <__sfp_lock_release>
 800f4b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f4b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f4b8:	6025      	str	r5, [r4, #0]
 800f4ba:	61a5      	str	r5, [r4, #24]
 800f4bc:	2208      	movs	r2, #8
 800f4be:	4629      	mov	r1, r5
 800f4c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f4c4:	f7fb fd62 	bl	800af8c <memset>
 800f4c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f4cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f4d0:	4620      	mov	r0, r4
 800f4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4d4:	3468      	adds	r4, #104	; 0x68
 800f4d6:	e7d9      	b.n	800f48c <__sfp+0x1c>
 800f4d8:	2104      	movs	r1, #4
 800f4da:	4638      	mov	r0, r7
 800f4dc:	f7ff ff62 	bl	800f3a4 <__sfmoreglue>
 800f4e0:	4604      	mov	r4, r0
 800f4e2:	6030      	str	r0, [r6, #0]
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	d1d5      	bne.n	800f494 <__sfp+0x24>
 800f4e8:	f7ff ff78 	bl	800f3dc <__sfp_lock_release>
 800f4ec:	230c      	movs	r3, #12
 800f4ee:	603b      	str	r3, [r7, #0]
 800f4f0:	e7ee      	b.n	800f4d0 <__sfp+0x60>
 800f4f2:	bf00      	nop
 800f4f4:	0800f9c8 	.word	0x0800f9c8
 800f4f8:	ffff0001 	.word	0xffff0001

0800f4fc <_fwalk_reent>:
 800f4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f500:	4606      	mov	r6, r0
 800f502:	4688      	mov	r8, r1
 800f504:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f508:	2700      	movs	r7, #0
 800f50a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f50e:	f1b9 0901 	subs.w	r9, r9, #1
 800f512:	d505      	bpl.n	800f520 <_fwalk_reent+0x24>
 800f514:	6824      	ldr	r4, [r4, #0]
 800f516:	2c00      	cmp	r4, #0
 800f518:	d1f7      	bne.n	800f50a <_fwalk_reent+0xe>
 800f51a:	4638      	mov	r0, r7
 800f51c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f520:	89ab      	ldrh	r3, [r5, #12]
 800f522:	2b01      	cmp	r3, #1
 800f524:	d907      	bls.n	800f536 <_fwalk_reent+0x3a>
 800f526:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f52a:	3301      	adds	r3, #1
 800f52c:	d003      	beq.n	800f536 <_fwalk_reent+0x3a>
 800f52e:	4629      	mov	r1, r5
 800f530:	4630      	mov	r0, r6
 800f532:	47c0      	blx	r8
 800f534:	4307      	orrs	r7, r0
 800f536:	3568      	adds	r5, #104	; 0x68
 800f538:	e7e9      	b.n	800f50e <_fwalk_reent+0x12>

0800f53a <__retarget_lock_init_recursive>:
 800f53a:	4770      	bx	lr

0800f53c <__retarget_lock_acquire_recursive>:
 800f53c:	4770      	bx	lr

0800f53e <__retarget_lock_release_recursive>:
 800f53e:	4770      	bx	lr

0800f540 <__swhatbuf_r>:
 800f540:	b570      	push	{r4, r5, r6, lr}
 800f542:	460e      	mov	r6, r1
 800f544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f548:	2900      	cmp	r1, #0
 800f54a:	b096      	sub	sp, #88	; 0x58
 800f54c:	4614      	mov	r4, r2
 800f54e:	461d      	mov	r5, r3
 800f550:	da07      	bge.n	800f562 <__swhatbuf_r+0x22>
 800f552:	2300      	movs	r3, #0
 800f554:	602b      	str	r3, [r5, #0]
 800f556:	89b3      	ldrh	r3, [r6, #12]
 800f558:	061a      	lsls	r2, r3, #24
 800f55a:	d410      	bmi.n	800f57e <__swhatbuf_r+0x3e>
 800f55c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f560:	e00e      	b.n	800f580 <__swhatbuf_r+0x40>
 800f562:	466a      	mov	r2, sp
 800f564:	f000 f902 	bl	800f76c <_fstat_r>
 800f568:	2800      	cmp	r0, #0
 800f56a:	dbf2      	blt.n	800f552 <__swhatbuf_r+0x12>
 800f56c:	9a01      	ldr	r2, [sp, #4]
 800f56e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f572:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f576:	425a      	negs	r2, r3
 800f578:	415a      	adcs	r2, r3
 800f57a:	602a      	str	r2, [r5, #0]
 800f57c:	e7ee      	b.n	800f55c <__swhatbuf_r+0x1c>
 800f57e:	2340      	movs	r3, #64	; 0x40
 800f580:	2000      	movs	r0, #0
 800f582:	6023      	str	r3, [r4, #0]
 800f584:	b016      	add	sp, #88	; 0x58
 800f586:	bd70      	pop	{r4, r5, r6, pc}

0800f588 <__smakebuf_r>:
 800f588:	898b      	ldrh	r3, [r1, #12]
 800f58a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f58c:	079d      	lsls	r5, r3, #30
 800f58e:	4606      	mov	r6, r0
 800f590:	460c      	mov	r4, r1
 800f592:	d507      	bpl.n	800f5a4 <__smakebuf_r+0x1c>
 800f594:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f598:	6023      	str	r3, [r4, #0]
 800f59a:	6123      	str	r3, [r4, #16]
 800f59c:	2301      	movs	r3, #1
 800f59e:	6163      	str	r3, [r4, #20]
 800f5a0:	b002      	add	sp, #8
 800f5a2:	bd70      	pop	{r4, r5, r6, pc}
 800f5a4:	ab01      	add	r3, sp, #4
 800f5a6:	466a      	mov	r2, sp
 800f5a8:	f7ff ffca 	bl	800f540 <__swhatbuf_r>
 800f5ac:	9900      	ldr	r1, [sp, #0]
 800f5ae:	4605      	mov	r5, r0
 800f5b0:	4630      	mov	r0, r6
 800f5b2:	f7ff f97d 	bl	800e8b0 <_malloc_r>
 800f5b6:	b948      	cbnz	r0, 800f5cc <__smakebuf_r+0x44>
 800f5b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5bc:	059a      	lsls	r2, r3, #22
 800f5be:	d4ef      	bmi.n	800f5a0 <__smakebuf_r+0x18>
 800f5c0:	f023 0303 	bic.w	r3, r3, #3
 800f5c4:	f043 0302 	orr.w	r3, r3, #2
 800f5c8:	81a3      	strh	r3, [r4, #12]
 800f5ca:	e7e3      	b.n	800f594 <__smakebuf_r+0xc>
 800f5cc:	4b0d      	ldr	r3, [pc, #52]	; (800f604 <__smakebuf_r+0x7c>)
 800f5ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800f5d0:	89a3      	ldrh	r3, [r4, #12]
 800f5d2:	6020      	str	r0, [r4, #0]
 800f5d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5d8:	81a3      	strh	r3, [r4, #12]
 800f5da:	9b00      	ldr	r3, [sp, #0]
 800f5dc:	6163      	str	r3, [r4, #20]
 800f5de:	9b01      	ldr	r3, [sp, #4]
 800f5e0:	6120      	str	r0, [r4, #16]
 800f5e2:	b15b      	cbz	r3, 800f5fc <__smakebuf_r+0x74>
 800f5e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5e8:	4630      	mov	r0, r6
 800f5ea:	f000 f8d1 	bl	800f790 <_isatty_r>
 800f5ee:	b128      	cbz	r0, 800f5fc <__smakebuf_r+0x74>
 800f5f0:	89a3      	ldrh	r3, [r4, #12]
 800f5f2:	f023 0303 	bic.w	r3, r3, #3
 800f5f6:	f043 0301 	orr.w	r3, r3, #1
 800f5fa:	81a3      	strh	r3, [r4, #12]
 800f5fc:	89a0      	ldrh	r0, [r4, #12]
 800f5fe:	4305      	orrs	r5, r0
 800f600:	81a5      	strh	r5, [r4, #12]
 800f602:	e7cd      	b.n	800f5a0 <__smakebuf_r+0x18>
 800f604:	0800f399 	.word	0x0800f399

0800f608 <_malloc_usable_size_r>:
 800f608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f60c:	1f18      	subs	r0, r3, #4
 800f60e:	2b00      	cmp	r3, #0
 800f610:	bfbc      	itt	lt
 800f612:	580b      	ldrlt	r3, [r1, r0]
 800f614:	18c0      	addlt	r0, r0, r3
 800f616:	4770      	bx	lr

0800f618 <_raise_r>:
 800f618:	291f      	cmp	r1, #31
 800f61a:	b538      	push	{r3, r4, r5, lr}
 800f61c:	4604      	mov	r4, r0
 800f61e:	460d      	mov	r5, r1
 800f620:	d904      	bls.n	800f62c <_raise_r+0x14>
 800f622:	2316      	movs	r3, #22
 800f624:	6003      	str	r3, [r0, #0]
 800f626:	f04f 30ff 	mov.w	r0, #4294967295
 800f62a:	bd38      	pop	{r3, r4, r5, pc}
 800f62c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f62e:	b112      	cbz	r2, 800f636 <_raise_r+0x1e>
 800f630:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f634:	b94b      	cbnz	r3, 800f64a <_raise_r+0x32>
 800f636:	4620      	mov	r0, r4
 800f638:	f000 f830 	bl	800f69c <_getpid_r>
 800f63c:	462a      	mov	r2, r5
 800f63e:	4601      	mov	r1, r0
 800f640:	4620      	mov	r0, r4
 800f642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f646:	f000 b817 	b.w	800f678 <_kill_r>
 800f64a:	2b01      	cmp	r3, #1
 800f64c:	d00a      	beq.n	800f664 <_raise_r+0x4c>
 800f64e:	1c59      	adds	r1, r3, #1
 800f650:	d103      	bne.n	800f65a <_raise_r+0x42>
 800f652:	2316      	movs	r3, #22
 800f654:	6003      	str	r3, [r0, #0]
 800f656:	2001      	movs	r0, #1
 800f658:	e7e7      	b.n	800f62a <_raise_r+0x12>
 800f65a:	2400      	movs	r4, #0
 800f65c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f660:	4628      	mov	r0, r5
 800f662:	4798      	blx	r3
 800f664:	2000      	movs	r0, #0
 800f666:	e7e0      	b.n	800f62a <_raise_r+0x12>

0800f668 <raise>:
 800f668:	4b02      	ldr	r3, [pc, #8]	; (800f674 <raise+0xc>)
 800f66a:	4601      	mov	r1, r0
 800f66c:	6818      	ldr	r0, [r3, #0]
 800f66e:	f7ff bfd3 	b.w	800f618 <_raise_r>
 800f672:	bf00      	nop
 800f674:	20000140 	.word	0x20000140

0800f678 <_kill_r>:
 800f678:	b538      	push	{r3, r4, r5, lr}
 800f67a:	4d07      	ldr	r5, [pc, #28]	; (800f698 <_kill_r+0x20>)
 800f67c:	2300      	movs	r3, #0
 800f67e:	4604      	mov	r4, r0
 800f680:	4608      	mov	r0, r1
 800f682:	4611      	mov	r1, r2
 800f684:	602b      	str	r3, [r5, #0]
 800f686:	f7f2 fb25 	bl	8001cd4 <_kill>
 800f68a:	1c43      	adds	r3, r0, #1
 800f68c:	d102      	bne.n	800f694 <_kill_r+0x1c>
 800f68e:	682b      	ldr	r3, [r5, #0]
 800f690:	b103      	cbz	r3, 800f694 <_kill_r+0x1c>
 800f692:	6023      	str	r3, [r4, #0]
 800f694:	bd38      	pop	{r3, r4, r5, pc}
 800f696:	bf00      	nop
 800f698:	20001efc 	.word	0x20001efc

0800f69c <_getpid_r>:
 800f69c:	f7f2 bb12 	b.w	8001cc4 <_getpid>

0800f6a0 <__sread>:
 800f6a0:	b510      	push	{r4, lr}
 800f6a2:	460c      	mov	r4, r1
 800f6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6a8:	f000 f894 	bl	800f7d4 <_read_r>
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	bfab      	itete	ge
 800f6b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f6b2:	89a3      	ldrhlt	r3, [r4, #12]
 800f6b4:	181b      	addge	r3, r3, r0
 800f6b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f6ba:	bfac      	ite	ge
 800f6bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800f6be:	81a3      	strhlt	r3, [r4, #12]
 800f6c0:	bd10      	pop	{r4, pc}

0800f6c2 <__swrite>:
 800f6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6c6:	461f      	mov	r7, r3
 800f6c8:	898b      	ldrh	r3, [r1, #12]
 800f6ca:	05db      	lsls	r3, r3, #23
 800f6cc:	4605      	mov	r5, r0
 800f6ce:	460c      	mov	r4, r1
 800f6d0:	4616      	mov	r6, r2
 800f6d2:	d505      	bpl.n	800f6e0 <__swrite+0x1e>
 800f6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6d8:	2302      	movs	r3, #2
 800f6da:	2200      	movs	r2, #0
 800f6dc:	f000 f868 	bl	800f7b0 <_lseek_r>
 800f6e0:	89a3      	ldrh	r3, [r4, #12]
 800f6e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f6ea:	81a3      	strh	r3, [r4, #12]
 800f6ec:	4632      	mov	r2, r6
 800f6ee:	463b      	mov	r3, r7
 800f6f0:	4628      	mov	r0, r5
 800f6f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6f6:	f000 b817 	b.w	800f728 <_write_r>

0800f6fa <__sseek>:
 800f6fa:	b510      	push	{r4, lr}
 800f6fc:	460c      	mov	r4, r1
 800f6fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f702:	f000 f855 	bl	800f7b0 <_lseek_r>
 800f706:	1c43      	adds	r3, r0, #1
 800f708:	89a3      	ldrh	r3, [r4, #12]
 800f70a:	bf15      	itete	ne
 800f70c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f70e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f712:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f716:	81a3      	strheq	r3, [r4, #12]
 800f718:	bf18      	it	ne
 800f71a:	81a3      	strhne	r3, [r4, #12]
 800f71c:	bd10      	pop	{r4, pc}

0800f71e <__sclose>:
 800f71e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f722:	f000 b813 	b.w	800f74c <_close_r>
	...

0800f728 <_write_r>:
 800f728:	b538      	push	{r3, r4, r5, lr}
 800f72a:	4d07      	ldr	r5, [pc, #28]	; (800f748 <_write_r+0x20>)
 800f72c:	4604      	mov	r4, r0
 800f72e:	4608      	mov	r0, r1
 800f730:	4611      	mov	r1, r2
 800f732:	2200      	movs	r2, #0
 800f734:	602a      	str	r2, [r5, #0]
 800f736:	461a      	mov	r2, r3
 800f738:	f7f2 fb03 	bl	8001d42 <_write>
 800f73c:	1c43      	adds	r3, r0, #1
 800f73e:	d102      	bne.n	800f746 <_write_r+0x1e>
 800f740:	682b      	ldr	r3, [r5, #0]
 800f742:	b103      	cbz	r3, 800f746 <_write_r+0x1e>
 800f744:	6023      	str	r3, [r4, #0]
 800f746:	bd38      	pop	{r3, r4, r5, pc}
 800f748:	20001efc 	.word	0x20001efc

0800f74c <_close_r>:
 800f74c:	b538      	push	{r3, r4, r5, lr}
 800f74e:	4d06      	ldr	r5, [pc, #24]	; (800f768 <_close_r+0x1c>)
 800f750:	2300      	movs	r3, #0
 800f752:	4604      	mov	r4, r0
 800f754:	4608      	mov	r0, r1
 800f756:	602b      	str	r3, [r5, #0]
 800f758:	f7f2 fb0f 	bl	8001d7a <_close>
 800f75c:	1c43      	adds	r3, r0, #1
 800f75e:	d102      	bne.n	800f766 <_close_r+0x1a>
 800f760:	682b      	ldr	r3, [r5, #0]
 800f762:	b103      	cbz	r3, 800f766 <_close_r+0x1a>
 800f764:	6023      	str	r3, [r4, #0]
 800f766:	bd38      	pop	{r3, r4, r5, pc}
 800f768:	20001efc 	.word	0x20001efc

0800f76c <_fstat_r>:
 800f76c:	b538      	push	{r3, r4, r5, lr}
 800f76e:	4d07      	ldr	r5, [pc, #28]	; (800f78c <_fstat_r+0x20>)
 800f770:	2300      	movs	r3, #0
 800f772:	4604      	mov	r4, r0
 800f774:	4608      	mov	r0, r1
 800f776:	4611      	mov	r1, r2
 800f778:	602b      	str	r3, [r5, #0]
 800f77a:	f7f2 fb0a 	bl	8001d92 <_fstat>
 800f77e:	1c43      	adds	r3, r0, #1
 800f780:	d102      	bne.n	800f788 <_fstat_r+0x1c>
 800f782:	682b      	ldr	r3, [r5, #0]
 800f784:	b103      	cbz	r3, 800f788 <_fstat_r+0x1c>
 800f786:	6023      	str	r3, [r4, #0]
 800f788:	bd38      	pop	{r3, r4, r5, pc}
 800f78a:	bf00      	nop
 800f78c:	20001efc 	.word	0x20001efc

0800f790 <_isatty_r>:
 800f790:	b538      	push	{r3, r4, r5, lr}
 800f792:	4d06      	ldr	r5, [pc, #24]	; (800f7ac <_isatty_r+0x1c>)
 800f794:	2300      	movs	r3, #0
 800f796:	4604      	mov	r4, r0
 800f798:	4608      	mov	r0, r1
 800f79a:	602b      	str	r3, [r5, #0]
 800f79c:	f7f2 fb09 	bl	8001db2 <_isatty>
 800f7a0:	1c43      	adds	r3, r0, #1
 800f7a2:	d102      	bne.n	800f7aa <_isatty_r+0x1a>
 800f7a4:	682b      	ldr	r3, [r5, #0]
 800f7a6:	b103      	cbz	r3, 800f7aa <_isatty_r+0x1a>
 800f7a8:	6023      	str	r3, [r4, #0]
 800f7aa:	bd38      	pop	{r3, r4, r5, pc}
 800f7ac:	20001efc 	.word	0x20001efc

0800f7b0 <_lseek_r>:
 800f7b0:	b538      	push	{r3, r4, r5, lr}
 800f7b2:	4d07      	ldr	r5, [pc, #28]	; (800f7d0 <_lseek_r+0x20>)
 800f7b4:	4604      	mov	r4, r0
 800f7b6:	4608      	mov	r0, r1
 800f7b8:	4611      	mov	r1, r2
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	602a      	str	r2, [r5, #0]
 800f7be:	461a      	mov	r2, r3
 800f7c0:	f7f2 fb02 	bl	8001dc8 <_lseek>
 800f7c4:	1c43      	adds	r3, r0, #1
 800f7c6:	d102      	bne.n	800f7ce <_lseek_r+0x1e>
 800f7c8:	682b      	ldr	r3, [r5, #0]
 800f7ca:	b103      	cbz	r3, 800f7ce <_lseek_r+0x1e>
 800f7cc:	6023      	str	r3, [r4, #0]
 800f7ce:	bd38      	pop	{r3, r4, r5, pc}
 800f7d0:	20001efc 	.word	0x20001efc

0800f7d4 <_read_r>:
 800f7d4:	b538      	push	{r3, r4, r5, lr}
 800f7d6:	4d07      	ldr	r5, [pc, #28]	; (800f7f4 <_read_r+0x20>)
 800f7d8:	4604      	mov	r4, r0
 800f7da:	4608      	mov	r0, r1
 800f7dc:	4611      	mov	r1, r2
 800f7de:	2200      	movs	r2, #0
 800f7e0:	602a      	str	r2, [r5, #0]
 800f7e2:	461a      	mov	r2, r3
 800f7e4:	f7f2 fa90 	bl	8001d08 <_read>
 800f7e8:	1c43      	adds	r3, r0, #1
 800f7ea:	d102      	bne.n	800f7f2 <_read_r+0x1e>
 800f7ec:	682b      	ldr	r3, [r5, #0]
 800f7ee:	b103      	cbz	r3, 800f7f2 <_read_r+0x1e>
 800f7f0:	6023      	str	r3, [r4, #0]
 800f7f2:	bd38      	pop	{r3, r4, r5, pc}
 800f7f4:	20001efc 	.word	0x20001efc

0800f7f8 <_init>:
 800f7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7fa:	bf00      	nop
 800f7fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7fe:	bc08      	pop	{r3}
 800f800:	469e      	mov	lr, r3
 800f802:	4770      	bx	lr

0800f804 <_fini>:
 800f804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f806:	bf00      	nop
 800f808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f80a:	bc08      	pop	{r3}
 800f80c:	469e      	mov	lr, r3
 800f80e:	4770      	bx	lr
